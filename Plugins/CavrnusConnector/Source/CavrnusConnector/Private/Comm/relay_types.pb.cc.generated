// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: relay_types.proto

#include "relay_types.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace ServerData {
PROTOBUF_CONSTEXPR CavrnusAuth::CavrnusAuth(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CavrnusAuthDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CavrnusAuthDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CavrnusAuthDefaultTypeInternal() {}
  union {
    CavrnusAuth _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CavrnusAuthDefaultTypeInternal _CavrnusAuth_default_instance_;
PROTOBUF_CONSTEXPR CavrnusAuthLinkResponse::CavrnusAuthLinkResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.spaceidtojoin_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.auth_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CavrnusAuthLinkResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CavrnusAuthLinkResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CavrnusAuthLinkResponseDefaultTypeInternal() {}
  union {
    CavrnusAuthLinkResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CavrnusAuthLinkResponseDefaultTypeInternal _CavrnusAuthLinkResponse_default_instance_;
PROTOBUF_CONSTEXPR CavrnusSpaceConnection::CavrnusSpaceConnection(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.localuserconnectionid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.spaceconnectionid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CavrnusSpaceConnectionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CavrnusSpaceConnectionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CavrnusSpaceConnectionDefaultTypeInternal() {}
  union {
    CavrnusSpaceConnection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CavrnusSpaceConnectionDefaultTypeInternal _CavrnusSpaceConnection_default_instance_;
PROTOBUF_CONSTEXPR CavrnusUser::CavrnusUser(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.userconnectionid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.islocaluser_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CavrnusUserDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CavrnusUserDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CavrnusUserDefaultTypeInternal() {}
  union {
    CavrnusUser _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CavrnusUserDefaultTypeInternal _CavrnusUser_default_instance_;
PROTOBUF_CONSTEXPR RtcAudioInputDevice::RtcAudioInputDevice(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RtcAudioInputDeviceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RtcAudioInputDeviceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RtcAudioInputDeviceDefaultTypeInternal() {}
  union {
    RtcAudioInputDevice _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RtcAudioInputDeviceDefaultTypeInternal _RtcAudioInputDevice_default_instance_;
PROTOBUF_CONSTEXPR RtcAudioInputDeviceList::RtcAudioInputDeviceList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.devices_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RtcAudioInputDeviceListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RtcAudioInputDeviceListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RtcAudioInputDeviceListDefaultTypeInternal() {}
  union {
    RtcAudioInputDeviceList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RtcAudioInputDeviceListDefaultTypeInternal _RtcAudioInputDeviceList_default_instance_;
PROTOBUF_CONSTEXPR RtcAudioOutputDevice::RtcAudioOutputDevice(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RtcAudioOutputDeviceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RtcAudioOutputDeviceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RtcAudioOutputDeviceDefaultTypeInternal() {}
  union {
    RtcAudioOutputDevice _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RtcAudioOutputDeviceDefaultTypeInternal _RtcAudioOutputDevice_default_instance_;
PROTOBUF_CONSTEXPR RtcAudioOutputDeviceList::RtcAudioOutputDeviceList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.devices_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RtcAudioOutputDeviceListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RtcAudioOutputDeviceListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RtcAudioOutputDeviceListDefaultTypeInternal() {}
  union {
    RtcAudioOutputDeviceList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RtcAudioOutputDeviceListDefaultTypeInternal _RtcAudioOutputDeviceList_default_instance_;
PROTOBUF_CONSTEXPR RtcVideoInputDevice::RtcVideoInputDevice(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RtcVideoInputDeviceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RtcVideoInputDeviceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RtcVideoInputDeviceDefaultTypeInternal() {}
  union {
    RtcVideoInputDevice _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RtcVideoInputDeviceDefaultTypeInternal _RtcVideoInputDevice_default_instance_;
PROTOBUF_CONSTEXPR RtcVideoInputDeviceList::RtcVideoInputDeviceList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.devices_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RtcVideoInputDeviceListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RtcVideoInputDeviceListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RtcVideoInputDeviceListDefaultTypeInternal() {}
  union {
    RtcVideoInputDeviceList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RtcVideoInputDeviceListDefaultTypeInternal _RtcVideoInputDeviceList_default_instance_;
PROTOBUF_CONSTEXPR CavrnusRemoteContent::CavrnusRemoteContent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tagkeys_)*/{}
  , /*decltype(_impl_.tagvalues_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.filename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.thumbnailurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CavrnusRemoteContentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CavrnusRemoteContentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CavrnusRemoteContentDefaultTypeInternal() {}
  union {
    CavrnusRemoteContent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CavrnusRemoteContentDefaultTypeInternal _CavrnusRemoteContent_default_instance_;
}  // namespace ServerData
static ::_pb::Metadata file_level_metadata_relay_5ftypes_2eproto[11];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_relay_5ftypes_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_relay_5ftypes_2eproto = nullptr;

const uint32_t TableStruct_relay_5ftypes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerData::CavrnusAuth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ServerData::CavrnusAuth, _impl_.token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerData::CavrnusAuthLinkResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ServerData::CavrnusAuthLinkResponse, _impl_.spaceidtojoin_),
  PROTOBUF_FIELD_OFFSET(::ServerData::CavrnusAuthLinkResponse, _impl_.auth_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerData::CavrnusSpaceConnection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ServerData::CavrnusSpaceConnection, _impl_.spaceconnectionid_),
  PROTOBUF_FIELD_OFFSET(::ServerData::CavrnusSpaceConnection, _impl_.localuserconnectionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerData::CavrnusUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ServerData::CavrnusUser, _impl_.userconnectionid_),
  PROTOBUF_FIELD_OFFSET(::ServerData::CavrnusUser, _impl_.islocaluser_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerData::RtcAudioInputDevice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ServerData::RtcAudioInputDevice, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::ServerData::RtcAudioInputDevice, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerData::RtcAudioInputDeviceList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ServerData::RtcAudioInputDeviceList, _impl_.devices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerData::RtcAudioOutputDevice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ServerData::RtcAudioOutputDevice, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::ServerData::RtcAudioOutputDevice, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerData::RtcAudioOutputDeviceList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ServerData::RtcAudioOutputDeviceList, _impl_.devices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerData::RtcVideoInputDevice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ServerData::RtcVideoInputDevice, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::ServerData::RtcVideoInputDevice, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerData::RtcVideoInputDeviceList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ServerData::RtcVideoInputDeviceList, _impl_.devices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerData::CavrnusRemoteContent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ServerData::CavrnusRemoteContent, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::ServerData::CavrnusRemoteContent, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::ServerData::CavrnusRemoteContent, _impl_.filename_),
  PROTOBUF_FIELD_OFFSET(::ServerData::CavrnusRemoteContent, _impl_.thumbnailurl_),
  PROTOBUF_FIELD_OFFSET(::ServerData::CavrnusRemoteContent, _impl_.tagkeys_),
  PROTOBUF_FIELD_OFFSET(::ServerData::CavrnusRemoteContent, _impl_.tagvalues_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ServerData::CavrnusAuth)},
  { 7, -1, -1, sizeof(::ServerData::CavrnusAuthLinkResponse)},
  { 15, -1, -1, sizeof(::ServerData::CavrnusSpaceConnection)},
  { 23, -1, -1, sizeof(::ServerData::CavrnusUser)},
  { 31, -1, -1, sizeof(::ServerData::RtcAudioInputDevice)},
  { 39, -1, -1, sizeof(::ServerData::RtcAudioInputDeviceList)},
  { 46, -1, -1, sizeof(::ServerData::RtcAudioOutputDevice)},
  { 54, -1, -1, sizeof(::ServerData::RtcAudioOutputDeviceList)},
  { 61, -1, -1, sizeof(::ServerData::RtcVideoInputDevice)},
  { 69, -1, -1, sizeof(::ServerData::RtcVideoInputDeviceList)},
  { 76, -1, -1, sizeof(::ServerData::CavrnusRemoteContent)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::ServerData::_CavrnusAuth_default_instance_._instance,
  &::ServerData::_CavrnusAuthLinkResponse_default_instance_._instance,
  &::ServerData::_CavrnusSpaceConnection_default_instance_._instance,
  &::ServerData::_CavrnusUser_default_instance_._instance,
  &::ServerData::_RtcAudioInputDevice_default_instance_._instance,
  &::ServerData::_RtcAudioInputDeviceList_default_instance_._instance,
  &::ServerData::_RtcAudioOutputDevice_default_instance_._instance,
  &::ServerData::_RtcAudioOutputDeviceList_default_instance_._instance,
  &::ServerData::_RtcVideoInputDevice_default_instance_._instance,
  &::ServerData::_RtcVideoInputDeviceList_default_instance_._instance,
  &::ServerData::_CavrnusRemoteContent_default_instance_._instance,
};

const char descriptor_table_protodef_relay_5ftypes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021relay_types.proto\022\nServerData\"\034\n\013Cavrn"
  "usAuth\022\r\n\005token\030\001 \001(\t\"W\n\027CavrnusAuthLink"
  "Response\022\025\n\rspaceIdToJoin\030\001 \001(\t\022%\n\004auth\030"
  "\002 \001(\0132\027.ServerData.CavrnusAuth\"R\n\026Cavrnu"
  "sSpaceConnection\022\031\n\021SpaceConnectionId\030\001 "
  "\001(\005\022\035\n\025localUserConnectionId\030\n \001(\t\"<\n\013Ca"
  "vrnusUser\022\030\n\020userConnectionId\030\001 \001(\t\022\023\n\013I"
  "sLocalUser\030\002 \001(\010\"/\n\023RtcAudioInputDevice\022"
  "\n\n\002id\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\"K\n\027RtcAudioInp"
  "utDeviceList\0220\n\007devices\030\001 \003(\0132\037.ServerDa"
  "ta.RtcAudioInputDevice\"0\n\024RtcAudioOutput"
  "Device\022\n\n\002id\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\"M\n\030RtcA"
  "udioOutputDeviceList\0221\n\007devices\030\001 \003(\0132 ."
  "ServerData.RtcAudioOutputDevice\"/\n\023RtcVi"
  "deoInputDevice\022\n\n\002id\030\001 \001(\t\022\014\n\004name\030\002 \001(\t"
  "\"K\n\027RtcVideoInputDeviceList\0220\n\007devices\030\001"
  " \003(\0132\037.ServerData.RtcVideoInputDevice\"|\n"
  "\024CavrnusRemoteContent\022\n\n\002id\030\001 \001(\t\022\014\n\004nam"
  "e\030\002 \001(\t\022\020\n\010fileName\030\003 \001(\t\022\024\n\014thumbnailUr"
  "l\030\004 \001(\t\022\017\n\007tagKeys\030\n \003(\t\022\021\n\ttagValues\030\013 "
  "\003(\tB\024\252\002\021CavrnusRelayTypesb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_relay_5ftypes_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_relay_5ftypes_2eproto = {
    false, false, 833, descriptor_table_protodef_relay_5ftypes_2eproto,
    "relay_types.proto",
    &descriptor_table_relay_5ftypes_2eproto_once, nullptr, 0, 11,
    schemas, file_default_instances, TableStruct_relay_5ftypes_2eproto::offsets,
    file_level_metadata_relay_5ftypes_2eproto, file_level_enum_descriptors_relay_5ftypes_2eproto,
    file_level_service_descriptors_relay_5ftypes_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_relay_5ftypes_2eproto_getter() {
  return &descriptor_table_relay_5ftypes_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_relay_5ftypes_2eproto(&descriptor_table_relay_5ftypes_2eproto);
namespace ServerData {

// ===================================================================

class CavrnusAuth::_Internal {
 public:
};

CavrnusAuth::CavrnusAuth(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ServerData.CavrnusAuth)
}
CavrnusAuth::CavrnusAuth(const CavrnusAuth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CavrnusAuth* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.token_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token().empty()) {
    _this->_impl_.token_.Set(from._internal_token(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ServerData.CavrnusAuth)
}

inline void CavrnusAuth::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.token_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CavrnusAuth::~CavrnusAuth() {
  // @@protoc_insertion_point(destructor:ServerData.CavrnusAuth)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CavrnusAuth::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.token_.Destroy();
}

void CavrnusAuth::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CavrnusAuth::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerData.CavrnusAuth)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.token_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CavrnusAuth::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ServerData.CavrnusAuth.token"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CavrnusAuth::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerData.CavrnusAuth)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (!this->_internal_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ServerData.CavrnusAuth.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerData.CavrnusAuth)
  return target;
}

size_t CavrnusAuth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerData.CavrnusAuth)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 1;
  if (!this->_internal_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CavrnusAuth::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CavrnusAuth::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CavrnusAuth::GetClassData() const { return &_class_data_; }


void CavrnusAuth::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CavrnusAuth*>(&to_msg);
  auto& from = static_cast<const CavrnusAuth&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ServerData.CavrnusAuth)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_token().empty()) {
    _this->_internal_set_token(from._internal_token());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CavrnusAuth::CopyFrom(const CavrnusAuth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerData.CavrnusAuth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CavrnusAuth::IsInitialized() const {
  return true;
}

void CavrnusAuth::InternalSwap(CavrnusAuth* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_, lhs_arena,
      &other->_impl_.token_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CavrnusAuth::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_relay_5ftypes_2eproto_getter, &descriptor_table_relay_5ftypes_2eproto_once,
      file_level_metadata_relay_5ftypes_2eproto[0]);
}

// ===================================================================

class CavrnusAuthLinkResponse::_Internal {
 public:
  static const ::ServerData::CavrnusAuth& auth(const CavrnusAuthLinkResponse* msg);
};

const ::ServerData::CavrnusAuth&
CavrnusAuthLinkResponse::_Internal::auth(const CavrnusAuthLinkResponse* msg) {
  return *msg->_impl_.auth_;
}
CavrnusAuthLinkResponse::CavrnusAuthLinkResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ServerData.CavrnusAuthLinkResponse)
}
CavrnusAuthLinkResponse::CavrnusAuthLinkResponse(const CavrnusAuthLinkResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CavrnusAuthLinkResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.spaceidtojoin_){}
    , decltype(_impl_.auth_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.spaceidtojoin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.spaceidtojoin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_spaceidtojoin().empty()) {
    _this->_impl_.spaceidtojoin_.Set(from._internal_spaceidtojoin(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_auth()) {
    _this->_impl_.auth_ = new ::ServerData::CavrnusAuth(*from._impl_.auth_);
  }
  // @@protoc_insertion_point(copy_constructor:ServerData.CavrnusAuthLinkResponse)
}

inline void CavrnusAuthLinkResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.spaceidtojoin_){}
    , decltype(_impl_.auth_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.spaceidtojoin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.spaceidtojoin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CavrnusAuthLinkResponse::~CavrnusAuthLinkResponse() {
  // @@protoc_insertion_point(destructor:ServerData.CavrnusAuthLinkResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CavrnusAuthLinkResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.spaceidtojoin_.Destroy();
  if (this != internal_default_instance()) delete _impl_.auth_;
}

void CavrnusAuthLinkResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CavrnusAuthLinkResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerData.CavrnusAuthLinkResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.spaceidtojoin_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.auth_ != nullptr) {
    delete _impl_.auth_;
  }
  _impl_.auth_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CavrnusAuthLinkResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string spaceIdToJoin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_spaceidtojoin();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ServerData.CavrnusAuthLinkResponse.spaceIdToJoin"));
        } else
          goto handle_unusual;
        continue;
      // .ServerData.CavrnusAuth auth = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_auth(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CavrnusAuthLinkResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerData.CavrnusAuthLinkResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string spaceIdToJoin = 1;
  if (!this->_internal_spaceidtojoin().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_spaceidtojoin().data(), static_cast<int>(this->_internal_spaceidtojoin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ServerData.CavrnusAuthLinkResponse.spaceIdToJoin");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_spaceidtojoin(), target);
  }

  // .ServerData.CavrnusAuth auth = 2;
  if (this->_internal_has_auth()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::auth(this),
        _Internal::auth(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerData.CavrnusAuthLinkResponse)
  return target;
}

size_t CavrnusAuthLinkResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerData.CavrnusAuthLinkResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string spaceIdToJoin = 1;
  if (!this->_internal_spaceidtojoin().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_spaceidtojoin());
  }

  // .ServerData.CavrnusAuth auth = 2;
  if (this->_internal_has_auth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.auth_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CavrnusAuthLinkResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CavrnusAuthLinkResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CavrnusAuthLinkResponse::GetClassData() const { return &_class_data_; }


void CavrnusAuthLinkResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CavrnusAuthLinkResponse*>(&to_msg);
  auto& from = static_cast<const CavrnusAuthLinkResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ServerData.CavrnusAuthLinkResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_spaceidtojoin().empty()) {
    _this->_internal_set_spaceidtojoin(from._internal_spaceidtojoin());
  }
  if (from._internal_has_auth()) {
    _this->_internal_mutable_auth()->::ServerData::CavrnusAuth::MergeFrom(
        from._internal_auth());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CavrnusAuthLinkResponse::CopyFrom(const CavrnusAuthLinkResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerData.CavrnusAuthLinkResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CavrnusAuthLinkResponse::IsInitialized() const {
  return true;
}

void CavrnusAuthLinkResponse::InternalSwap(CavrnusAuthLinkResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.spaceidtojoin_, lhs_arena,
      &other->_impl_.spaceidtojoin_, rhs_arena
  );
  swap(_impl_.auth_, other->_impl_.auth_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CavrnusAuthLinkResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_relay_5ftypes_2eproto_getter, &descriptor_table_relay_5ftypes_2eproto_once,
      file_level_metadata_relay_5ftypes_2eproto[1]);
}

// ===================================================================

class CavrnusSpaceConnection::_Internal {
 public:
};

CavrnusSpaceConnection::CavrnusSpaceConnection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ServerData.CavrnusSpaceConnection)
}
CavrnusSpaceConnection::CavrnusSpaceConnection(const CavrnusSpaceConnection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CavrnusSpaceConnection* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.localuserconnectionid_){}
    , decltype(_impl_.spaceconnectionid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.localuserconnectionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.localuserconnectionid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_localuserconnectionid().empty()) {
    _this->_impl_.localuserconnectionid_.Set(from._internal_localuserconnectionid(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.spaceconnectionid_ = from._impl_.spaceconnectionid_;
  // @@protoc_insertion_point(copy_constructor:ServerData.CavrnusSpaceConnection)
}

inline void CavrnusSpaceConnection::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.localuserconnectionid_){}
    , decltype(_impl_.spaceconnectionid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.localuserconnectionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.localuserconnectionid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CavrnusSpaceConnection::~CavrnusSpaceConnection() {
  // @@protoc_insertion_point(destructor:ServerData.CavrnusSpaceConnection)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CavrnusSpaceConnection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.localuserconnectionid_.Destroy();
}

void CavrnusSpaceConnection::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CavrnusSpaceConnection::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerData.CavrnusSpaceConnection)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.localuserconnectionid_.ClearToEmpty();
  _impl_.spaceconnectionid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CavrnusSpaceConnection::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 SpaceConnectionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.spaceconnectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string localUserConnectionId = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_localuserconnectionid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ServerData.CavrnusSpaceConnection.localUserConnectionId"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CavrnusSpaceConnection::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerData.CavrnusSpaceConnection)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 SpaceConnectionId = 1;
  if (this->_internal_spaceconnectionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_spaceconnectionid(), target);
  }

  // string localUserConnectionId = 10;
  if (!this->_internal_localuserconnectionid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_localuserconnectionid().data(), static_cast<int>(this->_internal_localuserconnectionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ServerData.CavrnusSpaceConnection.localUserConnectionId");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_localuserconnectionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerData.CavrnusSpaceConnection)
  return target;
}

size_t CavrnusSpaceConnection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerData.CavrnusSpaceConnection)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string localUserConnectionId = 10;
  if (!this->_internal_localuserconnectionid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_localuserconnectionid());
  }

  // int32 SpaceConnectionId = 1;
  if (this->_internal_spaceconnectionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_spaceconnectionid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CavrnusSpaceConnection::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CavrnusSpaceConnection::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CavrnusSpaceConnection::GetClassData() const { return &_class_data_; }


void CavrnusSpaceConnection::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CavrnusSpaceConnection*>(&to_msg);
  auto& from = static_cast<const CavrnusSpaceConnection&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ServerData.CavrnusSpaceConnection)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_localuserconnectionid().empty()) {
    _this->_internal_set_localuserconnectionid(from._internal_localuserconnectionid());
  }
  if (from._internal_spaceconnectionid() != 0) {
    _this->_internal_set_spaceconnectionid(from._internal_spaceconnectionid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CavrnusSpaceConnection::CopyFrom(const CavrnusSpaceConnection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerData.CavrnusSpaceConnection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CavrnusSpaceConnection::IsInitialized() const {
  return true;
}

void CavrnusSpaceConnection::InternalSwap(CavrnusSpaceConnection* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.localuserconnectionid_, lhs_arena,
      &other->_impl_.localuserconnectionid_, rhs_arena
  );
  swap(_impl_.spaceconnectionid_, other->_impl_.spaceconnectionid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CavrnusSpaceConnection::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_relay_5ftypes_2eproto_getter, &descriptor_table_relay_5ftypes_2eproto_once,
      file_level_metadata_relay_5ftypes_2eproto[2]);
}

// ===================================================================

class CavrnusUser::_Internal {
 public:
};

CavrnusUser::CavrnusUser(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ServerData.CavrnusUser)
}
CavrnusUser::CavrnusUser(const CavrnusUser& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CavrnusUser* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.userconnectionid_){}
    , decltype(_impl_.islocaluser_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.userconnectionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.userconnectionid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_userconnectionid().empty()) {
    _this->_impl_.userconnectionid_.Set(from._internal_userconnectionid(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.islocaluser_ = from._impl_.islocaluser_;
  // @@protoc_insertion_point(copy_constructor:ServerData.CavrnusUser)
}

inline void CavrnusUser::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.userconnectionid_){}
    , decltype(_impl_.islocaluser_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.userconnectionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.userconnectionid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CavrnusUser::~CavrnusUser() {
  // @@protoc_insertion_point(destructor:ServerData.CavrnusUser)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CavrnusUser::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.userconnectionid_.Destroy();
}

void CavrnusUser::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CavrnusUser::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerData.CavrnusUser)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.userconnectionid_.ClearToEmpty();
  _impl_.islocaluser_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CavrnusUser::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string userConnectionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_userconnectionid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ServerData.CavrnusUser.userConnectionId"));
        } else
          goto handle_unusual;
        continue;
      // bool IsLocalUser = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.islocaluser_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CavrnusUser::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerData.CavrnusUser)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string userConnectionId = 1;
  if (!this->_internal_userconnectionid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_userconnectionid().data(), static_cast<int>(this->_internal_userconnectionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ServerData.CavrnusUser.userConnectionId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_userconnectionid(), target);
  }

  // bool IsLocalUser = 2;
  if (this->_internal_islocaluser() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_islocaluser(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerData.CavrnusUser)
  return target;
}

size_t CavrnusUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerData.CavrnusUser)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string userConnectionId = 1;
  if (!this->_internal_userconnectionid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_userconnectionid());
  }

  // bool IsLocalUser = 2;
  if (this->_internal_islocaluser() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CavrnusUser::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CavrnusUser::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CavrnusUser::GetClassData() const { return &_class_data_; }


void CavrnusUser::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CavrnusUser*>(&to_msg);
  auto& from = static_cast<const CavrnusUser&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ServerData.CavrnusUser)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_userconnectionid().empty()) {
    _this->_internal_set_userconnectionid(from._internal_userconnectionid());
  }
  if (from._internal_islocaluser() != 0) {
    _this->_internal_set_islocaluser(from._internal_islocaluser());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CavrnusUser::CopyFrom(const CavrnusUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerData.CavrnusUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CavrnusUser::IsInitialized() const {
  return true;
}

void CavrnusUser::InternalSwap(CavrnusUser* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.userconnectionid_, lhs_arena,
      &other->_impl_.userconnectionid_, rhs_arena
  );
  swap(_impl_.islocaluser_, other->_impl_.islocaluser_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CavrnusUser::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_relay_5ftypes_2eproto_getter, &descriptor_table_relay_5ftypes_2eproto_once,
      file_level_metadata_relay_5ftypes_2eproto[3]);
}

// ===================================================================

class RtcAudioInputDevice::_Internal {
 public:
};

RtcAudioInputDevice::RtcAudioInputDevice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ServerData.RtcAudioInputDevice)
}
RtcAudioInputDevice::RtcAudioInputDevice(const RtcAudioInputDevice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RtcAudioInputDevice* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ServerData.RtcAudioInputDevice)
}

inline void RtcAudioInputDevice::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RtcAudioInputDevice::~RtcAudioInputDevice() {
  // @@protoc_insertion_point(destructor:ServerData.RtcAudioInputDevice)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RtcAudioInputDevice::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.name_.Destroy();
}

void RtcAudioInputDevice::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RtcAudioInputDevice::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerData.RtcAudioInputDevice)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RtcAudioInputDevice::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ServerData.RtcAudioInputDevice.id"));
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ServerData.RtcAudioInputDevice.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RtcAudioInputDevice::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerData.RtcAudioInputDevice)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ServerData.RtcAudioInputDevice.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ServerData.RtcAudioInputDevice.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerData.RtcAudioInputDevice)
  return target;
}

size_t RtcAudioInputDevice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerData.RtcAudioInputDevice)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RtcAudioInputDevice::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RtcAudioInputDevice::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RtcAudioInputDevice::GetClassData() const { return &_class_data_; }


void RtcAudioInputDevice::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RtcAudioInputDevice*>(&to_msg);
  auto& from = static_cast<const RtcAudioInputDevice&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ServerData.RtcAudioInputDevice)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RtcAudioInputDevice::CopyFrom(const RtcAudioInputDevice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerData.RtcAudioInputDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtcAudioInputDevice::IsInitialized() const {
  return true;
}

void RtcAudioInputDevice::InternalSwap(RtcAudioInputDevice* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RtcAudioInputDevice::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_relay_5ftypes_2eproto_getter, &descriptor_table_relay_5ftypes_2eproto_once,
      file_level_metadata_relay_5ftypes_2eproto[4]);
}

// ===================================================================

class RtcAudioInputDeviceList::_Internal {
 public:
};

RtcAudioInputDeviceList::RtcAudioInputDeviceList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ServerData.RtcAudioInputDeviceList)
}
RtcAudioInputDeviceList::RtcAudioInputDeviceList(const RtcAudioInputDeviceList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RtcAudioInputDeviceList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.devices_){from._impl_.devices_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ServerData.RtcAudioInputDeviceList)
}

inline void RtcAudioInputDeviceList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.devices_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RtcAudioInputDeviceList::~RtcAudioInputDeviceList() {
  // @@protoc_insertion_point(destructor:ServerData.RtcAudioInputDeviceList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RtcAudioInputDeviceList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.devices_.~RepeatedPtrField();
}

void RtcAudioInputDeviceList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RtcAudioInputDeviceList::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerData.RtcAudioInputDeviceList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.devices_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RtcAudioInputDeviceList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ServerData.RtcAudioInputDevice devices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_devices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RtcAudioInputDeviceList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerData.RtcAudioInputDeviceList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ServerData.RtcAudioInputDevice devices = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_devices_size()); i < n; i++) {
    const auto& repfield = this->_internal_devices(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerData.RtcAudioInputDeviceList)
  return target;
}

size_t RtcAudioInputDeviceList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerData.RtcAudioInputDeviceList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ServerData.RtcAudioInputDevice devices = 1;
  total_size += 1UL * this->_internal_devices_size();
  for (const auto& msg : this->_impl_.devices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RtcAudioInputDeviceList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RtcAudioInputDeviceList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RtcAudioInputDeviceList::GetClassData() const { return &_class_data_; }


void RtcAudioInputDeviceList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RtcAudioInputDeviceList*>(&to_msg);
  auto& from = static_cast<const RtcAudioInputDeviceList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ServerData.RtcAudioInputDeviceList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.devices_.MergeFrom(from._impl_.devices_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RtcAudioInputDeviceList::CopyFrom(const RtcAudioInputDeviceList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerData.RtcAudioInputDeviceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtcAudioInputDeviceList::IsInitialized() const {
  return true;
}

void RtcAudioInputDeviceList::InternalSwap(RtcAudioInputDeviceList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.devices_.InternalSwap(&other->_impl_.devices_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RtcAudioInputDeviceList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_relay_5ftypes_2eproto_getter, &descriptor_table_relay_5ftypes_2eproto_once,
      file_level_metadata_relay_5ftypes_2eproto[5]);
}

// ===================================================================

class RtcAudioOutputDevice::_Internal {
 public:
};

RtcAudioOutputDevice::RtcAudioOutputDevice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ServerData.RtcAudioOutputDevice)
}
RtcAudioOutputDevice::RtcAudioOutputDevice(const RtcAudioOutputDevice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RtcAudioOutputDevice* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ServerData.RtcAudioOutputDevice)
}

inline void RtcAudioOutputDevice::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RtcAudioOutputDevice::~RtcAudioOutputDevice() {
  // @@protoc_insertion_point(destructor:ServerData.RtcAudioOutputDevice)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RtcAudioOutputDevice::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.name_.Destroy();
}

void RtcAudioOutputDevice::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RtcAudioOutputDevice::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerData.RtcAudioOutputDevice)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RtcAudioOutputDevice::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ServerData.RtcAudioOutputDevice.id"));
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ServerData.RtcAudioOutputDevice.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RtcAudioOutputDevice::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerData.RtcAudioOutputDevice)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ServerData.RtcAudioOutputDevice.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ServerData.RtcAudioOutputDevice.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerData.RtcAudioOutputDevice)
  return target;
}

size_t RtcAudioOutputDevice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerData.RtcAudioOutputDevice)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RtcAudioOutputDevice::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RtcAudioOutputDevice::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RtcAudioOutputDevice::GetClassData() const { return &_class_data_; }


void RtcAudioOutputDevice::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RtcAudioOutputDevice*>(&to_msg);
  auto& from = static_cast<const RtcAudioOutputDevice&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ServerData.RtcAudioOutputDevice)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RtcAudioOutputDevice::CopyFrom(const RtcAudioOutputDevice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerData.RtcAudioOutputDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtcAudioOutputDevice::IsInitialized() const {
  return true;
}

void RtcAudioOutputDevice::InternalSwap(RtcAudioOutputDevice* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RtcAudioOutputDevice::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_relay_5ftypes_2eproto_getter, &descriptor_table_relay_5ftypes_2eproto_once,
      file_level_metadata_relay_5ftypes_2eproto[6]);
}

// ===================================================================

class RtcAudioOutputDeviceList::_Internal {
 public:
};

RtcAudioOutputDeviceList::RtcAudioOutputDeviceList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ServerData.RtcAudioOutputDeviceList)
}
RtcAudioOutputDeviceList::RtcAudioOutputDeviceList(const RtcAudioOutputDeviceList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RtcAudioOutputDeviceList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.devices_){from._impl_.devices_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ServerData.RtcAudioOutputDeviceList)
}

inline void RtcAudioOutputDeviceList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.devices_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RtcAudioOutputDeviceList::~RtcAudioOutputDeviceList() {
  // @@protoc_insertion_point(destructor:ServerData.RtcAudioOutputDeviceList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RtcAudioOutputDeviceList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.devices_.~RepeatedPtrField();
}

void RtcAudioOutputDeviceList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RtcAudioOutputDeviceList::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerData.RtcAudioOutputDeviceList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.devices_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RtcAudioOutputDeviceList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ServerData.RtcAudioOutputDevice devices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_devices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RtcAudioOutputDeviceList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerData.RtcAudioOutputDeviceList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ServerData.RtcAudioOutputDevice devices = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_devices_size()); i < n; i++) {
    const auto& repfield = this->_internal_devices(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerData.RtcAudioOutputDeviceList)
  return target;
}

size_t RtcAudioOutputDeviceList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerData.RtcAudioOutputDeviceList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ServerData.RtcAudioOutputDevice devices = 1;
  total_size += 1UL * this->_internal_devices_size();
  for (const auto& msg : this->_impl_.devices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RtcAudioOutputDeviceList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RtcAudioOutputDeviceList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RtcAudioOutputDeviceList::GetClassData() const { return &_class_data_; }


void RtcAudioOutputDeviceList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RtcAudioOutputDeviceList*>(&to_msg);
  auto& from = static_cast<const RtcAudioOutputDeviceList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ServerData.RtcAudioOutputDeviceList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.devices_.MergeFrom(from._impl_.devices_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RtcAudioOutputDeviceList::CopyFrom(const RtcAudioOutputDeviceList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerData.RtcAudioOutputDeviceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtcAudioOutputDeviceList::IsInitialized() const {
  return true;
}

void RtcAudioOutputDeviceList::InternalSwap(RtcAudioOutputDeviceList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.devices_.InternalSwap(&other->_impl_.devices_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RtcAudioOutputDeviceList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_relay_5ftypes_2eproto_getter, &descriptor_table_relay_5ftypes_2eproto_once,
      file_level_metadata_relay_5ftypes_2eproto[7]);
}

// ===================================================================

class RtcVideoInputDevice::_Internal {
 public:
};

RtcVideoInputDevice::RtcVideoInputDevice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ServerData.RtcVideoInputDevice)
}
RtcVideoInputDevice::RtcVideoInputDevice(const RtcVideoInputDevice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RtcVideoInputDevice* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ServerData.RtcVideoInputDevice)
}

inline void RtcVideoInputDevice::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RtcVideoInputDevice::~RtcVideoInputDevice() {
  // @@protoc_insertion_point(destructor:ServerData.RtcVideoInputDevice)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RtcVideoInputDevice::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.name_.Destroy();
}

void RtcVideoInputDevice::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RtcVideoInputDevice::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerData.RtcVideoInputDevice)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RtcVideoInputDevice::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ServerData.RtcVideoInputDevice.id"));
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ServerData.RtcVideoInputDevice.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RtcVideoInputDevice::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerData.RtcVideoInputDevice)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ServerData.RtcVideoInputDevice.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ServerData.RtcVideoInputDevice.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerData.RtcVideoInputDevice)
  return target;
}

size_t RtcVideoInputDevice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerData.RtcVideoInputDevice)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RtcVideoInputDevice::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RtcVideoInputDevice::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RtcVideoInputDevice::GetClassData() const { return &_class_data_; }


void RtcVideoInputDevice::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RtcVideoInputDevice*>(&to_msg);
  auto& from = static_cast<const RtcVideoInputDevice&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ServerData.RtcVideoInputDevice)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RtcVideoInputDevice::CopyFrom(const RtcVideoInputDevice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerData.RtcVideoInputDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtcVideoInputDevice::IsInitialized() const {
  return true;
}

void RtcVideoInputDevice::InternalSwap(RtcVideoInputDevice* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RtcVideoInputDevice::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_relay_5ftypes_2eproto_getter, &descriptor_table_relay_5ftypes_2eproto_once,
      file_level_metadata_relay_5ftypes_2eproto[8]);
}

// ===================================================================

class RtcVideoInputDeviceList::_Internal {
 public:
};

RtcVideoInputDeviceList::RtcVideoInputDeviceList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ServerData.RtcVideoInputDeviceList)
}
RtcVideoInputDeviceList::RtcVideoInputDeviceList(const RtcVideoInputDeviceList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RtcVideoInputDeviceList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.devices_){from._impl_.devices_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ServerData.RtcVideoInputDeviceList)
}

inline void RtcVideoInputDeviceList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.devices_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RtcVideoInputDeviceList::~RtcVideoInputDeviceList() {
  // @@protoc_insertion_point(destructor:ServerData.RtcVideoInputDeviceList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RtcVideoInputDeviceList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.devices_.~RepeatedPtrField();
}

void RtcVideoInputDeviceList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RtcVideoInputDeviceList::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerData.RtcVideoInputDeviceList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.devices_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RtcVideoInputDeviceList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ServerData.RtcVideoInputDevice devices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_devices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RtcVideoInputDeviceList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerData.RtcVideoInputDeviceList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ServerData.RtcVideoInputDevice devices = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_devices_size()); i < n; i++) {
    const auto& repfield = this->_internal_devices(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerData.RtcVideoInputDeviceList)
  return target;
}

size_t RtcVideoInputDeviceList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerData.RtcVideoInputDeviceList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ServerData.RtcVideoInputDevice devices = 1;
  total_size += 1UL * this->_internal_devices_size();
  for (const auto& msg : this->_impl_.devices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RtcVideoInputDeviceList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RtcVideoInputDeviceList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RtcVideoInputDeviceList::GetClassData() const { return &_class_data_; }


void RtcVideoInputDeviceList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RtcVideoInputDeviceList*>(&to_msg);
  auto& from = static_cast<const RtcVideoInputDeviceList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ServerData.RtcVideoInputDeviceList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.devices_.MergeFrom(from._impl_.devices_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RtcVideoInputDeviceList::CopyFrom(const RtcVideoInputDeviceList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerData.RtcVideoInputDeviceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtcVideoInputDeviceList::IsInitialized() const {
  return true;
}

void RtcVideoInputDeviceList::InternalSwap(RtcVideoInputDeviceList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.devices_.InternalSwap(&other->_impl_.devices_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RtcVideoInputDeviceList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_relay_5ftypes_2eproto_getter, &descriptor_table_relay_5ftypes_2eproto_once,
      file_level_metadata_relay_5ftypes_2eproto[9]);
}

// ===================================================================

class CavrnusRemoteContent::_Internal {
 public:
};

CavrnusRemoteContent::CavrnusRemoteContent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ServerData.CavrnusRemoteContent)
}
CavrnusRemoteContent::CavrnusRemoteContent(const CavrnusRemoteContent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CavrnusRemoteContent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tagkeys_){from._impl_.tagkeys_}
    , decltype(_impl_.tagvalues_){from._impl_.tagvalues_}
    , decltype(_impl_.id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.filename_){}
    , decltype(_impl_.thumbnailurl_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_filename().empty()) {
    _this->_impl_.filename_.Set(from._internal_filename(), 
      _this->GetArenaForAllocation());
  }
  _impl_.thumbnailurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnailurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_thumbnailurl().empty()) {
    _this->_impl_.thumbnailurl_.Set(from._internal_thumbnailurl(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ServerData.CavrnusRemoteContent)
}

inline void CavrnusRemoteContent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tagkeys_){arena}
    , decltype(_impl_.tagvalues_){arena}
    , decltype(_impl_.id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.filename_){}
    , decltype(_impl_.thumbnailurl_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.thumbnailurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnailurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CavrnusRemoteContent::~CavrnusRemoteContent() {
  // @@protoc_insertion_point(destructor:ServerData.CavrnusRemoteContent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CavrnusRemoteContent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tagkeys_.~RepeatedPtrField();
  _impl_.tagvalues_.~RepeatedPtrField();
  _impl_.id_.Destroy();
  _impl_.name_.Destroy();
  _impl_.filename_.Destroy();
  _impl_.thumbnailurl_.Destroy();
}

void CavrnusRemoteContent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CavrnusRemoteContent::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerData.CavrnusRemoteContent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tagkeys_.Clear();
  _impl_.tagvalues_.Clear();
  _impl_.id_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.filename_.ClearToEmpty();
  _impl_.thumbnailurl_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CavrnusRemoteContent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ServerData.CavrnusRemoteContent.id"));
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ServerData.CavrnusRemoteContent.name"));
        } else
          goto handle_unusual;
        continue;
      // string fileName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_filename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ServerData.CavrnusRemoteContent.fileName"));
        } else
          goto handle_unusual;
        continue;
      // string thumbnailUrl = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_thumbnailurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ServerData.CavrnusRemoteContent.thumbnailUrl"));
        } else
          goto handle_unusual;
        continue;
      // repeated string tagKeys = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tagkeys();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "ServerData.CavrnusRemoteContent.tagKeys"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string tagValues = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tagvalues();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "ServerData.CavrnusRemoteContent.tagValues"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CavrnusRemoteContent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerData.CavrnusRemoteContent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ServerData.CavrnusRemoteContent.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ServerData.CavrnusRemoteContent.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string fileName = 3;
  if (!this->_internal_filename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ServerData.CavrnusRemoteContent.fileName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_filename(), target);
  }

  // string thumbnailUrl = 4;
  if (!this->_internal_thumbnailurl().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_thumbnailurl().data(), static_cast<int>(this->_internal_thumbnailurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ServerData.CavrnusRemoteContent.thumbnailUrl");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_thumbnailurl(), target);
  }

  // repeated string tagKeys = 10;
  for (int i = 0, n = this->_internal_tagkeys_size(); i < n; i++) {
    const auto& s = this->_internal_tagkeys(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ServerData.CavrnusRemoteContent.tagKeys");
    target = stream->WriteString(10, s, target);
  }

  // repeated string tagValues = 11;
  for (int i = 0, n = this->_internal_tagvalues_size(); i < n; i++) {
    const auto& s = this->_internal_tagvalues(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ServerData.CavrnusRemoteContent.tagValues");
    target = stream->WriteString(11, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerData.CavrnusRemoteContent)
  return target;
}

size_t CavrnusRemoteContent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerData.CavrnusRemoteContent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tagKeys = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.tagkeys_.size());
  for (int i = 0, n = _impl_.tagkeys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.tagkeys_.Get(i));
  }

  // repeated string tagValues = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.tagvalues_.size());
  for (int i = 0, n = _impl_.tagvalues_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.tagvalues_.Get(i));
  }

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string fileName = 3;
  if (!this->_internal_filename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());
  }

  // string thumbnailUrl = 4;
  if (!this->_internal_thumbnailurl().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_thumbnailurl());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CavrnusRemoteContent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CavrnusRemoteContent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CavrnusRemoteContent::GetClassData() const { return &_class_data_; }


void CavrnusRemoteContent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CavrnusRemoteContent*>(&to_msg);
  auto& from = static_cast<const CavrnusRemoteContent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ServerData.CavrnusRemoteContent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tagkeys_.MergeFrom(from._impl_.tagkeys_);
  _this->_impl_.tagvalues_.MergeFrom(from._impl_.tagvalues_);
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_filename().empty()) {
    _this->_internal_set_filename(from._internal_filename());
  }
  if (!from._internal_thumbnailurl().empty()) {
    _this->_internal_set_thumbnailurl(from._internal_thumbnailurl());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CavrnusRemoteContent::CopyFrom(const CavrnusRemoteContent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerData.CavrnusRemoteContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CavrnusRemoteContent::IsInitialized() const {
  return true;
}

void CavrnusRemoteContent::InternalSwap(CavrnusRemoteContent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tagkeys_.InternalSwap(&other->_impl_.tagkeys_);
  _impl_.tagvalues_.InternalSwap(&other->_impl_.tagvalues_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filename_, lhs_arena,
      &other->_impl_.filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.thumbnailurl_, lhs_arena,
      &other->_impl_.thumbnailurl_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CavrnusRemoteContent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_relay_5ftypes_2eproto_getter, &descriptor_table_relay_5ftypes_2eproto_once,
      file_level_metadata_relay_5ftypes_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace ServerData
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ServerData::CavrnusAuth*
Arena::CreateMaybeMessage< ::ServerData::CavrnusAuth >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerData::CavrnusAuth >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerData::CavrnusAuthLinkResponse*
Arena::CreateMaybeMessage< ::ServerData::CavrnusAuthLinkResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerData::CavrnusAuthLinkResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerData::CavrnusSpaceConnection*
Arena::CreateMaybeMessage< ::ServerData::CavrnusSpaceConnection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerData::CavrnusSpaceConnection >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerData::CavrnusUser*
Arena::CreateMaybeMessage< ::ServerData::CavrnusUser >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerData::CavrnusUser >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerData::RtcAudioInputDevice*
Arena::CreateMaybeMessage< ::ServerData::RtcAudioInputDevice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerData::RtcAudioInputDevice >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerData::RtcAudioInputDeviceList*
Arena::CreateMaybeMessage< ::ServerData::RtcAudioInputDeviceList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerData::RtcAudioInputDeviceList >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerData::RtcAudioOutputDevice*
Arena::CreateMaybeMessage< ::ServerData::RtcAudioOutputDevice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerData::RtcAudioOutputDevice >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerData::RtcAudioOutputDeviceList*
Arena::CreateMaybeMessage< ::ServerData::RtcAudioOutputDeviceList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerData::RtcAudioOutputDeviceList >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerData::RtcVideoInputDevice*
Arena::CreateMaybeMessage< ::ServerData::RtcVideoInputDevice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerData::RtcVideoInputDevice >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerData::RtcVideoInputDeviceList*
Arena::CreateMaybeMessage< ::ServerData::RtcVideoInputDeviceList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerData::RtcVideoInputDeviceList >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerData::CavrnusRemoteContent*
Arena::CreateMaybeMessage< ::ServerData::CavrnusRemoteContent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerData::CavrnusRemoteContent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
