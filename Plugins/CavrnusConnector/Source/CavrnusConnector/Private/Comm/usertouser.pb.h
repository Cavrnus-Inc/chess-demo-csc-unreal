// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: usertouser.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_usertouser_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_usertouser_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include "common.pb.h"
#include "serverdata.pb.h"
#include "properties.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_usertouser_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_usertouser_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_usertouser_2eproto;
namespace Session {
class PropertyInfo;
struct PropertyInfoDefaultTypeInternal;
extern PropertyInfoDefaultTypeInternal _PropertyInfo_default_instance_;
class PropertyInfoNode;
struct PropertyInfoNodeDefaultTypeInternal;
extern PropertyInfoNodeDefaultTypeInternal _PropertyInfoNode_default_instance_;
class PropertyMetaById;
struct PropertyMetaByIdDefaultTypeInternal;
extern PropertyMetaByIdDefaultTypeInternal _PropertyMetaById_default_instance_;
class RequestLivePropertyCapabilities;
struct RequestLivePropertyCapabilitiesDefaultTypeInternal;
extern RequestLivePropertyCapabilitiesDefaultTypeInternal _RequestLivePropertyCapabilities_default_instance_;
class RequestLivePropertyCapabilities_V1;
struct RequestLivePropertyCapabilities_V1DefaultTypeInternal;
extern RequestLivePropertyCapabilities_V1DefaultTypeInternal _RequestLivePropertyCapabilities_V1_default_instance_;
class RequestLivePropertyInfo;
struct RequestLivePropertyInfoDefaultTypeInternal;
extern RequestLivePropertyInfoDefaultTypeInternal _RequestLivePropertyInfo_default_instance_;
class RequestLivePropertyInfo_V1;
struct RequestLivePropertyInfo_V1DefaultTypeInternal;
extern RequestLivePropertyInfo_V1DefaultTypeInternal _RequestLivePropertyInfo_V1_default_instance_;
class ResponseLivePropertyCapabilities;
struct ResponseLivePropertyCapabilitiesDefaultTypeInternal;
extern ResponseLivePropertyCapabilitiesDefaultTypeInternal _ResponseLivePropertyCapabilities_default_instance_;
class ResponseLivePropertyCapabilities_V1;
struct ResponseLivePropertyCapabilities_V1DefaultTypeInternal;
extern ResponseLivePropertyCapabilities_V1DefaultTypeInternal _ResponseLivePropertyCapabilities_V1_default_instance_;
class ResponseLivePropertyInfo;
struct ResponseLivePropertyInfoDefaultTypeInternal;
extern ResponseLivePropertyInfoDefaultTypeInternal _ResponseLivePropertyInfo_default_instance_;
class ResponseLivePropertyInfo_V1;
struct ResponseLivePropertyInfo_V1DefaultTypeInternal;
extern ResponseLivePropertyInfo_V1DefaultTypeInternal _ResponseLivePropertyInfo_V1_default_instance_;
class UserToUserMessage;
struct UserToUserMessageDefaultTypeInternal;
extern UserToUserMessageDefaultTypeInternal _UserToUserMessage_default_instance_;
class UserToUserMessage_V1;
struct UserToUserMessage_V1DefaultTypeInternal;
extern UserToUserMessage_V1DefaultTypeInternal _UserToUserMessage_V1_default_instance_;
}  // namespace Session
PROTOBUF_NAMESPACE_OPEN
template<> ::Session::PropertyInfo* Arena::CreateMaybeMessage<::Session::PropertyInfo>(Arena*);
template<> ::Session::PropertyInfoNode* Arena::CreateMaybeMessage<::Session::PropertyInfoNode>(Arena*);
template<> ::Session::PropertyMetaById* Arena::CreateMaybeMessage<::Session::PropertyMetaById>(Arena*);
template<> ::Session::RequestLivePropertyCapabilities* Arena::CreateMaybeMessage<::Session::RequestLivePropertyCapabilities>(Arena*);
template<> ::Session::RequestLivePropertyCapabilities_V1* Arena::CreateMaybeMessage<::Session::RequestLivePropertyCapabilities_V1>(Arena*);
template<> ::Session::RequestLivePropertyInfo* Arena::CreateMaybeMessage<::Session::RequestLivePropertyInfo>(Arena*);
template<> ::Session::RequestLivePropertyInfo_V1* Arena::CreateMaybeMessage<::Session::RequestLivePropertyInfo_V1>(Arena*);
template<> ::Session::ResponseLivePropertyCapabilities* Arena::CreateMaybeMessage<::Session::ResponseLivePropertyCapabilities>(Arena*);
template<> ::Session::ResponseLivePropertyCapabilities_V1* Arena::CreateMaybeMessage<::Session::ResponseLivePropertyCapabilities_V1>(Arena*);
template<> ::Session::ResponseLivePropertyInfo* Arena::CreateMaybeMessage<::Session::ResponseLivePropertyInfo>(Arena*);
template<> ::Session::ResponseLivePropertyInfo_V1* Arena::CreateMaybeMessage<::Session::ResponseLivePropertyInfo_V1>(Arena*);
template<> ::Session::UserToUserMessage* Arena::CreateMaybeMessage<::Session::UserToUserMessage>(Arena*);
template<> ::Session::UserToUserMessage_V1* Arena::CreateMaybeMessage<::Session::UserToUserMessage_V1>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Session {

enum ResponseLivePropertyCapabilities_V1_LivePropertyCapabilityEnum : int {
  ResponseLivePropertyCapabilities_V1_LivePropertyCapabilityEnum_None = 0,
  ResponseLivePropertyCapabilities_V1_LivePropertyCapabilityEnum_Available = 1,
  ResponseLivePropertyCapabilities_V1_LivePropertyCapabilityEnum_AvailableRestricted = 2,
  ResponseLivePropertyCapabilities_V1_LivePropertyCapabilityEnum_Eager = 3,
  ResponseLivePropertyCapabilities_V1_LivePropertyCapabilityEnum_EagerRestricted = 4,
  ResponseLivePropertyCapabilities_V1_LivePropertyCapabilityEnum_ResponseLivePropertyCapabilities_V1_LivePropertyCapabilityEnum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ResponseLivePropertyCapabilities_V1_LivePropertyCapabilityEnum_ResponseLivePropertyCapabilities_V1_LivePropertyCapabilityEnum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ResponseLivePropertyCapabilities_V1_LivePropertyCapabilityEnum_IsValid(int value);
constexpr ResponseLivePropertyCapabilities_V1_LivePropertyCapabilityEnum ResponseLivePropertyCapabilities_V1_LivePropertyCapabilityEnum_LivePropertyCapabilityEnum_MIN = ResponseLivePropertyCapabilities_V1_LivePropertyCapabilityEnum_None;
constexpr ResponseLivePropertyCapabilities_V1_LivePropertyCapabilityEnum ResponseLivePropertyCapabilities_V1_LivePropertyCapabilityEnum_LivePropertyCapabilityEnum_MAX = ResponseLivePropertyCapabilities_V1_LivePropertyCapabilityEnum_EagerRestricted;
constexpr int ResponseLivePropertyCapabilities_V1_LivePropertyCapabilityEnum_LivePropertyCapabilityEnum_ARRAYSIZE = ResponseLivePropertyCapabilities_V1_LivePropertyCapabilityEnum_LivePropertyCapabilityEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResponseLivePropertyCapabilities_V1_LivePropertyCapabilityEnum_descriptor();
template<typename T>
inline const std::string& ResponseLivePropertyCapabilities_V1_LivePropertyCapabilityEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ResponseLivePropertyCapabilities_V1_LivePropertyCapabilityEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ResponseLivePropertyCapabilities_V1_LivePropertyCapabilityEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ResponseLivePropertyCapabilities_V1_LivePropertyCapabilityEnum_descriptor(), enum_t_value);
}
inline bool ResponseLivePropertyCapabilities_V1_LivePropertyCapabilityEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ResponseLivePropertyCapabilities_V1_LivePropertyCapabilityEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ResponseLivePropertyCapabilities_V1_LivePropertyCapabilityEnum>(
    ResponseLivePropertyCapabilities_V1_LivePropertyCapabilityEnum_descriptor(), name, value);
}
// ===================================================================

class RequestLivePropertyCapabilities_V1 final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Session.RequestLivePropertyCapabilities.V1) */ {
 public:
  inline RequestLivePropertyCapabilities_V1() : RequestLivePropertyCapabilities_V1(nullptr) {}
  explicit PROTOBUF_CONSTEXPR RequestLivePropertyCapabilities_V1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestLivePropertyCapabilities_V1(const RequestLivePropertyCapabilities_V1& from);
  RequestLivePropertyCapabilities_V1(RequestLivePropertyCapabilities_V1&& from) noexcept
    : RequestLivePropertyCapabilities_V1() {
    *this = ::std::move(from);
  }

  inline RequestLivePropertyCapabilities_V1& operator=(const RequestLivePropertyCapabilities_V1& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestLivePropertyCapabilities_V1& operator=(RequestLivePropertyCapabilities_V1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestLivePropertyCapabilities_V1& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestLivePropertyCapabilities_V1* internal_default_instance() {
    return reinterpret_cast<const RequestLivePropertyCapabilities_V1*>(
               &_RequestLivePropertyCapabilities_V1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RequestLivePropertyCapabilities_V1& a, RequestLivePropertyCapabilities_V1& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestLivePropertyCapabilities_V1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestLivePropertyCapabilities_V1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestLivePropertyCapabilities_V1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestLivePropertyCapabilities_V1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const RequestLivePropertyCapabilities_V1& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const RequestLivePropertyCapabilities_V1& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Session.RequestLivePropertyCapabilities.V1";
  }
  protected:
  explicit RequestLivePropertyCapabilities_V1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Session.RequestLivePropertyCapabilities.V1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_usertouser_2eproto;
};
// -------------------------------------------------------------------

class RequestLivePropertyCapabilities final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Session.RequestLivePropertyCapabilities) */ {
 public:
  inline RequestLivePropertyCapabilities() : RequestLivePropertyCapabilities(nullptr) {}
  ~RequestLivePropertyCapabilities() override;
  explicit PROTOBUF_CONSTEXPR RequestLivePropertyCapabilities(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestLivePropertyCapabilities(const RequestLivePropertyCapabilities& from);
  RequestLivePropertyCapabilities(RequestLivePropertyCapabilities&& from) noexcept
    : RequestLivePropertyCapabilities() {
    *this = ::std::move(from);
  }

  inline RequestLivePropertyCapabilities& operator=(const RequestLivePropertyCapabilities& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestLivePropertyCapabilities& operator=(RequestLivePropertyCapabilities&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestLivePropertyCapabilities& default_instance() {
    return *internal_default_instance();
  }
  enum VCase {
    kV1 = 1,
    V_NOT_SET = 0,
  };

  static inline const RequestLivePropertyCapabilities* internal_default_instance() {
    return reinterpret_cast<const RequestLivePropertyCapabilities*>(
               &_RequestLivePropertyCapabilities_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RequestLivePropertyCapabilities& a, RequestLivePropertyCapabilities& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestLivePropertyCapabilities* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestLivePropertyCapabilities* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestLivePropertyCapabilities* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestLivePropertyCapabilities>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestLivePropertyCapabilities& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RequestLivePropertyCapabilities& from) {
    RequestLivePropertyCapabilities::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestLivePropertyCapabilities* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Session.RequestLivePropertyCapabilities";
  }
  protected:
  explicit RequestLivePropertyCapabilities(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RequestLivePropertyCapabilities_V1 V1;

  // accessors -------------------------------------------------------

  enum : int {
    kV1FieldNumber = 1,
  };
  // .Session.RequestLivePropertyCapabilities.V1 v1 = 1;
  bool has_v1() const;
  private:
  bool _internal_has_v1() const;
  public:
  void clear_v1();
  const ::Session::RequestLivePropertyCapabilities_V1& v1() const;
  PROTOBUF_NODISCARD ::Session::RequestLivePropertyCapabilities_V1* release_v1();
  ::Session::RequestLivePropertyCapabilities_V1* mutable_v1();
  void set_allocated_v1(::Session::RequestLivePropertyCapabilities_V1* v1);
  private:
  const ::Session::RequestLivePropertyCapabilities_V1& _internal_v1() const;
  ::Session::RequestLivePropertyCapabilities_V1* _internal_mutable_v1();
  public:
  void unsafe_arena_set_allocated_v1(
      ::Session::RequestLivePropertyCapabilities_V1* v1);
  ::Session::RequestLivePropertyCapabilities_V1* unsafe_arena_release_v1();

  void clear_V();
  VCase V_case() const;
  // @@protoc_insertion_point(class_scope:Session.RequestLivePropertyCapabilities)
 private:
  class _Internal;
  void set_has_v1();

  inline bool has_V() const;
  inline void clear_has_V();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union VUnion {
      constexpr VUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::Session::RequestLivePropertyCapabilities_V1* v1_;
    } V_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_usertouser_2eproto;
};
// -------------------------------------------------------------------

class ResponseLivePropertyCapabilities_V1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Session.ResponseLivePropertyCapabilities.V1) */ {
 public:
  inline ResponseLivePropertyCapabilities_V1() : ResponseLivePropertyCapabilities_V1(nullptr) {}
  ~ResponseLivePropertyCapabilities_V1() override;
  explicit PROTOBUF_CONSTEXPR ResponseLivePropertyCapabilities_V1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponseLivePropertyCapabilities_V1(const ResponseLivePropertyCapabilities_V1& from);
  ResponseLivePropertyCapabilities_V1(ResponseLivePropertyCapabilities_V1&& from) noexcept
    : ResponseLivePropertyCapabilities_V1() {
    *this = ::std::move(from);
  }

  inline ResponseLivePropertyCapabilities_V1& operator=(const ResponseLivePropertyCapabilities_V1& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseLivePropertyCapabilities_V1& operator=(ResponseLivePropertyCapabilities_V1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseLivePropertyCapabilities_V1& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseLivePropertyCapabilities_V1* internal_default_instance() {
    return reinterpret_cast<const ResponseLivePropertyCapabilities_V1*>(
               &_ResponseLivePropertyCapabilities_V1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ResponseLivePropertyCapabilities_V1& a, ResponseLivePropertyCapabilities_V1& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseLivePropertyCapabilities_V1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseLivePropertyCapabilities_V1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseLivePropertyCapabilities_V1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResponseLivePropertyCapabilities_V1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResponseLivePropertyCapabilities_V1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ResponseLivePropertyCapabilities_V1& from) {
    ResponseLivePropertyCapabilities_V1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseLivePropertyCapabilities_V1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Session.ResponseLivePropertyCapabilities.V1";
  }
  protected:
  explicit ResponseLivePropertyCapabilities_V1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ResponseLivePropertyCapabilities_V1_LivePropertyCapabilityEnum LivePropertyCapabilityEnum;
  static constexpr LivePropertyCapabilityEnum None =
    ResponseLivePropertyCapabilities_V1_LivePropertyCapabilityEnum_None;
  static constexpr LivePropertyCapabilityEnum Available =
    ResponseLivePropertyCapabilities_V1_LivePropertyCapabilityEnum_Available;
  static constexpr LivePropertyCapabilityEnum AvailableRestricted =
    ResponseLivePropertyCapabilities_V1_LivePropertyCapabilityEnum_AvailableRestricted;
  static constexpr LivePropertyCapabilityEnum Eager =
    ResponseLivePropertyCapabilities_V1_LivePropertyCapabilityEnum_Eager;
  static constexpr LivePropertyCapabilityEnum EagerRestricted =
    ResponseLivePropertyCapabilities_V1_LivePropertyCapabilityEnum_EagerRestricted;
  static inline bool LivePropertyCapabilityEnum_IsValid(int value) {
    return ResponseLivePropertyCapabilities_V1_LivePropertyCapabilityEnum_IsValid(value);
  }
  static constexpr LivePropertyCapabilityEnum LivePropertyCapabilityEnum_MIN =
    ResponseLivePropertyCapabilities_V1_LivePropertyCapabilityEnum_LivePropertyCapabilityEnum_MIN;
  static constexpr LivePropertyCapabilityEnum LivePropertyCapabilityEnum_MAX =
    ResponseLivePropertyCapabilities_V1_LivePropertyCapabilityEnum_LivePropertyCapabilityEnum_MAX;
  static constexpr int LivePropertyCapabilityEnum_ARRAYSIZE =
    ResponseLivePropertyCapabilities_V1_LivePropertyCapabilityEnum_LivePropertyCapabilityEnum_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  LivePropertyCapabilityEnum_descriptor() {
    return ResponseLivePropertyCapabilities_V1_LivePropertyCapabilityEnum_descriptor();
  }
  template<typename T>
  static inline const std::string& LivePropertyCapabilityEnum_Name(T enum_t_value) {
    static_assert(::std::is_same<T, LivePropertyCapabilityEnum>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function LivePropertyCapabilityEnum_Name.");
    return ResponseLivePropertyCapabilities_V1_LivePropertyCapabilityEnum_Name(enum_t_value);
  }
  static inline bool LivePropertyCapabilityEnum_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      LivePropertyCapabilityEnum* value) {
    return ResponseLivePropertyCapabilities_V1_LivePropertyCapabilityEnum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCapabilityFieldNumber = 1,
  };
  // .Session.ResponseLivePropertyCapabilities.V1.LivePropertyCapabilityEnum capability = 1;
  void clear_capability();
  ::Session::ResponseLivePropertyCapabilities_V1_LivePropertyCapabilityEnum capability() const;
  void set_capability(::Session::ResponseLivePropertyCapabilities_V1_LivePropertyCapabilityEnum value);
  private:
  ::Session::ResponseLivePropertyCapabilities_V1_LivePropertyCapabilityEnum _internal_capability() const;
  void _internal_set_capability(::Session::ResponseLivePropertyCapabilities_V1_LivePropertyCapabilityEnum value);
  public:

  // @@protoc_insertion_point(class_scope:Session.ResponseLivePropertyCapabilities.V1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int capability_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_usertouser_2eproto;
};
// -------------------------------------------------------------------

class ResponseLivePropertyCapabilities final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Session.ResponseLivePropertyCapabilities) */ {
 public:
  inline ResponseLivePropertyCapabilities() : ResponseLivePropertyCapabilities(nullptr) {}
  ~ResponseLivePropertyCapabilities() override;
  explicit PROTOBUF_CONSTEXPR ResponseLivePropertyCapabilities(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponseLivePropertyCapabilities(const ResponseLivePropertyCapabilities& from);
  ResponseLivePropertyCapabilities(ResponseLivePropertyCapabilities&& from) noexcept
    : ResponseLivePropertyCapabilities() {
    *this = ::std::move(from);
  }

  inline ResponseLivePropertyCapabilities& operator=(const ResponseLivePropertyCapabilities& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseLivePropertyCapabilities& operator=(ResponseLivePropertyCapabilities&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseLivePropertyCapabilities& default_instance() {
    return *internal_default_instance();
  }
  enum VCase {
    kV1 = 1,
    V_NOT_SET = 0,
  };

  static inline const ResponseLivePropertyCapabilities* internal_default_instance() {
    return reinterpret_cast<const ResponseLivePropertyCapabilities*>(
               &_ResponseLivePropertyCapabilities_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ResponseLivePropertyCapabilities& a, ResponseLivePropertyCapabilities& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseLivePropertyCapabilities* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseLivePropertyCapabilities* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseLivePropertyCapabilities* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResponseLivePropertyCapabilities>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResponseLivePropertyCapabilities& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ResponseLivePropertyCapabilities& from) {
    ResponseLivePropertyCapabilities::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseLivePropertyCapabilities* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Session.ResponseLivePropertyCapabilities";
  }
  protected:
  explicit ResponseLivePropertyCapabilities(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ResponseLivePropertyCapabilities_V1 V1;

  // accessors -------------------------------------------------------

  enum : int {
    kV1FieldNumber = 1,
  };
  // .Session.ResponseLivePropertyCapabilities.V1 v1 = 1;
  bool has_v1() const;
  private:
  bool _internal_has_v1() const;
  public:
  void clear_v1();
  const ::Session::ResponseLivePropertyCapabilities_V1& v1() const;
  PROTOBUF_NODISCARD ::Session::ResponseLivePropertyCapabilities_V1* release_v1();
  ::Session::ResponseLivePropertyCapabilities_V1* mutable_v1();
  void set_allocated_v1(::Session::ResponseLivePropertyCapabilities_V1* v1);
  private:
  const ::Session::ResponseLivePropertyCapabilities_V1& _internal_v1() const;
  ::Session::ResponseLivePropertyCapabilities_V1* _internal_mutable_v1();
  public:
  void unsafe_arena_set_allocated_v1(
      ::Session::ResponseLivePropertyCapabilities_V1* v1);
  ::Session::ResponseLivePropertyCapabilities_V1* unsafe_arena_release_v1();

  void clear_V();
  VCase V_case() const;
  // @@protoc_insertion_point(class_scope:Session.ResponseLivePropertyCapabilities)
 private:
  class _Internal;
  void set_has_v1();

  inline bool has_V() const;
  inline void clear_has_V();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union VUnion {
      constexpr VUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::Session::ResponseLivePropertyCapabilities_V1* v1_;
    } V_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_usertouser_2eproto;
};
// -------------------------------------------------------------------

class RequestLivePropertyInfo_V1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Session.RequestLivePropertyInfo.V1) */ {
 public:
  inline RequestLivePropertyInfo_V1() : RequestLivePropertyInfo_V1(nullptr) {}
  ~RequestLivePropertyInfo_V1() override;
  explicit PROTOBUF_CONSTEXPR RequestLivePropertyInfo_V1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestLivePropertyInfo_V1(const RequestLivePropertyInfo_V1& from);
  RequestLivePropertyInfo_V1(RequestLivePropertyInfo_V1&& from) noexcept
    : RequestLivePropertyInfo_V1() {
    *this = ::std::move(from);
  }

  inline RequestLivePropertyInfo_V1& operator=(const RequestLivePropertyInfo_V1& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestLivePropertyInfo_V1& operator=(RequestLivePropertyInfo_V1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestLivePropertyInfo_V1& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestLivePropertyInfo_V1* internal_default_instance() {
    return reinterpret_cast<const RequestLivePropertyInfo_V1*>(
               &_RequestLivePropertyInfo_V1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RequestLivePropertyInfo_V1& a, RequestLivePropertyInfo_V1& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestLivePropertyInfo_V1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestLivePropertyInfo_V1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestLivePropertyInfo_V1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestLivePropertyInfo_V1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestLivePropertyInfo_V1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RequestLivePropertyInfo_V1& from) {
    RequestLivePropertyInfo_V1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestLivePropertyInfo_V1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Session.RequestLivePropertyInfo.V1";
  }
  protected:
  explicit RequestLivePropertyInfo_V1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIncludeNodesFieldNumber = 1,
    kExcludeNodesFieldNumber = 2,
    kIncludePropertiesFieldNumber = 6,
    kRequestIdFieldNumber = 4,
    kContinuousModeFieldNumber = 5,
  };
  // repeated string includeNodes = 1;
  int includenodes_size() const;
  private:
  int _internal_includenodes_size() const;
  public:
  void clear_includenodes();
  const std::string& includenodes(int index) const;
  std::string* mutable_includenodes(int index);
  void set_includenodes(int index, const std::string& value);
  void set_includenodes(int index, std::string&& value);
  void set_includenodes(int index, const char* value);
  void set_includenodes(int index, const char* value, size_t size);
  std::string* add_includenodes();
  void add_includenodes(const std::string& value);
  void add_includenodes(std::string&& value);
  void add_includenodes(const char* value);
  void add_includenodes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& includenodes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_includenodes();
  private:
  const std::string& _internal_includenodes(int index) const;
  std::string* _internal_add_includenodes();
  public:

  // repeated string excludeNodes = 2;
  int excludenodes_size() const;
  private:
  int _internal_excludenodes_size() const;
  public:
  void clear_excludenodes();
  const std::string& excludenodes(int index) const;
  std::string* mutable_excludenodes(int index);
  void set_excludenodes(int index, const std::string& value);
  void set_excludenodes(int index, std::string&& value);
  void set_excludenodes(int index, const char* value);
  void set_excludenodes(int index, const char* value, size_t size);
  std::string* add_excludenodes();
  void add_excludenodes(const std::string& value);
  void add_excludenodes(std::string&& value);
  void add_excludenodes(const char* value);
  void add_excludenodes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& excludenodes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_excludenodes();
  private:
  const std::string& _internal_excludenodes(int index) const;
  std::string* _internal_add_excludenodes();
  public:

  // repeated string includeProperties = 6;
  int includeproperties_size() const;
  private:
  int _internal_includeproperties_size() const;
  public:
  void clear_includeproperties();
  const std::string& includeproperties(int index) const;
  std::string* mutable_includeproperties(int index);
  void set_includeproperties(int index, const std::string& value);
  void set_includeproperties(int index, std::string&& value);
  void set_includeproperties(int index, const char* value);
  void set_includeproperties(int index, const char* value, size_t size);
  std::string* add_includeproperties();
  void add_includeproperties(const std::string& value);
  void add_includeproperties(std::string&& value);
  void add_includeproperties(const char* value);
  void add_includeproperties(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& includeproperties() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_includeproperties();
  private:
  const std::string& _internal_includeproperties(int index) const;
  std::string* _internal_add_includeproperties();
  public:

  // string requestId = 4;
  void clear_requestid();
  const std::string& requestid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_requestid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_requestid();
  PROTOBUF_NODISCARD std::string* release_requestid();
  void set_allocated_requestid(std::string* requestid);
  private:
  const std::string& _internal_requestid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_requestid(const std::string& value);
  std::string* _internal_mutable_requestid();
  public:

  // optional bool continuousMode = 5;
  bool has_continuousmode() const;
  private:
  bool _internal_has_continuousmode() const;
  public:
  void clear_continuousmode();
  bool continuousmode() const;
  void set_continuousmode(bool value);
  private:
  bool _internal_continuousmode() const;
  void _internal_set_continuousmode(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Session.RequestLivePropertyInfo.V1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> includenodes_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> excludenodes_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> includeproperties_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestid_;
    bool continuousmode_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_usertouser_2eproto;
};
// -------------------------------------------------------------------

class RequestLivePropertyInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Session.RequestLivePropertyInfo) */ {
 public:
  inline RequestLivePropertyInfo() : RequestLivePropertyInfo(nullptr) {}
  ~RequestLivePropertyInfo() override;
  explicit PROTOBUF_CONSTEXPR RequestLivePropertyInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestLivePropertyInfo(const RequestLivePropertyInfo& from);
  RequestLivePropertyInfo(RequestLivePropertyInfo&& from) noexcept
    : RequestLivePropertyInfo() {
    *this = ::std::move(from);
  }

  inline RequestLivePropertyInfo& operator=(const RequestLivePropertyInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestLivePropertyInfo& operator=(RequestLivePropertyInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestLivePropertyInfo& default_instance() {
    return *internal_default_instance();
  }
  enum VCase {
    kV1 = 1,
    V_NOT_SET = 0,
  };

  static inline const RequestLivePropertyInfo* internal_default_instance() {
    return reinterpret_cast<const RequestLivePropertyInfo*>(
               &_RequestLivePropertyInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RequestLivePropertyInfo& a, RequestLivePropertyInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestLivePropertyInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestLivePropertyInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestLivePropertyInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestLivePropertyInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestLivePropertyInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RequestLivePropertyInfo& from) {
    RequestLivePropertyInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestLivePropertyInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Session.RequestLivePropertyInfo";
  }
  protected:
  explicit RequestLivePropertyInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RequestLivePropertyInfo_V1 V1;

  // accessors -------------------------------------------------------

  enum : int {
    kV1FieldNumber = 1,
  };
  // .Session.RequestLivePropertyInfo.V1 v1 = 1;
  bool has_v1() const;
  private:
  bool _internal_has_v1() const;
  public:
  void clear_v1();
  const ::Session::RequestLivePropertyInfo_V1& v1() const;
  PROTOBUF_NODISCARD ::Session::RequestLivePropertyInfo_V1* release_v1();
  ::Session::RequestLivePropertyInfo_V1* mutable_v1();
  void set_allocated_v1(::Session::RequestLivePropertyInfo_V1* v1);
  private:
  const ::Session::RequestLivePropertyInfo_V1& _internal_v1() const;
  ::Session::RequestLivePropertyInfo_V1* _internal_mutable_v1();
  public:
  void unsafe_arena_set_allocated_v1(
      ::Session::RequestLivePropertyInfo_V1* v1);
  ::Session::RequestLivePropertyInfo_V1* unsafe_arena_release_v1();

  void clear_V();
  VCase V_case() const;
  // @@protoc_insertion_point(class_scope:Session.RequestLivePropertyInfo)
 private:
  class _Internal;
  void set_has_v1();

  inline bool has_V() const;
  inline void clear_has_V();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union VUnion {
      constexpr VUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::Session::RequestLivePropertyInfo_V1* v1_;
    } V_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_usertouser_2eproto;
};
// -------------------------------------------------------------------

class PropertyMetaById final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Session.PropertyMetaById) */ {
 public:
  inline PropertyMetaById() : PropertyMetaById(nullptr) {}
  ~PropertyMetaById() override;
  explicit PROTOBUF_CONSTEXPR PropertyMetaById(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PropertyMetaById(const PropertyMetaById& from);
  PropertyMetaById(PropertyMetaById&& from) noexcept
    : PropertyMetaById() {
    *this = ::std::move(from);
  }

  inline PropertyMetaById& operator=(const PropertyMetaById& from) {
    CopyFrom(from);
    return *this;
  }
  inline PropertyMetaById& operator=(PropertyMetaById&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PropertyMetaById& default_instance() {
    return *internal_default_instance();
  }
  enum MetaTypeCase {
    kScalar = 2,
    kString = 3,
    kVector = 4,
    kColor = 5,
    kTransform = 6,
    kBoolean = 7,
    kJson = 9,
    kLink = 10,
    METATYPE_NOT_SET = 0,
  };

  static inline const PropertyMetaById* internal_default_instance() {
    return reinterpret_cast<const PropertyMetaById*>(
               &_PropertyMetaById_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PropertyMetaById& a, PropertyMetaById& b) {
    a.Swap(&b);
  }
  inline void Swap(PropertyMetaById* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PropertyMetaById* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PropertyMetaById* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PropertyMetaById>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PropertyMetaById& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PropertyMetaById& from) {
    PropertyMetaById::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PropertyMetaById* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Session.PropertyMetaById";
  }
  protected:
  explicit PropertyMetaById(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaIdFieldNumber = 1,
    kScalarFieldNumber = 2,
    kStringFieldNumber = 3,
    kVectorFieldNumber = 4,
    kColorFieldNumber = 5,
    kTransformFieldNumber = 6,
    kBooleanFieldNumber = 7,
    kJsonFieldNumber = 9,
    kLinkFieldNumber = 10,
  };
  // string metaId = 1;
  void clear_metaid();
  const std::string& metaid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_metaid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_metaid();
  PROTOBUF_NODISCARD std::string* release_metaid();
  void set_allocated_metaid(std::string* metaid);
  private:
  const std::string& _internal_metaid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metaid(const std::string& value);
  std::string* _internal_mutable_metaid();
  public:

  // .Property.ScalarPropertyMetadata scalar = 2;
  bool has_scalar() const;
  private:
  bool _internal_has_scalar() const;
  public:
  void clear_scalar();
  const ::Property::ScalarPropertyMetadata& scalar() const;
  PROTOBUF_NODISCARD ::Property::ScalarPropertyMetadata* release_scalar();
  ::Property::ScalarPropertyMetadata* mutable_scalar();
  void set_allocated_scalar(::Property::ScalarPropertyMetadata* scalar);
  private:
  const ::Property::ScalarPropertyMetadata& _internal_scalar() const;
  ::Property::ScalarPropertyMetadata* _internal_mutable_scalar();
  public:
  void unsafe_arena_set_allocated_scalar(
      ::Property::ScalarPropertyMetadata* scalar);
  ::Property::ScalarPropertyMetadata* unsafe_arena_release_scalar();

  // .Property.StringPropertyMetadata string = 3;
  bool has_string() const;
  private:
  bool _internal_has_string() const;
  public:
  void clear_string();
  const ::Property::StringPropertyMetadata& string() const;
  PROTOBUF_NODISCARD ::Property::StringPropertyMetadata* release_string();
  ::Property::StringPropertyMetadata* mutable_string();
  void set_allocated_string(::Property::StringPropertyMetadata* string);
  private:
  const ::Property::StringPropertyMetadata& _internal_string() const;
  ::Property::StringPropertyMetadata* _internal_mutable_string();
  public:
  void unsafe_arena_set_allocated_string(
      ::Property::StringPropertyMetadata* string);
  ::Property::StringPropertyMetadata* unsafe_arena_release_string();

  // .Property.VectorPropertyMetadata vector = 4;
  bool has_vector() const;
  private:
  bool _internal_has_vector() const;
  public:
  void clear_vector();
  const ::Property::VectorPropertyMetadata& vector() const;
  PROTOBUF_NODISCARD ::Property::VectorPropertyMetadata* release_vector();
  ::Property::VectorPropertyMetadata* mutable_vector();
  void set_allocated_vector(::Property::VectorPropertyMetadata* vector);
  private:
  const ::Property::VectorPropertyMetadata& _internal_vector() const;
  ::Property::VectorPropertyMetadata* _internal_mutable_vector();
  public:
  void unsafe_arena_set_allocated_vector(
      ::Property::VectorPropertyMetadata* vector);
  ::Property::VectorPropertyMetadata* unsafe_arena_release_vector();

  // .Property.ColorPropertyMetadata color = 5;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const ::Property::ColorPropertyMetadata& color() const;
  PROTOBUF_NODISCARD ::Property::ColorPropertyMetadata* release_color();
  ::Property::ColorPropertyMetadata* mutable_color();
  void set_allocated_color(::Property::ColorPropertyMetadata* color);
  private:
  const ::Property::ColorPropertyMetadata& _internal_color() const;
  ::Property::ColorPropertyMetadata* _internal_mutable_color();
  public:
  void unsafe_arena_set_allocated_color(
      ::Property::ColorPropertyMetadata* color);
  ::Property::ColorPropertyMetadata* unsafe_arena_release_color();

  // .Property.TransformPropertyMetadata transform = 6;
  bool has_transform() const;
  private:
  bool _internal_has_transform() const;
  public:
  void clear_transform();
  const ::Property::TransformPropertyMetadata& transform() const;
  PROTOBUF_NODISCARD ::Property::TransformPropertyMetadata* release_transform();
  ::Property::TransformPropertyMetadata* mutable_transform();
  void set_allocated_transform(::Property::TransformPropertyMetadata* transform);
  private:
  const ::Property::TransformPropertyMetadata& _internal_transform() const;
  ::Property::TransformPropertyMetadata* _internal_mutable_transform();
  public:
  void unsafe_arena_set_allocated_transform(
      ::Property::TransformPropertyMetadata* transform);
  ::Property::TransformPropertyMetadata* unsafe_arena_release_transform();

  // .Property.BooleanPropertyMetadata boolean = 7;
  bool has_boolean() const;
  private:
  bool _internal_has_boolean() const;
  public:
  void clear_boolean();
  const ::Property::BooleanPropertyMetadata& boolean() const;
  PROTOBUF_NODISCARD ::Property::BooleanPropertyMetadata* release_boolean();
  ::Property::BooleanPropertyMetadata* mutable_boolean();
  void set_allocated_boolean(::Property::BooleanPropertyMetadata* boolean);
  private:
  const ::Property::BooleanPropertyMetadata& _internal_boolean() const;
  ::Property::BooleanPropertyMetadata* _internal_mutable_boolean();
  public:
  void unsafe_arena_set_allocated_boolean(
      ::Property::BooleanPropertyMetadata* boolean);
  ::Property::BooleanPropertyMetadata* unsafe_arena_release_boolean();

  // .Property.JsonPropertyMetadata json = 9;
  bool has_json() const;
  private:
  bool _internal_has_json() const;
  public:
  void clear_json();
  const ::Property::JsonPropertyMetadata& json() const;
  PROTOBUF_NODISCARD ::Property::JsonPropertyMetadata* release_json();
  ::Property::JsonPropertyMetadata* mutable_json();
  void set_allocated_json(::Property::JsonPropertyMetadata* json);
  private:
  const ::Property::JsonPropertyMetadata& _internal_json() const;
  ::Property::JsonPropertyMetadata* _internal_mutable_json();
  public:
  void unsafe_arena_set_allocated_json(
      ::Property::JsonPropertyMetadata* json);
  ::Property::JsonPropertyMetadata* unsafe_arena_release_json();

  // .Property.LinkPropertyMetadata link = 10;
  bool has_link() const;
  private:
  bool _internal_has_link() const;
  public:
  void clear_link();
  const ::Property::LinkPropertyMetadata& link() const;
  PROTOBUF_NODISCARD ::Property::LinkPropertyMetadata* release_link();
  ::Property::LinkPropertyMetadata* mutable_link();
  void set_allocated_link(::Property::LinkPropertyMetadata* link);
  private:
  const ::Property::LinkPropertyMetadata& _internal_link() const;
  ::Property::LinkPropertyMetadata* _internal_mutable_link();
  public:
  void unsafe_arena_set_allocated_link(
      ::Property::LinkPropertyMetadata* link);
  ::Property::LinkPropertyMetadata* unsafe_arena_release_link();

  void clear_MetaType();
  MetaTypeCase MetaType_case() const;
  // @@protoc_insertion_point(class_scope:Session.PropertyMetaById)
 private:
  class _Internal;
  void set_has_scalar();
  void set_has_string();
  void set_has_vector();
  void set_has_color();
  void set_has_transform();
  void set_has_boolean();
  void set_has_json();
  void set_has_link();

  inline bool has_MetaType() const;
  inline void clear_has_MetaType();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metaid_;
    union MetaTypeUnion {
      constexpr MetaTypeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::Property::ScalarPropertyMetadata* scalar_;
      ::Property::StringPropertyMetadata* string_;
      ::Property::VectorPropertyMetadata* vector_;
      ::Property::ColorPropertyMetadata* color_;
      ::Property::TransformPropertyMetadata* transform_;
      ::Property::BooleanPropertyMetadata* boolean_;
      ::Property::JsonPropertyMetadata* json_;
      ::Property::LinkPropertyMetadata* link_;
    } MetaType_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_usertouser_2eproto;
};
// -------------------------------------------------------------------

class PropertyInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Session.PropertyInfo) */ {
 public:
  inline PropertyInfo() : PropertyInfo(nullptr) {}
  ~PropertyInfo() override;
  explicit PROTOBUF_CONSTEXPR PropertyInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PropertyInfo(const PropertyInfo& from);
  PropertyInfo(PropertyInfo&& from) noexcept
    : PropertyInfo() {
    *this = ::std::move(from);
  }

  inline PropertyInfo& operator=(const PropertyInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PropertyInfo& operator=(PropertyInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PropertyInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PropertyInfo* internal_default_instance() {
    return reinterpret_cast<const PropertyInfo*>(
               &_PropertyInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PropertyInfo& a, PropertyInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PropertyInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PropertyInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PropertyInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PropertyInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PropertyInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PropertyInfo& from) {
    PropertyInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PropertyInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Session.PropertyInfo";
  }
  protected:
  explicit PropertyInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kMetaIdFieldNumber = 3,
    kValueFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional string metaId = 3;
  bool has_metaid() const;
  private:
  bool _internal_has_metaid() const;
  public:
  void clear_metaid();
  const std::string& metaid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_metaid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_metaid();
  PROTOBUF_NODISCARD std::string* release_metaid();
  void set_allocated_metaid(std::string* metaid);
  private:
  const std::string& _internal_metaid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metaid(const std::string& value);
  std::string* _internal_mutable_metaid();
  public:

  // optional .Property.AnyPropertyValue value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::Property::AnyPropertyValue& value() const;
  PROTOBUF_NODISCARD ::Property::AnyPropertyValue* release_value();
  ::Property::AnyPropertyValue* mutable_value();
  void set_allocated_value(::Property::AnyPropertyValue* value);
  private:
  const ::Property::AnyPropertyValue& _internal_value() const;
  ::Property::AnyPropertyValue* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::Property::AnyPropertyValue* value);
  ::Property::AnyPropertyValue* unsafe_arena_release_value();

  // @@protoc_insertion_point(class_scope:Session.PropertyInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metaid_;
    ::Property::AnyPropertyValue* value_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_usertouser_2eproto;
};
// -------------------------------------------------------------------

class PropertyInfoNode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Session.PropertyInfoNode) */ {
 public:
  inline PropertyInfoNode() : PropertyInfoNode(nullptr) {}
  ~PropertyInfoNode() override;
  explicit PROTOBUF_CONSTEXPR PropertyInfoNode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PropertyInfoNode(const PropertyInfoNode& from);
  PropertyInfoNode(PropertyInfoNode&& from) noexcept
    : PropertyInfoNode() {
    *this = ::std::move(from);
  }

  inline PropertyInfoNode& operator=(const PropertyInfoNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline PropertyInfoNode& operator=(PropertyInfoNode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PropertyInfoNode& default_instance() {
    return *internal_default_instance();
  }
  static inline const PropertyInfoNode* internal_default_instance() {
    return reinterpret_cast<const PropertyInfoNode*>(
               &_PropertyInfoNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(PropertyInfoNode& a, PropertyInfoNode& b) {
    a.Swap(&b);
  }
  inline void Swap(PropertyInfoNode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PropertyInfoNode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PropertyInfoNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PropertyInfoNode>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PropertyInfoNode& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PropertyInfoNode& from) {
    PropertyInfoNode::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PropertyInfoNode* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Session.PropertyInfoNode";
  }
  protected:
  explicit PropertyInfoNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertiesFieldNumber = 2,
    kChildrenFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // repeated .Session.PropertyInfo properties = 2;
  int properties_size() const;
  private:
  int _internal_properties_size() const;
  public:
  void clear_properties();
  ::Session::PropertyInfo* mutable_properties(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Session::PropertyInfo >*
      mutable_properties();
  private:
  const ::Session::PropertyInfo& _internal_properties(int index) const;
  ::Session::PropertyInfo* _internal_add_properties();
  public:
  const ::Session::PropertyInfo& properties(int index) const;
  ::Session::PropertyInfo* add_properties();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Session::PropertyInfo >&
      properties() const;

  // repeated .Session.PropertyInfoNode children = 3;
  int children_size() const;
  private:
  int _internal_children_size() const;
  public:
  void clear_children();
  ::Session::PropertyInfoNode* mutable_children(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Session::PropertyInfoNode >*
      mutable_children();
  private:
  const ::Session::PropertyInfoNode& _internal_children(int index) const;
  ::Session::PropertyInfoNode* _internal_add_children();
  public:
  const ::Session::PropertyInfoNode& children(int index) const;
  ::Session::PropertyInfoNode* add_children();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Session::PropertyInfoNode >&
      children() const;

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:Session.PropertyInfoNode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Session::PropertyInfo > properties_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Session::PropertyInfoNode > children_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_usertouser_2eproto;
};
// -------------------------------------------------------------------

class ResponseLivePropertyInfo_V1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Session.ResponseLivePropertyInfo.V1) */ {
 public:
  inline ResponseLivePropertyInfo_V1() : ResponseLivePropertyInfo_V1(nullptr) {}
  ~ResponseLivePropertyInfo_V1() override;
  explicit PROTOBUF_CONSTEXPR ResponseLivePropertyInfo_V1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponseLivePropertyInfo_V1(const ResponseLivePropertyInfo_V1& from);
  ResponseLivePropertyInfo_V1(ResponseLivePropertyInfo_V1&& from) noexcept
    : ResponseLivePropertyInfo_V1() {
    *this = ::std::move(from);
  }

  inline ResponseLivePropertyInfo_V1& operator=(const ResponseLivePropertyInfo_V1& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseLivePropertyInfo_V1& operator=(ResponseLivePropertyInfo_V1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseLivePropertyInfo_V1& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseLivePropertyInfo_V1* internal_default_instance() {
    return reinterpret_cast<const ResponseLivePropertyInfo_V1*>(
               &_ResponseLivePropertyInfo_V1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ResponseLivePropertyInfo_V1& a, ResponseLivePropertyInfo_V1& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseLivePropertyInfo_V1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseLivePropertyInfo_V1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseLivePropertyInfo_V1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResponseLivePropertyInfo_V1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResponseLivePropertyInfo_V1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ResponseLivePropertyInfo_V1& from) {
    ResponseLivePropertyInfo_V1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseLivePropertyInfo_V1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Session.ResponseLivePropertyInfo.V1";
  }
  protected:
  explicit ResponseLivePropertyInfo_V1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetasFieldNumber = 7,
    kRequestIdFieldNumber = 5,
    kRootFieldNumber = 6,
  };
  // repeated .Session.PropertyMetaById metas = 7;
  int metas_size() const;
  private:
  int _internal_metas_size() const;
  public:
  void clear_metas();
  ::Session::PropertyMetaById* mutable_metas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Session::PropertyMetaById >*
      mutable_metas();
  private:
  const ::Session::PropertyMetaById& _internal_metas(int index) const;
  ::Session::PropertyMetaById* _internal_add_metas();
  public:
  const ::Session::PropertyMetaById& metas(int index) const;
  ::Session::PropertyMetaById* add_metas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Session::PropertyMetaById >&
      metas() const;

  // optional string requestId = 5;
  bool has_requestid() const;
  private:
  bool _internal_has_requestid() const;
  public:
  void clear_requestid();
  const std::string& requestid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_requestid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_requestid();
  PROTOBUF_NODISCARD std::string* release_requestid();
  void set_allocated_requestid(std::string* requestid);
  private:
  const std::string& _internal_requestid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_requestid(const std::string& value);
  std::string* _internal_mutable_requestid();
  public:

  // .Session.PropertyInfoNode root = 6;
  bool has_root() const;
  private:
  bool _internal_has_root() const;
  public:
  void clear_root();
  const ::Session::PropertyInfoNode& root() const;
  PROTOBUF_NODISCARD ::Session::PropertyInfoNode* release_root();
  ::Session::PropertyInfoNode* mutable_root();
  void set_allocated_root(::Session::PropertyInfoNode* root);
  private:
  const ::Session::PropertyInfoNode& _internal_root() const;
  ::Session::PropertyInfoNode* _internal_mutable_root();
  public:
  void unsafe_arena_set_allocated_root(
      ::Session::PropertyInfoNode* root);
  ::Session::PropertyInfoNode* unsafe_arena_release_root();

  // @@protoc_insertion_point(class_scope:Session.ResponseLivePropertyInfo.V1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Session::PropertyMetaById > metas_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestid_;
    ::Session::PropertyInfoNode* root_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_usertouser_2eproto;
};
// -------------------------------------------------------------------

class ResponseLivePropertyInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Session.ResponseLivePropertyInfo) */ {
 public:
  inline ResponseLivePropertyInfo() : ResponseLivePropertyInfo(nullptr) {}
  ~ResponseLivePropertyInfo() override;
  explicit PROTOBUF_CONSTEXPR ResponseLivePropertyInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponseLivePropertyInfo(const ResponseLivePropertyInfo& from);
  ResponseLivePropertyInfo(ResponseLivePropertyInfo&& from) noexcept
    : ResponseLivePropertyInfo() {
    *this = ::std::move(from);
  }

  inline ResponseLivePropertyInfo& operator=(const ResponseLivePropertyInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseLivePropertyInfo& operator=(ResponseLivePropertyInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseLivePropertyInfo& default_instance() {
    return *internal_default_instance();
  }
  enum VCase {
    kV1 = 1,
    V_NOT_SET = 0,
  };

  static inline const ResponseLivePropertyInfo* internal_default_instance() {
    return reinterpret_cast<const ResponseLivePropertyInfo*>(
               &_ResponseLivePropertyInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ResponseLivePropertyInfo& a, ResponseLivePropertyInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseLivePropertyInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseLivePropertyInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseLivePropertyInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResponseLivePropertyInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResponseLivePropertyInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ResponseLivePropertyInfo& from) {
    ResponseLivePropertyInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseLivePropertyInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Session.ResponseLivePropertyInfo";
  }
  protected:
  explicit ResponseLivePropertyInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ResponseLivePropertyInfo_V1 V1;

  // accessors -------------------------------------------------------

  enum : int {
    kV1FieldNumber = 1,
  };
  // .Session.ResponseLivePropertyInfo.V1 v1 = 1;
  bool has_v1() const;
  private:
  bool _internal_has_v1() const;
  public:
  void clear_v1();
  const ::Session::ResponseLivePropertyInfo_V1& v1() const;
  PROTOBUF_NODISCARD ::Session::ResponseLivePropertyInfo_V1* release_v1();
  ::Session::ResponseLivePropertyInfo_V1* mutable_v1();
  void set_allocated_v1(::Session::ResponseLivePropertyInfo_V1* v1);
  private:
  const ::Session::ResponseLivePropertyInfo_V1& _internal_v1() const;
  ::Session::ResponseLivePropertyInfo_V1* _internal_mutable_v1();
  public:
  void unsafe_arena_set_allocated_v1(
      ::Session::ResponseLivePropertyInfo_V1* v1);
  ::Session::ResponseLivePropertyInfo_V1* unsafe_arena_release_v1();

  void clear_V();
  VCase V_case() const;
  // @@protoc_insertion_point(class_scope:Session.ResponseLivePropertyInfo)
 private:
  class _Internal;
  void set_has_v1();

  inline bool has_V() const;
  inline void clear_has_V();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union VUnion {
      constexpr VUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::Session::ResponseLivePropertyInfo_V1* v1_;
    } V_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_usertouser_2eproto;
};
// -------------------------------------------------------------------

class UserToUserMessage_V1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Session.UserToUserMessage.V1) */ {
 public:
  inline UserToUserMessage_V1() : UserToUserMessage_V1(nullptr) {}
  ~UserToUserMessage_V1() override;
  explicit PROTOBUF_CONSTEXPR UserToUserMessage_V1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserToUserMessage_V1(const UserToUserMessage_V1& from);
  UserToUserMessage_V1(UserToUserMessage_V1&& from) noexcept
    : UserToUserMessage_V1() {
    *this = ::std::move(from);
  }

  inline UserToUserMessage_V1& operator=(const UserToUserMessage_V1& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserToUserMessage_V1& operator=(UserToUserMessage_V1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserToUserMessage_V1& default_instance() {
    return *internal_default_instance();
  }
  enum MessageCase {
    kBlindMessage = 2,
    kRequestLivePropertyInfo = 3,
    kResponseLivePropertyInfo = 4,
    kRequestLivePropertyCapabilities = 5,
    kResponseLivePropertyCapabilities = 6,
    MESSAGE_NOT_SET = 0,
  };

  static inline const UserToUserMessage_V1* internal_default_instance() {
    return reinterpret_cast<const UserToUserMessage_V1*>(
               &_UserToUserMessage_V1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(UserToUserMessage_V1& a, UserToUserMessage_V1& b) {
    a.Swap(&b);
  }
  inline void Swap(UserToUserMessage_V1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserToUserMessage_V1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserToUserMessage_V1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserToUserMessage_V1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserToUserMessage_V1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserToUserMessage_V1& from) {
    UserToUserMessage_V1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserToUserMessage_V1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Session.UserToUserMessage.V1";
  }
  protected:
  explicit UserToUserMessage_V1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlindMessageFieldNumber = 2,
    kRequestLivePropertyInfoFieldNumber = 3,
    kResponseLivePropertyInfoFieldNumber = 4,
    kRequestLivePropertyCapabilitiesFieldNumber = 5,
    kResponseLivePropertyCapabilitiesFieldNumber = 6,
  };
  // bytes blindMessage = 2;
  bool has_blindmessage() const;
  private:
  bool _internal_has_blindmessage() const;
  public:
  void clear_blindmessage();
  const std::string& blindmessage() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_blindmessage(ArgT0&& arg0, ArgT... args);
  std::string* mutable_blindmessage();
  PROTOBUF_NODISCARD std::string* release_blindmessage();
  void set_allocated_blindmessage(std::string* blindmessage);
  private:
  const std::string& _internal_blindmessage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_blindmessage(const std::string& value);
  std::string* _internal_mutable_blindmessage();
  public:

  // .Session.RequestLivePropertyInfo requestLivePropertyInfo = 3;
  bool has_requestlivepropertyinfo() const;
  private:
  bool _internal_has_requestlivepropertyinfo() const;
  public:
  void clear_requestlivepropertyinfo();
  const ::Session::RequestLivePropertyInfo& requestlivepropertyinfo() const;
  PROTOBUF_NODISCARD ::Session::RequestLivePropertyInfo* release_requestlivepropertyinfo();
  ::Session::RequestLivePropertyInfo* mutable_requestlivepropertyinfo();
  void set_allocated_requestlivepropertyinfo(::Session::RequestLivePropertyInfo* requestlivepropertyinfo);
  private:
  const ::Session::RequestLivePropertyInfo& _internal_requestlivepropertyinfo() const;
  ::Session::RequestLivePropertyInfo* _internal_mutable_requestlivepropertyinfo();
  public:
  void unsafe_arena_set_allocated_requestlivepropertyinfo(
      ::Session::RequestLivePropertyInfo* requestlivepropertyinfo);
  ::Session::RequestLivePropertyInfo* unsafe_arena_release_requestlivepropertyinfo();

  // .Session.ResponseLivePropertyInfo responseLivePropertyInfo = 4;
  bool has_responselivepropertyinfo() const;
  private:
  bool _internal_has_responselivepropertyinfo() const;
  public:
  void clear_responselivepropertyinfo();
  const ::Session::ResponseLivePropertyInfo& responselivepropertyinfo() const;
  PROTOBUF_NODISCARD ::Session::ResponseLivePropertyInfo* release_responselivepropertyinfo();
  ::Session::ResponseLivePropertyInfo* mutable_responselivepropertyinfo();
  void set_allocated_responselivepropertyinfo(::Session::ResponseLivePropertyInfo* responselivepropertyinfo);
  private:
  const ::Session::ResponseLivePropertyInfo& _internal_responselivepropertyinfo() const;
  ::Session::ResponseLivePropertyInfo* _internal_mutable_responselivepropertyinfo();
  public:
  void unsafe_arena_set_allocated_responselivepropertyinfo(
      ::Session::ResponseLivePropertyInfo* responselivepropertyinfo);
  ::Session::ResponseLivePropertyInfo* unsafe_arena_release_responselivepropertyinfo();

  // .Session.RequestLivePropertyCapabilities requestLivePropertyCapabilities = 5;
  bool has_requestlivepropertycapabilities() const;
  private:
  bool _internal_has_requestlivepropertycapabilities() const;
  public:
  void clear_requestlivepropertycapabilities();
  const ::Session::RequestLivePropertyCapabilities& requestlivepropertycapabilities() const;
  PROTOBUF_NODISCARD ::Session::RequestLivePropertyCapabilities* release_requestlivepropertycapabilities();
  ::Session::RequestLivePropertyCapabilities* mutable_requestlivepropertycapabilities();
  void set_allocated_requestlivepropertycapabilities(::Session::RequestLivePropertyCapabilities* requestlivepropertycapabilities);
  private:
  const ::Session::RequestLivePropertyCapabilities& _internal_requestlivepropertycapabilities() const;
  ::Session::RequestLivePropertyCapabilities* _internal_mutable_requestlivepropertycapabilities();
  public:
  void unsafe_arena_set_allocated_requestlivepropertycapabilities(
      ::Session::RequestLivePropertyCapabilities* requestlivepropertycapabilities);
  ::Session::RequestLivePropertyCapabilities* unsafe_arena_release_requestlivepropertycapabilities();

  // .Session.ResponseLivePropertyCapabilities ResponseLivePropertyCapabilities = 6;
  bool has_responselivepropertycapabilities() const;
  private:
  bool _internal_has_responselivepropertycapabilities() const;
  public:
  void clear_responselivepropertycapabilities();
  const ::Session::ResponseLivePropertyCapabilities& responselivepropertycapabilities() const;
  PROTOBUF_NODISCARD ::Session::ResponseLivePropertyCapabilities* release_responselivepropertycapabilities();
  ::Session::ResponseLivePropertyCapabilities* mutable_responselivepropertycapabilities();
  void set_allocated_responselivepropertycapabilities(::Session::ResponseLivePropertyCapabilities* responselivepropertycapabilities);
  private:
  const ::Session::ResponseLivePropertyCapabilities& _internal_responselivepropertycapabilities() const;
  ::Session::ResponseLivePropertyCapabilities* _internal_mutable_responselivepropertycapabilities();
  public:
  void unsafe_arena_set_allocated_responselivepropertycapabilities(
      ::Session::ResponseLivePropertyCapabilities* responselivepropertycapabilities);
  ::Session::ResponseLivePropertyCapabilities* unsafe_arena_release_responselivepropertycapabilities();

  void clear_Message();
  MessageCase Message_case() const;
  // @@protoc_insertion_point(class_scope:Session.UserToUserMessage.V1)
 private:
  class _Internal;
  void set_has_blindmessage();
  void set_has_requestlivepropertyinfo();
  void set_has_responselivepropertyinfo();
  void set_has_requestlivepropertycapabilities();
  void set_has_responselivepropertycapabilities();

  inline bool has_Message() const;
  inline void clear_has_Message();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union MessageUnion {
      constexpr MessageUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr blindmessage_;
      ::Session::RequestLivePropertyInfo* requestlivepropertyinfo_;
      ::Session::ResponseLivePropertyInfo* responselivepropertyinfo_;
      ::Session::RequestLivePropertyCapabilities* requestlivepropertycapabilities_;
      ::Session::ResponseLivePropertyCapabilities* responselivepropertycapabilities_;
    } Message_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_usertouser_2eproto;
};
// -------------------------------------------------------------------

class UserToUserMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Session.UserToUserMessage) */ {
 public:
  inline UserToUserMessage() : UserToUserMessage(nullptr) {}
  ~UserToUserMessage() override;
  explicit PROTOBUF_CONSTEXPR UserToUserMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserToUserMessage(const UserToUserMessage& from);
  UserToUserMessage(UserToUserMessage&& from) noexcept
    : UserToUserMessage() {
    *this = ::std::move(from);
  }

  inline UserToUserMessage& operator=(const UserToUserMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserToUserMessage& operator=(UserToUserMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserToUserMessage& default_instance() {
    return *internal_default_instance();
  }
  enum VCase {
    kV1 = 1,
    V_NOT_SET = 0,
  };

  static inline const UserToUserMessage* internal_default_instance() {
    return reinterpret_cast<const UserToUserMessage*>(
               &_UserToUserMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(UserToUserMessage& a, UserToUserMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(UserToUserMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserToUserMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserToUserMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserToUserMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserToUserMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserToUserMessage& from) {
    UserToUserMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserToUserMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Session.UserToUserMessage";
  }
  protected:
  explicit UserToUserMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef UserToUserMessage_V1 V1;

  // accessors -------------------------------------------------------

  enum : int {
    kV1FieldNumber = 1,
  };
  // .Session.UserToUserMessage.V1 v1 = 1;
  bool has_v1() const;
  private:
  bool _internal_has_v1() const;
  public:
  void clear_v1();
  const ::Session::UserToUserMessage_V1& v1() const;
  PROTOBUF_NODISCARD ::Session::UserToUserMessage_V1* release_v1();
  ::Session::UserToUserMessage_V1* mutable_v1();
  void set_allocated_v1(::Session::UserToUserMessage_V1* v1);
  private:
  const ::Session::UserToUserMessage_V1& _internal_v1() const;
  ::Session::UserToUserMessage_V1* _internal_mutable_v1();
  public:
  void unsafe_arena_set_allocated_v1(
      ::Session::UserToUserMessage_V1* v1);
  ::Session::UserToUserMessage_V1* unsafe_arena_release_v1();

  void clear_V();
  VCase V_case() const;
  // @@protoc_insertion_point(class_scope:Session.UserToUserMessage)
 private:
  class _Internal;
  void set_has_v1();

  inline bool has_V() const;
  inline void clear_has_V();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union VUnion {
      constexpr VUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::Session::UserToUserMessage_V1* v1_;
    } V_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_usertouser_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RequestLivePropertyCapabilities_V1

// -------------------------------------------------------------------

// RequestLivePropertyCapabilities

// .Session.RequestLivePropertyCapabilities.V1 v1 = 1;
inline bool RequestLivePropertyCapabilities::_internal_has_v1() const {
  return V_case() == kV1;
}
inline bool RequestLivePropertyCapabilities::has_v1() const {
  return _internal_has_v1();
}
inline void RequestLivePropertyCapabilities::set_has_v1() {
  _impl_._oneof_case_[0] = kV1;
}
inline void RequestLivePropertyCapabilities::clear_v1() {
  if (_internal_has_v1()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.V_.v1_;
    }
    clear_has_V();
  }
}
inline ::Session::RequestLivePropertyCapabilities_V1* RequestLivePropertyCapabilities::release_v1() {
  // @@protoc_insertion_point(field_release:Session.RequestLivePropertyCapabilities.v1)
  if (_internal_has_v1()) {
    clear_has_V();
    ::Session::RequestLivePropertyCapabilities_V1* temp = _impl_.V_.v1_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.V_.v1_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Session::RequestLivePropertyCapabilities_V1& RequestLivePropertyCapabilities::_internal_v1() const {
  return _internal_has_v1()
      ? *_impl_.V_.v1_
      : reinterpret_cast< ::Session::RequestLivePropertyCapabilities_V1&>(::Session::_RequestLivePropertyCapabilities_V1_default_instance_);
}
inline const ::Session::RequestLivePropertyCapabilities_V1& RequestLivePropertyCapabilities::v1() const {
  // @@protoc_insertion_point(field_get:Session.RequestLivePropertyCapabilities.v1)
  return _internal_v1();
}
inline ::Session::RequestLivePropertyCapabilities_V1* RequestLivePropertyCapabilities::unsafe_arena_release_v1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Session.RequestLivePropertyCapabilities.v1)
  if (_internal_has_v1()) {
    clear_has_V();
    ::Session::RequestLivePropertyCapabilities_V1* temp = _impl_.V_.v1_;
    _impl_.V_.v1_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RequestLivePropertyCapabilities::unsafe_arena_set_allocated_v1(::Session::RequestLivePropertyCapabilities_V1* v1) {
  clear_V();
  if (v1) {
    set_has_v1();
    _impl_.V_.v1_ = v1;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Session.RequestLivePropertyCapabilities.v1)
}
inline ::Session::RequestLivePropertyCapabilities_V1* RequestLivePropertyCapabilities::_internal_mutable_v1() {
  if (!_internal_has_v1()) {
    clear_V();
    set_has_v1();
    _impl_.V_.v1_ = CreateMaybeMessage< ::Session::RequestLivePropertyCapabilities_V1 >(GetArenaForAllocation());
  }
  return _impl_.V_.v1_;
}
inline ::Session::RequestLivePropertyCapabilities_V1* RequestLivePropertyCapabilities::mutable_v1() {
  ::Session::RequestLivePropertyCapabilities_V1* _msg = _internal_mutable_v1();
  // @@protoc_insertion_point(field_mutable:Session.RequestLivePropertyCapabilities.v1)
  return _msg;
}

inline bool RequestLivePropertyCapabilities::has_V() const {
  return V_case() != V_NOT_SET;
}
inline void RequestLivePropertyCapabilities::clear_has_V() {
  _impl_._oneof_case_[0] = V_NOT_SET;
}
inline RequestLivePropertyCapabilities::VCase RequestLivePropertyCapabilities::V_case() const {
  return RequestLivePropertyCapabilities::VCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ResponseLivePropertyCapabilities_V1

// .Session.ResponseLivePropertyCapabilities.V1.LivePropertyCapabilityEnum capability = 1;
inline void ResponseLivePropertyCapabilities_V1::clear_capability() {
  _impl_.capability_ = 0;
}
inline ::Session::ResponseLivePropertyCapabilities_V1_LivePropertyCapabilityEnum ResponseLivePropertyCapabilities_V1::_internal_capability() const {
  return static_cast< ::Session::ResponseLivePropertyCapabilities_V1_LivePropertyCapabilityEnum >(_impl_.capability_);
}
inline ::Session::ResponseLivePropertyCapabilities_V1_LivePropertyCapabilityEnum ResponseLivePropertyCapabilities_V1::capability() const {
  // @@protoc_insertion_point(field_get:Session.ResponseLivePropertyCapabilities.V1.capability)
  return _internal_capability();
}
inline void ResponseLivePropertyCapabilities_V1::_internal_set_capability(::Session::ResponseLivePropertyCapabilities_V1_LivePropertyCapabilityEnum value) {
  
  _impl_.capability_ = value;
}
inline void ResponseLivePropertyCapabilities_V1::set_capability(::Session::ResponseLivePropertyCapabilities_V1_LivePropertyCapabilityEnum value) {
  _internal_set_capability(value);
  // @@protoc_insertion_point(field_set:Session.ResponseLivePropertyCapabilities.V1.capability)
}

// -------------------------------------------------------------------

// ResponseLivePropertyCapabilities

// .Session.ResponseLivePropertyCapabilities.V1 v1 = 1;
inline bool ResponseLivePropertyCapabilities::_internal_has_v1() const {
  return V_case() == kV1;
}
inline bool ResponseLivePropertyCapabilities::has_v1() const {
  return _internal_has_v1();
}
inline void ResponseLivePropertyCapabilities::set_has_v1() {
  _impl_._oneof_case_[0] = kV1;
}
inline void ResponseLivePropertyCapabilities::clear_v1() {
  if (_internal_has_v1()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.V_.v1_;
    }
    clear_has_V();
  }
}
inline ::Session::ResponseLivePropertyCapabilities_V1* ResponseLivePropertyCapabilities::release_v1() {
  // @@protoc_insertion_point(field_release:Session.ResponseLivePropertyCapabilities.v1)
  if (_internal_has_v1()) {
    clear_has_V();
    ::Session::ResponseLivePropertyCapabilities_V1* temp = _impl_.V_.v1_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.V_.v1_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Session::ResponseLivePropertyCapabilities_V1& ResponseLivePropertyCapabilities::_internal_v1() const {
  return _internal_has_v1()
      ? *_impl_.V_.v1_
      : reinterpret_cast< ::Session::ResponseLivePropertyCapabilities_V1&>(::Session::_ResponseLivePropertyCapabilities_V1_default_instance_);
}
inline const ::Session::ResponseLivePropertyCapabilities_V1& ResponseLivePropertyCapabilities::v1() const {
  // @@protoc_insertion_point(field_get:Session.ResponseLivePropertyCapabilities.v1)
  return _internal_v1();
}
inline ::Session::ResponseLivePropertyCapabilities_V1* ResponseLivePropertyCapabilities::unsafe_arena_release_v1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Session.ResponseLivePropertyCapabilities.v1)
  if (_internal_has_v1()) {
    clear_has_V();
    ::Session::ResponseLivePropertyCapabilities_V1* temp = _impl_.V_.v1_;
    _impl_.V_.v1_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ResponseLivePropertyCapabilities::unsafe_arena_set_allocated_v1(::Session::ResponseLivePropertyCapabilities_V1* v1) {
  clear_V();
  if (v1) {
    set_has_v1();
    _impl_.V_.v1_ = v1;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Session.ResponseLivePropertyCapabilities.v1)
}
inline ::Session::ResponseLivePropertyCapabilities_V1* ResponseLivePropertyCapabilities::_internal_mutable_v1() {
  if (!_internal_has_v1()) {
    clear_V();
    set_has_v1();
    _impl_.V_.v1_ = CreateMaybeMessage< ::Session::ResponseLivePropertyCapabilities_V1 >(GetArenaForAllocation());
  }
  return _impl_.V_.v1_;
}
inline ::Session::ResponseLivePropertyCapabilities_V1* ResponseLivePropertyCapabilities::mutable_v1() {
  ::Session::ResponseLivePropertyCapabilities_V1* _msg = _internal_mutable_v1();
  // @@protoc_insertion_point(field_mutable:Session.ResponseLivePropertyCapabilities.v1)
  return _msg;
}

inline bool ResponseLivePropertyCapabilities::has_V() const {
  return V_case() != V_NOT_SET;
}
inline void ResponseLivePropertyCapabilities::clear_has_V() {
  _impl_._oneof_case_[0] = V_NOT_SET;
}
inline ResponseLivePropertyCapabilities::VCase ResponseLivePropertyCapabilities::V_case() const {
  return ResponseLivePropertyCapabilities::VCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// RequestLivePropertyInfo_V1

// repeated string includeNodes = 1;
inline int RequestLivePropertyInfo_V1::_internal_includenodes_size() const {
  return _impl_.includenodes_.size();
}
inline int RequestLivePropertyInfo_V1::includenodes_size() const {
  return _internal_includenodes_size();
}
inline void RequestLivePropertyInfo_V1::clear_includenodes() {
  _impl_.includenodes_.Clear();
}
inline std::string* RequestLivePropertyInfo_V1::add_includenodes() {
  std::string* _s = _internal_add_includenodes();
  // @@protoc_insertion_point(field_add_mutable:Session.RequestLivePropertyInfo.V1.includeNodes)
  return _s;
}
inline const std::string& RequestLivePropertyInfo_V1::_internal_includenodes(int index) const {
  return _impl_.includenodes_.Get(index);
}
inline const std::string& RequestLivePropertyInfo_V1::includenodes(int index) const {
  // @@protoc_insertion_point(field_get:Session.RequestLivePropertyInfo.V1.includeNodes)
  return _internal_includenodes(index);
}
inline std::string* RequestLivePropertyInfo_V1::mutable_includenodes(int index) {
  // @@protoc_insertion_point(field_mutable:Session.RequestLivePropertyInfo.V1.includeNodes)
  return _impl_.includenodes_.Mutable(index);
}
inline void RequestLivePropertyInfo_V1::set_includenodes(int index, const std::string& value) {
  _impl_.includenodes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Session.RequestLivePropertyInfo.V1.includeNodes)
}
inline void RequestLivePropertyInfo_V1::set_includenodes(int index, std::string&& value) {
  _impl_.includenodes_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Session.RequestLivePropertyInfo.V1.includeNodes)
}
inline void RequestLivePropertyInfo_V1::set_includenodes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.includenodes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Session.RequestLivePropertyInfo.V1.includeNodes)
}
inline void RequestLivePropertyInfo_V1::set_includenodes(int index, const char* value, size_t size) {
  _impl_.includenodes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Session.RequestLivePropertyInfo.V1.includeNodes)
}
inline std::string* RequestLivePropertyInfo_V1::_internal_add_includenodes() {
  return _impl_.includenodes_.Add();
}
inline void RequestLivePropertyInfo_V1::add_includenodes(const std::string& value) {
  _impl_.includenodes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Session.RequestLivePropertyInfo.V1.includeNodes)
}
inline void RequestLivePropertyInfo_V1::add_includenodes(std::string&& value) {
  _impl_.includenodes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Session.RequestLivePropertyInfo.V1.includeNodes)
}
inline void RequestLivePropertyInfo_V1::add_includenodes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.includenodes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Session.RequestLivePropertyInfo.V1.includeNodes)
}
inline void RequestLivePropertyInfo_V1::add_includenodes(const char* value, size_t size) {
  _impl_.includenodes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Session.RequestLivePropertyInfo.V1.includeNodes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RequestLivePropertyInfo_V1::includenodes() const {
  // @@protoc_insertion_point(field_list:Session.RequestLivePropertyInfo.V1.includeNodes)
  return _impl_.includenodes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RequestLivePropertyInfo_V1::mutable_includenodes() {
  // @@protoc_insertion_point(field_mutable_list:Session.RequestLivePropertyInfo.V1.includeNodes)
  return &_impl_.includenodes_;
}

// repeated string excludeNodes = 2;
inline int RequestLivePropertyInfo_V1::_internal_excludenodes_size() const {
  return _impl_.excludenodes_.size();
}
inline int RequestLivePropertyInfo_V1::excludenodes_size() const {
  return _internal_excludenodes_size();
}
inline void RequestLivePropertyInfo_V1::clear_excludenodes() {
  _impl_.excludenodes_.Clear();
}
inline std::string* RequestLivePropertyInfo_V1::add_excludenodes() {
  std::string* _s = _internal_add_excludenodes();
  // @@protoc_insertion_point(field_add_mutable:Session.RequestLivePropertyInfo.V1.excludeNodes)
  return _s;
}
inline const std::string& RequestLivePropertyInfo_V1::_internal_excludenodes(int index) const {
  return _impl_.excludenodes_.Get(index);
}
inline const std::string& RequestLivePropertyInfo_V1::excludenodes(int index) const {
  // @@protoc_insertion_point(field_get:Session.RequestLivePropertyInfo.V1.excludeNodes)
  return _internal_excludenodes(index);
}
inline std::string* RequestLivePropertyInfo_V1::mutable_excludenodes(int index) {
  // @@protoc_insertion_point(field_mutable:Session.RequestLivePropertyInfo.V1.excludeNodes)
  return _impl_.excludenodes_.Mutable(index);
}
inline void RequestLivePropertyInfo_V1::set_excludenodes(int index, const std::string& value) {
  _impl_.excludenodes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Session.RequestLivePropertyInfo.V1.excludeNodes)
}
inline void RequestLivePropertyInfo_V1::set_excludenodes(int index, std::string&& value) {
  _impl_.excludenodes_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Session.RequestLivePropertyInfo.V1.excludeNodes)
}
inline void RequestLivePropertyInfo_V1::set_excludenodes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.excludenodes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Session.RequestLivePropertyInfo.V1.excludeNodes)
}
inline void RequestLivePropertyInfo_V1::set_excludenodes(int index, const char* value, size_t size) {
  _impl_.excludenodes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Session.RequestLivePropertyInfo.V1.excludeNodes)
}
inline std::string* RequestLivePropertyInfo_V1::_internal_add_excludenodes() {
  return _impl_.excludenodes_.Add();
}
inline void RequestLivePropertyInfo_V1::add_excludenodes(const std::string& value) {
  _impl_.excludenodes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Session.RequestLivePropertyInfo.V1.excludeNodes)
}
inline void RequestLivePropertyInfo_V1::add_excludenodes(std::string&& value) {
  _impl_.excludenodes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Session.RequestLivePropertyInfo.V1.excludeNodes)
}
inline void RequestLivePropertyInfo_V1::add_excludenodes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.excludenodes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Session.RequestLivePropertyInfo.V1.excludeNodes)
}
inline void RequestLivePropertyInfo_V1::add_excludenodes(const char* value, size_t size) {
  _impl_.excludenodes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Session.RequestLivePropertyInfo.V1.excludeNodes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RequestLivePropertyInfo_V1::excludenodes() const {
  // @@protoc_insertion_point(field_list:Session.RequestLivePropertyInfo.V1.excludeNodes)
  return _impl_.excludenodes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RequestLivePropertyInfo_V1::mutable_excludenodes() {
  // @@protoc_insertion_point(field_mutable_list:Session.RequestLivePropertyInfo.V1.excludeNodes)
  return &_impl_.excludenodes_;
}

// repeated string includeProperties = 6;
inline int RequestLivePropertyInfo_V1::_internal_includeproperties_size() const {
  return _impl_.includeproperties_.size();
}
inline int RequestLivePropertyInfo_V1::includeproperties_size() const {
  return _internal_includeproperties_size();
}
inline void RequestLivePropertyInfo_V1::clear_includeproperties() {
  _impl_.includeproperties_.Clear();
}
inline std::string* RequestLivePropertyInfo_V1::add_includeproperties() {
  std::string* _s = _internal_add_includeproperties();
  // @@protoc_insertion_point(field_add_mutable:Session.RequestLivePropertyInfo.V1.includeProperties)
  return _s;
}
inline const std::string& RequestLivePropertyInfo_V1::_internal_includeproperties(int index) const {
  return _impl_.includeproperties_.Get(index);
}
inline const std::string& RequestLivePropertyInfo_V1::includeproperties(int index) const {
  // @@protoc_insertion_point(field_get:Session.RequestLivePropertyInfo.V1.includeProperties)
  return _internal_includeproperties(index);
}
inline std::string* RequestLivePropertyInfo_V1::mutable_includeproperties(int index) {
  // @@protoc_insertion_point(field_mutable:Session.RequestLivePropertyInfo.V1.includeProperties)
  return _impl_.includeproperties_.Mutable(index);
}
inline void RequestLivePropertyInfo_V1::set_includeproperties(int index, const std::string& value) {
  _impl_.includeproperties_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Session.RequestLivePropertyInfo.V1.includeProperties)
}
inline void RequestLivePropertyInfo_V1::set_includeproperties(int index, std::string&& value) {
  _impl_.includeproperties_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Session.RequestLivePropertyInfo.V1.includeProperties)
}
inline void RequestLivePropertyInfo_V1::set_includeproperties(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.includeproperties_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Session.RequestLivePropertyInfo.V1.includeProperties)
}
inline void RequestLivePropertyInfo_V1::set_includeproperties(int index, const char* value, size_t size) {
  _impl_.includeproperties_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Session.RequestLivePropertyInfo.V1.includeProperties)
}
inline std::string* RequestLivePropertyInfo_V1::_internal_add_includeproperties() {
  return _impl_.includeproperties_.Add();
}
inline void RequestLivePropertyInfo_V1::add_includeproperties(const std::string& value) {
  _impl_.includeproperties_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Session.RequestLivePropertyInfo.V1.includeProperties)
}
inline void RequestLivePropertyInfo_V1::add_includeproperties(std::string&& value) {
  _impl_.includeproperties_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Session.RequestLivePropertyInfo.V1.includeProperties)
}
inline void RequestLivePropertyInfo_V1::add_includeproperties(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.includeproperties_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Session.RequestLivePropertyInfo.V1.includeProperties)
}
inline void RequestLivePropertyInfo_V1::add_includeproperties(const char* value, size_t size) {
  _impl_.includeproperties_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Session.RequestLivePropertyInfo.V1.includeProperties)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RequestLivePropertyInfo_V1::includeproperties() const {
  // @@protoc_insertion_point(field_list:Session.RequestLivePropertyInfo.V1.includeProperties)
  return _impl_.includeproperties_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RequestLivePropertyInfo_V1::mutable_includeproperties() {
  // @@protoc_insertion_point(field_mutable_list:Session.RequestLivePropertyInfo.V1.includeProperties)
  return &_impl_.includeproperties_;
}

// string requestId = 4;
inline void RequestLivePropertyInfo_V1::clear_requestid() {
  _impl_.requestid_.ClearToEmpty();
}
inline const std::string& RequestLivePropertyInfo_V1::requestid() const {
  // @@protoc_insertion_point(field_get:Session.RequestLivePropertyInfo.V1.requestId)
  return _internal_requestid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequestLivePropertyInfo_V1::set_requestid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.requestid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Session.RequestLivePropertyInfo.V1.requestId)
}
inline std::string* RequestLivePropertyInfo_V1::mutable_requestid() {
  std::string* _s = _internal_mutable_requestid();
  // @@protoc_insertion_point(field_mutable:Session.RequestLivePropertyInfo.V1.requestId)
  return _s;
}
inline const std::string& RequestLivePropertyInfo_V1::_internal_requestid() const {
  return _impl_.requestid_.Get();
}
inline void RequestLivePropertyInfo_V1::_internal_set_requestid(const std::string& value) {
  
  _impl_.requestid_.Set(value, GetArenaForAllocation());
}
inline std::string* RequestLivePropertyInfo_V1::_internal_mutable_requestid() {
  
  return _impl_.requestid_.Mutable(GetArenaForAllocation());
}
inline std::string* RequestLivePropertyInfo_V1::release_requestid() {
  // @@protoc_insertion_point(field_release:Session.RequestLivePropertyInfo.V1.requestId)
  return _impl_.requestid_.Release();
}
inline void RequestLivePropertyInfo_V1::set_allocated_requestid(std::string* requestid) {
  if (requestid != nullptr) {
    
  } else {
    
  }
  _impl_.requestid_.SetAllocated(requestid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.requestid_.IsDefault()) {
    _impl_.requestid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Session.RequestLivePropertyInfo.V1.requestId)
}

// optional bool continuousMode = 5;
inline bool RequestLivePropertyInfo_V1::_internal_has_continuousmode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RequestLivePropertyInfo_V1::has_continuousmode() const {
  return _internal_has_continuousmode();
}
inline void RequestLivePropertyInfo_V1::clear_continuousmode() {
  _impl_.continuousmode_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool RequestLivePropertyInfo_V1::_internal_continuousmode() const {
  return _impl_.continuousmode_;
}
inline bool RequestLivePropertyInfo_V1::continuousmode() const {
  // @@protoc_insertion_point(field_get:Session.RequestLivePropertyInfo.V1.continuousMode)
  return _internal_continuousmode();
}
inline void RequestLivePropertyInfo_V1::_internal_set_continuousmode(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.continuousmode_ = value;
}
inline void RequestLivePropertyInfo_V1::set_continuousmode(bool value) {
  _internal_set_continuousmode(value);
  // @@protoc_insertion_point(field_set:Session.RequestLivePropertyInfo.V1.continuousMode)
}

// -------------------------------------------------------------------

// RequestLivePropertyInfo

// .Session.RequestLivePropertyInfo.V1 v1 = 1;
inline bool RequestLivePropertyInfo::_internal_has_v1() const {
  return V_case() == kV1;
}
inline bool RequestLivePropertyInfo::has_v1() const {
  return _internal_has_v1();
}
inline void RequestLivePropertyInfo::set_has_v1() {
  _impl_._oneof_case_[0] = kV1;
}
inline void RequestLivePropertyInfo::clear_v1() {
  if (_internal_has_v1()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.V_.v1_;
    }
    clear_has_V();
  }
}
inline ::Session::RequestLivePropertyInfo_V1* RequestLivePropertyInfo::release_v1() {
  // @@protoc_insertion_point(field_release:Session.RequestLivePropertyInfo.v1)
  if (_internal_has_v1()) {
    clear_has_V();
    ::Session::RequestLivePropertyInfo_V1* temp = _impl_.V_.v1_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.V_.v1_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Session::RequestLivePropertyInfo_V1& RequestLivePropertyInfo::_internal_v1() const {
  return _internal_has_v1()
      ? *_impl_.V_.v1_
      : reinterpret_cast< ::Session::RequestLivePropertyInfo_V1&>(::Session::_RequestLivePropertyInfo_V1_default_instance_);
}
inline const ::Session::RequestLivePropertyInfo_V1& RequestLivePropertyInfo::v1() const {
  // @@protoc_insertion_point(field_get:Session.RequestLivePropertyInfo.v1)
  return _internal_v1();
}
inline ::Session::RequestLivePropertyInfo_V1* RequestLivePropertyInfo::unsafe_arena_release_v1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Session.RequestLivePropertyInfo.v1)
  if (_internal_has_v1()) {
    clear_has_V();
    ::Session::RequestLivePropertyInfo_V1* temp = _impl_.V_.v1_;
    _impl_.V_.v1_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RequestLivePropertyInfo::unsafe_arena_set_allocated_v1(::Session::RequestLivePropertyInfo_V1* v1) {
  clear_V();
  if (v1) {
    set_has_v1();
    _impl_.V_.v1_ = v1;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Session.RequestLivePropertyInfo.v1)
}
inline ::Session::RequestLivePropertyInfo_V1* RequestLivePropertyInfo::_internal_mutable_v1() {
  if (!_internal_has_v1()) {
    clear_V();
    set_has_v1();
    _impl_.V_.v1_ = CreateMaybeMessage< ::Session::RequestLivePropertyInfo_V1 >(GetArenaForAllocation());
  }
  return _impl_.V_.v1_;
}
inline ::Session::RequestLivePropertyInfo_V1* RequestLivePropertyInfo::mutable_v1() {
  ::Session::RequestLivePropertyInfo_V1* _msg = _internal_mutable_v1();
  // @@protoc_insertion_point(field_mutable:Session.RequestLivePropertyInfo.v1)
  return _msg;
}

inline bool RequestLivePropertyInfo::has_V() const {
  return V_case() != V_NOT_SET;
}
inline void RequestLivePropertyInfo::clear_has_V() {
  _impl_._oneof_case_[0] = V_NOT_SET;
}
inline RequestLivePropertyInfo::VCase RequestLivePropertyInfo::V_case() const {
  return RequestLivePropertyInfo::VCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// PropertyMetaById

// string metaId = 1;
inline void PropertyMetaById::clear_metaid() {
  _impl_.metaid_.ClearToEmpty();
}
inline const std::string& PropertyMetaById::metaid() const {
  // @@protoc_insertion_point(field_get:Session.PropertyMetaById.metaId)
  return _internal_metaid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PropertyMetaById::set_metaid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.metaid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Session.PropertyMetaById.metaId)
}
inline std::string* PropertyMetaById::mutable_metaid() {
  std::string* _s = _internal_mutable_metaid();
  // @@protoc_insertion_point(field_mutable:Session.PropertyMetaById.metaId)
  return _s;
}
inline const std::string& PropertyMetaById::_internal_metaid() const {
  return _impl_.metaid_.Get();
}
inline void PropertyMetaById::_internal_set_metaid(const std::string& value) {
  
  _impl_.metaid_.Set(value, GetArenaForAllocation());
}
inline std::string* PropertyMetaById::_internal_mutable_metaid() {
  
  return _impl_.metaid_.Mutable(GetArenaForAllocation());
}
inline std::string* PropertyMetaById::release_metaid() {
  // @@protoc_insertion_point(field_release:Session.PropertyMetaById.metaId)
  return _impl_.metaid_.Release();
}
inline void PropertyMetaById::set_allocated_metaid(std::string* metaid) {
  if (metaid != nullptr) {
    
  } else {
    
  }
  _impl_.metaid_.SetAllocated(metaid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.metaid_.IsDefault()) {
    _impl_.metaid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Session.PropertyMetaById.metaId)
}

// .Property.ScalarPropertyMetadata scalar = 2;
inline bool PropertyMetaById::_internal_has_scalar() const {
  return MetaType_case() == kScalar;
}
inline bool PropertyMetaById::has_scalar() const {
  return _internal_has_scalar();
}
inline void PropertyMetaById::set_has_scalar() {
  _impl_._oneof_case_[0] = kScalar;
}
inline ::Property::ScalarPropertyMetadata* PropertyMetaById::release_scalar() {
  // @@protoc_insertion_point(field_release:Session.PropertyMetaById.scalar)
  if (_internal_has_scalar()) {
    clear_has_MetaType();
    ::Property::ScalarPropertyMetadata* temp = _impl_.MetaType_.scalar_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.MetaType_.scalar_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::ScalarPropertyMetadata& PropertyMetaById::_internal_scalar() const {
  return _internal_has_scalar()
      ? *_impl_.MetaType_.scalar_
      : reinterpret_cast< ::Property::ScalarPropertyMetadata&>(::Property::_ScalarPropertyMetadata_default_instance_);
}
inline const ::Property::ScalarPropertyMetadata& PropertyMetaById::scalar() const {
  // @@protoc_insertion_point(field_get:Session.PropertyMetaById.scalar)
  return _internal_scalar();
}
inline ::Property::ScalarPropertyMetadata* PropertyMetaById::unsafe_arena_release_scalar() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Session.PropertyMetaById.scalar)
  if (_internal_has_scalar()) {
    clear_has_MetaType();
    ::Property::ScalarPropertyMetadata* temp = _impl_.MetaType_.scalar_;
    _impl_.MetaType_.scalar_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PropertyMetaById::unsafe_arena_set_allocated_scalar(::Property::ScalarPropertyMetadata* scalar) {
  clear_MetaType();
  if (scalar) {
    set_has_scalar();
    _impl_.MetaType_.scalar_ = scalar;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Session.PropertyMetaById.scalar)
}
inline ::Property::ScalarPropertyMetadata* PropertyMetaById::_internal_mutable_scalar() {
  if (!_internal_has_scalar()) {
    clear_MetaType();
    set_has_scalar();
    _impl_.MetaType_.scalar_ = CreateMaybeMessage< ::Property::ScalarPropertyMetadata >(GetArenaForAllocation());
  }
  return _impl_.MetaType_.scalar_;
}
inline ::Property::ScalarPropertyMetadata* PropertyMetaById::mutable_scalar() {
  ::Property::ScalarPropertyMetadata* _msg = _internal_mutable_scalar();
  // @@protoc_insertion_point(field_mutable:Session.PropertyMetaById.scalar)
  return _msg;
}

// .Property.StringPropertyMetadata string = 3;
inline bool PropertyMetaById::_internal_has_string() const {
  return MetaType_case() == kString;
}
inline bool PropertyMetaById::has_string() const {
  return _internal_has_string();
}
inline void PropertyMetaById::set_has_string() {
  _impl_._oneof_case_[0] = kString;
}
inline ::Property::StringPropertyMetadata* PropertyMetaById::release_string() {
  // @@protoc_insertion_point(field_release:Session.PropertyMetaById.string)
  if (_internal_has_string()) {
    clear_has_MetaType();
    ::Property::StringPropertyMetadata* temp = _impl_.MetaType_.string_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.MetaType_.string_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::StringPropertyMetadata& PropertyMetaById::_internal_string() const {
  return _internal_has_string()
      ? *_impl_.MetaType_.string_
      : reinterpret_cast< ::Property::StringPropertyMetadata&>(::Property::_StringPropertyMetadata_default_instance_);
}
inline const ::Property::StringPropertyMetadata& PropertyMetaById::string() const {
  // @@protoc_insertion_point(field_get:Session.PropertyMetaById.string)
  return _internal_string();
}
inline ::Property::StringPropertyMetadata* PropertyMetaById::unsafe_arena_release_string() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Session.PropertyMetaById.string)
  if (_internal_has_string()) {
    clear_has_MetaType();
    ::Property::StringPropertyMetadata* temp = _impl_.MetaType_.string_;
    _impl_.MetaType_.string_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PropertyMetaById::unsafe_arena_set_allocated_string(::Property::StringPropertyMetadata* string) {
  clear_MetaType();
  if (string) {
    set_has_string();
    _impl_.MetaType_.string_ = string;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Session.PropertyMetaById.string)
}
inline ::Property::StringPropertyMetadata* PropertyMetaById::_internal_mutable_string() {
  if (!_internal_has_string()) {
    clear_MetaType();
    set_has_string();
    _impl_.MetaType_.string_ = CreateMaybeMessage< ::Property::StringPropertyMetadata >(GetArenaForAllocation());
  }
  return _impl_.MetaType_.string_;
}
inline ::Property::StringPropertyMetadata* PropertyMetaById::mutable_string() {
  ::Property::StringPropertyMetadata* _msg = _internal_mutable_string();
  // @@protoc_insertion_point(field_mutable:Session.PropertyMetaById.string)
  return _msg;
}

// .Property.VectorPropertyMetadata vector = 4;
inline bool PropertyMetaById::_internal_has_vector() const {
  return MetaType_case() == kVector;
}
inline bool PropertyMetaById::has_vector() const {
  return _internal_has_vector();
}
inline void PropertyMetaById::set_has_vector() {
  _impl_._oneof_case_[0] = kVector;
}
inline ::Property::VectorPropertyMetadata* PropertyMetaById::release_vector() {
  // @@protoc_insertion_point(field_release:Session.PropertyMetaById.vector)
  if (_internal_has_vector()) {
    clear_has_MetaType();
    ::Property::VectorPropertyMetadata* temp = _impl_.MetaType_.vector_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.MetaType_.vector_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::VectorPropertyMetadata& PropertyMetaById::_internal_vector() const {
  return _internal_has_vector()
      ? *_impl_.MetaType_.vector_
      : reinterpret_cast< ::Property::VectorPropertyMetadata&>(::Property::_VectorPropertyMetadata_default_instance_);
}
inline const ::Property::VectorPropertyMetadata& PropertyMetaById::vector() const {
  // @@protoc_insertion_point(field_get:Session.PropertyMetaById.vector)
  return _internal_vector();
}
inline ::Property::VectorPropertyMetadata* PropertyMetaById::unsafe_arena_release_vector() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Session.PropertyMetaById.vector)
  if (_internal_has_vector()) {
    clear_has_MetaType();
    ::Property::VectorPropertyMetadata* temp = _impl_.MetaType_.vector_;
    _impl_.MetaType_.vector_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PropertyMetaById::unsafe_arena_set_allocated_vector(::Property::VectorPropertyMetadata* vector) {
  clear_MetaType();
  if (vector) {
    set_has_vector();
    _impl_.MetaType_.vector_ = vector;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Session.PropertyMetaById.vector)
}
inline ::Property::VectorPropertyMetadata* PropertyMetaById::_internal_mutable_vector() {
  if (!_internal_has_vector()) {
    clear_MetaType();
    set_has_vector();
    _impl_.MetaType_.vector_ = CreateMaybeMessage< ::Property::VectorPropertyMetadata >(GetArenaForAllocation());
  }
  return _impl_.MetaType_.vector_;
}
inline ::Property::VectorPropertyMetadata* PropertyMetaById::mutable_vector() {
  ::Property::VectorPropertyMetadata* _msg = _internal_mutable_vector();
  // @@protoc_insertion_point(field_mutable:Session.PropertyMetaById.vector)
  return _msg;
}

// .Property.ColorPropertyMetadata color = 5;
inline bool PropertyMetaById::_internal_has_color() const {
  return MetaType_case() == kColor;
}
inline bool PropertyMetaById::has_color() const {
  return _internal_has_color();
}
inline void PropertyMetaById::set_has_color() {
  _impl_._oneof_case_[0] = kColor;
}
inline ::Property::ColorPropertyMetadata* PropertyMetaById::release_color() {
  // @@protoc_insertion_point(field_release:Session.PropertyMetaById.color)
  if (_internal_has_color()) {
    clear_has_MetaType();
    ::Property::ColorPropertyMetadata* temp = _impl_.MetaType_.color_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.MetaType_.color_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::ColorPropertyMetadata& PropertyMetaById::_internal_color() const {
  return _internal_has_color()
      ? *_impl_.MetaType_.color_
      : reinterpret_cast< ::Property::ColorPropertyMetadata&>(::Property::_ColorPropertyMetadata_default_instance_);
}
inline const ::Property::ColorPropertyMetadata& PropertyMetaById::color() const {
  // @@protoc_insertion_point(field_get:Session.PropertyMetaById.color)
  return _internal_color();
}
inline ::Property::ColorPropertyMetadata* PropertyMetaById::unsafe_arena_release_color() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Session.PropertyMetaById.color)
  if (_internal_has_color()) {
    clear_has_MetaType();
    ::Property::ColorPropertyMetadata* temp = _impl_.MetaType_.color_;
    _impl_.MetaType_.color_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PropertyMetaById::unsafe_arena_set_allocated_color(::Property::ColorPropertyMetadata* color) {
  clear_MetaType();
  if (color) {
    set_has_color();
    _impl_.MetaType_.color_ = color;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Session.PropertyMetaById.color)
}
inline ::Property::ColorPropertyMetadata* PropertyMetaById::_internal_mutable_color() {
  if (!_internal_has_color()) {
    clear_MetaType();
    set_has_color();
    _impl_.MetaType_.color_ = CreateMaybeMessage< ::Property::ColorPropertyMetadata >(GetArenaForAllocation());
  }
  return _impl_.MetaType_.color_;
}
inline ::Property::ColorPropertyMetadata* PropertyMetaById::mutable_color() {
  ::Property::ColorPropertyMetadata* _msg = _internal_mutable_color();
  // @@protoc_insertion_point(field_mutable:Session.PropertyMetaById.color)
  return _msg;
}

// .Property.TransformPropertyMetadata transform = 6;
inline bool PropertyMetaById::_internal_has_transform() const {
  return MetaType_case() == kTransform;
}
inline bool PropertyMetaById::has_transform() const {
  return _internal_has_transform();
}
inline void PropertyMetaById::set_has_transform() {
  _impl_._oneof_case_[0] = kTransform;
}
inline ::Property::TransformPropertyMetadata* PropertyMetaById::release_transform() {
  // @@protoc_insertion_point(field_release:Session.PropertyMetaById.transform)
  if (_internal_has_transform()) {
    clear_has_MetaType();
    ::Property::TransformPropertyMetadata* temp = _impl_.MetaType_.transform_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.MetaType_.transform_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::TransformPropertyMetadata& PropertyMetaById::_internal_transform() const {
  return _internal_has_transform()
      ? *_impl_.MetaType_.transform_
      : reinterpret_cast< ::Property::TransformPropertyMetadata&>(::Property::_TransformPropertyMetadata_default_instance_);
}
inline const ::Property::TransformPropertyMetadata& PropertyMetaById::transform() const {
  // @@protoc_insertion_point(field_get:Session.PropertyMetaById.transform)
  return _internal_transform();
}
inline ::Property::TransformPropertyMetadata* PropertyMetaById::unsafe_arena_release_transform() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Session.PropertyMetaById.transform)
  if (_internal_has_transform()) {
    clear_has_MetaType();
    ::Property::TransformPropertyMetadata* temp = _impl_.MetaType_.transform_;
    _impl_.MetaType_.transform_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PropertyMetaById::unsafe_arena_set_allocated_transform(::Property::TransformPropertyMetadata* transform) {
  clear_MetaType();
  if (transform) {
    set_has_transform();
    _impl_.MetaType_.transform_ = transform;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Session.PropertyMetaById.transform)
}
inline ::Property::TransformPropertyMetadata* PropertyMetaById::_internal_mutable_transform() {
  if (!_internal_has_transform()) {
    clear_MetaType();
    set_has_transform();
    _impl_.MetaType_.transform_ = CreateMaybeMessage< ::Property::TransformPropertyMetadata >(GetArenaForAllocation());
  }
  return _impl_.MetaType_.transform_;
}
inline ::Property::TransformPropertyMetadata* PropertyMetaById::mutable_transform() {
  ::Property::TransformPropertyMetadata* _msg = _internal_mutable_transform();
  // @@protoc_insertion_point(field_mutable:Session.PropertyMetaById.transform)
  return _msg;
}

// .Property.BooleanPropertyMetadata boolean = 7;
inline bool PropertyMetaById::_internal_has_boolean() const {
  return MetaType_case() == kBoolean;
}
inline bool PropertyMetaById::has_boolean() const {
  return _internal_has_boolean();
}
inline void PropertyMetaById::set_has_boolean() {
  _impl_._oneof_case_[0] = kBoolean;
}
inline ::Property::BooleanPropertyMetadata* PropertyMetaById::release_boolean() {
  // @@protoc_insertion_point(field_release:Session.PropertyMetaById.boolean)
  if (_internal_has_boolean()) {
    clear_has_MetaType();
    ::Property::BooleanPropertyMetadata* temp = _impl_.MetaType_.boolean_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.MetaType_.boolean_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::BooleanPropertyMetadata& PropertyMetaById::_internal_boolean() const {
  return _internal_has_boolean()
      ? *_impl_.MetaType_.boolean_
      : reinterpret_cast< ::Property::BooleanPropertyMetadata&>(::Property::_BooleanPropertyMetadata_default_instance_);
}
inline const ::Property::BooleanPropertyMetadata& PropertyMetaById::boolean() const {
  // @@protoc_insertion_point(field_get:Session.PropertyMetaById.boolean)
  return _internal_boolean();
}
inline ::Property::BooleanPropertyMetadata* PropertyMetaById::unsafe_arena_release_boolean() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Session.PropertyMetaById.boolean)
  if (_internal_has_boolean()) {
    clear_has_MetaType();
    ::Property::BooleanPropertyMetadata* temp = _impl_.MetaType_.boolean_;
    _impl_.MetaType_.boolean_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PropertyMetaById::unsafe_arena_set_allocated_boolean(::Property::BooleanPropertyMetadata* boolean) {
  clear_MetaType();
  if (boolean) {
    set_has_boolean();
    _impl_.MetaType_.boolean_ = boolean;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Session.PropertyMetaById.boolean)
}
inline ::Property::BooleanPropertyMetadata* PropertyMetaById::_internal_mutable_boolean() {
  if (!_internal_has_boolean()) {
    clear_MetaType();
    set_has_boolean();
    _impl_.MetaType_.boolean_ = CreateMaybeMessage< ::Property::BooleanPropertyMetadata >(GetArenaForAllocation());
  }
  return _impl_.MetaType_.boolean_;
}
inline ::Property::BooleanPropertyMetadata* PropertyMetaById::mutable_boolean() {
  ::Property::BooleanPropertyMetadata* _msg = _internal_mutable_boolean();
  // @@protoc_insertion_point(field_mutable:Session.PropertyMetaById.boolean)
  return _msg;
}

// .Property.JsonPropertyMetadata json = 9;
inline bool PropertyMetaById::_internal_has_json() const {
  return MetaType_case() == kJson;
}
inline bool PropertyMetaById::has_json() const {
  return _internal_has_json();
}
inline void PropertyMetaById::set_has_json() {
  _impl_._oneof_case_[0] = kJson;
}
inline ::Property::JsonPropertyMetadata* PropertyMetaById::release_json() {
  // @@protoc_insertion_point(field_release:Session.PropertyMetaById.json)
  if (_internal_has_json()) {
    clear_has_MetaType();
    ::Property::JsonPropertyMetadata* temp = _impl_.MetaType_.json_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.MetaType_.json_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::JsonPropertyMetadata& PropertyMetaById::_internal_json() const {
  return _internal_has_json()
      ? *_impl_.MetaType_.json_
      : reinterpret_cast< ::Property::JsonPropertyMetadata&>(::Property::_JsonPropertyMetadata_default_instance_);
}
inline const ::Property::JsonPropertyMetadata& PropertyMetaById::json() const {
  // @@protoc_insertion_point(field_get:Session.PropertyMetaById.json)
  return _internal_json();
}
inline ::Property::JsonPropertyMetadata* PropertyMetaById::unsafe_arena_release_json() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Session.PropertyMetaById.json)
  if (_internal_has_json()) {
    clear_has_MetaType();
    ::Property::JsonPropertyMetadata* temp = _impl_.MetaType_.json_;
    _impl_.MetaType_.json_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PropertyMetaById::unsafe_arena_set_allocated_json(::Property::JsonPropertyMetadata* json) {
  clear_MetaType();
  if (json) {
    set_has_json();
    _impl_.MetaType_.json_ = json;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Session.PropertyMetaById.json)
}
inline ::Property::JsonPropertyMetadata* PropertyMetaById::_internal_mutable_json() {
  if (!_internal_has_json()) {
    clear_MetaType();
    set_has_json();
    _impl_.MetaType_.json_ = CreateMaybeMessage< ::Property::JsonPropertyMetadata >(GetArenaForAllocation());
  }
  return _impl_.MetaType_.json_;
}
inline ::Property::JsonPropertyMetadata* PropertyMetaById::mutable_json() {
  ::Property::JsonPropertyMetadata* _msg = _internal_mutable_json();
  // @@protoc_insertion_point(field_mutable:Session.PropertyMetaById.json)
  return _msg;
}

// .Property.LinkPropertyMetadata link = 10;
inline bool PropertyMetaById::_internal_has_link() const {
  return MetaType_case() == kLink;
}
inline bool PropertyMetaById::has_link() const {
  return _internal_has_link();
}
inline void PropertyMetaById::set_has_link() {
  _impl_._oneof_case_[0] = kLink;
}
inline ::Property::LinkPropertyMetadata* PropertyMetaById::release_link() {
  // @@protoc_insertion_point(field_release:Session.PropertyMetaById.link)
  if (_internal_has_link()) {
    clear_has_MetaType();
    ::Property::LinkPropertyMetadata* temp = _impl_.MetaType_.link_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.MetaType_.link_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::LinkPropertyMetadata& PropertyMetaById::_internal_link() const {
  return _internal_has_link()
      ? *_impl_.MetaType_.link_
      : reinterpret_cast< ::Property::LinkPropertyMetadata&>(::Property::_LinkPropertyMetadata_default_instance_);
}
inline const ::Property::LinkPropertyMetadata& PropertyMetaById::link() const {
  // @@protoc_insertion_point(field_get:Session.PropertyMetaById.link)
  return _internal_link();
}
inline ::Property::LinkPropertyMetadata* PropertyMetaById::unsafe_arena_release_link() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Session.PropertyMetaById.link)
  if (_internal_has_link()) {
    clear_has_MetaType();
    ::Property::LinkPropertyMetadata* temp = _impl_.MetaType_.link_;
    _impl_.MetaType_.link_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PropertyMetaById::unsafe_arena_set_allocated_link(::Property::LinkPropertyMetadata* link) {
  clear_MetaType();
  if (link) {
    set_has_link();
    _impl_.MetaType_.link_ = link;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Session.PropertyMetaById.link)
}
inline ::Property::LinkPropertyMetadata* PropertyMetaById::_internal_mutable_link() {
  if (!_internal_has_link()) {
    clear_MetaType();
    set_has_link();
    _impl_.MetaType_.link_ = CreateMaybeMessage< ::Property::LinkPropertyMetadata >(GetArenaForAllocation());
  }
  return _impl_.MetaType_.link_;
}
inline ::Property::LinkPropertyMetadata* PropertyMetaById::mutable_link() {
  ::Property::LinkPropertyMetadata* _msg = _internal_mutable_link();
  // @@protoc_insertion_point(field_mutable:Session.PropertyMetaById.link)
  return _msg;
}

inline bool PropertyMetaById::has_MetaType() const {
  return MetaType_case() != METATYPE_NOT_SET;
}
inline void PropertyMetaById::clear_has_MetaType() {
  _impl_._oneof_case_[0] = METATYPE_NOT_SET;
}
inline PropertyMetaById::MetaTypeCase PropertyMetaById::MetaType_case() const {
  return PropertyMetaById::MetaTypeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// PropertyInfo

// string id = 1;
inline void PropertyInfo::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& PropertyInfo::id() const {
  // @@protoc_insertion_point(field_get:Session.PropertyInfo.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PropertyInfo::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Session.PropertyInfo.id)
}
inline std::string* PropertyInfo::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:Session.PropertyInfo.id)
  return _s;
}
inline const std::string& PropertyInfo::_internal_id() const {
  return _impl_.id_.Get();
}
inline void PropertyInfo::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* PropertyInfo::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* PropertyInfo::release_id() {
  // @@protoc_insertion_point(field_release:Session.PropertyInfo.id)
  return _impl_.id_.Release();
}
inline void PropertyInfo::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Session.PropertyInfo.id)
}

// optional .Property.AnyPropertyValue value = 2;
inline bool PropertyInfo::_internal_has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.value_ != nullptr);
  return value;
}
inline bool PropertyInfo::has_value() const {
  return _internal_has_value();
}
inline const ::Property::AnyPropertyValue& PropertyInfo::_internal_value() const {
  const ::Property::AnyPropertyValue* p = _impl_.value_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::AnyPropertyValue&>(
      ::Property::_AnyPropertyValue_default_instance_);
}
inline const ::Property::AnyPropertyValue& PropertyInfo::value() const {
  // @@protoc_insertion_point(field_get:Session.PropertyInfo.value)
  return _internal_value();
}
inline void PropertyInfo::unsafe_arena_set_allocated_value(
    ::Property::AnyPropertyValue* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_);
  }
  _impl_.value_ = value;
  if (value) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Session.PropertyInfo.value)
}
inline ::Property::AnyPropertyValue* PropertyInfo::release_value() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Property::AnyPropertyValue* temp = _impl_.value_;
  _impl_.value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::AnyPropertyValue* PropertyInfo::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:Session.PropertyInfo.value)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Property::AnyPropertyValue* temp = _impl_.value_;
  _impl_.value_ = nullptr;
  return temp;
}
inline ::Property::AnyPropertyValue* PropertyInfo::_internal_mutable_value() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.value_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::AnyPropertyValue>(GetArenaForAllocation());
    _impl_.value_ = p;
  }
  return _impl_.value_;
}
inline ::Property::AnyPropertyValue* PropertyInfo::mutable_value() {
  ::Property::AnyPropertyValue* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:Session.PropertyInfo.value)
  return _msg;
}
inline void PropertyInfo::set_allocated_value(::Property::AnyPropertyValue* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_);
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.value_ = value;
  // @@protoc_insertion_point(field_set_allocated:Session.PropertyInfo.value)
}

// optional string metaId = 3;
inline bool PropertyInfo::_internal_has_metaid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PropertyInfo::has_metaid() const {
  return _internal_has_metaid();
}
inline void PropertyInfo::clear_metaid() {
  _impl_.metaid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PropertyInfo::metaid() const {
  // @@protoc_insertion_point(field_get:Session.PropertyInfo.metaId)
  return _internal_metaid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PropertyInfo::set_metaid(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.metaid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Session.PropertyInfo.metaId)
}
inline std::string* PropertyInfo::mutable_metaid() {
  std::string* _s = _internal_mutable_metaid();
  // @@protoc_insertion_point(field_mutable:Session.PropertyInfo.metaId)
  return _s;
}
inline const std::string& PropertyInfo::_internal_metaid() const {
  return _impl_.metaid_.Get();
}
inline void PropertyInfo::_internal_set_metaid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.metaid_.Set(value, GetArenaForAllocation());
}
inline std::string* PropertyInfo::_internal_mutable_metaid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.metaid_.Mutable(GetArenaForAllocation());
}
inline std::string* PropertyInfo::release_metaid() {
  // @@protoc_insertion_point(field_release:Session.PropertyInfo.metaId)
  if (!_internal_has_metaid()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.metaid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.metaid_.IsDefault()) {
    _impl_.metaid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PropertyInfo::set_allocated_metaid(std::string* metaid) {
  if (metaid != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.metaid_.SetAllocated(metaid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.metaid_.IsDefault()) {
    _impl_.metaid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Session.PropertyInfo.metaId)
}

// -------------------------------------------------------------------

// PropertyInfoNode

// string id = 1;
inline void PropertyInfoNode::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& PropertyInfoNode::id() const {
  // @@protoc_insertion_point(field_get:Session.PropertyInfoNode.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PropertyInfoNode::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Session.PropertyInfoNode.id)
}
inline std::string* PropertyInfoNode::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:Session.PropertyInfoNode.id)
  return _s;
}
inline const std::string& PropertyInfoNode::_internal_id() const {
  return _impl_.id_.Get();
}
inline void PropertyInfoNode::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* PropertyInfoNode::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* PropertyInfoNode::release_id() {
  // @@protoc_insertion_point(field_release:Session.PropertyInfoNode.id)
  return _impl_.id_.Release();
}
inline void PropertyInfoNode::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Session.PropertyInfoNode.id)
}

// repeated .Session.PropertyInfo properties = 2;
inline int PropertyInfoNode::_internal_properties_size() const {
  return _impl_.properties_.size();
}
inline int PropertyInfoNode::properties_size() const {
  return _internal_properties_size();
}
inline void PropertyInfoNode::clear_properties() {
  _impl_.properties_.Clear();
}
inline ::Session::PropertyInfo* PropertyInfoNode::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:Session.PropertyInfoNode.properties)
  return _impl_.properties_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Session::PropertyInfo >*
PropertyInfoNode::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:Session.PropertyInfoNode.properties)
  return &_impl_.properties_;
}
inline const ::Session::PropertyInfo& PropertyInfoNode::_internal_properties(int index) const {
  return _impl_.properties_.Get(index);
}
inline const ::Session::PropertyInfo& PropertyInfoNode::properties(int index) const {
  // @@protoc_insertion_point(field_get:Session.PropertyInfoNode.properties)
  return _internal_properties(index);
}
inline ::Session::PropertyInfo* PropertyInfoNode::_internal_add_properties() {
  return _impl_.properties_.Add();
}
inline ::Session::PropertyInfo* PropertyInfoNode::add_properties() {
  ::Session::PropertyInfo* _add = _internal_add_properties();
  // @@protoc_insertion_point(field_add:Session.PropertyInfoNode.properties)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Session::PropertyInfo >&
PropertyInfoNode::properties() const {
  // @@protoc_insertion_point(field_list:Session.PropertyInfoNode.properties)
  return _impl_.properties_;
}

// repeated .Session.PropertyInfoNode children = 3;
inline int PropertyInfoNode::_internal_children_size() const {
  return _impl_.children_.size();
}
inline int PropertyInfoNode::children_size() const {
  return _internal_children_size();
}
inline void PropertyInfoNode::clear_children() {
  _impl_.children_.Clear();
}
inline ::Session::PropertyInfoNode* PropertyInfoNode::mutable_children(int index) {
  // @@protoc_insertion_point(field_mutable:Session.PropertyInfoNode.children)
  return _impl_.children_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Session::PropertyInfoNode >*
PropertyInfoNode::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:Session.PropertyInfoNode.children)
  return &_impl_.children_;
}
inline const ::Session::PropertyInfoNode& PropertyInfoNode::_internal_children(int index) const {
  return _impl_.children_.Get(index);
}
inline const ::Session::PropertyInfoNode& PropertyInfoNode::children(int index) const {
  // @@protoc_insertion_point(field_get:Session.PropertyInfoNode.children)
  return _internal_children(index);
}
inline ::Session::PropertyInfoNode* PropertyInfoNode::_internal_add_children() {
  return _impl_.children_.Add();
}
inline ::Session::PropertyInfoNode* PropertyInfoNode::add_children() {
  ::Session::PropertyInfoNode* _add = _internal_add_children();
  // @@protoc_insertion_point(field_add:Session.PropertyInfoNode.children)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Session::PropertyInfoNode >&
PropertyInfoNode::children() const {
  // @@protoc_insertion_point(field_list:Session.PropertyInfoNode.children)
  return _impl_.children_;
}

// -------------------------------------------------------------------

// ResponseLivePropertyInfo_V1

// optional string requestId = 5;
inline bool ResponseLivePropertyInfo_V1::_internal_has_requestid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ResponseLivePropertyInfo_V1::has_requestid() const {
  return _internal_has_requestid();
}
inline void ResponseLivePropertyInfo_V1::clear_requestid() {
  _impl_.requestid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ResponseLivePropertyInfo_V1::requestid() const {
  // @@protoc_insertion_point(field_get:Session.ResponseLivePropertyInfo.V1.requestId)
  return _internal_requestid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseLivePropertyInfo_V1::set_requestid(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.requestid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Session.ResponseLivePropertyInfo.V1.requestId)
}
inline std::string* ResponseLivePropertyInfo_V1::mutable_requestid() {
  std::string* _s = _internal_mutable_requestid();
  // @@protoc_insertion_point(field_mutable:Session.ResponseLivePropertyInfo.V1.requestId)
  return _s;
}
inline const std::string& ResponseLivePropertyInfo_V1::_internal_requestid() const {
  return _impl_.requestid_.Get();
}
inline void ResponseLivePropertyInfo_V1::_internal_set_requestid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.requestid_.Set(value, GetArenaForAllocation());
}
inline std::string* ResponseLivePropertyInfo_V1::_internal_mutable_requestid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.requestid_.Mutable(GetArenaForAllocation());
}
inline std::string* ResponseLivePropertyInfo_V1::release_requestid() {
  // @@protoc_insertion_point(field_release:Session.ResponseLivePropertyInfo.V1.requestId)
  if (!_internal_has_requestid()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.requestid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.requestid_.IsDefault()) {
    _impl_.requestid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ResponseLivePropertyInfo_V1::set_allocated_requestid(std::string* requestid) {
  if (requestid != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.requestid_.SetAllocated(requestid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.requestid_.IsDefault()) {
    _impl_.requestid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Session.ResponseLivePropertyInfo.V1.requestId)
}

// .Session.PropertyInfoNode root = 6;
inline bool ResponseLivePropertyInfo_V1::_internal_has_root() const {
  return this != internal_default_instance() && _impl_.root_ != nullptr;
}
inline bool ResponseLivePropertyInfo_V1::has_root() const {
  return _internal_has_root();
}
inline void ResponseLivePropertyInfo_V1::clear_root() {
  if (GetArenaForAllocation() == nullptr && _impl_.root_ != nullptr) {
    delete _impl_.root_;
  }
  _impl_.root_ = nullptr;
}
inline const ::Session::PropertyInfoNode& ResponseLivePropertyInfo_V1::_internal_root() const {
  const ::Session::PropertyInfoNode* p = _impl_.root_;
  return p != nullptr ? *p : reinterpret_cast<const ::Session::PropertyInfoNode&>(
      ::Session::_PropertyInfoNode_default_instance_);
}
inline const ::Session::PropertyInfoNode& ResponseLivePropertyInfo_V1::root() const {
  // @@protoc_insertion_point(field_get:Session.ResponseLivePropertyInfo.V1.root)
  return _internal_root();
}
inline void ResponseLivePropertyInfo_V1::unsafe_arena_set_allocated_root(
    ::Session::PropertyInfoNode* root) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.root_);
  }
  _impl_.root_ = root;
  if (root) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Session.ResponseLivePropertyInfo.V1.root)
}
inline ::Session::PropertyInfoNode* ResponseLivePropertyInfo_V1::release_root() {
  
  ::Session::PropertyInfoNode* temp = _impl_.root_;
  _impl_.root_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Session::PropertyInfoNode* ResponseLivePropertyInfo_V1::unsafe_arena_release_root() {
  // @@protoc_insertion_point(field_release:Session.ResponseLivePropertyInfo.V1.root)
  
  ::Session::PropertyInfoNode* temp = _impl_.root_;
  _impl_.root_ = nullptr;
  return temp;
}
inline ::Session::PropertyInfoNode* ResponseLivePropertyInfo_V1::_internal_mutable_root() {
  
  if (_impl_.root_ == nullptr) {
    auto* p = CreateMaybeMessage<::Session::PropertyInfoNode>(GetArenaForAllocation());
    _impl_.root_ = p;
  }
  return _impl_.root_;
}
inline ::Session::PropertyInfoNode* ResponseLivePropertyInfo_V1::mutable_root() {
  ::Session::PropertyInfoNode* _msg = _internal_mutable_root();
  // @@protoc_insertion_point(field_mutable:Session.ResponseLivePropertyInfo.V1.root)
  return _msg;
}
inline void ResponseLivePropertyInfo_V1::set_allocated_root(::Session::PropertyInfoNode* root) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.root_;
  }
  if (root) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(root);
    if (message_arena != submessage_arena) {
      root = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, root, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.root_ = root;
  // @@protoc_insertion_point(field_set_allocated:Session.ResponseLivePropertyInfo.V1.root)
}

// repeated .Session.PropertyMetaById metas = 7;
inline int ResponseLivePropertyInfo_V1::_internal_metas_size() const {
  return _impl_.metas_.size();
}
inline int ResponseLivePropertyInfo_V1::metas_size() const {
  return _internal_metas_size();
}
inline void ResponseLivePropertyInfo_V1::clear_metas() {
  _impl_.metas_.Clear();
}
inline ::Session::PropertyMetaById* ResponseLivePropertyInfo_V1::mutable_metas(int index) {
  // @@protoc_insertion_point(field_mutable:Session.ResponseLivePropertyInfo.V1.metas)
  return _impl_.metas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Session::PropertyMetaById >*
ResponseLivePropertyInfo_V1::mutable_metas() {
  // @@protoc_insertion_point(field_mutable_list:Session.ResponseLivePropertyInfo.V1.metas)
  return &_impl_.metas_;
}
inline const ::Session::PropertyMetaById& ResponseLivePropertyInfo_V1::_internal_metas(int index) const {
  return _impl_.metas_.Get(index);
}
inline const ::Session::PropertyMetaById& ResponseLivePropertyInfo_V1::metas(int index) const {
  // @@protoc_insertion_point(field_get:Session.ResponseLivePropertyInfo.V1.metas)
  return _internal_metas(index);
}
inline ::Session::PropertyMetaById* ResponseLivePropertyInfo_V1::_internal_add_metas() {
  return _impl_.metas_.Add();
}
inline ::Session::PropertyMetaById* ResponseLivePropertyInfo_V1::add_metas() {
  ::Session::PropertyMetaById* _add = _internal_add_metas();
  // @@protoc_insertion_point(field_add:Session.ResponseLivePropertyInfo.V1.metas)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Session::PropertyMetaById >&
ResponseLivePropertyInfo_V1::metas() const {
  // @@protoc_insertion_point(field_list:Session.ResponseLivePropertyInfo.V1.metas)
  return _impl_.metas_;
}

// -------------------------------------------------------------------

// ResponseLivePropertyInfo

// .Session.ResponseLivePropertyInfo.V1 v1 = 1;
inline bool ResponseLivePropertyInfo::_internal_has_v1() const {
  return V_case() == kV1;
}
inline bool ResponseLivePropertyInfo::has_v1() const {
  return _internal_has_v1();
}
inline void ResponseLivePropertyInfo::set_has_v1() {
  _impl_._oneof_case_[0] = kV1;
}
inline void ResponseLivePropertyInfo::clear_v1() {
  if (_internal_has_v1()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.V_.v1_;
    }
    clear_has_V();
  }
}
inline ::Session::ResponseLivePropertyInfo_V1* ResponseLivePropertyInfo::release_v1() {
  // @@protoc_insertion_point(field_release:Session.ResponseLivePropertyInfo.v1)
  if (_internal_has_v1()) {
    clear_has_V();
    ::Session::ResponseLivePropertyInfo_V1* temp = _impl_.V_.v1_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.V_.v1_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Session::ResponseLivePropertyInfo_V1& ResponseLivePropertyInfo::_internal_v1() const {
  return _internal_has_v1()
      ? *_impl_.V_.v1_
      : reinterpret_cast< ::Session::ResponseLivePropertyInfo_V1&>(::Session::_ResponseLivePropertyInfo_V1_default_instance_);
}
inline const ::Session::ResponseLivePropertyInfo_V1& ResponseLivePropertyInfo::v1() const {
  // @@protoc_insertion_point(field_get:Session.ResponseLivePropertyInfo.v1)
  return _internal_v1();
}
inline ::Session::ResponseLivePropertyInfo_V1* ResponseLivePropertyInfo::unsafe_arena_release_v1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Session.ResponseLivePropertyInfo.v1)
  if (_internal_has_v1()) {
    clear_has_V();
    ::Session::ResponseLivePropertyInfo_V1* temp = _impl_.V_.v1_;
    _impl_.V_.v1_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ResponseLivePropertyInfo::unsafe_arena_set_allocated_v1(::Session::ResponseLivePropertyInfo_V1* v1) {
  clear_V();
  if (v1) {
    set_has_v1();
    _impl_.V_.v1_ = v1;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Session.ResponseLivePropertyInfo.v1)
}
inline ::Session::ResponseLivePropertyInfo_V1* ResponseLivePropertyInfo::_internal_mutable_v1() {
  if (!_internal_has_v1()) {
    clear_V();
    set_has_v1();
    _impl_.V_.v1_ = CreateMaybeMessage< ::Session::ResponseLivePropertyInfo_V1 >(GetArenaForAllocation());
  }
  return _impl_.V_.v1_;
}
inline ::Session::ResponseLivePropertyInfo_V1* ResponseLivePropertyInfo::mutable_v1() {
  ::Session::ResponseLivePropertyInfo_V1* _msg = _internal_mutable_v1();
  // @@protoc_insertion_point(field_mutable:Session.ResponseLivePropertyInfo.v1)
  return _msg;
}

inline bool ResponseLivePropertyInfo::has_V() const {
  return V_case() != V_NOT_SET;
}
inline void ResponseLivePropertyInfo::clear_has_V() {
  _impl_._oneof_case_[0] = V_NOT_SET;
}
inline ResponseLivePropertyInfo::VCase ResponseLivePropertyInfo::V_case() const {
  return ResponseLivePropertyInfo::VCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// UserToUserMessage_V1

// bytes blindMessage = 2;
inline bool UserToUserMessage_V1::_internal_has_blindmessage() const {
  return Message_case() == kBlindMessage;
}
inline bool UserToUserMessage_V1::has_blindmessage() const {
  return _internal_has_blindmessage();
}
inline void UserToUserMessage_V1::set_has_blindmessage() {
  _impl_._oneof_case_[0] = kBlindMessage;
}
inline void UserToUserMessage_V1::clear_blindmessage() {
  if (_internal_has_blindmessage()) {
    _impl_.Message_.blindmessage_.Destroy();
    clear_has_Message();
  }
}
inline const std::string& UserToUserMessage_V1::blindmessage() const {
  // @@protoc_insertion_point(field_get:Session.UserToUserMessage.V1.blindMessage)
  return _internal_blindmessage();
}
template <typename ArgT0, typename... ArgT>
inline void UserToUserMessage_V1::set_blindmessage(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_blindmessage()) {
    clear_Message();
    set_has_blindmessage();
    _impl_.Message_.blindmessage_.InitDefault();
  }
  _impl_.Message_.blindmessage_.SetBytes( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Session.UserToUserMessage.V1.blindMessage)
}
inline std::string* UserToUserMessage_V1::mutable_blindmessage() {
  std::string* _s = _internal_mutable_blindmessage();
  // @@protoc_insertion_point(field_mutable:Session.UserToUserMessage.V1.blindMessage)
  return _s;
}
inline const std::string& UserToUserMessage_V1::_internal_blindmessage() const {
  if (_internal_has_blindmessage()) {
    return _impl_.Message_.blindmessage_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void UserToUserMessage_V1::_internal_set_blindmessage(const std::string& value) {
  if (!_internal_has_blindmessage()) {
    clear_Message();
    set_has_blindmessage();
    _impl_.Message_.blindmessage_.InitDefault();
  }
  _impl_.Message_.blindmessage_.Set(value, GetArenaForAllocation());
}
inline std::string* UserToUserMessage_V1::_internal_mutable_blindmessage() {
  if (!_internal_has_blindmessage()) {
    clear_Message();
    set_has_blindmessage();
    _impl_.Message_.blindmessage_.InitDefault();
  }
  return _impl_.Message_.blindmessage_.Mutable(      GetArenaForAllocation());
}
inline std::string* UserToUserMessage_V1::release_blindmessage() {
  // @@protoc_insertion_point(field_release:Session.UserToUserMessage.V1.blindMessage)
  if (_internal_has_blindmessage()) {
    clear_has_Message();
    return _impl_.Message_.blindmessage_.Release();
  } else {
    return nullptr;
  }
}
inline void UserToUserMessage_V1::set_allocated_blindmessage(std::string* blindmessage) {
  if (has_Message()) {
    clear_Message();
  }
  if (blindmessage != nullptr) {
    set_has_blindmessage();
    _impl_.Message_.blindmessage_.InitAllocated(blindmessage, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:Session.UserToUserMessage.V1.blindMessage)
}

// .Session.RequestLivePropertyInfo requestLivePropertyInfo = 3;
inline bool UserToUserMessage_V1::_internal_has_requestlivepropertyinfo() const {
  return Message_case() == kRequestLivePropertyInfo;
}
inline bool UserToUserMessage_V1::has_requestlivepropertyinfo() const {
  return _internal_has_requestlivepropertyinfo();
}
inline void UserToUserMessage_V1::set_has_requestlivepropertyinfo() {
  _impl_._oneof_case_[0] = kRequestLivePropertyInfo;
}
inline void UserToUserMessage_V1::clear_requestlivepropertyinfo() {
  if (_internal_has_requestlivepropertyinfo()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.Message_.requestlivepropertyinfo_;
    }
    clear_has_Message();
  }
}
inline ::Session::RequestLivePropertyInfo* UserToUserMessage_V1::release_requestlivepropertyinfo() {
  // @@protoc_insertion_point(field_release:Session.UserToUserMessage.V1.requestLivePropertyInfo)
  if (_internal_has_requestlivepropertyinfo()) {
    clear_has_Message();
    ::Session::RequestLivePropertyInfo* temp = _impl_.Message_.requestlivepropertyinfo_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Message_.requestlivepropertyinfo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Session::RequestLivePropertyInfo& UserToUserMessage_V1::_internal_requestlivepropertyinfo() const {
  return _internal_has_requestlivepropertyinfo()
      ? *_impl_.Message_.requestlivepropertyinfo_
      : reinterpret_cast< ::Session::RequestLivePropertyInfo&>(::Session::_RequestLivePropertyInfo_default_instance_);
}
inline const ::Session::RequestLivePropertyInfo& UserToUserMessage_V1::requestlivepropertyinfo() const {
  // @@protoc_insertion_point(field_get:Session.UserToUserMessage.V1.requestLivePropertyInfo)
  return _internal_requestlivepropertyinfo();
}
inline ::Session::RequestLivePropertyInfo* UserToUserMessage_V1::unsafe_arena_release_requestlivepropertyinfo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Session.UserToUserMessage.V1.requestLivePropertyInfo)
  if (_internal_has_requestlivepropertyinfo()) {
    clear_has_Message();
    ::Session::RequestLivePropertyInfo* temp = _impl_.Message_.requestlivepropertyinfo_;
    _impl_.Message_.requestlivepropertyinfo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UserToUserMessage_V1::unsafe_arena_set_allocated_requestlivepropertyinfo(::Session::RequestLivePropertyInfo* requestlivepropertyinfo) {
  clear_Message();
  if (requestlivepropertyinfo) {
    set_has_requestlivepropertyinfo();
    _impl_.Message_.requestlivepropertyinfo_ = requestlivepropertyinfo;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Session.UserToUserMessage.V1.requestLivePropertyInfo)
}
inline ::Session::RequestLivePropertyInfo* UserToUserMessage_V1::_internal_mutable_requestlivepropertyinfo() {
  if (!_internal_has_requestlivepropertyinfo()) {
    clear_Message();
    set_has_requestlivepropertyinfo();
    _impl_.Message_.requestlivepropertyinfo_ = CreateMaybeMessage< ::Session::RequestLivePropertyInfo >(GetArenaForAllocation());
  }
  return _impl_.Message_.requestlivepropertyinfo_;
}
inline ::Session::RequestLivePropertyInfo* UserToUserMessage_V1::mutable_requestlivepropertyinfo() {
  ::Session::RequestLivePropertyInfo* _msg = _internal_mutable_requestlivepropertyinfo();
  // @@protoc_insertion_point(field_mutable:Session.UserToUserMessage.V1.requestLivePropertyInfo)
  return _msg;
}

// .Session.ResponseLivePropertyInfo responseLivePropertyInfo = 4;
inline bool UserToUserMessage_V1::_internal_has_responselivepropertyinfo() const {
  return Message_case() == kResponseLivePropertyInfo;
}
inline bool UserToUserMessage_V1::has_responselivepropertyinfo() const {
  return _internal_has_responselivepropertyinfo();
}
inline void UserToUserMessage_V1::set_has_responselivepropertyinfo() {
  _impl_._oneof_case_[0] = kResponseLivePropertyInfo;
}
inline void UserToUserMessage_V1::clear_responselivepropertyinfo() {
  if (_internal_has_responselivepropertyinfo()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.Message_.responselivepropertyinfo_;
    }
    clear_has_Message();
  }
}
inline ::Session::ResponseLivePropertyInfo* UserToUserMessage_V1::release_responselivepropertyinfo() {
  // @@protoc_insertion_point(field_release:Session.UserToUserMessage.V1.responseLivePropertyInfo)
  if (_internal_has_responselivepropertyinfo()) {
    clear_has_Message();
    ::Session::ResponseLivePropertyInfo* temp = _impl_.Message_.responselivepropertyinfo_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Message_.responselivepropertyinfo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Session::ResponseLivePropertyInfo& UserToUserMessage_V1::_internal_responselivepropertyinfo() const {
  return _internal_has_responselivepropertyinfo()
      ? *_impl_.Message_.responselivepropertyinfo_
      : reinterpret_cast< ::Session::ResponseLivePropertyInfo&>(::Session::_ResponseLivePropertyInfo_default_instance_);
}
inline const ::Session::ResponseLivePropertyInfo& UserToUserMessage_V1::responselivepropertyinfo() const {
  // @@protoc_insertion_point(field_get:Session.UserToUserMessage.V1.responseLivePropertyInfo)
  return _internal_responselivepropertyinfo();
}
inline ::Session::ResponseLivePropertyInfo* UserToUserMessage_V1::unsafe_arena_release_responselivepropertyinfo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Session.UserToUserMessage.V1.responseLivePropertyInfo)
  if (_internal_has_responselivepropertyinfo()) {
    clear_has_Message();
    ::Session::ResponseLivePropertyInfo* temp = _impl_.Message_.responselivepropertyinfo_;
    _impl_.Message_.responselivepropertyinfo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UserToUserMessage_V1::unsafe_arena_set_allocated_responselivepropertyinfo(::Session::ResponseLivePropertyInfo* responselivepropertyinfo) {
  clear_Message();
  if (responselivepropertyinfo) {
    set_has_responselivepropertyinfo();
    _impl_.Message_.responselivepropertyinfo_ = responselivepropertyinfo;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Session.UserToUserMessage.V1.responseLivePropertyInfo)
}
inline ::Session::ResponseLivePropertyInfo* UserToUserMessage_V1::_internal_mutable_responselivepropertyinfo() {
  if (!_internal_has_responselivepropertyinfo()) {
    clear_Message();
    set_has_responselivepropertyinfo();
    _impl_.Message_.responselivepropertyinfo_ = CreateMaybeMessage< ::Session::ResponseLivePropertyInfo >(GetArenaForAllocation());
  }
  return _impl_.Message_.responselivepropertyinfo_;
}
inline ::Session::ResponseLivePropertyInfo* UserToUserMessage_V1::mutable_responselivepropertyinfo() {
  ::Session::ResponseLivePropertyInfo* _msg = _internal_mutable_responselivepropertyinfo();
  // @@protoc_insertion_point(field_mutable:Session.UserToUserMessage.V1.responseLivePropertyInfo)
  return _msg;
}

// .Session.RequestLivePropertyCapabilities requestLivePropertyCapabilities = 5;
inline bool UserToUserMessage_V1::_internal_has_requestlivepropertycapabilities() const {
  return Message_case() == kRequestLivePropertyCapabilities;
}
inline bool UserToUserMessage_V1::has_requestlivepropertycapabilities() const {
  return _internal_has_requestlivepropertycapabilities();
}
inline void UserToUserMessage_V1::set_has_requestlivepropertycapabilities() {
  _impl_._oneof_case_[0] = kRequestLivePropertyCapabilities;
}
inline void UserToUserMessage_V1::clear_requestlivepropertycapabilities() {
  if (_internal_has_requestlivepropertycapabilities()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.Message_.requestlivepropertycapabilities_;
    }
    clear_has_Message();
  }
}
inline ::Session::RequestLivePropertyCapabilities* UserToUserMessage_V1::release_requestlivepropertycapabilities() {
  // @@protoc_insertion_point(field_release:Session.UserToUserMessage.V1.requestLivePropertyCapabilities)
  if (_internal_has_requestlivepropertycapabilities()) {
    clear_has_Message();
    ::Session::RequestLivePropertyCapabilities* temp = _impl_.Message_.requestlivepropertycapabilities_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Message_.requestlivepropertycapabilities_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Session::RequestLivePropertyCapabilities& UserToUserMessage_V1::_internal_requestlivepropertycapabilities() const {
  return _internal_has_requestlivepropertycapabilities()
      ? *_impl_.Message_.requestlivepropertycapabilities_
      : reinterpret_cast< ::Session::RequestLivePropertyCapabilities&>(::Session::_RequestLivePropertyCapabilities_default_instance_);
}
inline const ::Session::RequestLivePropertyCapabilities& UserToUserMessage_V1::requestlivepropertycapabilities() const {
  // @@protoc_insertion_point(field_get:Session.UserToUserMessage.V1.requestLivePropertyCapabilities)
  return _internal_requestlivepropertycapabilities();
}
inline ::Session::RequestLivePropertyCapabilities* UserToUserMessage_V1::unsafe_arena_release_requestlivepropertycapabilities() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Session.UserToUserMessage.V1.requestLivePropertyCapabilities)
  if (_internal_has_requestlivepropertycapabilities()) {
    clear_has_Message();
    ::Session::RequestLivePropertyCapabilities* temp = _impl_.Message_.requestlivepropertycapabilities_;
    _impl_.Message_.requestlivepropertycapabilities_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UserToUserMessage_V1::unsafe_arena_set_allocated_requestlivepropertycapabilities(::Session::RequestLivePropertyCapabilities* requestlivepropertycapabilities) {
  clear_Message();
  if (requestlivepropertycapabilities) {
    set_has_requestlivepropertycapabilities();
    _impl_.Message_.requestlivepropertycapabilities_ = requestlivepropertycapabilities;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Session.UserToUserMessage.V1.requestLivePropertyCapabilities)
}
inline ::Session::RequestLivePropertyCapabilities* UserToUserMessage_V1::_internal_mutable_requestlivepropertycapabilities() {
  if (!_internal_has_requestlivepropertycapabilities()) {
    clear_Message();
    set_has_requestlivepropertycapabilities();
    _impl_.Message_.requestlivepropertycapabilities_ = CreateMaybeMessage< ::Session::RequestLivePropertyCapabilities >(GetArenaForAllocation());
  }
  return _impl_.Message_.requestlivepropertycapabilities_;
}
inline ::Session::RequestLivePropertyCapabilities* UserToUserMessage_V1::mutable_requestlivepropertycapabilities() {
  ::Session::RequestLivePropertyCapabilities* _msg = _internal_mutable_requestlivepropertycapabilities();
  // @@protoc_insertion_point(field_mutable:Session.UserToUserMessage.V1.requestLivePropertyCapabilities)
  return _msg;
}

// .Session.ResponseLivePropertyCapabilities ResponseLivePropertyCapabilities = 6;
inline bool UserToUserMessage_V1::_internal_has_responselivepropertycapabilities() const {
  return Message_case() == kResponseLivePropertyCapabilities;
}
inline bool UserToUserMessage_V1::has_responselivepropertycapabilities() const {
  return _internal_has_responselivepropertycapabilities();
}
inline void UserToUserMessage_V1::set_has_responselivepropertycapabilities() {
  _impl_._oneof_case_[0] = kResponseLivePropertyCapabilities;
}
inline void UserToUserMessage_V1::clear_responselivepropertycapabilities() {
  if (_internal_has_responselivepropertycapabilities()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.Message_.responselivepropertycapabilities_;
    }
    clear_has_Message();
  }
}
inline ::Session::ResponseLivePropertyCapabilities* UserToUserMessage_V1::release_responselivepropertycapabilities() {
  // @@protoc_insertion_point(field_release:Session.UserToUserMessage.V1.ResponseLivePropertyCapabilities)
  if (_internal_has_responselivepropertycapabilities()) {
    clear_has_Message();
    ::Session::ResponseLivePropertyCapabilities* temp = _impl_.Message_.responselivepropertycapabilities_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Message_.responselivepropertycapabilities_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Session::ResponseLivePropertyCapabilities& UserToUserMessage_V1::_internal_responselivepropertycapabilities() const {
  return _internal_has_responselivepropertycapabilities()
      ? *_impl_.Message_.responselivepropertycapabilities_
      : reinterpret_cast< ::Session::ResponseLivePropertyCapabilities&>(::Session::_ResponseLivePropertyCapabilities_default_instance_);
}
inline const ::Session::ResponseLivePropertyCapabilities& UserToUserMessage_V1::responselivepropertycapabilities() const {
  // @@protoc_insertion_point(field_get:Session.UserToUserMessage.V1.ResponseLivePropertyCapabilities)
  return _internal_responselivepropertycapabilities();
}
inline ::Session::ResponseLivePropertyCapabilities* UserToUserMessage_V1::unsafe_arena_release_responselivepropertycapabilities() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Session.UserToUserMessage.V1.ResponseLivePropertyCapabilities)
  if (_internal_has_responselivepropertycapabilities()) {
    clear_has_Message();
    ::Session::ResponseLivePropertyCapabilities* temp = _impl_.Message_.responselivepropertycapabilities_;
    _impl_.Message_.responselivepropertycapabilities_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UserToUserMessage_V1::unsafe_arena_set_allocated_responselivepropertycapabilities(::Session::ResponseLivePropertyCapabilities* responselivepropertycapabilities) {
  clear_Message();
  if (responselivepropertycapabilities) {
    set_has_responselivepropertycapabilities();
    _impl_.Message_.responselivepropertycapabilities_ = responselivepropertycapabilities;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Session.UserToUserMessage.V1.ResponseLivePropertyCapabilities)
}
inline ::Session::ResponseLivePropertyCapabilities* UserToUserMessage_V1::_internal_mutable_responselivepropertycapabilities() {
  if (!_internal_has_responselivepropertycapabilities()) {
    clear_Message();
    set_has_responselivepropertycapabilities();
    _impl_.Message_.responselivepropertycapabilities_ = CreateMaybeMessage< ::Session::ResponseLivePropertyCapabilities >(GetArenaForAllocation());
  }
  return _impl_.Message_.responselivepropertycapabilities_;
}
inline ::Session::ResponseLivePropertyCapabilities* UserToUserMessage_V1::mutable_responselivepropertycapabilities() {
  ::Session::ResponseLivePropertyCapabilities* _msg = _internal_mutable_responselivepropertycapabilities();
  // @@protoc_insertion_point(field_mutable:Session.UserToUserMessage.V1.ResponseLivePropertyCapabilities)
  return _msg;
}

inline bool UserToUserMessage_V1::has_Message() const {
  return Message_case() != MESSAGE_NOT_SET;
}
inline void UserToUserMessage_V1::clear_has_Message() {
  _impl_._oneof_case_[0] = MESSAGE_NOT_SET;
}
inline UserToUserMessage_V1::MessageCase UserToUserMessage_V1::Message_case() const {
  return UserToUserMessage_V1::MessageCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// UserToUserMessage

// .Session.UserToUserMessage.V1 v1 = 1;
inline bool UserToUserMessage::_internal_has_v1() const {
  return V_case() == kV1;
}
inline bool UserToUserMessage::has_v1() const {
  return _internal_has_v1();
}
inline void UserToUserMessage::set_has_v1() {
  _impl_._oneof_case_[0] = kV1;
}
inline void UserToUserMessage::clear_v1() {
  if (_internal_has_v1()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.V_.v1_;
    }
    clear_has_V();
  }
}
inline ::Session::UserToUserMessage_V1* UserToUserMessage::release_v1() {
  // @@protoc_insertion_point(field_release:Session.UserToUserMessage.v1)
  if (_internal_has_v1()) {
    clear_has_V();
    ::Session::UserToUserMessage_V1* temp = _impl_.V_.v1_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.V_.v1_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Session::UserToUserMessage_V1& UserToUserMessage::_internal_v1() const {
  return _internal_has_v1()
      ? *_impl_.V_.v1_
      : reinterpret_cast< ::Session::UserToUserMessage_V1&>(::Session::_UserToUserMessage_V1_default_instance_);
}
inline const ::Session::UserToUserMessage_V1& UserToUserMessage::v1() const {
  // @@protoc_insertion_point(field_get:Session.UserToUserMessage.v1)
  return _internal_v1();
}
inline ::Session::UserToUserMessage_V1* UserToUserMessage::unsafe_arena_release_v1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Session.UserToUserMessage.v1)
  if (_internal_has_v1()) {
    clear_has_V();
    ::Session::UserToUserMessage_V1* temp = _impl_.V_.v1_;
    _impl_.V_.v1_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UserToUserMessage::unsafe_arena_set_allocated_v1(::Session::UserToUserMessage_V1* v1) {
  clear_V();
  if (v1) {
    set_has_v1();
    _impl_.V_.v1_ = v1;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Session.UserToUserMessage.v1)
}
inline ::Session::UserToUserMessage_V1* UserToUserMessage::_internal_mutable_v1() {
  if (!_internal_has_v1()) {
    clear_V();
    set_has_v1();
    _impl_.V_.v1_ = CreateMaybeMessage< ::Session::UserToUserMessage_V1 >(GetArenaForAllocation());
  }
  return _impl_.V_.v1_;
}
inline ::Session::UserToUserMessage_V1* UserToUserMessage::mutable_v1() {
  ::Session::UserToUserMessage_V1* _msg = _internal_mutable_v1();
  // @@protoc_insertion_point(field_mutable:Session.UserToUserMessage.v1)
  return _msg;
}

inline bool UserToUserMessage::has_V() const {
  return V_case() != V_NOT_SET;
}
inline void UserToUserMessage::clear_has_V() {
  _impl_._oneof_case_[0] = V_NOT_SET;
}
inline UserToUserMessage::VCase UserToUserMessage::V_case() const {
  return UserToUserMessage::VCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Session

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Session::ResponseLivePropertyCapabilities_V1_LivePropertyCapabilityEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Session::ResponseLivePropertyCapabilities_V1_LivePropertyCapabilityEnum>() {
  return ::Session::ResponseLivePropertyCapabilities_V1_LivePropertyCapabilityEnum_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_usertouser_2eproto
