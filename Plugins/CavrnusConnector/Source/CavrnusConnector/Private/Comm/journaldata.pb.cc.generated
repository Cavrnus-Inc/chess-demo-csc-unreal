// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: journaldata.proto

#include "journaldata.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace JournalData {
PROTOBUF_CONSTEXPR ObjectId::ObjectId(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.objid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.component_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ObjectIdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObjectIdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObjectIdDefaultTypeInternal() {}
  union {
    ObjectId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObjectIdDefaultTypeInternal _ObjectId_default_instance_;
PROTOBUF_CONSTEXPR BoardState::BoardState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.StateType_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct BoardStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BoardStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BoardStateDefaultTypeInternal() {}
  union {
    BoardState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BoardStateDefaultTypeInternal _BoardState_default_instance_;
PROTOBUF_CONSTEXPR Progress_V1::Progress_V1(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.progressmode_)*/0
  , /*decltype(_impl_.progresspercentage_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Progress_V1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Progress_V1DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Progress_V1DefaultTypeInternal() {}
  union {
    Progress_V1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Progress_V1DefaultTypeInternal _Progress_V1_default_instance_;
PROTOBUF_CONSTEXPR Progress_V2::Progress_V2(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.taskstack_)*/{}
  , /*decltype(_impl_.currentdescription_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.taskprogress_)*/0
  , /*decltype(_impl_.overallprogress_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Progress_V2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Progress_V2DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Progress_V2DefaultTypeInternal() {}
  union {
    Progress_V2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Progress_V2DefaultTypeInternal _Progress_V2_default_instance_;
PROTOBUF_CONSTEXPR Progress::Progress(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.V_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ProgressDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProgressDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProgressDefaultTypeInternal() {}
  union {
    Progress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProgressDefaultTypeInternal _Progress_default_instance_;
PROTOBUF_CONSTEXPR ObjectType_StreamBoardObjectType::ObjectType_StreamBoardObjectType(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.connectionid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.userid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ObjectType_StreamBoardObjectTypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObjectType_StreamBoardObjectTypeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObjectType_StreamBoardObjectTypeDefaultTypeInternal() {}
  union {
    ObjectType_StreamBoardObjectType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObjectType_StreamBoardObjectTypeDefaultTypeInternal _ObjectType_StreamBoardObjectType_default_instance_;
PROTOBUF_CONSTEXPR ObjectType_TextBoardObjectType::ObjectType_TextBoardObjectType(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.initialtext_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.textboard_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ObjectType_TextBoardObjectTypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObjectType_TextBoardObjectTypeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObjectType_TextBoardObjectTypeDefaultTypeInternal() {}
  union {
    ObjectType_TextBoardObjectType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObjectType_TextBoardObjectTypeDefaultTypeInternal _ObjectType_TextBoardObjectType_default_instance_;
PROTOBUF_CONSTEXPR ObjectType_ArTrackerObjectType::ObjectType_ArTrackerObjectType(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.contentid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ObjectType_ArTrackerObjectTypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObjectType_ArTrackerObjectTypeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObjectType_ArTrackerObjectTypeDefaultTypeInternal() {}
  union {
    ObjectType_ArTrackerObjectType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObjectType_ArTrackerObjectTypeDefaultTypeInternal _ObjectType_ArTrackerObjectType_default_instance_;
PROTOBUF_CONSTEXPR ObjectType_CustomContentId::ObjectType_CustomContentId(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.customsourceid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.customcontentid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ObjectType_CustomContentIdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObjectType_CustomContentIdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObjectType_CustomContentIdDefaultTypeInternal() {}
  union {
    ObjectType_CustomContentId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObjectType_CustomContentIdDefaultTypeInternal _ObjectType_CustomContentId_default_instance_;
PROTOBUF_CONSTEXPR ObjectType_CustomUsingCavrnusContentId::ObjectType_CustomUsingCavrnusContentId(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.customusageid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.customcontentid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ObjectType_CustomUsingCavrnusContentIdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObjectType_CustomUsingCavrnusContentIdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObjectType_CustomUsingCavrnusContentIdDefaultTypeInternal() {}
  union {
    ObjectType_CustomUsingCavrnusContentId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObjectType_CustomUsingCavrnusContentIdDefaultTypeInternal _ObjectType_CustomUsingCavrnusContentId_default_instance_;
PROTOBUF_CONSTEXPR ObjectType_ChatMessageObjectType::ObjectType_ChatMessageObjectType(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.initialtext_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.creatorid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timecreated_)*/nullptr
  , /*decltype(_impl_.sourcetype_)*/0} {}
struct ObjectType_ChatMessageObjectTypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObjectType_ChatMessageObjectTypeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObjectType_ChatMessageObjectTypeDefaultTypeInternal() {}
  union {
    ObjectType_ChatMessageObjectType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObjectType_ChatMessageObjectTypeDefaultTypeInternal _ObjectType_ChatMessageObjectType_default_instance_;
PROTOBUF_CONSTEXPR ObjectType::ObjectType(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.Ob_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ObjectTypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObjectTypeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObjectTypeDefaultTypeInternal() {}
  union {
    ObjectType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObjectTypeDefaultTypeInternal _ObjectType_default_instance_;
PROTOBUF_CONSTEXPR BoardSizeData::BoardSizeData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.aspectratio_)*/nullptr
  , /*decltype(_impl_.boardsizescaler_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BoardSizeDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BoardSizeDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BoardSizeDataDefaultTypeInternal() {}
  union {
    BoardSizeData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BoardSizeDataDefaultTypeInternal _BoardSizeData_default_instance_;
PROTOBUF_CONSTEXPR ImageContentType::ImageContentType(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.Im_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ImageContentTypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImageContentTypeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImageContentTypeDefaultTypeInternal() {}
  union {
    ImageContentType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImageContentTypeDefaultTypeInternal _ImageContentType_default_instance_;
PROTOBUF_CONSTEXPR Image2dPlacementData::Image2dPlacementData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.objectid_)*/nullptr
  , /*decltype(_impl_.visiblewithinstate_)*/nullptr
  , /*decltype(_impl_.point_)*/nullptr
  , /*decltype(_impl_.height_)*/0
  , /*decltype(_impl_.rotation_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Image2dPlacementDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Image2dPlacementDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Image2dPlacementDataDefaultTypeInternal() {}
  union {
    Image2dPlacementData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Image2dPlacementDataDefaultTypeInternal _Image2dPlacementData_default_instance_;
PROTOBUF_CONSTEXPR TagPlacementData::TagPlacementData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.objectid_)*/nullptr
  , /*decltype(_impl_.anchorpos_)*/nullptr
  , /*decltype(_impl_.tagoffset_)*/nullptr
  , /*decltype(_impl_.height_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TagPlacementDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TagPlacementDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TagPlacementDataDefaultTypeInternal() {}
  union {
    TagPlacementData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TagPlacementDataDefaultTypeInternal _TagPlacementData_default_instance_;
PROTOBUF_CONSTEXPR ObjectPlacementData::ObjectPlacementData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.rotation_)*/nullptr
  , /*decltype(_impl_.scale_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ObjectPlacementDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObjectPlacementDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObjectPlacementDataDefaultTypeInternal() {}
  union {
    ObjectPlacementData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObjectPlacementDataDefaultTypeInternal _ObjectPlacementData_default_instance_;
PROTOBUF_CONSTEXPR PartHighlightData::PartHighlightData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.primarycolor_)*/nullptr
  , /*decltype(_impl_.secondarycolor_)*/nullptr
  , /*decltype(_impl_.spread_)*/0
  , /*decltype(_impl_.speed_)*/0
  , /*decltype(_impl_.coverage_)*/0
  , /*decltype(_impl_.edging_)*/0
  , /*decltype(_impl_.risetime_)*/0
  , /*decltype(_impl_.holdtime_)*/0
  , /*decltype(_impl_.falltime_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PartHighlightDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PartHighlightDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PartHighlightDataDefaultTypeInternal() {}
  union {
    PartHighlightData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PartHighlightDataDefaultTypeInternal _PartHighlightData_default_instance_;
PROTOBUF_CONSTEXPR LightingEnvironmentContentType::LightingEnvironmentContentType(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.Im_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct LightingEnvironmentContentTypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LightingEnvironmentContentTypeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LightingEnvironmentContentTypeDefaultTypeInternal() {}
  union {
    LightingEnvironmentContentType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LightingEnvironmentContentTypeDefaultTypeInternal _LightingEnvironmentContentType_default_instance_;
}  // namespace JournalData
static ::_pb::Metadata file_level_metadata_journaldata_2eproto[19];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_journaldata_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_journaldata_2eproto = nullptr;

const uint32_t TableStruct_journaldata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::JournalData::ObjectId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::JournalData::ObjectId, _impl_.objid_),
  PROTOBUF_FIELD_OFFSET(::JournalData::ObjectId, _impl_.component_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::JournalData::BoardState, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::JournalData::BoardState, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::JournalData::BoardState, _impl_.StateType_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::JournalData::Progress_V1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::JournalData::Progress_V1, _impl_.progressmode_),
  PROTOBUF_FIELD_OFFSET(::JournalData::Progress_V1, _impl_.progresspercentage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::JournalData::Progress_V2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::JournalData::Progress_V2, _impl_.taskstack_),
  PROTOBUF_FIELD_OFFSET(::JournalData::Progress_V2, _impl_.currentdescription_),
  PROTOBUF_FIELD_OFFSET(::JournalData::Progress_V2, _impl_.taskprogress_),
  PROTOBUF_FIELD_OFFSET(::JournalData::Progress_V2, _impl_.overallprogress_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::JournalData::Progress, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::JournalData::Progress, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::JournalData::Progress, _impl_.V_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::JournalData::ObjectType_StreamBoardObjectType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::JournalData::ObjectType_StreamBoardObjectType, _impl_.connectionid_),
  PROTOBUF_FIELD_OFFSET(::JournalData::ObjectType_StreamBoardObjectType, _impl_.userid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::JournalData::ObjectType_TextBoardObjectType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::JournalData::ObjectType_TextBoardObjectType, _impl_.initialtext_),
  PROTOBUF_FIELD_OFFSET(::JournalData::ObjectType_TextBoardObjectType, _impl_.textboard_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::JournalData::ObjectType_ArTrackerObjectType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::JournalData::ObjectType_ArTrackerObjectType, _impl_.contentid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::JournalData::ObjectType_CustomContentId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::JournalData::ObjectType_CustomContentId, _impl_.customsourceid_),
  PROTOBUF_FIELD_OFFSET(::JournalData::ObjectType_CustomContentId, _impl_.customcontentid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::JournalData::ObjectType_CustomUsingCavrnusContentId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::JournalData::ObjectType_CustomUsingCavrnusContentId, _impl_.customusageid_),
  PROTOBUF_FIELD_OFFSET(::JournalData::ObjectType_CustomUsingCavrnusContentId, _impl_.customcontentid_),
  PROTOBUF_FIELD_OFFSET(::JournalData::ObjectType_ChatMessageObjectType, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::JournalData::ObjectType_ChatMessageObjectType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::JournalData::ObjectType_ChatMessageObjectType, _impl_.initialtext_),
  PROTOBUF_FIELD_OFFSET(::JournalData::ObjectType_ChatMessageObjectType, _impl_.timecreated_),
  PROTOBUF_FIELD_OFFSET(::JournalData::ObjectType_ChatMessageObjectType, _impl_.creatorid_),
  PROTOBUF_FIELD_OFFSET(::JournalData::ObjectType_ChatMessageObjectType, _impl_.sourcetype_),
  ~0u,
  ~0u,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::JournalData::ObjectType, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::JournalData::ObjectType, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::JournalData::ObjectType, _impl_.Ob_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::JournalData::BoardSizeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::JournalData::BoardSizeData, _impl_.aspectratio_),
  PROTOBUF_FIELD_OFFSET(::JournalData::BoardSizeData, _impl_.boardsizescaler_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::JournalData::ImageContentType, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::JournalData::ImageContentType, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::JournalData::ImageContentType, _impl_.Im_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::JournalData::Image2dPlacementData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::JournalData::Image2dPlacementData, _impl_.objectid_),
  PROTOBUF_FIELD_OFFSET(::JournalData::Image2dPlacementData, _impl_.visiblewithinstate_),
  PROTOBUF_FIELD_OFFSET(::JournalData::Image2dPlacementData, _impl_.point_),
  PROTOBUF_FIELD_OFFSET(::JournalData::Image2dPlacementData, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::JournalData::Image2dPlacementData, _impl_.rotation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::JournalData::TagPlacementData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::JournalData::TagPlacementData, _impl_.objectid_),
  PROTOBUF_FIELD_OFFSET(::JournalData::TagPlacementData, _impl_.anchorpos_),
  PROTOBUF_FIELD_OFFSET(::JournalData::TagPlacementData, _impl_.tagoffset_),
  PROTOBUF_FIELD_OFFSET(::JournalData::TagPlacementData, _impl_.height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::JournalData::ObjectPlacementData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::JournalData::ObjectPlacementData, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::JournalData::ObjectPlacementData, _impl_.rotation_),
  PROTOBUF_FIELD_OFFSET(::JournalData::ObjectPlacementData, _impl_.scale_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::JournalData::PartHighlightData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::JournalData::PartHighlightData, _impl_.primarycolor_),
  PROTOBUF_FIELD_OFFSET(::JournalData::PartHighlightData, _impl_.secondarycolor_),
  PROTOBUF_FIELD_OFFSET(::JournalData::PartHighlightData, _impl_.spread_),
  PROTOBUF_FIELD_OFFSET(::JournalData::PartHighlightData, _impl_.speed_),
  PROTOBUF_FIELD_OFFSET(::JournalData::PartHighlightData, _impl_.coverage_),
  PROTOBUF_FIELD_OFFSET(::JournalData::PartHighlightData, _impl_.edging_),
  PROTOBUF_FIELD_OFFSET(::JournalData::PartHighlightData, _impl_.risetime_),
  PROTOBUF_FIELD_OFFSET(::JournalData::PartHighlightData, _impl_.holdtime_),
  PROTOBUF_FIELD_OFFSET(::JournalData::PartHighlightData, _impl_.falltime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::JournalData::LightingEnvironmentContentType, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::JournalData::LightingEnvironmentContentType, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::JournalData::LightingEnvironmentContentType, _impl_.Im_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::JournalData::ObjectId)},
  { 8, -1, -1, sizeof(::JournalData::BoardState)},
  { 18, -1, -1, sizeof(::JournalData::Progress_V1)},
  { 26, -1, -1, sizeof(::JournalData::Progress_V2)},
  { 36, -1, -1, sizeof(::JournalData::Progress)},
  { 45, -1, -1, sizeof(::JournalData::ObjectType_StreamBoardObjectType)},
  { 53, -1, -1, sizeof(::JournalData::ObjectType_TextBoardObjectType)},
  { 61, -1, -1, sizeof(::JournalData::ObjectType_ArTrackerObjectType)},
  { 68, -1, -1, sizeof(::JournalData::ObjectType_CustomContentId)},
  { 76, -1, -1, sizeof(::JournalData::ObjectType_CustomUsingCavrnusContentId)},
  { 84, 94, -1, sizeof(::JournalData::ObjectType_ChatMessageObjectType)},
  { 98, -1, -1, sizeof(::JournalData::ObjectType)},
  { 120, -1, -1, sizeof(::JournalData::BoardSizeData)},
  { 128, -1, -1, sizeof(::JournalData::ImageContentType)},
  { 137, -1, -1, sizeof(::JournalData::Image2dPlacementData)},
  { 148, -1, -1, sizeof(::JournalData::TagPlacementData)},
  { 158, -1, -1, sizeof(::JournalData::ObjectPlacementData)},
  { 167, -1, -1, sizeof(::JournalData::PartHighlightData)},
  { 182, -1, -1, sizeof(::JournalData::LightingEnvironmentContentType)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::JournalData::_ObjectId_default_instance_._instance,
  &::JournalData::_BoardState_default_instance_._instance,
  &::JournalData::_Progress_V1_default_instance_._instance,
  &::JournalData::_Progress_V2_default_instance_._instance,
  &::JournalData::_Progress_default_instance_._instance,
  &::JournalData::_ObjectType_StreamBoardObjectType_default_instance_._instance,
  &::JournalData::_ObjectType_TextBoardObjectType_default_instance_._instance,
  &::JournalData::_ObjectType_ArTrackerObjectType_default_instance_._instance,
  &::JournalData::_ObjectType_CustomContentId_default_instance_._instance,
  &::JournalData::_ObjectType_CustomUsingCavrnusContentId_default_instance_._instance,
  &::JournalData::_ObjectType_ChatMessageObjectType_default_instance_._instance,
  &::JournalData::_ObjectType_default_instance_._instance,
  &::JournalData::_BoardSizeData_default_instance_._instance,
  &::JournalData::_ImageContentType_default_instance_._instance,
  &::JournalData::_Image2dPlacementData_default_instance_._instance,
  &::JournalData::_TagPlacementData_default_instance_._instance,
  &::JournalData::_ObjectPlacementData_default_instance_._instance,
  &::JournalData::_PartHighlightData_default_instance_._instance,
  &::JournalData::_LightingEnvironmentContentType_default_instance_._instance,
};

const char descriptor_table_protodef_journaldata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021journaldata.proto\022\013JournalData\032\014common"
  ".proto\032\037google/protobuf/timestamp.proto\""
  ",\n\010ObjectId\022\r\n\005objId\030\001 \001(\t\022\021\n\tcomponent\030"
  "\002 \001(\t\"R\n\nBoardState\022\017\n\005frame\030\001 \001(\021H\000\022\024\n\n"
  "frameStart\030\002 \001(\021H\000\022\020\n\006source\030\003 \001(\tH\000B\013\n\t"
  "StateType\"\324\003\n\010Progress\022&\n\002v1\030\001 \001(\0132\030.Jou"
  "rnalData.Progress.V1H\000\022&\n\002v2\030\002 \001(\0132\030.Jou"
  "rnalData.Progress.V2H\000\032\216\002\n\002V1\022;\n\014progres"
  "sMode\030\001 \001(\0162%.JournalData.Progress.V1.Pr"
  "ogressMode\022\032\n\022progressPercentage\030\002 \001(\002\"\256"
  "\001\n\014ProgressMode\022\n\n\006Failed\020\000\022\016\n\nConvertin"
  "g\020\001\022\r\n\tUploading\020\002\022\017\n\013Downloading\020\003\022\016\n\nD"
  "ecrypting\020\004\022\014\n\010Finished\020\005\022\013\n\007Waiting\020\006\022\016"
  "\n\nProcessing\020\007\022\013\n\007Loading\020\010\022\014\n\010Fetching\020"
  "\t\022\014\n\010Building\020\n\032b\n\002V2\022\021\n\ttaskStack\030\001 \003(\t"
  "\022\032\n\022currentDescription\030\002 \001(\t\022\024\n\014taskProg"
  "ress\030\003 \001(\002\022\027\n\017overallProgress\030\004 \001(\002B\003\n\001V"
  "\"\237\n\n\nObjectType\022\023\n\tcontentId\030\001 \001(\tH\000\0220\n\n"
  "whiteboard\030\002 \001(\0132\032.JournalData.BoardSize"
  "DataH\000\022I\n\020streamBoardOwner\030\003 \001(\0132-.Journ"
  "alData.ObjectType.StreamBoardObjectTypeH"
  "\000\022\023\n\tuserBoard\030\006 \001(\010H\000\022/\n\016objectProgress"
  "\030\007 \001(\0132\025.JournalData.ProgressH\000\022.\n\rboard"
  "Progress\030\010 \001(\0132\025.JournalData.ProgressH\000\022"
  "@\n\ttextboard\030\n \001(\0132+.JournalData.ObjectT"
  "ype.TextBoardObjectTypeH\000\022@\n\tarTracker\030\017"
  " \001(\0132+.JournalData.ObjectType.ArTrackerO"
  "bjectTypeH\000\022\030\n\016contentIdAsset\030\024 \001(\tH\000\022B\n"
  "\017customContentId\030\025 \001(\0132\'.JournalData.Obj"
  "ectType.CustomContentIdH\000\022U\n\026customCavrn"
  "usContentId\030\026 \001(\01323.JournalData.ObjectTy"
  "pe.CustomUsingCavrnusContentIdH\000\022D\n\013chat"
  "Message\0302 \001(\0132-.JournalData.ObjectType.C"
  "hatMessageObjectTypeH\000\022\027\n\rblankMaterial\030"
  "d \001(\010H\000\022\034\n\021wellKnownObjectId\030\364\003 \001(\tH\000\022\016\n"
  "\003url\030\365\003 \001(\tH\000\032=\n\025StreamBoardObjectType\022\024"
  "\n\014connectionId\030\001 \001(\t\022\016\n\006userId\030\002 \001(\t\032Y\n\023"
  "TextBoardObjectType\022\023\n\013initialText\030\001 \001(\t"
  "\022-\n\ttextboard\030\002 \001(\0132\032.JournalData.BoardS"
  "izeData\032(\n\023ArTrackerObjectType\022\021\n\tconten"
  "tId\030\001 \001(\t\032B\n\017CustomContentId\022\026\n\016customSo"
  "urceId\030\001 \001(\t\022\027\n\017customContentId\030\002 \001(\t\032M\n"
  "\033CustomUsingCavrnusContentId\022\025\n\rcustomUs"
  "ageId\030\001 \001(\t\022\027\n\017customContentId\030\002 \001(\t\032\323\001\n"
  "\025ChatMessageObjectType\022\023\n\013initialText\030\001 "
  "\001(\t\022/\n\013timeCreated\030\002 \001(\0132\032.google.protob"
  "uf.Timestamp\022\026\n\tcreatorId\030\003 \001(\tH\000\210\001\001\022\?\n\n"
  "sourceType\030\004 \001(\0162&.JournalData.ChatMessa"
  "geSourceTypeEnumH\001\210\001\001B\014\n\n_creatorIdB\r\n\013_"
  "sourceTypeB\004\n\002ObJ\004\010\004\020\005J\004\010\005\020\006J\004\010\t\020\n\"M\n\rBo"
  "ardSizeData\022#\n\013aspectRatio\030\001 \001(\0132\016.Commo"
  "n.Float2\022\027\n\017boardSizeScaler\030\002 \001(\002\"]\n\020Ima"
  "geContentType\022\023\n\tcontentId\030\001 \001(\tH\000\022.\n\rim"
  "ageProgress\030\002 \001(\0132\025.JournalData.Progress"
  "H\000B\004\n\002Im\"\265\001\n\024Image2dPlacementData\022\'\n\010obj"
  "ectId\030\001 \001(\0132\025.JournalData.ObjectId\0223\n\022vi"
  "sibleWithinState\030\002 \001(\0132\027.JournalData.Boa"
  "rdState\022\035\n\005point\030\003 \001(\0132\016.Common.Float2\022\016"
  "\n\006height\030\004 \001(\002\022\020\n\010rotation\030\005 \001(\002\"\221\001\n\020Tag"
  "PlacementData\022\'\n\010objectId\030\001 \001(\0132\025.Journa"
  "lData.ObjectId\022!\n\tanchorPos\030\002 \001(\0132\016.Comm"
  "on.Float3\022!\n\ttagOffset\030\003 \001(\0132\016.Common.Fl"
  "oat3\022\016\n\006height\030\004 \001(\002\"x\n\023ObjectPlacementD"
  "ata\022 \n\010position\030\001 \001(\0132\016.Common.Float3\022 \n"
  "\010rotation\030\002 \001(\0132\016.Common.Float3\022\035\n\005scale"
  "\030\003 \001(\0132\016.Common.Float3\"\330\001\n\021PartHighlight"
  "Data\022$\n\014primaryColor\030\003 \001(\0132\016.Common.Colo"
  "r4\022&\n\016secondaryColor\030\004 \001(\0132\016.Common.Colo"
  "r4\022\016\n\006spread\030\005 \001(\002\022\r\n\005speed\030\006 \001(\002\022\020\n\010cov"
  "erage\030\007 \001(\002\022\016\n\006edging\030\010 \001(\002\022\020\n\010riseTime\030"
  "\t \001(\002\022\020\n\010holdTime\030\n \001(\002\022\020\n\010fallTime\030\013 \001("
  "\002\"k\n\036LightingEnvironmentContentType\022\023\n\tc"
  "ontentId\030\001 \001(\tH\000\022.\n\rimageProgress\030\002 \001(\0132"
  "\025.JournalData.ProgressH\000B\004\n\002Im*8\n\031ChatMe"
  "ssageSourceTypeEnum\022\010\n\004Chat\020\000\022\021\n\rTranscr"
  "iption\020\001B\036\252\002\033Collab.Proxy.Comm.LiveTypes"
  "b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_journaldata_2eproto_deps[2] = {
  &::descriptor_table_common_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_journaldata_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_journaldata_2eproto = {
    false, false, 3048, descriptor_table_protodef_journaldata_2eproto,
    "journaldata.proto",
    &descriptor_table_journaldata_2eproto_once, descriptor_table_journaldata_2eproto_deps, 2, 19,
    schemas, file_default_instances, TableStruct_journaldata_2eproto::offsets,
    file_level_metadata_journaldata_2eproto, file_level_enum_descriptors_journaldata_2eproto,
    file_level_service_descriptors_journaldata_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_journaldata_2eproto_getter() {
  return &descriptor_table_journaldata_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_journaldata_2eproto(&descriptor_table_journaldata_2eproto);
namespace JournalData {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Progress_V1_ProgressMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_journaldata_2eproto);
  return file_level_enum_descriptors_journaldata_2eproto[0];
}
bool Progress_V1_ProgressMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Progress_V1_ProgressMode Progress_V1::Failed;
constexpr Progress_V1_ProgressMode Progress_V1::Converting;
constexpr Progress_V1_ProgressMode Progress_V1::Uploading;
constexpr Progress_V1_ProgressMode Progress_V1::Downloading;
constexpr Progress_V1_ProgressMode Progress_V1::Decrypting;
constexpr Progress_V1_ProgressMode Progress_V1::Finished;
constexpr Progress_V1_ProgressMode Progress_V1::Waiting;
constexpr Progress_V1_ProgressMode Progress_V1::Processing;
constexpr Progress_V1_ProgressMode Progress_V1::Loading;
constexpr Progress_V1_ProgressMode Progress_V1::Fetching;
constexpr Progress_V1_ProgressMode Progress_V1::Building;
constexpr Progress_V1_ProgressMode Progress_V1::ProgressMode_MIN;
constexpr Progress_V1_ProgressMode Progress_V1::ProgressMode_MAX;
constexpr int Progress_V1::ProgressMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChatMessageSourceTypeEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_journaldata_2eproto);
  return file_level_enum_descriptors_journaldata_2eproto[1];
}
bool ChatMessageSourceTypeEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class ObjectId::_Internal {
 public:
};

ObjectId::ObjectId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:JournalData.ObjectId)
}
ObjectId::ObjectId(const ObjectId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ObjectId* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.objid_){}
    , decltype(_impl_.component_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.objid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.objid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_objid().empty()) {
    _this->_impl_.objid_.Set(from._internal_objid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.component_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.component_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_component().empty()) {
    _this->_impl_.component_.Set(from._internal_component(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:JournalData.ObjectId)
}

inline void ObjectId::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.objid_){}
    , decltype(_impl_.component_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.objid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.objid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.component_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.component_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ObjectId::~ObjectId() {
  // @@protoc_insertion_point(destructor:JournalData.ObjectId)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObjectId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.objid_.Destroy();
  _impl_.component_.Destroy();
}

void ObjectId::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObjectId::Clear() {
// @@protoc_insertion_point(message_clear_start:JournalData.ObjectId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.objid_.ClearToEmpty();
  _impl_.component_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectId::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string objId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_objid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "JournalData.ObjectId.objId"));
        } else
          goto handle_unusual;
        continue;
      // string component = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_component();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "JournalData.ObjectId.component"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObjectId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:JournalData.ObjectId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string objId = 1;
  if (!this->_internal_objid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_objid().data(), static_cast<int>(this->_internal_objid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JournalData.ObjectId.objId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_objid(), target);
  }

  // string component = 2;
  if (!this->_internal_component().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_component().data(), static_cast<int>(this->_internal_component().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JournalData.ObjectId.component");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_component(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JournalData.ObjectId)
  return target;
}

size_t ObjectId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JournalData.ObjectId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string objId = 1;
  if (!this->_internal_objid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_objid());
  }

  // string component = 2;
  if (!this->_internal_component().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_component());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObjectId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ObjectId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObjectId::GetClassData() const { return &_class_data_; }


void ObjectId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ObjectId*>(&to_msg);
  auto& from = static_cast<const ObjectId&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:JournalData.ObjectId)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_objid().empty()) {
    _this->_internal_set_objid(from._internal_objid());
  }
  if (!from._internal_component().empty()) {
    _this->_internal_set_component(from._internal_component());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObjectId::CopyFrom(const ObjectId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JournalData.ObjectId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectId::IsInitialized() const {
  return true;
}

void ObjectId::InternalSwap(ObjectId* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.objid_, lhs_arena,
      &other->_impl_.objid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.component_, lhs_arena,
      &other->_impl_.component_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectId::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_journaldata_2eproto_getter, &descriptor_table_journaldata_2eproto_once,
      file_level_metadata_journaldata_2eproto[0]);
}

// ===================================================================

class BoardState::_Internal {
 public:
};

BoardState::BoardState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:JournalData.BoardState)
}
BoardState::BoardState(const BoardState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BoardState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.StateType_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_StateType();
  switch (from.StateType_case()) {
    case kFrame: {
      _this->_internal_set_frame(from._internal_frame());
      break;
    }
    case kFrameStart: {
      _this->_internal_set_framestart(from._internal_framestart());
      break;
    }
    case kSource: {
      _this->_internal_set_source(from._internal_source());
      break;
    }
    case STATETYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:JournalData.BoardState)
}

inline void BoardState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.StateType_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_StateType();
}

BoardState::~BoardState() {
  // @@protoc_insertion_point(destructor:JournalData.BoardState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BoardState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_StateType()) {
    clear_StateType();
  }
}

void BoardState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BoardState::clear_StateType() {
// @@protoc_insertion_point(one_of_clear_start:JournalData.BoardState)
  switch (StateType_case()) {
    case kFrame: {
      // No need to clear
      break;
    }
    case kFrameStart: {
      // No need to clear
      break;
    }
    case kSource: {
      _impl_.StateType_.source_.Destroy();
      break;
    }
    case STATETYPE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = STATETYPE_NOT_SET;
}


void BoardState::Clear() {
// @@protoc_insertion_point(message_clear_start:JournalData.BoardState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_StateType();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoardState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint32 frame = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _internal_set_frame(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 frameStart = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _internal_set_framestart(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string source = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_source();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "JournalData.BoardState.source"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BoardState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:JournalData.BoardState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 frame = 1;
  if (_internal_has_frame()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(1, this->_internal_frame(), target);
  }

  // sint32 frameStart = 2;
  if (_internal_has_framestart()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(2, this->_internal_framestart(), target);
  }

  // string source = 3;
  if (_internal_has_source()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source().data(), static_cast<int>(this->_internal_source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JournalData.BoardState.source");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_source(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JournalData.BoardState)
  return target;
}

size_t BoardState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JournalData.BoardState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (StateType_case()) {
    // sint32 frame = 1;
    case kFrame: {
      total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_frame());
      break;
    }
    // sint32 frameStart = 2;
    case kFrameStart: {
      total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_framestart());
      break;
    }
    // string source = 3;
    case kSource: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_source());
      break;
    }
    case STATETYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BoardState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BoardState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BoardState::GetClassData() const { return &_class_data_; }


void BoardState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BoardState*>(&to_msg);
  auto& from = static_cast<const BoardState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:JournalData.BoardState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.StateType_case()) {
    case kFrame: {
      _this->_internal_set_frame(from._internal_frame());
      break;
    }
    case kFrameStart: {
      _this->_internal_set_framestart(from._internal_framestart());
      break;
    }
    case kSource: {
      _this->_internal_set_source(from._internal_source());
      break;
    }
    case STATETYPE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BoardState::CopyFrom(const BoardState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JournalData.BoardState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoardState::IsInitialized() const {
  return true;
}

void BoardState::InternalSwap(BoardState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.StateType_, other->_impl_.StateType_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata BoardState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_journaldata_2eproto_getter, &descriptor_table_journaldata_2eproto_once,
      file_level_metadata_journaldata_2eproto[1]);
}

// ===================================================================

class Progress_V1::_Internal {
 public:
};

Progress_V1::Progress_V1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:JournalData.Progress.V1)
}
Progress_V1::Progress_V1(const Progress_V1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Progress_V1* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.progressmode_){}
    , decltype(_impl_.progresspercentage_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.progressmode_, &from._impl_.progressmode_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.progresspercentage_) -
    reinterpret_cast<char*>(&_impl_.progressmode_)) + sizeof(_impl_.progresspercentage_));
  // @@protoc_insertion_point(copy_constructor:JournalData.Progress.V1)
}

inline void Progress_V1::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.progressmode_){0}
    , decltype(_impl_.progresspercentage_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Progress_V1::~Progress_V1() {
  // @@protoc_insertion_point(destructor:JournalData.Progress.V1)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Progress_V1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Progress_V1::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Progress_V1::Clear() {
// @@protoc_insertion_point(message_clear_start:JournalData.Progress.V1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.progressmode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.progresspercentage_) -
      reinterpret_cast<char*>(&_impl_.progressmode_)) + sizeof(_impl_.progresspercentage_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Progress_V1::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .JournalData.Progress.V1.ProgressMode progressMode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_progressmode(static_cast<::JournalData::Progress_V1_ProgressMode>(val));
        } else
          goto handle_unusual;
        continue;
      // float progressPercentage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.progresspercentage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Progress_V1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:JournalData.Progress.V1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .JournalData.Progress.V1.ProgressMode progressMode = 1;
  if (this->_internal_progressmode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_progressmode(), target);
  }

  // float progressPercentage = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_progresspercentage = this->_internal_progresspercentage();
  uint32_t raw_progresspercentage;
  memcpy(&raw_progresspercentage, &tmp_progresspercentage, sizeof(tmp_progresspercentage));
  if (raw_progresspercentage != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_progresspercentage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JournalData.Progress.V1)
  return target;
}

size_t Progress_V1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JournalData.Progress.V1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .JournalData.Progress.V1.ProgressMode progressMode = 1;
  if (this->_internal_progressmode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_progressmode());
  }

  // float progressPercentage = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_progresspercentage = this->_internal_progresspercentage();
  uint32_t raw_progresspercentage;
  memcpy(&raw_progresspercentage, &tmp_progresspercentage, sizeof(tmp_progresspercentage));
  if (raw_progresspercentage != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Progress_V1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Progress_V1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Progress_V1::GetClassData() const { return &_class_data_; }


void Progress_V1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Progress_V1*>(&to_msg);
  auto& from = static_cast<const Progress_V1&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:JournalData.Progress.V1)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_progressmode() != 0) {
    _this->_internal_set_progressmode(from._internal_progressmode());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_progresspercentage = from._internal_progresspercentage();
  uint32_t raw_progresspercentage;
  memcpy(&raw_progresspercentage, &tmp_progresspercentage, sizeof(tmp_progresspercentage));
  if (raw_progresspercentage != 0) {
    _this->_internal_set_progresspercentage(from._internal_progresspercentage());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Progress_V1::CopyFrom(const Progress_V1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JournalData.Progress.V1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Progress_V1::IsInitialized() const {
  return true;
}

void Progress_V1::InternalSwap(Progress_V1* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Progress_V1, _impl_.progresspercentage_)
      + sizeof(Progress_V1::_impl_.progresspercentage_)
      - PROTOBUF_FIELD_OFFSET(Progress_V1, _impl_.progressmode_)>(
          reinterpret_cast<char*>(&_impl_.progressmode_),
          reinterpret_cast<char*>(&other->_impl_.progressmode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Progress_V1::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_journaldata_2eproto_getter, &descriptor_table_journaldata_2eproto_once,
      file_level_metadata_journaldata_2eproto[2]);
}

// ===================================================================

class Progress_V2::_Internal {
 public:
};

Progress_V2::Progress_V2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:JournalData.Progress.V2)
}
Progress_V2::Progress_V2(const Progress_V2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Progress_V2* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.taskstack_){from._impl_.taskstack_}
    , decltype(_impl_.currentdescription_){}
    , decltype(_impl_.taskprogress_){}
    , decltype(_impl_.overallprogress_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.currentdescription_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currentdescription_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_currentdescription().empty()) {
    _this->_impl_.currentdescription_.Set(from._internal_currentdescription(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.taskprogress_, &from._impl_.taskprogress_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.overallprogress_) -
    reinterpret_cast<char*>(&_impl_.taskprogress_)) + sizeof(_impl_.overallprogress_));
  // @@protoc_insertion_point(copy_constructor:JournalData.Progress.V2)
}

inline void Progress_V2::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.taskstack_){arena}
    , decltype(_impl_.currentdescription_){}
    , decltype(_impl_.taskprogress_){0}
    , decltype(_impl_.overallprogress_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.currentdescription_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currentdescription_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Progress_V2::~Progress_V2() {
  // @@protoc_insertion_point(destructor:JournalData.Progress.V2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Progress_V2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.taskstack_.~RepeatedPtrField();
  _impl_.currentdescription_.Destroy();
}

void Progress_V2::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Progress_V2::Clear() {
// @@protoc_insertion_point(message_clear_start:JournalData.Progress.V2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.taskstack_.Clear();
  _impl_.currentdescription_.ClearToEmpty();
  ::memset(&_impl_.taskprogress_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.overallprogress_) -
      reinterpret_cast<char*>(&_impl_.taskprogress_)) + sizeof(_impl_.overallprogress_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Progress_V2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string taskStack = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_taskstack();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "JournalData.Progress.V2.taskStack"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string currentDescription = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_currentdescription();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "JournalData.Progress.V2.currentDescription"));
        } else
          goto handle_unusual;
        continue;
      // float taskProgress = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.taskprogress_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float overallProgress = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.overallprogress_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Progress_V2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:JournalData.Progress.V2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string taskStack = 1;
  for (int i = 0, n = this->_internal_taskstack_size(); i < n; i++) {
    const auto& s = this->_internal_taskstack(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JournalData.Progress.V2.taskStack");
    target = stream->WriteString(1, s, target);
  }

  // string currentDescription = 2;
  if (!this->_internal_currentdescription().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_currentdescription().data(), static_cast<int>(this->_internal_currentdescription().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JournalData.Progress.V2.currentDescription");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_currentdescription(), target);
  }

  // float taskProgress = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_taskprogress = this->_internal_taskprogress();
  uint32_t raw_taskprogress;
  memcpy(&raw_taskprogress, &tmp_taskprogress, sizeof(tmp_taskprogress));
  if (raw_taskprogress != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_taskprogress(), target);
  }

  // float overallProgress = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_overallprogress = this->_internal_overallprogress();
  uint32_t raw_overallprogress;
  memcpy(&raw_overallprogress, &tmp_overallprogress, sizeof(tmp_overallprogress));
  if (raw_overallprogress != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_overallprogress(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JournalData.Progress.V2)
  return target;
}

size_t Progress_V2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JournalData.Progress.V2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string taskStack = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.taskstack_.size());
  for (int i = 0, n = _impl_.taskstack_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.taskstack_.Get(i));
  }

  // string currentDescription = 2;
  if (!this->_internal_currentdescription().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currentdescription());
  }

  // float taskProgress = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_taskprogress = this->_internal_taskprogress();
  uint32_t raw_taskprogress;
  memcpy(&raw_taskprogress, &tmp_taskprogress, sizeof(tmp_taskprogress));
  if (raw_taskprogress != 0) {
    total_size += 1 + 4;
  }

  // float overallProgress = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_overallprogress = this->_internal_overallprogress();
  uint32_t raw_overallprogress;
  memcpy(&raw_overallprogress, &tmp_overallprogress, sizeof(tmp_overallprogress));
  if (raw_overallprogress != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Progress_V2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Progress_V2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Progress_V2::GetClassData() const { return &_class_data_; }


void Progress_V2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Progress_V2*>(&to_msg);
  auto& from = static_cast<const Progress_V2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:JournalData.Progress.V2)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.taskstack_.MergeFrom(from._impl_.taskstack_);
  if (!from._internal_currentdescription().empty()) {
    _this->_internal_set_currentdescription(from._internal_currentdescription());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_taskprogress = from._internal_taskprogress();
  uint32_t raw_taskprogress;
  memcpy(&raw_taskprogress, &tmp_taskprogress, sizeof(tmp_taskprogress));
  if (raw_taskprogress != 0) {
    _this->_internal_set_taskprogress(from._internal_taskprogress());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_overallprogress = from._internal_overallprogress();
  uint32_t raw_overallprogress;
  memcpy(&raw_overallprogress, &tmp_overallprogress, sizeof(tmp_overallprogress));
  if (raw_overallprogress != 0) {
    _this->_internal_set_overallprogress(from._internal_overallprogress());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Progress_V2::CopyFrom(const Progress_V2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JournalData.Progress.V2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Progress_V2::IsInitialized() const {
  return true;
}

void Progress_V2::InternalSwap(Progress_V2* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.taskstack_.InternalSwap(&other->_impl_.taskstack_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.currentdescription_, lhs_arena,
      &other->_impl_.currentdescription_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Progress_V2, _impl_.overallprogress_)
      + sizeof(Progress_V2::_impl_.overallprogress_)
      - PROTOBUF_FIELD_OFFSET(Progress_V2, _impl_.taskprogress_)>(
          reinterpret_cast<char*>(&_impl_.taskprogress_),
          reinterpret_cast<char*>(&other->_impl_.taskprogress_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Progress_V2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_journaldata_2eproto_getter, &descriptor_table_journaldata_2eproto_once,
      file_level_metadata_journaldata_2eproto[3]);
}

// ===================================================================

class Progress::_Internal {
 public:
  static const ::JournalData::Progress_V1& v1(const Progress* msg);
  static const ::JournalData::Progress_V2& v2(const Progress* msg);
};

const ::JournalData::Progress_V1&
Progress::_Internal::v1(const Progress* msg) {
  return *msg->_impl_.V_.v1_;
}
const ::JournalData::Progress_V2&
Progress::_Internal::v2(const Progress* msg) {
  return *msg->_impl_.V_.v2_;
}
void Progress::set_allocated_v1(::JournalData::Progress_V1* v1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_V();
  if (v1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(v1);
    if (message_arena != submessage_arena) {
      v1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, v1, submessage_arena);
    }
    set_has_v1();
    _impl_.V_.v1_ = v1;
  }
  // @@protoc_insertion_point(field_set_allocated:JournalData.Progress.v1)
}
void Progress::set_allocated_v2(::JournalData::Progress_V2* v2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_V();
  if (v2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(v2);
    if (message_arena != submessage_arena) {
      v2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, v2, submessage_arena);
    }
    set_has_v2();
    _impl_.V_.v2_ = v2;
  }
  // @@protoc_insertion_point(field_set_allocated:JournalData.Progress.v2)
}
Progress::Progress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:JournalData.Progress)
}
Progress::Progress(const Progress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Progress* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.V_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_V();
  switch (from.V_case()) {
    case kV1: {
      _this->_internal_mutable_v1()->::JournalData::Progress_V1::MergeFrom(
          from._internal_v1());
      break;
    }
    case kV2: {
      _this->_internal_mutable_v2()->::JournalData::Progress_V2::MergeFrom(
          from._internal_v2());
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:JournalData.Progress)
}

inline void Progress::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.V_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_V();
}

Progress::~Progress() {
  // @@protoc_insertion_point(destructor:JournalData.Progress)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Progress::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_V()) {
    clear_V();
  }
}

void Progress::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Progress::clear_V() {
// @@protoc_insertion_point(one_of_clear_start:JournalData.Progress)
  switch (V_case()) {
    case kV1: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.V_.v1_;
      }
      break;
    }
    case kV2: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.V_.v2_;
      }
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = V_NOT_SET;
}


void Progress::Clear() {
// @@protoc_insertion_point(message_clear_start:JournalData.Progress)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_V();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Progress::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .JournalData.Progress.V1 v1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_v1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .JournalData.Progress.V2 v2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_v2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Progress::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:JournalData.Progress)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .JournalData.Progress.V1 v1 = 1;
  if (_internal_has_v1()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::v1(this),
        _Internal::v1(this).GetCachedSize(), target, stream);
  }

  // .JournalData.Progress.V2 v2 = 2;
  if (_internal_has_v2()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::v2(this),
        _Internal::v2(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JournalData.Progress)
  return target;
}

size_t Progress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JournalData.Progress)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (V_case()) {
    // .JournalData.Progress.V1 v1 = 1;
    case kV1: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.V_.v1_);
      break;
    }
    // .JournalData.Progress.V2 v2 = 2;
    case kV2: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.V_.v2_);
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Progress::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Progress::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Progress::GetClassData() const { return &_class_data_; }


void Progress::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Progress*>(&to_msg);
  auto& from = static_cast<const Progress&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:JournalData.Progress)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.V_case()) {
    case kV1: {
      _this->_internal_mutable_v1()->::JournalData::Progress_V1::MergeFrom(
          from._internal_v1());
      break;
    }
    case kV2: {
      _this->_internal_mutable_v2()->::JournalData::Progress_V2::MergeFrom(
          from._internal_v2());
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Progress::CopyFrom(const Progress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JournalData.Progress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Progress::IsInitialized() const {
  return true;
}

void Progress::InternalSwap(Progress* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.V_, other->_impl_.V_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Progress::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_journaldata_2eproto_getter, &descriptor_table_journaldata_2eproto_once,
      file_level_metadata_journaldata_2eproto[4]);
}

// ===================================================================

class ObjectType_StreamBoardObjectType::_Internal {
 public:
};

ObjectType_StreamBoardObjectType::ObjectType_StreamBoardObjectType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:JournalData.ObjectType.StreamBoardObjectType)
}
ObjectType_StreamBoardObjectType::ObjectType_StreamBoardObjectType(const ObjectType_StreamBoardObjectType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ObjectType_StreamBoardObjectType* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.connectionid_){}
    , decltype(_impl_.userid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.connectionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.connectionid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_connectionid().empty()) {
    _this->_impl_.connectionid_.Set(from._internal_connectionid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.userid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.userid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_userid().empty()) {
    _this->_impl_.userid_.Set(from._internal_userid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:JournalData.ObjectType.StreamBoardObjectType)
}

inline void ObjectType_StreamBoardObjectType::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.connectionid_){}
    , decltype(_impl_.userid_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.connectionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.connectionid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.userid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.userid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ObjectType_StreamBoardObjectType::~ObjectType_StreamBoardObjectType() {
  // @@protoc_insertion_point(destructor:JournalData.ObjectType.StreamBoardObjectType)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObjectType_StreamBoardObjectType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.connectionid_.Destroy();
  _impl_.userid_.Destroy();
}

void ObjectType_StreamBoardObjectType::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObjectType_StreamBoardObjectType::Clear() {
// @@protoc_insertion_point(message_clear_start:JournalData.ObjectType.StreamBoardObjectType)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.connectionid_.ClearToEmpty();
  _impl_.userid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectType_StreamBoardObjectType::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string connectionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_connectionid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "JournalData.ObjectType.StreamBoardObjectType.connectionId"));
        } else
          goto handle_unusual;
        continue;
      // string userId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_userid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "JournalData.ObjectType.StreamBoardObjectType.userId"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObjectType_StreamBoardObjectType::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:JournalData.ObjectType.StreamBoardObjectType)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string connectionId = 1;
  if (!this->_internal_connectionid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_connectionid().data(), static_cast<int>(this->_internal_connectionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JournalData.ObjectType.StreamBoardObjectType.connectionId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_connectionid(), target);
  }

  // string userId = 2;
  if (!this->_internal_userid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_userid().data(), static_cast<int>(this->_internal_userid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JournalData.ObjectType.StreamBoardObjectType.userId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_userid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JournalData.ObjectType.StreamBoardObjectType)
  return target;
}

size_t ObjectType_StreamBoardObjectType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JournalData.ObjectType.StreamBoardObjectType)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string connectionId = 1;
  if (!this->_internal_connectionid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_connectionid());
  }

  // string userId = 2;
  if (!this->_internal_userid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_userid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObjectType_StreamBoardObjectType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ObjectType_StreamBoardObjectType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObjectType_StreamBoardObjectType::GetClassData() const { return &_class_data_; }


void ObjectType_StreamBoardObjectType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ObjectType_StreamBoardObjectType*>(&to_msg);
  auto& from = static_cast<const ObjectType_StreamBoardObjectType&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:JournalData.ObjectType.StreamBoardObjectType)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_connectionid().empty()) {
    _this->_internal_set_connectionid(from._internal_connectionid());
  }
  if (!from._internal_userid().empty()) {
    _this->_internal_set_userid(from._internal_userid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObjectType_StreamBoardObjectType::CopyFrom(const ObjectType_StreamBoardObjectType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JournalData.ObjectType.StreamBoardObjectType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectType_StreamBoardObjectType::IsInitialized() const {
  return true;
}

void ObjectType_StreamBoardObjectType::InternalSwap(ObjectType_StreamBoardObjectType* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.connectionid_, lhs_arena,
      &other->_impl_.connectionid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.userid_, lhs_arena,
      &other->_impl_.userid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectType_StreamBoardObjectType::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_journaldata_2eproto_getter, &descriptor_table_journaldata_2eproto_once,
      file_level_metadata_journaldata_2eproto[5]);
}

// ===================================================================

class ObjectType_TextBoardObjectType::_Internal {
 public:
  static const ::JournalData::BoardSizeData& textboard(const ObjectType_TextBoardObjectType* msg);
};

const ::JournalData::BoardSizeData&
ObjectType_TextBoardObjectType::_Internal::textboard(const ObjectType_TextBoardObjectType* msg) {
  return *msg->_impl_.textboard_;
}
ObjectType_TextBoardObjectType::ObjectType_TextBoardObjectType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:JournalData.ObjectType.TextBoardObjectType)
}
ObjectType_TextBoardObjectType::ObjectType_TextBoardObjectType(const ObjectType_TextBoardObjectType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ObjectType_TextBoardObjectType* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.initialtext_){}
    , decltype(_impl_.textboard_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.initialtext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.initialtext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_initialtext().empty()) {
    _this->_impl_.initialtext_.Set(from._internal_initialtext(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_textboard()) {
    _this->_impl_.textboard_ = new ::JournalData::BoardSizeData(*from._impl_.textboard_);
  }
  // @@protoc_insertion_point(copy_constructor:JournalData.ObjectType.TextBoardObjectType)
}

inline void ObjectType_TextBoardObjectType::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.initialtext_){}
    , decltype(_impl_.textboard_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.initialtext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.initialtext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ObjectType_TextBoardObjectType::~ObjectType_TextBoardObjectType() {
  // @@protoc_insertion_point(destructor:JournalData.ObjectType.TextBoardObjectType)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObjectType_TextBoardObjectType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.initialtext_.Destroy();
  if (this != internal_default_instance()) delete _impl_.textboard_;
}

void ObjectType_TextBoardObjectType::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObjectType_TextBoardObjectType::Clear() {
// @@protoc_insertion_point(message_clear_start:JournalData.ObjectType.TextBoardObjectType)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.initialtext_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.textboard_ != nullptr) {
    delete _impl_.textboard_;
  }
  _impl_.textboard_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectType_TextBoardObjectType::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string initialText = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_initialtext();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "JournalData.ObjectType.TextBoardObjectType.initialText"));
        } else
          goto handle_unusual;
        continue;
      // .JournalData.BoardSizeData textboard = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_textboard(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObjectType_TextBoardObjectType::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:JournalData.ObjectType.TextBoardObjectType)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string initialText = 1;
  if (!this->_internal_initialtext().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_initialtext().data(), static_cast<int>(this->_internal_initialtext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JournalData.ObjectType.TextBoardObjectType.initialText");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_initialtext(), target);
  }

  // .JournalData.BoardSizeData textboard = 2;
  if (this->_internal_has_textboard()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::textboard(this),
        _Internal::textboard(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JournalData.ObjectType.TextBoardObjectType)
  return target;
}

size_t ObjectType_TextBoardObjectType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JournalData.ObjectType.TextBoardObjectType)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string initialText = 1;
  if (!this->_internal_initialtext().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_initialtext());
  }

  // .JournalData.BoardSizeData textboard = 2;
  if (this->_internal_has_textboard()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.textboard_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObjectType_TextBoardObjectType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ObjectType_TextBoardObjectType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObjectType_TextBoardObjectType::GetClassData() const { return &_class_data_; }


void ObjectType_TextBoardObjectType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ObjectType_TextBoardObjectType*>(&to_msg);
  auto& from = static_cast<const ObjectType_TextBoardObjectType&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:JournalData.ObjectType.TextBoardObjectType)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_initialtext().empty()) {
    _this->_internal_set_initialtext(from._internal_initialtext());
  }
  if (from._internal_has_textboard()) {
    _this->_internal_mutable_textboard()->::JournalData::BoardSizeData::MergeFrom(
        from._internal_textboard());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObjectType_TextBoardObjectType::CopyFrom(const ObjectType_TextBoardObjectType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JournalData.ObjectType.TextBoardObjectType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectType_TextBoardObjectType::IsInitialized() const {
  return true;
}

void ObjectType_TextBoardObjectType::InternalSwap(ObjectType_TextBoardObjectType* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.initialtext_, lhs_arena,
      &other->_impl_.initialtext_, rhs_arena
  );
  swap(_impl_.textboard_, other->_impl_.textboard_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectType_TextBoardObjectType::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_journaldata_2eproto_getter, &descriptor_table_journaldata_2eproto_once,
      file_level_metadata_journaldata_2eproto[6]);
}

// ===================================================================

class ObjectType_ArTrackerObjectType::_Internal {
 public:
};

ObjectType_ArTrackerObjectType::ObjectType_ArTrackerObjectType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:JournalData.ObjectType.ArTrackerObjectType)
}
ObjectType_ArTrackerObjectType::ObjectType_ArTrackerObjectType(const ObjectType_ArTrackerObjectType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ObjectType_ArTrackerObjectType* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.contentid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.contentid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.contentid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_contentid().empty()) {
    _this->_impl_.contentid_.Set(from._internal_contentid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:JournalData.ObjectType.ArTrackerObjectType)
}

inline void ObjectType_ArTrackerObjectType::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.contentid_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.contentid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.contentid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ObjectType_ArTrackerObjectType::~ObjectType_ArTrackerObjectType() {
  // @@protoc_insertion_point(destructor:JournalData.ObjectType.ArTrackerObjectType)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObjectType_ArTrackerObjectType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.contentid_.Destroy();
}

void ObjectType_ArTrackerObjectType::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObjectType_ArTrackerObjectType::Clear() {
// @@protoc_insertion_point(message_clear_start:JournalData.ObjectType.ArTrackerObjectType)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.contentid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectType_ArTrackerObjectType::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string contentId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_contentid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "JournalData.ObjectType.ArTrackerObjectType.contentId"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObjectType_ArTrackerObjectType::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:JournalData.ObjectType.ArTrackerObjectType)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string contentId = 1;
  if (!this->_internal_contentid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contentid().data(), static_cast<int>(this->_internal_contentid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JournalData.ObjectType.ArTrackerObjectType.contentId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_contentid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JournalData.ObjectType.ArTrackerObjectType)
  return target;
}

size_t ObjectType_ArTrackerObjectType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JournalData.ObjectType.ArTrackerObjectType)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string contentId = 1;
  if (!this->_internal_contentid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contentid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObjectType_ArTrackerObjectType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ObjectType_ArTrackerObjectType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObjectType_ArTrackerObjectType::GetClassData() const { return &_class_data_; }


void ObjectType_ArTrackerObjectType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ObjectType_ArTrackerObjectType*>(&to_msg);
  auto& from = static_cast<const ObjectType_ArTrackerObjectType&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:JournalData.ObjectType.ArTrackerObjectType)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_contentid().empty()) {
    _this->_internal_set_contentid(from._internal_contentid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObjectType_ArTrackerObjectType::CopyFrom(const ObjectType_ArTrackerObjectType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JournalData.ObjectType.ArTrackerObjectType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectType_ArTrackerObjectType::IsInitialized() const {
  return true;
}

void ObjectType_ArTrackerObjectType::InternalSwap(ObjectType_ArTrackerObjectType* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.contentid_, lhs_arena,
      &other->_impl_.contentid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectType_ArTrackerObjectType::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_journaldata_2eproto_getter, &descriptor_table_journaldata_2eproto_once,
      file_level_metadata_journaldata_2eproto[7]);
}

// ===================================================================

class ObjectType_CustomContentId::_Internal {
 public:
};

ObjectType_CustomContentId::ObjectType_CustomContentId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:JournalData.ObjectType.CustomContentId)
}
ObjectType_CustomContentId::ObjectType_CustomContentId(const ObjectType_CustomContentId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ObjectType_CustomContentId* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.customsourceid_){}
    , decltype(_impl_.customcontentid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.customsourceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.customsourceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_customsourceid().empty()) {
    _this->_impl_.customsourceid_.Set(from._internal_customsourceid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.customcontentid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.customcontentid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_customcontentid().empty()) {
    _this->_impl_.customcontentid_.Set(from._internal_customcontentid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:JournalData.ObjectType.CustomContentId)
}

inline void ObjectType_CustomContentId::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.customsourceid_){}
    , decltype(_impl_.customcontentid_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.customsourceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.customsourceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.customcontentid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.customcontentid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ObjectType_CustomContentId::~ObjectType_CustomContentId() {
  // @@protoc_insertion_point(destructor:JournalData.ObjectType.CustomContentId)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObjectType_CustomContentId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.customsourceid_.Destroy();
  _impl_.customcontentid_.Destroy();
}

void ObjectType_CustomContentId::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObjectType_CustomContentId::Clear() {
// @@protoc_insertion_point(message_clear_start:JournalData.ObjectType.CustomContentId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.customsourceid_.ClearToEmpty();
  _impl_.customcontentid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectType_CustomContentId::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string customSourceId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_customsourceid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "JournalData.ObjectType.CustomContentId.customSourceId"));
        } else
          goto handle_unusual;
        continue;
      // string customContentId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_customcontentid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "JournalData.ObjectType.CustomContentId.customContentId"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObjectType_CustomContentId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:JournalData.ObjectType.CustomContentId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string customSourceId = 1;
  if (!this->_internal_customsourceid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_customsourceid().data(), static_cast<int>(this->_internal_customsourceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JournalData.ObjectType.CustomContentId.customSourceId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_customsourceid(), target);
  }

  // string customContentId = 2;
  if (!this->_internal_customcontentid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_customcontentid().data(), static_cast<int>(this->_internal_customcontentid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JournalData.ObjectType.CustomContentId.customContentId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_customcontentid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JournalData.ObjectType.CustomContentId)
  return target;
}

size_t ObjectType_CustomContentId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JournalData.ObjectType.CustomContentId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string customSourceId = 1;
  if (!this->_internal_customsourceid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_customsourceid());
  }

  // string customContentId = 2;
  if (!this->_internal_customcontentid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_customcontentid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObjectType_CustomContentId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ObjectType_CustomContentId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObjectType_CustomContentId::GetClassData() const { return &_class_data_; }


void ObjectType_CustomContentId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ObjectType_CustomContentId*>(&to_msg);
  auto& from = static_cast<const ObjectType_CustomContentId&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:JournalData.ObjectType.CustomContentId)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_customsourceid().empty()) {
    _this->_internal_set_customsourceid(from._internal_customsourceid());
  }
  if (!from._internal_customcontentid().empty()) {
    _this->_internal_set_customcontentid(from._internal_customcontentid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObjectType_CustomContentId::CopyFrom(const ObjectType_CustomContentId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JournalData.ObjectType.CustomContentId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectType_CustomContentId::IsInitialized() const {
  return true;
}

void ObjectType_CustomContentId::InternalSwap(ObjectType_CustomContentId* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.customsourceid_, lhs_arena,
      &other->_impl_.customsourceid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.customcontentid_, lhs_arena,
      &other->_impl_.customcontentid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectType_CustomContentId::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_journaldata_2eproto_getter, &descriptor_table_journaldata_2eproto_once,
      file_level_metadata_journaldata_2eproto[8]);
}

// ===================================================================

class ObjectType_CustomUsingCavrnusContentId::_Internal {
 public:
};

ObjectType_CustomUsingCavrnusContentId::ObjectType_CustomUsingCavrnusContentId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:JournalData.ObjectType.CustomUsingCavrnusContentId)
}
ObjectType_CustomUsingCavrnusContentId::ObjectType_CustomUsingCavrnusContentId(const ObjectType_CustomUsingCavrnusContentId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ObjectType_CustomUsingCavrnusContentId* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.customusageid_){}
    , decltype(_impl_.customcontentid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.customusageid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.customusageid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_customusageid().empty()) {
    _this->_impl_.customusageid_.Set(from._internal_customusageid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.customcontentid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.customcontentid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_customcontentid().empty()) {
    _this->_impl_.customcontentid_.Set(from._internal_customcontentid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:JournalData.ObjectType.CustomUsingCavrnusContentId)
}

inline void ObjectType_CustomUsingCavrnusContentId::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.customusageid_){}
    , decltype(_impl_.customcontentid_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.customusageid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.customusageid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.customcontentid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.customcontentid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ObjectType_CustomUsingCavrnusContentId::~ObjectType_CustomUsingCavrnusContentId() {
  // @@protoc_insertion_point(destructor:JournalData.ObjectType.CustomUsingCavrnusContentId)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObjectType_CustomUsingCavrnusContentId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.customusageid_.Destroy();
  _impl_.customcontentid_.Destroy();
}

void ObjectType_CustomUsingCavrnusContentId::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObjectType_CustomUsingCavrnusContentId::Clear() {
// @@protoc_insertion_point(message_clear_start:JournalData.ObjectType.CustomUsingCavrnusContentId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.customusageid_.ClearToEmpty();
  _impl_.customcontentid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectType_CustomUsingCavrnusContentId::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string customUsageId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_customusageid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "JournalData.ObjectType.CustomUsingCavrnusContentId.customUsageId"));
        } else
          goto handle_unusual;
        continue;
      // string customContentId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_customcontentid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "JournalData.ObjectType.CustomUsingCavrnusContentId.customContentId"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObjectType_CustomUsingCavrnusContentId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:JournalData.ObjectType.CustomUsingCavrnusContentId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string customUsageId = 1;
  if (!this->_internal_customusageid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_customusageid().data(), static_cast<int>(this->_internal_customusageid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JournalData.ObjectType.CustomUsingCavrnusContentId.customUsageId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_customusageid(), target);
  }

  // string customContentId = 2;
  if (!this->_internal_customcontentid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_customcontentid().data(), static_cast<int>(this->_internal_customcontentid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JournalData.ObjectType.CustomUsingCavrnusContentId.customContentId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_customcontentid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JournalData.ObjectType.CustomUsingCavrnusContentId)
  return target;
}

size_t ObjectType_CustomUsingCavrnusContentId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JournalData.ObjectType.CustomUsingCavrnusContentId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string customUsageId = 1;
  if (!this->_internal_customusageid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_customusageid());
  }

  // string customContentId = 2;
  if (!this->_internal_customcontentid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_customcontentid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObjectType_CustomUsingCavrnusContentId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ObjectType_CustomUsingCavrnusContentId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObjectType_CustomUsingCavrnusContentId::GetClassData() const { return &_class_data_; }


void ObjectType_CustomUsingCavrnusContentId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ObjectType_CustomUsingCavrnusContentId*>(&to_msg);
  auto& from = static_cast<const ObjectType_CustomUsingCavrnusContentId&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:JournalData.ObjectType.CustomUsingCavrnusContentId)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_customusageid().empty()) {
    _this->_internal_set_customusageid(from._internal_customusageid());
  }
  if (!from._internal_customcontentid().empty()) {
    _this->_internal_set_customcontentid(from._internal_customcontentid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObjectType_CustomUsingCavrnusContentId::CopyFrom(const ObjectType_CustomUsingCavrnusContentId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JournalData.ObjectType.CustomUsingCavrnusContentId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectType_CustomUsingCavrnusContentId::IsInitialized() const {
  return true;
}

void ObjectType_CustomUsingCavrnusContentId::InternalSwap(ObjectType_CustomUsingCavrnusContentId* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.customusageid_, lhs_arena,
      &other->_impl_.customusageid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.customcontentid_, lhs_arena,
      &other->_impl_.customcontentid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectType_CustomUsingCavrnusContentId::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_journaldata_2eproto_getter, &descriptor_table_journaldata_2eproto_once,
      file_level_metadata_journaldata_2eproto[9]);
}

// ===================================================================

class ObjectType_ChatMessageObjectType::_Internal {
 public:
  using HasBits = decltype(std::declval<ObjectType_ChatMessageObjectType>()._impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timecreated(const ObjectType_ChatMessageObjectType* msg);
  static void set_has_creatorid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sourcetype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ObjectType_ChatMessageObjectType::_Internal::timecreated(const ObjectType_ChatMessageObjectType* msg) {
  return *msg->_impl_.timecreated_;
}
void ObjectType_ChatMessageObjectType::clear_timecreated() {
  if (GetArenaForAllocation() == nullptr && _impl_.timecreated_ != nullptr) {
    delete _impl_.timecreated_;
  }
  _impl_.timecreated_ = nullptr;
}
ObjectType_ChatMessageObjectType::ObjectType_ChatMessageObjectType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:JournalData.ObjectType.ChatMessageObjectType)
}
ObjectType_ChatMessageObjectType::ObjectType_ChatMessageObjectType(const ObjectType_ChatMessageObjectType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ObjectType_ChatMessageObjectType* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.initialtext_){}
    , decltype(_impl_.creatorid_){}
    , decltype(_impl_.timecreated_){nullptr}
    , decltype(_impl_.sourcetype_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.initialtext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.initialtext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_initialtext().empty()) {
    _this->_impl_.initialtext_.Set(from._internal_initialtext(), 
      _this->GetArenaForAllocation());
  }
  _impl_.creatorid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.creatorid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_creatorid()) {
    _this->_impl_.creatorid_.Set(from._internal_creatorid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_timecreated()) {
    _this->_impl_.timecreated_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.timecreated_);
  }
  _this->_impl_.sourcetype_ = from._impl_.sourcetype_;
  // @@protoc_insertion_point(copy_constructor:JournalData.ObjectType.ChatMessageObjectType)
}

inline void ObjectType_ChatMessageObjectType::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.initialtext_){}
    , decltype(_impl_.creatorid_){}
    , decltype(_impl_.timecreated_){nullptr}
    , decltype(_impl_.sourcetype_){0}
  };
  _impl_.initialtext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.initialtext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.creatorid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.creatorid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ObjectType_ChatMessageObjectType::~ObjectType_ChatMessageObjectType() {
  // @@protoc_insertion_point(destructor:JournalData.ObjectType.ChatMessageObjectType)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObjectType_ChatMessageObjectType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.initialtext_.Destroy();
  _impl_.creatorid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.timecreated_;
}

void ObjectType_ChatMessageObjectType::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObjectType_ChatMessageObjectType::Clear() {
// @@protoc_insertion_point(message_clear_start:JournalData.ObjectType.ChatMessageObjectType)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.initialtext_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.creatorid_.ClearNonDefaultToEmpty();
  }
  if (GetArenaForAllocation() == nullptr && _impl_.timecreated_ != nullptr) {
    delete _impl_.timecreated_;
  }
  _impl_.timecreated_ = nullptr;
  _impl_.sourcetype_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectType_ChatMessageObjectType::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string initialText = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_initialtext();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "JournalData.ObjectType.ChatMessageObjectType.initialText"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timeCreated = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_timecreated(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string creatorId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_creatorid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "JournalData.ObjectType.ChatMessageObjectType.creatorId"));
        } else
          goto handle_unusual;
        continue;
      // optional .JournalData.ChatMessageSourceTypeEnum sourceType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_sourcetype(static_cast<::JournalData::ChatMessageSourceTypeEnum>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObjectType_ChatMessageObjectType::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:JournalData.ObjectType.ChatMessageObjectType)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string initialText = 1;
  if (!this->_internal_initialtext().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_initialtext().data(), static_cast<int>(this->_internal_initialtext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JournalData.ObjectType.ChatMessageObjectType.initialText");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_initialtext(), target);
  }

  // .google.protobuf.Timestamp timeCreated = 2;
  if (this->_internal_has_timecreated()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::timecreated(this),
        _Internal::timecreated(this).GetCachedSize(), target, stream);
  }

  // optional string creatorId = 3;
  if (_internal_has_creatorid()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_creatorid().data(), static_cast<int>(this->_internal_creatorid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JournalData.ObjectType.ChatMessageObjectType.creatorId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_creatorid(), target);
  }

  // optional .JournalData.ChatMessageSourceTypeEnum sourceType = 4;
  if (_internal_has_sourcetype()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_sourcetype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JournalData.ObjectType.ChatMessageObjectType)
  return target;
}

size_t ObjectType_ChatMessageObjectType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JournalData.ObjectType.ChatMessageObjectType)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string initialText = 1;
  if (!this->_internal_initialtext().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_initialtext());
  }

  // optional string creatorId = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_creatorid());
  }

  // .google.protobuf.Timestamp timeCreated = 2;
  if (this->_internal_has_timecreated()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.timecreated_);
  }

  // optional .JournalData.ChatMessageSourceTypeEnum sourceType = 4;
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_sourcetype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObjectType_ChatMessageObjectType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ObjectType_ChatMessageObjectType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObjectType_ChatMessageObjectType::GetClassData() const { return &_class_data_; }


void ObjectType_ChatMessageObjectType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ObjectType_ChatMessageObjectType*>(&to_msg);
  auto& from = static_cast<const ObjectType_ChatMessageObjectType&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:JournalData.ObjectType.ChatMessageObjectType)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_initialtext().empty()) {
    _this->_internal_set_initialtext(from._internal_initialtext());
  }
  if (from._internal_has_creatorid()) {
    _this->_internal_set_creatorid(from._internal_creatorid());
  }
  if (from._internal_has_timecreated()) {
    _this->_internal_mutable_timecreated()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_timecreated());
  }
  if (from._internal_has_sourcetype()) {
    _this->_internal_set_sourcetype(from._internal_sourcetype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObjectType_ChatMessageObjectType::CopyFrom(const ObjectType_ChatMessageObjectType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JournalData.ObjectType.ChatMessageObjectType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectType_ChatMessageObjectType::IsInitialized() const {
  return true;
}

void ObjectType_ChatMessageObjectType::InternalSwap(ObjectType_ChatMessageObjectType* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.initialtext_, lhs_arena,
      &other->_impl_.initialtext_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.creatorid_, lhs_arena,
      &other->_impl_.creatorid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObjectType_ChatMessageObjectType, _impl_.sourcetype_)
      + sizeof(ObjectType_ChatMessageObjectType::_impl_.sourcetype_)
      - PROTOBUF_FIELD_OFFSET(ObjectType_ChatMessageObjectType, _impl_.timecreated_)>(
          reinterpret_cast<char*>(&_impl_.timecreated_),
          reinterpret_cast<char*>(&other->_impl_.timecreated_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectType_ChatMessageObjectType::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_journaldata_2eproto_getter, &descriptor_table_journaldata_2eproto_once,
      file_level_metadata_journaldata_2eproto[10]);
}

// ===================================================================

class ObjectType::_Internal {
 public:
  static const ::JournalData::BoardSizeData& whiteboard(const ObjectType* msg);
  static const ::JournalData::ObjectType_StreamBoardObjectType& streamboardowner(const ObjectType* msg);
  static const ::JournalData::Progress& objectprogress(const ObjectType* msg);
  static const ::JournalData::Progress& boardprogress(const ObjectType* msg);
  static const ::JournalData::ObjectType_TextBoardObjectType& textboard(const ObjectType* msg);
  static const ::JournalData::ObjectType_ArTrackerObjectType& artracker(const ObjectType* msg);
  static const ::JournalData::ObjectType_CustomContentId& customcontentid(const ObjectType* msg);
  static const ::JournalData::ObjectType_CustomUsingCavrnusContentId& customcavrnuscontentid(const ObjectType* msg);
  static const ::JournalData::ObjectType_ChatMessageObjectType& chatmessage(const ObjectType* msg);
};

const ::JournalData::BoardSizeData&
ObjectType::_Internal::whiteboard(const ObjectType* msg) {
  return *msg->_impl_.Ob_.whiteboard_;
}
const ::JournalData::ObjectType_StreamBoardObjectType&
ObjectType::_Internal::streamboardowner(const ObjectType* msg) {
  return *msg->_impl_.Ob_.streamboardowner_;
}
const ::JournalData::Progress&
ObjectType::_Internal::objectprogress(const ObjectType* msg) {
  return *msg->_impl_.Ob_.objectprogress_;
}
const ::JournalData::Progress&
ObjectType::_Internal::boardprogress(const ObjectType* msg) {
  return *msg->_impl_.Ob_.boardprogress_;
}
const ::JournalData::ObjectType_TextBoardObjectType&
ObjectType::_Internal::textboard(const ObjectType* msg) {
  return *msg->_impl_.Ob_.textboard_;
}
const ::JournalData::ObjectType_ArTrackerObjectType&
ObjectType::_Internal::artracker(const ObjectType* msg) {
  return *msg->_impl_.Ob_.artracker_;
}
const ::JournalData::ObjectType_CustomContentId&
ObjectType::_Internal::customcontentid(const ObjectType* msg) {
  return *msg->_impl_.Ob_.customcontentid_;
}
const ::JournalData::ObjectType_CustomUsingCavrnusContentId&
ObjectType::_Internal::customcavrnuscontentid(const ObjectType* msg) {
  return *msg->_impl_.Ob_.customcavrnuscontentid_;
}
const ::JournalData::ObjectType_ChatMessageObjectType&
ObjectType::_Internal::chatmessage(const ObjectType* msg) {
  return *msg->_impl_.Ob_.chatmessage_;
}
void ObjectType::set_allocated_whiteboard(::JournalData::BoardSizeData* whiteboard) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Ob();
  if (whiteboard) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(whiteboard);
    if (message_arena != submessage_arena) {
      whiteboard = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, whiteboard, submessage_arena);
    }
    set_has_whiteboard();
    _impl_.Ob_.whiteboard_ = whiteboard;
  }
  // @@protoc_insertion_point(field_set_allocated:JournalData.ObjectType.whiteboard)
}
void ObjectType::set_allocated_streamboardowner(::JournalData::ObjectType_StreamBoardObjectType* streamboardowner) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Ob();
  if (streamboardowner) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(streamboardowner);
    if (message_arena != submessage_arena) {
      streamboardowner = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, streamboardowner, submessage_arena);
    }
    set_has_streamboardowner();
    _impl_.Ob_.streamboardowner_ = streamboardowner;
  }
  // @@protoc_insertion_point(field_set_allocated:JournalData.ObjectType.streamBoardOwner)
}
void ObjectType::set_allocated_objectprogress(::JournalData::Progress* objectprogress) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Ob();
  if (objectprogress) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(objectprogress);
    if (message_arena != submessage_arena) {
      objectprogress = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, objectprogress, submessage_arena);
    }
    set_has_objectprogress();
    _impl_.Ob_.objectprogress_ = objectprogress;
  }
  // @@protoc_insertion_point(field_set_allocated:JournalData.ObjectType.objectProgress)
}
void ObjectType::set_allocated_boardprogress(::JournalData::Progress* boardprogress) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Ob();
  if (boardprogress) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(boardprogress);
    if (message_arena != submessage_arena) {
      boardprogress = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, boardprogress, submessage_arena);
    }
    set_has_boardprogress();
    _impl_.Ob_.boardprogress_ = boardprogress;
  }
  // @@protoc_insertion_point(field_set_allocated:JournalData.ObjectType.boardProgress)
}
void ObjectType::set_allocated_textboard(::JournalData::ObjectType_TextBoardObjectType* textboard) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Ob();
  if (textboard) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(textboard);
    if (message_arena != submessage_arena) {
      textboard = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, textboard, submessage_arena);
    }
    set_has_textboard();
    _impl_.Ob_.textboard_ = textboard;
  }
  // @@protoc_insertion_point(field_set_allocated:JournalData.ObjectType.textboard)
}
void ObjectType::set_allocated_artracker(::JournalData::ObjectType_ArTrackerObjectType* artracker) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Ob();
  if (artracker) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(artracker);
    if (message_arena != submessage_arena) {
      artracker = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, artracker, submessage_arena);
    }
    set_has_artracker();
    _impl_.Ob_.artracker_ = artracker;
  }
  // @@protoc_insertion_point(field_set_allocated:JournalData.ObjectType.arTracker)
}
void ObjectType::set_allocated_customcontentid(::JournalData::ObjectType_CustomContentId* customcontentid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Ob();
  if (customcontentid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(customcontentid);
    if (message_arena != submessage_arena) {
      customcontentid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, customcontentid, submessage_arena);
    }
    set_has_customcontentid();
    _impl_.Ob_.customcontentid_ = customcontentid;
  }
  // @@protoc_insertion_point(field_set_allocated:JournalData.ObjectType.customContentId)
}
void ObjectType::set_allocated_customcavrnuscontentid(::JournalData::ObjectType_CustomUsingCavrnusContentId* customcavrnuscontentid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Ob();
  if (customcavrnuscontentid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(customcavrnuscontentid);
    if (message_arena != submessage_arena) {
      customcavrnuscontentid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, customcavrnuscontentid, submessage_arena);
    }
    set_has_customcavrnuscontentid();
    _impl_.Ob_.customcavrnuscontentid_ = customcavrnuscontentid;
  }
  // @@protoc_insertion_point(field_set_allocated:JournalData.ObjectType.customCavrnusContentId)
}
void ObjectType::set_allocated_chatmessage(::JournalData::ObjectType_ChatMessageObjectType* chatmessage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Ob();
  if (chatmessage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(chatmessage);
    if (message_arena != submessage_arena) {
      chatmessage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chatmessage, submessage_arena);
    }
    set_has_chatmessage();
    _impl_.Ob_.chatmessage_ = chatmessage;
  }
  // @@protoc_insertion_point(field_set_allocated:JournalData.ObjectType.chatMessage)
}
ObjectType::ObjectType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:JournalData.ObjectType)
}
ObjectType::ObjectType(const ObjectType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ObjectType* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.Ob_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_Ob();
  switch (from.Ob_case()) {
    case kContentId: {
      _this->_internal_set_contentid(from._internal_contentid());
      break;
    }
    case kWhiteboard: {
      _this->_internal_mutable_whiteboard()->::JournalData::BoardSizeData::MergeFrom(
          from._internal_whiteboard());
      break;
    }
    case kStreamBoardOwner: {
      _this->_internal_mutable_streamboardowner()->::JournalData::ObjectType_StreamBoardObjectType::MergeFrom(
          from._internal_streamboardowner());
      break;
    }
    case kUserBoard: {
      _this->_internal_set_userboard(from._internal_userboard());
      break;
    }
    case kObjectProgress: {
      _this->_internal_mutable_objectprogress()->::JournalData::Progress::MergeFrom(
          from._internal_objectprogress());
      break;
    }
    case kBoardProgress: {
      _this->_internal_mutable_boardprogress()->::JournalData::Progress::MergeFrom(
          from._internal_boardprogress());
      break;
    }
    case kTextboard: {
      _this->_internal_mutable_textboard()->::JournalData::ObjectType_TextBoardObjectType::MergeFrom(
          from._internal_textboard());
      break;
    }
    case kArTracker: {
      _this->_internal_mutable_artracker()->::JournalData::ObjectType_ArTrackerObjectType::MergeFrom(
          from._internal_artracker());
      break;
    }
    case kContentIdAsset: {
      _this->_internal_set_contentidasset(from._internal_contentidasset());
      break;
    }
    case kCustomContentId: {
      _this->_internal_mutable_customcontentid()->::JournalData::ObjectType_CustomContentId::MergeFrom(
          from._internal_customcontentid());
      break;
    }
    case kCustomCavrnusContentId: {
      _this->_internal_mutable_customcavrnuscontentid()->::JournalData::ObjectType_CustomUsingCavrnusContentId::MergeFrom(
          from._internal_customcavrnuscontentid());
      break;
    }
    case kChatMessage: {
      _this->_internal_mutable_chatmessage()->::JournalData::ObjectType_ChatMessageObjectType::MergeFrom(
          from._internal_chatmessage());
      break;
    }
    case kBlankMaterial: {
      _this->_internal_set_blankmaterial(from._internal_blankmaterial());
      break;
    }
    case kWellKnownObjectId: {
      _this->_internal_set_wellknownobjectid(from._internal_wellknownobjectid());
      break;
    }
    case kUrl: {
      _this->_internal_set_url(from._internal_url());
      break;
    }
    case OB_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:JournalData.ObjectType)
}

inline void ObjectType::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.Ob_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_Ob();
}

ObjectType::~ObjectType() {
  // @@protoc_insertion_point(destructor:JournalData.ObjectType)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObjectType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_Ob()) {
    clear_Ob();
  }
}

void ObjectType::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObjectType::clear_Ob() {
// @@protoc_insertion_point(one_of_clear_start:JournalData.ObjectType)
  switch (Ob_case()) {
    case kContentId: {
      _impl_.Ob_.contentid_.Destroy();
      break;
    }
    case kWhiteboard: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.Ob_.whiteboard_;
      }
      break;
    }
    case kStreamBoardOwner: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.Ob_.streamboardowner_;
      }
      break;
    }
    case kUserBoard: {
      // No need to clear
      break;
    }
    case kObjectProgress: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.Ob_.objectprogress_;
      }
      break;
    }
    case kBoardProgress: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.Ob_.boardprogress_;
      }
      break;
    }
    case kTextboard: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.Ob_.textboard_;
      }
      break;
    }
    case kArTracker: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.Ob_.artracker_;
      }
      break;
    }
    case kContentIdAsset: {
      _impl_.Ob_.contentidasset_.Destroy();
      break;
    }
    case kCustomContentId: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.Ob_.customcontentid_;
      }
      break;
    }
    case kCustomCavrnusContentId: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.Ob_.customcavrnuscontentid_;
      }
      break;
    }
    case kChatMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.Ob_.chatmessage_;
      }
      break;
    }
    case kBlankMaterial: {
      // No need to clear
      break;
    }
    case kWellKnownObjectId: {
      _impl_.Ob_.wellknownobjectid_.Destroy();
      break;
    }
    case kUrl: {
      _impl_.Ob_.url_.Destroy();
      break;
    }
    case OB_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = OB_NOT_SET;
}


void ObjectType::Clear() {
// @@protoc_insertion_point(message_clear_start:JournalData.ObjectType)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_Ob();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectType::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string contentId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_contentid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "JournalData.ObjectType.contentId"));
        } else
          goto handle_unusual;
        continue;
      // .JournalData.BoardSizeData whiteboard = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_whiteboard(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .JournalData.ObjectType.StreamBoardObjectType streamBoardOwner = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_streamboardowner(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool userBoard = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _internal_set_userboard(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .JournalData.Progress objectProgress = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_objectprogress(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .JournalData.Progress boardProgress = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_boardprogress(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .JournalData.ObjectType.TextBoardObjectType textboard = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_textboard(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .JournalData.ObjectType.ArTrackerObjectType arTracker = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_artracker(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string contentIdAsset = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_contentidasset();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "JournalData.ObjectType.contentIdAsset"));
        } else
          goto handle_unusual;
        continue;
      // .JournalData.ObjectType.CustomContentId customContentId = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_customcontentid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .JournalData.ObjectType.CustomUsingCavrnusContentId customCavrnusContentId = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_customcavrnuscontentid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .JournalData.ObjectType.ChatMessageObjectType chatMessage = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_chatmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool blankMaterial = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _internal_set_blankmaterial(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string wellKnownObjectId = 500;
      case 500:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_wellknownobjectid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "JournalData.ObjectType.wellKnownObjectId"));
        } else
          goto handle_unusual;
        continue;
      // string url = 501;
      case 501:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "JournalData.ObjectType.url"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObjectType::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:JournalData.ObjectType)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string contentId = 1;
  if (_internal_has_contentid()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contentid().data(), static_cast<int>(this->_internal_contentid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JournalData.ObjectType.contentId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_contentid(), target);
  }

  // .JournalData.BoardSizeData whiteboard = 2;
  if (_internal_has_whiteboard()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::whiteboard(this),
        _Internal::whiteboard(this).GetCachedSize(), target, stream);
  }

  // .JournalData.ObjectType.StreamBoardObjectType streamBoardOwner = 3;
  if (_internal_has_streamboardowner()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::streamboardowner(this),
        _Internal::streamboardowner(this).GetCachedSize(), target, stream);
  }

  // bool userBoard = 6;
  if (_internal_has_userboard()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_userboard(), target);
  }

  // .JournalData.Progress objectProgress = 7;
  if (_internal_has_objectprogress()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::objectprogress(this),
        _Internal::objectprogress(this).GetCachedSize(), target, stream);
  }

  // .JournalData.Progress boardProgress = 8;
  if (_internal_has_boardprogress()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::boardprogress(this),
        _Internal::boardprogress(this).GetCachedSize(), target, stream);
  }

  // .JournalData.ObjectType.TextBoardObjectType textboard = 10;
  if (_internal_has_textboard()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::textboard(this),
        _Internal::textboard(this).GetCachedSize(), target, stream);
  }

  // .JournalData.ObjectType.ArTrackerObjectType arTracker = 15;
  if (_internal_has_artracker()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::artracker(this),
        _Internal::artracker(this).GetCachedSize(), target, stream);
  }

  // string contentIdAsset = 20;
  if (_internal_has_contentidasset()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contentidasset().data(), static_cast<int>(this->_internal_contentidasset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JournalData.ObjectType.contentIdAsset");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_contentidasset(), target);
  }

  // .JournalData.ObjectType.CustomContentId customContentId = 21;
  if (_internal_has_customcontentid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::customcontentid(this),
        _Internal::customcontentid(this).GetCachedSize(), target, stream);
  }

  // .JournalData.ObjectType.CustomUsingCavrnusContentId customCavrnusContentId = 22;
  if (_internal_has_customcavrnuscontentid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::customcavrnuscontentid(this),
        _Internal::customcavrnuscontentid(this).GetCachedSize(), target, stream);
  }

  // .JournalData.ObjectType.ChatMessageObjectType chatMessage = 50;
  if (_internal_has_chatmessage()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(50, _Internal::chatmessage(this),
        _Internal::chatmessage(this).GetCachedSize(), target, stream);
  }

  // bool blankMaterial = 100;
  if (_internal_has_blankmaterial()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(100, this->_internal_blankmaterial(), target);
  }

  // string wellKnownObjectId = 500;
  if (_internal_has_wellknownobjectid()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_wellknownobjectid().data(), static_cast<int>(this->_internal_wellknownobjectid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JournalData.ObjectType.wellKnownObjectId");
    target = stream->WriteStringMaybeAliased(
        500, this->_internal_wellknownobjectid(), target);
  }

  // string url = 501;
  if (_internal_has_url()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JournalData.ObjectType.url");
    target = stream->WriteStringMaybeAliased(
        501, this->_internal_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JournalData.ObjectType)
  return target;
}

size_t ObjectType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JournalData.ObjectType)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (Ob_case()) {
    // string contentId = 1;
    case kContentId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_contentid());
      break;
    }
    // .JournalData.BoardSizeData whiteboard = 2;
    case kWhiteboard: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.Ob_.whiteboard_);
      break;
    }
    // .JournalData.ObjectType.StreamBoardObjectType streamBoardOwner = 3;
    case kStreamBoardOwner: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.Ob_.streamboardowner_);
      break;
    }
    // bool userBoard = 6;
    case kUserBoard: {
      total_size += 1 + 1;
      break;
    }
    // .JournalData.Progress objectProgress = 7;
    case kObjectProgress: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.Ob_.objectprogress_);
      break;
    }
    // .JournalData.Progress boardProgress = 8;
    case kBoardProgress: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.Ob_.boardprogress_);
      break;
    }
    // .JournalData.ObjectType.TextBoardObjectType textboard = 10;
    case kTextboard: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.Ob_.textboard_);
      break;
    }
    // .JournalData.ObjectType.ArTrackerObjectType arTracker = 15;
    case kArTracker: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.Ob_.artracker_);
      break;
    }
    // string contentIdAsset = 20;
    case kContentIdAsset: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_contentidasset());
      break;
    }
    // .JournalData.ObjectType.CustomContentId customContentId = 21;
    case kCustomContentId: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.Ob_.customcontentid_);
      break;
    }
    // .JournalData.ObjectType.CustomUsingCavrnusContentId customCavrnusContentId = 22;
    case kCustomCavrnusContentId: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.Ob_.customcavrnuscontentid_);
      break;
    }
    // .JournalData.ObjectType.ChatMessageObjectType chatMessage = 50;
    case kChatMessage: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.Ob_.chatmessage_);
      break;
    }
    // bool blankMaterial = 100;
    case kBlankMaterial: {
      total_size += 2 + 1;
      break;
    }
    // string wellKnownObjectId = 500;
    case kWellKnownObjectId: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_wellknownobjectid());
      break;
    }
    // string url = 501;
    case kUrl: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
      break;
    }
    case OB_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObjectType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ObjectType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObjectType::GetClassData() const { return &_class_data_; }


void ObjectType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ObjectType*>(&to_msg);
  auto& from = static_cast<const ObjectType&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:JournalData.ObjectType)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.Ob_case()) {
    case kContentId: {
      _this->_internal_set_contentid(from._internal_contentid());
      break;
    }
    case kWhiteboard: {
      _this->_internal_mutable_whiteboard()->::JournalData::BoardSizeData::MergeFrom(
          from._internal_whiteboard());
      break;
    }
    case kStreamBoardOwner: {
      _this->_internal_mutable_streamboardowner()->::JournalData::ObjectType_StreamBoardObjectType::MergeFrom(
          from._internal_streamboardowner());
      break;
    }
    case kUserBoard: {
      _this->_internal_set_userboard(from._internal_userboard());
      break;
    }
    case kObjectProgress: {
      _this->_internal_mutable_objectprogress()->::JournalData::Progress::MergeFrom(
          from._internal_objectprogress());
      break;
    }
    case kBoardProgress: {
      _this->_internal_mutable_boardprogress()->::JournalData::Progress::MergeFrom(
          from._internal_boardprogress());
      break;
    }
    case kTextboard: {
      _this->_internal_mutable_textboard()->::JournalData::ObjectType_TextBoardObjectType::MergeFrom(
          from._internal_textboard());
      break;
    }
    case kArTracker: {
      _this->_internal_mutable_artracker()->::JournalData::ObjectType_ArTrackerObjectType::MergeFrom(
          from._internal_artracker());
      break;
    }
    case kContentIdAsset: {
      _this->_internal_set_contentidasset(from._internal_contentidasset());
      break;
    }
    case kCustomContentId: {
      _this->_internal_mutable_customcontentid()->::JournalData::ObjectType_CustomContentId::MergeFrom(
          from._internal_customcontentid());
      break;
    }
    case kCustomCavrnusContentId: {
      _this->_internal_mutable_customcavrnuscontentid()->::JournalData::ObjectType_CustomUsingCavrnusContentId::MergeFrom(
          from._internal_customcavrnuscontentid());
      break;
    }
    case kChatMessage: {
      _this->_internal_mutable_chatmessage()->::JournalData::ObjectType_ChatMessageObjectType::MergeFrom(
          from._internal_chatmessage());
      break;
    }
    case kBlankMaterial: {
      _this->_internal_set_blankmaterial(from._internal_blankmaterial());
      break;
    }
    case kWellKnownObjectId: {
      _this->_internal_set_wellknownobjectid(from._internal_wellknownobjectid());
      break;
    }
    case kUrl: {
      _this->_internal_set_url(from._internal_url());
      break;
    }
    case OB_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObjectType::CopyFrom(const ObjectType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JournalData.ObjectType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectType::IsInitialized() const {
  return true;
}

void ObjectType::InternalSwap(ObjectType* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.Ob_, other->_impl_.Ob_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectType::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_journaldata_2eproto_getter, &descriptor_table_journaldata_2eproto_once,
      file_level_metadata_journaldata_2eproto[11]);
}

// ===================================================================

class BoardSizeData::_Internal {
 public:
  static const ::Common::Float2& aspectratio(const BoardSizeData* msg);
};

const ::Common::Float2&
BoardSizeData::_Internal::aspectratio(const BoardSizeData* msg) {
  return *msg->_impl_.aspectratio_;
}
void BoardSizeData::clear_aspectratio() {
  if (GetArenaForAllocation() == nullptr && _impl_.aspectratio_ != nullptr) {
    delete _impl_.aspectratio_;
  }
  _impl_.aspectratio_ = nullptr;
}
BoardSizeData::BoardSizeData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:JournalData.BoardSizeData)
}
BoardSizeData::BoardSizeData(const BoardSizeData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BoardSizeData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.aspectratio_){nullptr}
    , decltype(_impl_.boardsizescaler_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_aspectratio()) {
    _this->_impl_.aspectratio_ = new ::Common::Float2(*from._impl_.aspectratio_);
  }
  _this->_impl_.boardsizescaler_ = from._impl_.boardsizescaler_;
  // @@protoc_insertion_point(copy_constructor:JournalData.BoardSizeData)
}

inline void BoardSizeData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.aspectratio_){nullptr}
    , decltype(_impl_.boardsizescaler_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BoardSizeData::~BoardSizeData() {
  // @@protoc_insertion_point(destructor:JournalData.BoardSizeData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BoardSizeData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.aspectratio_;
}

void BoardSizeData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BoardSizeData::Clear() {
// @@protoc_insertion_point(message_clear_start:JournalData.BoardSizeData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.aspectratio_ != nullptr) {
    delete _impl_.aspectratio_;
  }
  _impl_.aspectratio_ = nullptr;
  _impl_.boardsizescaler_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoardSizeData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Common.Float2 aspectRatio = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_aspectratio(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float boardSizeScaler = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.boardsizescaler_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BoardSizeData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:JournalData.BoardSizeData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Common.Float2 aspectRatio = 1;
  if (this->_internal_has_aspectratio()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::aspectratio(this),
        _Internal::aspectratio(this).GetCachedSize(), target, stream);
  }

  // float boardSizeScaler = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_boardsizescaler = this->_internal_boardsizescaler();
  uint32_t raw_boardsizescaler;
  memcpy(&raw_boardsizescaler, &tmp_boardsizescaler, sizeof(tmp_boardsizescaler));
  if (raw_boardsizescaler != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_boardsizescaler(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JournalData.BoardSizeData)
  return target;
}

size_t BoardSizeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JournalData.BoardSizeData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Common.Float2 aspectRatio = 1;
  if (this->_internal_has_aspectratio()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.aspectratio_);
  }

  // float boardSizeScaler = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_boardsizescaler = this->_internal_boardsizescaler();
  uint32_t raw_boardsizescaler;
  memcpy(&raw_boardsizescaler, &tmp_boardsizescaler, sizeof(tmp_boardsizescaler));
  if (raw_boardsizescaler != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BoardSizeData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BoardSizeData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BoardSizeData::GetClassData() const { return &_class_data_; }


void BoardSizeData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BoardSizeData*>(&to_msg);
  auto& from = static_cast<const BoardSizeData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:JournalData.BoardSizeData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_aspectratio()) {
    _this->_internal_mutable_aspectratio()->::Common::Float2::MergeFrom(
        from._internal_aspectratio());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_boardsizescaler = from._internal_boardsizescaler();
  uint32_t raw_boardsizescaler;
  memcpy(&raw_boardsizescaler, &tmp_boardsizescaler, sizeof(tmp_boardsizescaler));
  if (raw_boardsizescaler != 0) {
    _this->_internal_set_boardsizescaler(from._internal_boardsizescaler());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BoardSizeData::CopyFrom(const BoardSizeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JournalData.BoardSizeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoardSizeData::IsInitialized() const {
  return true;
}

void BoardSizeData::InternalSwap(BoardSizeData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BoardSizeData, _impl_.boardsizescaler_)
      + sizeof(BoardSizeData::_impl_.boardsizescaler_)
      - PROTOBUF_FIELD_OFFSET(BoardSizeData, _impl_.aspectratio_)>(
          reinterpret_cast<char*>(&_impl_.aspectratio_),
          reinterpret_cast<char*>(&other->_impl_.aspectratio_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BoardSizeData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_journaldata_2eproto_getter, &descriptor_table_journaldata_2eproto_once,
      file_level_metadata_journaldata_2eproto[12]);
}

// ===================================================================

class ImageContentType::_Internal {
 public:
  static const ::JournalData::Progress& imageprogress(const ImageContentType* msg);
};

const ::JournalData::Progress&
ImageContentType::_Internal::imageprogress(const ImageContentType* msg) {
  return *msg->_impl_.Im_.imageprogress_;
}
void ImageContentType::set_allocated_imageprogress(::JournalData::Progress* imageprogress) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Im();
  if (imageprogress) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(imageprogress);
    if (message_arena != submessage_arena) {
      imageprogress = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, imageprogress, submessage_arena);
    }
    set_has_imageprogress();
    _impl_.Im_.imageprogress_ = imageprogress;
  }
  // @@protoc_insertion_point(field_set_allocated:JournalData.ImageContentType.imageProgress)
}
ImageContentType::ImageContentType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:JournalData.ImageContentType)
}
ImageContentType::ImageContentType(const ImageContentType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ImageContentType* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.Im_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_Im();
  switch (from.Im_case()) {
    case kContentId: {
      _this->_internal_set_contentid(from._internal_contentid());
      break;
    }
    case kImageProgress: {
      _this->_internal_mutable_imageprogress()->::JournalData::Progress::MergeFrom(
          from._internal_imageprogress());
      break;
    }
    case IM_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:JournalData.ImageContentType)
}

inline void ImageContentType::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.Im_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_Im();
}

ImageContentType::~ImageContentType() {
  // @@protoc_insertion_point(destructor:JournalData.ImageContentType)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ImageContentType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_Im()) {
    clear_Im();
  }
}

void ImageContentType::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ImageContentType::clear_Im() {
// @@protoc_insertion_point(one_of_clear_start:JournalData.ImageContentType)
  switch (Im_case()) {
    case kContentId: {
      _impl_.Im_.contentid_.Destroy();
      break;
    }
    case kImageProgress: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.Im_.imageprogress_;
      }
      break;
    }
    case IM_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = IM_NOT_SET;
}


void ImageContentType::Clear() {
// @@protoc_insertion_point(message_clear_start:JournalData.ImageContentType)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_Im();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageContentType::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string contentId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_contentid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "JournalData.ImageContentType.contentId"));
        } else
          goto handle_unusual;
        continue;
      // .JournalData.Progress imageProgress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_imageprogress(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImageContentType::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:JournalData.ImageContentType)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string contentId = 1;
  if (_internal_has_contentid()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contentid().data(), static_cast<int>(this->_internal_contentid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JournalData.ImageContentType.contentId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_contentid(), target);
  }

  // .JournalData.Progress imageProgress = 2;
  if (_internal_has_imageprogress()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::imageprogress(this),
        _Internal::imageprogress(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JournalData.ImageContentType)
  return target;
}

size_t ImageContentType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JournalData.ImageContentType)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (Im_case()) {
    // string contentId = 1;
    case kContentId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_contentid());
      break;
    }
    // .JournalData.Progress imageProgress = 2;
    case kImageProgress: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.Im_.imageprogress_);
      break;
    }
    case IM_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImageContentType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ImageContentType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImageContentType::GetClassData() const { return &_class_data_; }


void ImageContentType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ImageContentType*>(&to_msg);
  auto& from = static_cast<const ImageContentType&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:JournalData.ImageContentType)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.Im_case()) {
    case kContentId: {
      _this->_internal_set_contentid(from._internal_contentid());
      break;
    }
    case kImageProgress: {
      _this->_internal_mutable_imageprogress()->::JournalData::Progress::MergeFrom(
          from._internal_imageprogress());
      break;
    }
    case IM_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImageContentType::CopyFrom(const ImageContentType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JournalData.ImageContentType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageContentType::IsInitialized() const {
  return true;
}

void ImageContentType::InternalSwap(ImageContentType* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.Im_, other->_impl_.Im_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageContentType::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_journaldata_2eproto_getter, &descriptor_table_journaldata_2eproto_once,
      file_level_metadata_journaldata_2eproto[13]);
}

// ===================================================================

class Image2dPlacementData::_Internal {
 public:
  static const ::JournalData::ObjectId& objectid(const Image2dPlacementData* msg);
  static const ::JournalData::BoardState& visiblewithinstate(const Image2dPlacementData* msg);
  static const ::Common::Float2& point(const Image2dPlacementData* msg);
};

const ::JournalData::ObjectId&
Image2dPlacementData::_Internal::objectid(const Image2dPlacementData* msg) {
  return *msg->_impl_.objectid_;
}
const ::JournalData::BoardState&
Image2dPlacementData::_Internal::visiblewithinstate(const Image2dPlacementData* msg) {
  return *msg->_impl_.visiblewithinstate_;
}
const ::Common::Float2&
Image2dPlacementData::_Internal::point(const Image2dPlacementData* msg) {
  return *msg->_impl_.point_;
}
void Image2dPlacementData::clear_point() {
  if (GetArenaForAllocation() == nullptr && _impl_.point_ != nullptr) {
    delete _impl_.point_;
  }
  _impl_.point_ = nullptr;
}
Image2dPlacementData::Image2dPlacementData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:JournalData.Image2dPlacementData)
}
Image2dPlacementData::Image2dPlacementData(const Image2dPlacementData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Image2dPlacementData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.objectid_){nullptr}
    , decltype(_impl_.visiblewithinstate_){nullptr}
    , decltype(_impl_.point_){nullptr}
    , decltype(_impl_.height_){}
    , decltype(_impl_.rotation_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_objectid()) {
    _this->_impl_.objectid_ = new ::JournalData::ObjectId(*from._impl_.objectid_);
  }
  if (from._internal_has_visiblewithinstate()) {
    _this->_impl_.visiblewithinstate_ = new ::JournalData::BoardState(*from._impl_.visiblewithinstate_);
  }
  if (from._internal_has_point()) {
    _this->_impl_.point_ = new ::Common::Float2(*from._impl_.point_);
  }
  ::memcpy(&_impl_.height_, &from._impl_.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.rotation_) -
    reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.rotation_));
  // @@protoc_insertion_point(copy_constructor:JournalData.Image2dPlacementData)
}

inline void Image2dPlacementData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.objectid_){nullptr}
    , decltype(_impl_.visiblewithinstate_){nullptr}
    , decltype(_impl_.point_){nullptr}
    , decltype(_impl_.height_){0}
    , decltype(_impl_.rotation_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Image2dPlacementData::~Image2dPlacementData() {
  // @@protoc_insertion_point(destructor:JournalData.Image2dPlacementData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Image2dPlacementData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.objectid_;
  if (this != internal_default_instance()) delete _impl_.visiblewithinstate_;
  if (this != internal_default_instance()) delete _impl_.point_;
}

void Image2dPlacementData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Image2dPlacementData::Clear() {
// @@protoc_insertion_point(message_clear_start:JournalData.Image2dPlacementData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.objectid_ != nullptr) {
    delete _impl_.objectid_;
  }
  _impl_.objectid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.visiblewithinstate_ != nullptr) {
    delete _impl_.visiblewithinstate_;
  }
  _impl_.visiblewithinstate_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.point_ != nullptr) {
    delete _impl_.point_;
  }
  _impl_.point_ = nullptr;
  ::memset(&_impl_.height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.rotation_) -
      reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.rotation_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Image2dPlacementData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .JournalData.ObjectId objectId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_objectid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .JournalData.BoardState visibleWithinState = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_visiblewithinstate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Common.Float2 point = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_point(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float rotation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.rotation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Image2dPlacementData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:JournalData.Image2dPlacementData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .JournalData.ObjectId objectId = 1;
  if (this->_internal_has_objectid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::objectid(this),
        _Internal::objectid(this).GetCachedSize(), target, stream);
  }

  // .JournalData.BoardState visibleWithinState = 2;
  if (this->_internal_has_visiblewithinstate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::visiblewithinstate(this),
        _Internal::visiblewithinstate(this).GetCachedSize(), target, stream);
  }

  // .Common.Float2 point = 3;
  if (this->_internal_has_point()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::point(this),
        _Internal::point(this).GetCachedSize(), target, stream);
  }

  // float height = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_height = this->_internal_height();
  uint32_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_height(), target);
  }

  // float rotation = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rotation = this->_internal_rotation();
  uint32_t raw_rotation;
  memcpy(&raw_rotation, &tmp_rotation, sizeof(tmp_rotation));
  if (raw_rotation != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_rotation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JournalData.Image2dPlacementData)
  return target;
}

size_t Image2dPlacementData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JournalData.Image2dPlacementData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .JournalData.ObjectId objectId = 1;
  if (this->_internal_has_objectid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.objectid_);
  }

  // .JournalData.BoardState visibleWithinState = 2;
  if (this->_internal_has_visiblewithinstate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.visiblewithinstate_);
  }

  // .Common.Float2 point = 3;
  if (this->_internal_has_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.point_);
  }

  // float height = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_height = this->_internal_height();
  uint32_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    total_size += 1 + 4;
  }

  // float rotation = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rotation = this->_internal_rotation();
  uint32_t raw_rotation;
  memcpy(&raw_rotation, &tmp_rotation, sizeof(tmp_rotation));
  if (raw_rotation != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Image2dPlacementData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Image2dPlacementData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Image2dPlacementData::GetClassData() const { return &_class_data_; }


void Image2dPlacementData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Image2dPlacementData*>(&to_msg);
  auto& from = static_cast<const Image2dPlacementData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:JournalData.Image2dPlacementData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_objectid()) {
    _this->_internal_mutable_objectid()->::JournalData::ObjectId::MergeFrom(
        from._internal_objectid());
  }
  if (from._internal_has_visiblewithinstate()) {
    _this->_internal_mutable_visiblewithinstate()->::JournalData::BoardState::MergeFrom(
        from._internal_visiblewithinstate());
  }
  if (from._internal_has_point()) {
    _this->_internal_mutable_point()->::Common::Float2::MergeFrom(
        from._internal_point());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_height = from._internal_height();
  uint32_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rotation = from._internal_rotation();
  uint32_t raw_rotation;
  memcpy(&raw_rotation, &tmp_rotation, sizeof(tmp_rotation));
  if (raw_rotation != 0) {
    _this->_internal_set_rotation(from._internal_rotation());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Image2dPlacementData::CopyFrom(const Image2dPlacementData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JournalData.Image2dPlacementData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Image2dPlacementData::IsInitialized() const {
  return true;
}

void Image2dPlacementData::InternalSwap(Image2dPlacementData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Image2dPlacementData, _impl_.rotation_)
      + sizeof(Image2dPlacementData::_impl_.rotation_)
      - PROTOBUF_FIELD_OFFSET(Image2dPlacementData, _impl_.objectid_)>(
          reinterpret_cast<char*>(&_impl_.objectid_),
          reinterpret_cast<char*>(&other->_impl_.objectid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Image2dPlacementData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_journaldata_2eproto_getter, &descriptor_table_journaldata_2eproto_once,
      file_level_metadata_journaldata_2eproto[14]);
}

// ===================================================================

class TagPlacementData::_Internal {
 public:
  static const ::JournalData::ObjectId& objectid(const TagPlacementData* msg);
  static const ::Common::Float3& anchorpos(const TagPlacementData* msg);
  static const ::Common::Float3& tagoffset(const TagPlacementData* msg);
};

const ::JournalData::ObjectId&
TagPlacementData::_Internal::objectid(const TagPlacementData* msg) {
  return *msg->_impl_.objectid_;
}
const ::Common::Float3&
TagPlacementData::_Internal::anchorpos(const TagPlacementData* msg) {
  return *msg->_impl_.anchorpos_;
}
const ::Common::Float3&
TagPlacementData::_Internal::tagoffset(const TagPlacementData* msg) {
  return *msg->_impl_.tagoffset_;
}
void TagPlacementData::clear_anchorpos() {
  if (GetArenaForAllocation() == nullptr && _impl_.anchorpos_ != nullptr) {
    delete _impl_.anchorpos_;
  }
  _impl_.anchorpos_ = nullptr;
}
void TagPlacementData::clear_tagoffset() {
  if (GetArenaForAllocation() == nullptr && _impl_.tagoffset_ != nullptr) {
    delete _impl_.tagoffset_;
  }
  _impl_.tagoffset_ = nullptr;
}
TagPlacementData::TagPlacementData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:JournalData.TagPlacementData)
}
TagPlacementData::TagPlacementData(const TagPlacementData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TagPlacementData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.objectid_){nullptr}
    , decltype(_impl_.anchorpos_){nullptr}
    , decltype(_impl_.tagoffset_){nullptr}
    , decltype(_impl_.height_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_objectid()) {
    _this->_impl_.objectid_ = new ::JournalData::ObjectId(*from._impl_.objectid_);
  }
  if (from._internal_has_anchorpos()) {
    _this->_impl_.anchorpos_ = new ::Common::Float3(*from._impl_.anchorpos_);
  }
  if (from._internal_has_tagoffset()) {
    _this->_impl_.tagoffset_ = new ::Common::Float3(*from._impl_.tagoffset_);
  }
  _this->_impl_.height_ = from._impl_.height_;
  // @@protoc_insertion_point(copy_constructor:JournalData.TagPlacementData)
}

inline void TagPlacementData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.objectid_){nullptr}
    , decltype(_impl_.anchorpos_){nullptr}
    , decltype(_impl_.tagoffset_){nullptr}
    , decltype(_impl_.height_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TagPlacementData::~TagPlacementData() {
  // @@protoc_insertion_point(destructor:JournalData.TagPlacementData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TagPlacementData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.objectid_;
  if (this != internal_default_instance()) delete _impl_.anchorpos_;
  if (this != internal_default_instance()) delete _impl_.tagoffset_;
}

void TagPlacementData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TagPlacementData::Clear() {
// @@protoc_insertion_point(message_clear_start:JournalData.TagPlacementData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.objectid_ != nullptr) {
    delete _impl_.objectid_;
  }
  _impl_.objectid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.anchorpos_ != nullptr) {
    delete _impl_.anchorpos_;
  }
  _impl_.anchorpos_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.tagoffset_ != nullptr) {
    delete _impl_.tagoffset_;
  }
  _impl_.tagoffset_ = nullptr;
  _impl_.height_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TagPlacementData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .JournalData.ObjectId objectId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_objectid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Common.Float3 anchorPos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_anchorpos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Common.Float3 tagOffset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_tagoffset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TagPlacementData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:JournalData.TagPlacementData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .JournalData.ObjectId objectId = 1;
  if (this->_internal_has_objectid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::objectid(this),
        _Internal::objectid(this).GetCachedSize(), target, stream);
  }

  // .Common.Float3 anchorPos = 2;
  if (this->_internal_has_anchorpos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::anchorpos(this),
        _Internal::anchorpos(this).GetCachedSize(), target, stream);
  }

  // .Common.Float3 tagOffset = 3;
  if (this->_internal_has_tagoffset()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::tagoffset(this),
        _Internal::tagoffset(this).GetCachedSize(), target, stream);
  }

  // float height = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_height = this->_internal_height();
  uint32_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JournalData.TagPlacementData)
  return target;
}

size_t TagPlacementData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JournalData.TagPlacementData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .JournalData.ObjectId objectId = 1;
  if (this->_internal_has_objectid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.objectid_);
  }

  // .Common.Float3 anchorPos = 2;
  if (this->_internal_has_anchorpos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.anchorpos_);
  }

  // .Common.Float3 tagOffset = 3;
  if (this->_internal_has_tagoffset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tagoffset_);
  }

  // float height = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_height = this->_internal_height();
  uint32_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TagPlacementData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TagPlacementData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TagPlacementData::GetClassData() const { return &_class_data_; }


void TagPlacementData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TagPlacementData*>(&to_msg);
  auto& from = static_cast<const TagPlacementData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:JournalData.TagPlacementData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_objectid()) {
    _this->_internal_mutable_objectid()->::JournalData::ObjectId::MergeFrom(
        from._internal_objectid());
  }
  if (from._internal_has_anchorpos()) {
    _this->_internal_mutable_anchorpos()->::Common::Float3::MergeFrom(
        from._internal_anchorpos());
  }
  if (from._internal_has_tagoffset()) {
    _this->_internal_mutable_tagoffset()->::Common::Float3::MergeFrom(
        from._internal_tagoffset());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_height = from._internal_height();
  uint32_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TagPlacementData::CopyFrom(const TagPlacementData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JournalData.TagPlacementData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TagPlacementData::IsInitialized() const {
  return true;
}

void TagPlacementData::InternalSwap(TagPlacementData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TagPlacementData, _impl_.height_)
      + sizeof(TagPlacementData::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(TagPlacementData, _impl_.objectid_)>(
          reinterpret_cast<char*>(&_impl_.objectid_),
          reinterpret_cast<char*>(&other->_impl_.objectid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TagPlacementData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_journaldata_2eproto_getter, &descriptor_table_journaldata_2eproto_once,
      file_level_metadata_journaldata_2eproto[15]);
}

// ===================================================================

class ObjectPlacementData::_Internal {
 public:
  static const ::Common::Float3& position(const ObjectPlacementData* msg);
  static const ::Common::Float3& rotation(const ObjectPlacementData* msg);
  static const ::Common::Float3& scale(const ObjectPlacementData* msg);
};

const ::Common::Float3&
ObjectPlacementData::_Internal::position(const ObjectPlacementData* msg) {
  return *msg->_impl_.position_;
}
const ::Common::Float3&
ObjectPlacementData::_Internal::rotation(const ObjectPlacementData* msg) {
  return *msg->_impl_.rotation_;
}
const ::Common::Float3&
ObjectPlacementData::_Internal::scale(const ObjectPlacementData* msg) {
  return *msg->_impl_.scale_;
}
void ObjectPlacementData::clear_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
}
void ObjectPlacementData::clear_rotation() {
  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
}
void ObjectPlacementData::clear_scale() {
  if (GetArenaForAllocation() == nullptr && _impl_.scale_ != nullptr) {
    delete _impl_.scale_;
  }
  _impl_.scale_ = nullptr;
}
ObjectPlacementData::ObjectPlacementData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:JournalData.ObjectPlacementData)
}
ObjectPlacementData::ObjectPlacementData(const ObjectPlacementData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ObjectPlacementData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.position_){nullptr}
    , decltype(_impl_.rotation_){nullptr}
    , decltype(_impl_.scale_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    _this->_impl_.position_ = new ::Common::Float3(*from._impl_.position_);
  }
  if (from._internal_has_rotation()) {
    _this->_impl_.rotation_ = new ::Common::Float3(*from._impl_.rotation_);
  }
  if (from._internal_has_scale()) {
    _this->_impl_.scale_ = new ::Common::Float3(*from._impl_.scale_);
  }
  // @@protoc_insertion_point(copy_constructor:JournalData.ObjectPlacementData)
}

inline void ObjectPlacementData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.position_){nullptr}
    , decltype(_impl_.rotation_){nullptr}
    , decltype(_impl_.scale_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ObjectPlacementData::~ObjectPlacementData() {
  // @@protoc_insertion_point(destructor:JournalData.ObjectPlacementData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObjectPlacementData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.position_;
  if (this != internal_default_instance()) delete _impl_.rotation_;
  if (this != internal_default_instance()) delete _impl_.scale_;
}

void ObjectPlacementData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObjectPlacementData::Clear() {
// @@protoc_insertion_point(message_clear_start:JournalData.ObjectPlacementData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.scale_ != nullptr) {
    delete _impl_.scale_;
  }
  _impl_.scale_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectPlacementData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Common.Float3 position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Common.Float3 rotation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Common.Float3 scale = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_scale(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObjectPlacementData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:JournalData.ObjectPlacementData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Common.Float3 position = 1;
  if (this->_internal_has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // .Common.Float3 rotation = 2;
  if (this->_internal_has_rotation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::rotation(this),
        _Internal::rotation(this).GetCachedSize(), target, stream);
  }

  // .Common.Float3 scale = 3;
  if (this->_internal_has_scale()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::scale(this),
        _Internal::scale(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JournalData.ObjectPlacementData)
  return target;
}

size_t ObjectPlacementData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JournalData.ObjectPlacementData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Common.Float3 position = 1;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.position_);
  }

  // .Common.Float3 rotation = 2;
  if (this->_internal_has_rotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rotation_);
  }

  // .Common.Float3 scale = 3;
  if (this->_internal_has_scale()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.scale_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObjectPlacementData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ObjectPlacementData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObjectPlacementData::GetClassData() const { return &_class_data_; }


void ObjectPlacementData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ObjectPlacementData*>(&to_msg);
  auto& from = static_cast<const ObjectPlacementData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:JournalData.ObjectPlacementData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_position()) {
    _this->_internal_mutable_position()->::Common::Float3::MergeFrom(
        from._internal_position());
  }
  if (from._internal_has_rotation()) {
    _this->_internal_mutable_rotation()->::Common::Float3::MergeFrom(
        from._internal_rotation());
  }
  if (from._internal_has_scale()) {
    _this->_internal_mutable_scale()->::Common::Float3::MergeFrom(
        from._internal_scale());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObjectPlacementData::CopyFrom(const ObjectPlacementData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JournalData.ObjectPlacementData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectPlacementData::IsInitialized() const {
  return true;
}

void ObjectPlacementData::InternalSwap(ObjectPlacementData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObjectPlacementData, _impl_.scale_)
      + sizeof(ObjectPlacementData::_impl_.scale_)
      - PROTOBUF_FIELD_OFFSET(ObjectPlacementData, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectPlacementData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_journaldata_2eproto_getter, &descriptor_table_journaldata_2eproto_once,
      file_level_metadata_journaldata_2eproto[16]);
}

// ===================================================================

class PartHighlightData::_Internal {
 public:
  static const ::Common::Color4& primarycolor(const PartHighlightData* msg);
  static const ::Common::Color4& secondarycolor(const PartHighlightData* msg);
};

const ::Common::Color4&
PartHighlightData::_Internal::primarycolor(const PartHighlightData* msg) {
  return *msg->_impl_.primarycolor_;
}
const ::Common::Color4&
PartHighlightData::_Internal::secondarycolor(const PartHighlightData* msg) {
  return *msg->_impl_.secondarycolor_;
}
void PartHighlightData::clear_primarycolor() {
  if (GetArenaForAllocation() == nullptr && _impl_.primarycolor_ != nullptr) {
    delete _impl_.primarycolor_;
  }
  _impl_.primarycolor_ = nullptr;
}
void PartHighlightData::clear_secondarycolor() {
  if (GetArenaForAllocation() == nullptr && _impl_.secondarycolor_ != nullptr) {
    delete _impl_.secondarycolor_;
  }
  _impl_.secondarycolor_ = nullptr;
}
PartHighlightData::PartHighlightData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:JournalData.PartHighlightData)
}
PartHighlightData::PartHighlightData(const PartHighlightData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PartHighlightData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.primarycolor_){nullptr}
    , decltype(_impl_.secondarycolor_){nullptr}
    , decltype(_impl_.spread_){}
    , decltype(_impl_.speed_){}
    , decltype(_impl_.coverage_){}
    , decltype(_impl_.edging_){}
    , decltype(_impl_.risetime_){}
    , decltype(_impl_.holdtime_){}
    , decltype(_impl_.falltime_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_primarycolor()) {
    _this->_impl_.primarycolor_ = new ::Common::Color4(*from._impl_.primarycolor_);
  }
  if (from._internal_has_secondarycolor()) {
    _this->_impl_.secondarycolor_ = new ::Common::Color4(*from._impl_.secondarycolor_);
  }
  ::memcpy(&_impl_.spread_, &from._impl_.spread_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.falltime_) -
    reinterpret_cast<char*>(&_impl_.spread_)) + sizeof(_impl_.falltime_));
  // @@protoc_insertion_point(copy_constructor:JournalData.PartHighlightData)
}

inline void PartHighlightData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.primarycolor_){nullptr}
    , decltype(_impl_.secondarycolor_){nullptr}
    , decltype(_impl_.spread_){0}
    , decltype(_impl_.speed_){0}
    , decltype(_impl_.coverage_){0}
    , decltype(_impl_.edging_){0}
    , decltype(_impl_.risetime_){0}
    , decltype(_impl_.holdtime_){0}
    , decltype(_impl_.falltime_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PartHighlightData::~PartHighlightData() {
  // @@protoc_insertion_point(destructor:JournalData.PartHighlightData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PartHighlightData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.primarycolor_;
  if (this != internal_default_instance()) delete _impl_.secondarycolor_;
}

void PartHighlightData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PartHighlightData::Clear() {
// @@protoc_insertion_point(message_clear_start:JournalData.PartHighlightData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.primarycolor_ != nullptr) {
    delete _impl_.primarycolor_;
  }
  _impl_.primarycolor_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.secondarycolor_ != nullptr) {
    delete _impl_.secondarycolor_;
  }
  _impl_.secondarycolor_ = nullptr;
  ::memset(&_impl_.spread_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.falltime_) -
      reinterpret_cast<char*>(&_impl_.spread_)) + sizeof(_impl_.falltime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PartHighlightData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Common.Color4 primaryColor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_primarycolor(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Common.Color4 secondaryColor = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_secondarycolor(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float spread = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.spread_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float speed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float coverage = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.coverage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float edging = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _impl_.edging_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float riseTime = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _impl_.risetime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float holdTime = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _impl_.holdtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float fallTime = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _impl_.falltime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PartHighlightData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:JournalData.PartHighlightData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Common.Color4 primaryColor = 3;
  if (this->_internal_has_primarycolor()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::primarycolor(this),
        _Internal::primarycolor(this).GetCachedSize(), target, stream);
  }

  // .Common.Color4 secondaryColor = 4;
  if (this->_internal_has_secondarycolor()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::secondarycolor(this),
        _Internal::secondarycolor(this).GetCachedSize(), target, stream);
  }

  // float spread = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_spread = this->_internal_spread();
  uint32_t raw_spread;
  memcpy(&raw_spread, &tmp_spread, sizeof(tmp_spread));
  if (raw_spread != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_spread(), target);
  }

  // float speed = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed = this->_internal_speed();
  uint32_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_speed(), target);
  }

  // float coverage = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_coverage = this->_internal_coverage();
  uint32_t raw_coverage;
  memcpy(&raw_coverage, &tmp_coverage, sizeof(tmp_coverage));
  if (raw_coverage != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_coverage(), target);
  }

  // float edging = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_edging = this->_internal_edging();
  uint32_t raw_edging;
  memcpy(&raw_edging, &tmp_edging, sizeof(tmp_edging));
  if (raw_edging != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_edging(), target);
  }

  // float riseTime = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_risetime = this->_internal_risetime();
  uint32_t raw_risetime;
  memcpy(&raw_risetime, &tmp_risetime, sizeof(tmp_risetime));
  if (raw_risetime != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_risetime(), target);
  }

  // float holdTime = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_holdtime = this->_internal_holdtime();
  uint32_t raw_holdtime;
  memcpy(&raw_holdtime, &tmp_holdtime, sizeof(tmp_holdtime));
  if (raw_holdtime != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_holdtime(), target);
  }

  // float fallTime = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_falltime = this->_internal_falltime();
  uint32_t raw_falltime;
  memcpy(&raw_falltime, &tmp_falltime, sizeof(tmp_falltime));
  if (raw_falltime != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_falltime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JournalData.PartHighlightData)
  return target;
}

size_t PartHighlightData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JournalData.PartHighlightData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Common.Color4 primaryColor = 3;
  if (this->_internal_has_primarycolor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.primarycolor_);
  }

  // .Common.Color4 secondaryColor = 4;
  if (this->_internal_has_secondarycolor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.secondarycolor_);
  }

  // float spread = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_spread = this->_internal_spread();
  uint32_t raw_spread;
  memcpy(&raw_spread, &tmp_spread, sizeof(tmp_spread));
  if (raw_spread != 0) {
    total_size += 1 + 4;
  }

  // float speed = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed = this->_internal_speed();
  uint32_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    total_size += 1 + 4;
  }

  // float coverage = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_coverage = this->_internal_coverage();
  uint32_t raw_coverage;
  memcpy(&raw_coverage, &tmp_coverage, sizeof(tmp_coverage));
  if (raw_coverage != 0) {
    total_size += 1 + 4;
  }

  // float edging = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_edging = this->_internal_edging();
  uint32_t raw_edging;
  memcpy(&raw_edging, &tmp_edging, sizeof(tmp_edging));
  if (raw_edging != 0) {
    total_size += 1 + 4;
  }

  // float riseTime = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_risetime = this->_internal_risetime();
  uint32_t raw_risetime;
  memcpy(&raw_risetime, &tmp_risetime, sizeof(tmp_risetime));
  if (raw_risetime != 0) {
    total_size += 1 + 4;
  }

  // float holdTime = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_holdtime = this->_internal_holdtime();
  uint32_t raw_holdtime;
  memcpy(&raw_holdtime, &tmp_holdtime, sizeof(tmp_holdtime));
  if (raw_holdtime != 0) {
    total_size += 1 + 4;
  }

  // float fallTime = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_falltime = this->_internal_falltime();
  uint32_t raw_falltime;
  memcpy(&raw_falltime, &tmp_falltime, sizeof(tmp_falltime));
  if (raw_falltime != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PartHighlightData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PartHighlightData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PartHighlightData::GetClassData() const { return &_class_data_; }


void PartHighlightData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PartHighlightData*>(&to_msg);
  auto& from = static_cast<const PartHighlightData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:JournalData.PartHighlightData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_primarycolor()) {
    _this->_internal_mutable_primarycolor()->::Common::Color4::MergeFrom(
        from._internal_primarycolor());
  }
  if (from._internal_has_secondarycolor()) {
    _this->_internal_mutable_secondarycolor()->::Common::Color4::MergeFrom(
        from._internal_secondarycolor());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_spread = from._internal_spread();
  uint32_t raw_spread;
  memcpy(&raw_spread, &tmp_spread, sizeof(tmp_spread));
  if (raw_spread != 0) {
    _this->_internal_set_spread(from._internal_spread());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed = from._internal_speed();
  uint32_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    _this->_internal_set_speed(from._internal_speed());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_coverage = from._internal_coverage();
  uint32_t raw_coverage;
  memcpy(&raw_coverage, &tmp_coverage, sizeof(tmp_coverage));
  if (raw_coverage != 0) {
    _this->_internal_set_coverage(from._internal_coverage());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_edging = from._internal_edging();
  uint32_t raw_edging;
  memcpy(&raw_edging, &tmp_edging, sizeof(tmp_edging));
  if (raw_edging != 0) {
    _this->_internal_set_edging(from._internal_edging());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_risetime = from._internal_risetime();
  uint32_t raw_risetime;
  memcpy(&raw_risetime, &tmp_risetime, sizeof(tmp_risetime));
  if (raw_risetime != 0) {
    _this->_internal_set_risetime(from._internal_risetime());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_holdtime = from._internal_holdtime();
  uint32_t raw_holdtime;
  memcpy(&raw_holdtime, &tmp_holdtime, sizeof(tmp_holdtime));
  if (raw_holdtime != 0) {
    _this->_internal_set_holdtime(from._internal_holdtime());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_falltime = from._internal_falltime();
  uint32_t raw_falltime;
  memcpy(&raw_falltime, &tmp_falltime, sizeof(tmp_falltime));
  if (raw_falltime != 0) {
    _this->_internal_set_falltime(from._internal_falltime());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PartHighlightData::CopyFrom(const PartHighlightData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JournalData.PartHighlightData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartHighlightData::IsInitialized() const {
  return true;
}

void PartHighlightData::InternalSwap(PartHighlightData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PartHighlightData, _impl_.falltime_)
      + sizeof(PartHighlightData::_impl_.falltime_)
      - PROTOBUF_FIELD_OFFSET(PartHighlightData, _impl_.primarycolor_)>(
          reinterpret_cast<char*>(&_impl_.primarycolor_),
          reinterpret_cast<char*>(&other->_impl_.primarycolor_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PartHighlightData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_journaldata_2eproto_getter, &descriptor_table_journaldata_2eproto_once,
      file_level_metadata_journaldata_2eproto[17]);
}

// ===================================================================

class LightingEnvironmentContentType::_Internal {
 public:
  static const ::JournalData::Progress& imageprogress(const LightingEnvironmentContentType* msg);
};

const ::JournalData::Progress&
LightingEnvironmentContentType::_Internal::imageprogress(const LightingEnvironmentContentType* msg) {
  return *msg->_impl_.Im_.imageprogress_;
}
void LightingEnvironmentContentType::set_allocated_imageprogress(::JournalData::Progress* imageprogress) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Im();
  if (imageprogress) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(imageprogress);
    if (message_arena != submessage_arena) {
      imageprogress = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, imageprogress, submessage_arena);
    }
    set_has_imageprogress();
    _impl_.Im_.imageprogress_ = imageprogress;
  }
  // @@protoc_insertion_point(field_set_allocated:JournalData.LightingEnvironmentContentType.imageProgress)
}
LightingEnvironmentContentType::LightingEnvironmentContentType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:JournalData.LightingEnvironmentContentType)
}
LightingEnvironmentContentType::LightingEnvironmentContentType(const LightingEnvironmentContentType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LightingEnvironmentContentType* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.Im_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_Im();
  switch (from.Im_case()) {
    case kContentId: {
      _this->_internal_set_contentid(from._internal_contentid());
      break;
    }
    case kImageProgress: {
      _this->_internal_mutable_imageprogress()->::JournalData::Progress::MergeFrom(
          from._internal_imageprogress());
      break;
    }
    case IM_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:JournalData.LightingEnvironmentContentType)
}

inline void LightingEnvironmentContentType::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.Im_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_Im();
}

LightingEnvironmentContentType::~LightingEnvironmentContentType() {
  // @@protoc_insertion_point(destructor:JournalData.LightingEnvironmentContentType)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LightingEnvironmentContentType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_Im()) {
    clear_Im();
  }
}

void LightingEnvironmentContentType::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LightingEnvironmentContentType::clear_Im() {
// @@protoc_insertion_point(one_of_clear_start:JournalData.LightingEnvironmentContentType)
  switch (Im_case()) {
    case kContentId: {
      _impl_.Im_.contentid_.Destroy();
      break;
    }
    case kImageProgress: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.Im_.imageprogress_;
      }
      break;
    }
    case IM_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = IM_NOT_SET;
}


void LightingEnvironmentContentType::Clear() {
// @@protoc_insertion_point(message_clear_start:JournalData.LightingEnvironmentContentType)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_Im();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LightingEnvironmentContentType::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string contentId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_contentid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "JournalData.LightingEnvironmentContentType.contentId"));
        } else
          goto handle_unusual;
        continue;
      // .JournalData.Progress imageProgress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_imageprogress(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LightingEnvironmentContentType::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:JournalData.LightingEnvironmentContentType)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string contentId = 1;
  if (_internal_has_contentid()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contentid().data(), static_cast<int>(this->_internal_contentid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JournalData.LightingEnvironmentContentType.contentId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_contentid(), target);
  }

  // .JournalData.Progress imageProgress = 2;
  if (_internal_has_imageprogress()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::imageprogress(this),
        _Internal::imageprogress(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JournalData.LightingEnvironmentContentType)
  return target;
}

size_t LightingEnvironmentContentType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JournalData.LightingEnvironmentContentType)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (Im_case()) {
    // string contentId = 1;
    case kContentId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_contentid());
      break;
    }
    // .JournalData.Progress imageProgress = 2;
    case kImageProgress: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.Im_.imageprogress_);
      break;
    }
    case IM_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LightingEnvironmentContentType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LightingEnvironmentContentType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LightingEnvironmentContentType::GetClassData() const { return &_class_data_; }


void LightingEnvironmentContentType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LightingEnvironmentContentType*>(&to_msg);
  auto& from = static_cast<const LightingEnvironmentContentType&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:JournalData.LightingEnvironmentContentType)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.Im_case()) {
    case kContentId: {
      _this->_internal_set_contentid(from._internal_contentid());
      break;
    }
    case kImageProgress: {
      _this->_internal_mutable_imageprogress()->::JournalData::Progress::MergeFrom(
          from._internal_imageprogress());
      break;
    }
    case IM_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LightingEnvironmentContentType::CopyFrom(const LightingEnvironmentContentType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JournalData.LightingEnvironmentContentType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LightingEnvironmentContentType::IsInitialized() const {
  return true;
}

void LightingEnvironmentContentType::InternalSwap(LightingEnvironmentContentType* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.Im_, other->_impl_.Im_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata LightingEnvironmentContentType::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_journaldata_2eproto_getter, &descriptor_table_journaldata_2eproto_once,
      file_level_metadata_journaldata_2eproto[18]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace JournalData
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::JournalData::ObjectId*
Arena::CreateMaybeMessage< ::JournalData::ObjectId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::JournalData::ObjectId >(arena);
}
template<> PROTOBUF_NOINLINE ::JournalData::BoardState*
Arena::CreateMaybeMessage< ::JournalData::BoardState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::JournalData::BoardState >(arena);
}
template<> PROTOBUF_NOINLINE ::JournalData::Progress_V1*
Arena::CreateMaybeMessage< ::JournalData::Progress_V1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::JournalData::Progress_V1 >(arena);
}
template<> PROTOBUF_NOINLINE ::JournalData::Progress_V2*
Arena::CreateMaybeMessage< ::JournalData::Progress_V2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::JournalData::Progress_V2 >(arena);
}
template<> PROTOBUF_NOINLINE ::JournalData::Progress*
Arena::CreateMaybeMessage< ::JournalData::Progress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::JournalData::Progress >(arena);
}
template<> PROTOBUF_NOINLINE ::JournalData::ObjectType_StreamBoardObjectType*
Arena::CreateMaybeMessage< ::JournalData::ObjectType_StreamBoardObjectType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::JournalData::ObjectType_StreamBoardObjectType >(arena);
}
template<> PROTOBUF_NOINLINE ::JournalData::ObjectType_TextBoardObjectType*
Arena::CreateMaybeMessage< ::JournalData::ObjectType_TextBoardObjectType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::JournalData::ObjectType_TextBoardObjectType >(arena);
}
template<> PROTOBUF_NOINLINE ::JournalData::ObjectType_ArTrackerObjectType*
Arena::CreateMaybeMessage< ::JournalData::ObjectType_ArTrackerObjectType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::JournalData::ObjectType_ArTrackerObjectType >(arena);
}
template<> PROTOBUF_NOINLINE ::JournalData::ObjectType_CustomContentId*
Arena::CreateMaybeMessage< ::JournalData::ObjectType_CustomContentId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::JournalData::ObjectType_CustomContentId >(arena);
}
template<> PROTOBUF_NOINLINE ::JournalData::ObjectType_CustomUsingCavrnusContentId*
Arena::CreateMaybeMessage< ::JournalData::ObjectType_CustomUsingCavrnusContentId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::JournalData::ObjectType_CustomUsingCavrnusContentId >(arena);
}
template<> PROTOBUF_NOINLINE ::JournalData::ObjectType_ChatMessageObjectType*
Arena::CreateMaybeMessage< ::JournalData::ObjectType_ChatMessageObjectType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::JournalData::ObjectType_ChatMessageObjectType >(arena);
}
template<> PROTOBUF_NOINLINE ::JournalData::ObjectType*
Arena::CreateMaybeMessage< ::JournalData::ObjectType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::JournalData::ObjectType >(arena);
}
template<> PROTOBUF_NOINLINE ::JournalData::BoardSizeData*
Arena::CreateMaybeMessage< ::JournalData::BoardSizeData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::JournalData::BoardSizeData >(arena);
}
template<> PROTOBUF_NOINLINE ::JournalData::ImageContentType*
Arena::CreateMaybeMessage< ::JournalData::ImageContentType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::JournalData::ImageContentType >(arena);
}
template<> PROTOBUF_NOINLINE ::JournalData::Image2dPlacementData*
Arena::CreateMaybeMessage< ::JournalData::Image2dPlacementData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::JournalData::Image2dPlacementData >(arena);
}
template<> PROTOBUF_NOINLINE ::JournalData::TagPlacementData*
Arena::CreateMaybeMessage< ::JournalData::TagPlacementData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::JournalData::TagPlacementData >(arena);
}
template<> PROTOBUF_NOINLINE ::JournalData::ObjectPlacementData*
Arena::CreateMaybeMessage< ::JournalData::ObjectPlacementData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::JournalData::ObjectPlacementData >(arena);
}
template<> PROTOBUF_NOINLINE ::JournalData::PartHighlightData*
Arena::CreateMaybeMessage< ::JournalData::PartHighlightData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::JournalData::PartHighlightData >(arena);
}
template<> PROTOBUF_NOINLINE ::JournalData::LightingEnvironmentContentType*
Arena::CreateMaybeMessage< ::JournalData::LightingEnvironmentContentType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::JournalData::LightingEnvironmentContentType >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
