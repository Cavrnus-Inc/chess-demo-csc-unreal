// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: journal_operations_common.proto

#include "journal_operations_common.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Journal {
PROTOBUF_CONSTEXPR OperationId::OperationId(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.connectionid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.time_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OperationIdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OperationIdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OperationIdDefaultTypeInternal() {}
  union {
    OperationId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OperationIdDefaultTypeInternal _OperationId_default_instance_;
PROTOBUF_CONSTEXPR OperationReferenceCollection_ReferenceTimeSpan::OperationReferenceCollection_ReferenceTimeSpan(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.begin_)*/nullptr
  , /*decltype(_impl_.endinclusive_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OperationReferenceCollection_ReferenceTimeSpanDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OperationReferenceCollection_ReferenceTimeSpanDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OperationReferenceCollection_ReferenceTimeSpanDefaultTypeInternal() {}
  union {
    OperationReferenceCollection_ReferenceTimeSpan _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OperationReferenceCollection_ReferenceTimeSpanDefaultTypeInternal _OperationReferenceCollection_ReferenceTimeSpan_default_instance_;
PROTOBUF_CONSTEXPR OperationReferenceCollection_ReferenceSinglesByConnection::OperationReferenceCollection_ReferenceSinglesByConnection(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.attimeset_)*/{}
  , /*decltype(_impl_.fromconnectionid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OperationReferenceCollection_ReferenceSinglesByConnectionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OperationReferenceCollection_ReferenceSinglesByConnectionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OperationReferenceCollection_ReferenceSinglesByConnectionDefaultTypeInternal() {}
  union {
    OperationReferenceCollection_ReferenceSinglesByConnection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OperationReferenceCollection_ReferenceSinglesByConnectionDefaultTypeInternal _OperationReferenceCollection_ReferenceSinglesByConnection_default_instance_;
PROTOBUF_CONSTEXPR OperationReferenceCollection::OperationReferenceCollection(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.spans_)*/{}
  , /*decltype(_impl_.singles_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OperationReferenceCollectionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OperationReferenceCollectionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OperationReferenceCollectionDefaultTypeInternal() {}
  union {
    OperationReferenceCollection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OperationReferenceCollectionDefaultTypeInternal _OperationReferenceCollection_default_instance_;
PROTOBUF_CONSTEXPR OpRemoveOps_V1::OpRemoveOps_V1(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ids_)*/nullptr
  , /*decltype(_impl_.removaltype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OpRemoveOps_V1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR OpRemoveOps_V1DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OpRemoveOps_V1DefaultTypeInternal() {}
  union {
    OpRemoveOps_V1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OpRemoveOps_V1DefaultTypeInternal _OpRemoveOps_V1_default_instance_;
PROTOBUF_CONSTEXPR OpRemoveOps_V2::OpRemoveOps_V2(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.opids_)*/{}
  , /*decltype(_impl_.removaltype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OpRemoveOps_V2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR OpRemoveOps_V2DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OpRemoveOps_V2DefaultTypeInternal() {}
  union {
    OpRemoveOps_V2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OpRemoveOps_V2DefaultTypeInternal _OpRemoveOps_V2_default_instance_;
PROTOBUF_CONSTEXPR OpRemoveOps::OpRemoveOps(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.V_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct OpRemoveOpsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OpRemoveOpsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OpRemoveOpsDefaultTypeInternal() {}
  union {
    OpRemoveOps _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OpRemoveOpsDefaultTypeInternal _OpRemoveOps_default_instance_;
PROTOBUF_CONSTEXPR OpLine2d_V1::OpLine2d_V1(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.newobjectid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.objectid_)*/nullptr
  , /*decltype(_impl_.visiblewithinstate_)*/nullptr
  , /*decltype(_impl_.points_)*/nullptr
  , /*decltype(_impl_.color_)*/nullptr
  , /*decltype(_impl_.width_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OpLine2d_V1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR OpLine2d_V1DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OpLine2d_V1DefaultTypeInternal() {}
  union {
    OpLine2d_V1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OpLine2d_V1DefaultTypeInternal _OpLine2d_V1_default_instance_;
PROTOBUF_CONSTEXPR OpLine2d::OpLine2d(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.V_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct OpLine2dDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OpLine2dDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OpLine2dDefaultTypeInternal() {}
  union {
    OpLine2d _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OpLine2dDefaultTypeInternal _OpLine2d_default_instance_;
PROTOBUF_CONSTEXPR OpText2d_V1::OpText2d_V1(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.language_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.newobjectid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.objectid_)*/nullptr
  , /*decltype(_impl_.visiblewithinstate_)*/nullptr
  , /*decltype(_impl_.point_)*/nullptr
  , /*decltype(_impl_.color_)*/nullptr
  , /*decltype(_impl_.size_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OpText2d_V1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR OpText2d_V1DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OpText2d_V1DefaultTypeInternal() {}
  union {
    OpText2d_V1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OpText2d_V1DefaultTypeInternal _OpText2d_V1_default_instance_;
PROTOBUF_CONSTEXPR OpText2d::OpText2d(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.V_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct OpText2dDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OpText2dDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OpText2dDefaultTypeInternal() {}
  union {
    OpText2d _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OpText2dDefaultTypeInternal _OpText2d_default_instance_;
PROTOBUF_CONSTEXPR OpText2dModify_V1::OpText2dModify_V1(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.language_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.translatedfromtext_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.translatedfromlanguage_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.objectid_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OpText2dModify_V1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR OpText2dModify_V1DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OpText2dModify_V1DefaultTypeInternal() {}
  union {
    OpText2dModify_V1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OpText2dModify_V1DefaultTypeInternal _OpText2dModify_V1_default_instance_;
PROTOBUF_CONSTEXPR OpText2dModify::OpText2dModify(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.V_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct OpText2dModifyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OpText2dModifyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OpText2dModifyDefaultTypeInternal() {}
  union {
    OpText2dModify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OpText2dModifyDefaultTypeInternal _OpText2dModify_default_instance_;
PROTOBUF_CONSTEXPR OpImage2d_V1::OpImage2d_V1(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.newobjectid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.placementdata_)*/nullptr
  , /*decltype(_impl_.contentid_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OpImage2d_V1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR OpImage2d_V1DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OpImage2d_V1DefaultTypeInternal() {}
  union {
    OpImage2d_V1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OpImage2d_V1DefaultTypeInternal _OpImage2d_V1_default_instance_;
PROTOBUF_CONSTEXPR OpImage2d::OpImage2d(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.V_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct OpImage2dDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OpImage2dDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OpImage2dDefaultTypeInternal() {}
  union {
    OpImage2d _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OpImage2dDefaultTypeInternal _OpImage2d_default_instance_;
PROTOBUF_CONSTEXPR OpLine3d_V1::OpLine3d_V1(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.newobjectid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.objectid_)*/nullptr
  , /*decltype(_impl_.points_)*/nullptr
  , /*decltype(_impl_.normals_)*/nullptr
  , /*decltype(_impl_.color_)*/nullptr
  , /*decltype(_impl_.width_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OpLine3d_V1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR OpLine3d_V1DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OpLine3d_V1DefaultTypeInternal() {}
  union {
    OpLine3d_V1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OpLine3d_V1DefaultTypeInternal _OpLine3d_V1_default_instance_;
PROTOBUF_CONSTEXPR OpLine3d::OpLine3d(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.V_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct OpLine3dDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OpLine3dDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OpLine3dDefaultTypeInternal() {}
  union {
    OpLine3d _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OpLine3dDefaultTypeInternal _OpLine3d_default_instance_;
PROTOBUF_CONSTEXPR OpText3d_V1::OpText3d_V1(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.newobjectid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.language_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.placementdata_)*/nullptr
  , /*decltype(_impl_.color_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OpText3d_V1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR OpText3d_V1DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OpText3d_V1DefaultTypeInternal() {}
  union {
    OpText3d_V1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OpText3d_V1DefaultTypeInternal _OpText3d_V1_default_instance_;
PROTOBUF_CONSTEXPR OpText3d::OpText3d(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.V_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct OpText3dDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OpText3dDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OpText3dDefaultTypeInternal() {}
  union {
    OpText3d _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OpText3dDefaultTypeInternal _OpText3d_default_instance_;
PROTOBUF_CONSTEXPR OpText3dModify_V1::OpText3dModify_V1(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.language_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.translatedfromtext_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.translatedfromlanguage_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.objectid_)*/nullptr
  , /*decltype(_impl_.color_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OpText3dModify_V1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR OpText3dModify_V1DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OpText3dModify_V1DefaultTypeInternal() {}
  union {
    OpText3dModify_V1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OpText3dModify_V1DefaultTypeInternal _OpText3dModify_V1_default_instance_;
PROTOBUF_CONSTEXPR OpText3dModify::OpText3dModify(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.V_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct OpText3dModifyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OpText3dModifyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OpText3dModifyDefaultTypeInternal() {}
  union {
    OpText3dModify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OpText3dModifyDefaultTypeInternal _OpText3dModify_default_instance_;
PROTOBUF_CONSTEXPR OpImage3d_V1::OpImage3d_V1(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.newobjectid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.placementdata_)*/nullptr
  , /*decltype(_impl_.contentid_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OpImage3d_V1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR OpImage3d_V1DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OpImage3d_V1DefaultTypeInternal() {}
  union {
    OpImage3d_V1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OpImage3d_V1DefaultTypeInternal _OpImage3d_V1_default_instance_;
PROTOBUF_CONSTEXPR OpImage3d::OpImage3d(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.V_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct OpImage3dDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OpImage3dDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OpImage3dDefaultTypeInternal() {}
  union {
    OpImage3d _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OpImage3dDefaultTypeInternal _OpImage3d_default_instance_;
PROTOBUF_CONSTEXPR OpUpdatePropertyValue_V1::OpUpdatePropertyValue_V1(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.propid_)*/nullptr
  , /*decltype(_impl_.ValueType_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct OpUpdatePropertyValue_V1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR OpUpdatePropertyValue_V1DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OpUpdatePropertyValue_V1DefaultTypeInternal() {}
  union {
    OpUpdatePropertyValue_V1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OpUpdatePropertyValue_V1DefaultTypeInternal _OpUpdatePropertyValue_V1_default_instance_;
PROTOBUF_CONSTEXPR OpUpdatePropertyValue::OpUpdatePropertyValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.V_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct OpUpdatePropertyValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OpUpdatePropertyValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OpUpdatePropertyValueDefaultTypeInternal() {}
  union {
    OpUpdatePropertyValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OpUpdatePropertyValueDefaultTypeInternal _OpUpdatePropertyValue_default_instance_;
PROTOBUF_CONSTEXPR OpDeclareProperty_V1::OpDeclareProperty_V1(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.propid_)*/nullptr
  , /*decltype(_impl_.decl_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OpDeclareProperty_V1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR OpDeclareProperty_V1DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OpDeclareProperty_V1DefaultTypeInternal() {}
  union {
    OpDeclareProperty_V1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OpDeclareProperty_V1DefaultTypeInternal _OpDeclareProperty_V1_default_instance_;
PROTOBUF_CONSTEXPR OpDeclareProperty::OpDeclareProperty(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.V_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct OpDeclarePropertyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OpDeclarePropertyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OpDeclarePropertyDefaultTypeInternal() {}
  union {
    OpDeclareProperty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OpDeclarePropertyDefaultTypeInternal _OpDeclareProperty_default_instance_;
PROTOBUF_CONSTEXPR OpBlindDataOp::OpBlindDataOp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.blinddataidentifier_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OpBlindDataOpDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OpBlindDataOpDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OpBlindDataOpDefaultTypeInternal() {}
  union {
    OpBlindDataOp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OpBlindDataOpDefaultTypeInternal _OpBlindDataOp_default_instance_;
PROTOBUF_CONSTEXPR UserAuthorityPayload::UserAuthorityPayload(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.FinalizationPayload_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct UserAuthorityPayloadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserAuthorityPayloadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserAuthorityPayloadDefaultTypeInternal() {}
  union {
    UserAuthorityPayload _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserAuthorityPayloadDefaultTypeInternal _UserAuthorityPayload_default_instance_;
PROTOBUF_CONSTEXPR OpUserAuthorityData_V1::OpUserAuthorityData_V1(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.authorityrequestedkey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.requestorconnectionid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.payload_)*/nullptr
  , /*decltype(_impl_.coordinationeventtype_)*/0
  , /*decltype(_impl_.ordinal_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OpUserAuthorityData_V1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR OpUserAuthorityData_V1DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OpUserAuthorityData_V1DefaultTypeInternal() {}
  union {
    OpUserAuthorityData_V1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OpUserAuthorityData_V1DefaultTypeInternal _OpUserAuthorityData_V1_default_instance_;
PROTOBUF_CONSTEXPR OpUserAuthorityData::OpUserAuthorityData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.V_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct OpUserAuthorityDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OpUserAuthorityDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OpUserAuthorityDataDefaultTypeInternal() {}
  union {
    OpUserAuthorityData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OpUserAuthorityDataDefaultTypeInternal _OpUserAuthorityData_default_instance_;
PROTOBUF_CONSTEXPR OpSetPartHighlight_V1::OpSetPartHighlight_V1(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.objectid_)*/nullptr
  , /*decltype(_impl_.highlightdata_)*/nullptr
  , /*decltype(_impl_.set_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OpSetPartHighlight_V1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR OpSetPartHighlight_V1DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OpSetPartHighlight_V1DefaultTypeInternal() {}
  union {
    OpSetPartHighlight_V1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OpSetPartHighlight_V1DefaultTypeInternal _OpSetPartHighlight_V1_default_instance_;
PROTOBUF_CONSTEXPR OpSetPartHighlight::OpSetPartHighlight(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.V_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct OpSetPartHighlightDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OpSetPartHighlightDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OpSetPartHighlightDefaultTypeInternal() {}
  union {
    OpSetPartHighlight _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OpSetPartHighlightDefaultTypeInternal _OpSetPartHighlight_default_instance_;
}  // namespace Journal
static ::_pb::Metadata file_level_metadata_journal_5foperations_5fcommon_2eproto[33];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_journal_5foperations_5fcommon_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_journal_5foperations_5fcommon_2eproto = nullptr;

const uint32_t TableStruct_journal_5foperations_5fcommon_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Journal::OperationId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Journal::OperationId, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::Journal::OperationId, _impl_.connectionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Journal::OperationReferenceCollection_ReferenceTimeSpan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Journal::OperationReferenceCollection_ReferenceTimeSpan, _impl_.begin_),
  PROTOBUF_FIELD_OFFSET(::Journal::OperationReferenceCollection_ReferenceTimeSpan, _impl_.endinclusive_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Journal::OperationReferenceCollection_ReferenceSinglesByConnection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Journal::OperationReferenceCollection_ReferenceSinglesByConnection, _impl_.fromconnectionid_),
  PROTOBUF_FIELD_OFFSET(::Journal::OperationReferenceCollection_ReferenceSinglesByConnection, _impl_.attimeset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Journal::OperationReferenceCollection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Journal::OperationReferenceCollection, _impl_.spans_),
  PROTOBUF_FIELD_OFFSET(::Journal::OperationReferenceCollection, _impl_.singles_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Journal::OpRemoveOps_V1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Journal::OpRemoveOps_V1, _impl_.ids_),
  PROTOBUF_FIELD_OFFSET(::Journal::OpRemoveOps_V1, _impl_.removaltype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Journal::OpRemoveOps_V2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Journal::OpRemoveOps_V2, _impl_.opids_),
  PROTOBUF_FIELD_OFFSET(::Journal::OpRemoveOps_V2, _impl_.removaltype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Journal::OpRemoveOps, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Journal::OpRemoveOps, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::Journal::OpRemoveOps, _impl_.V_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Journal::OpLine2d_V1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Journal::OpLine2d_V1, _impl_.newobjectid_),
  PROTOBUF_FIELD_OFFSET(::Journal::OpLine2d_V1, _impl_.objectid_),
  PROTOBUF_FIELD_OFFSET(::Journal::OpLine2d_V1, _impl_.visiblewithinstate_),
  PROTOBUF_FIELD_OFFSET(::Journal::OpLine2d_V1, _impl_.points_),
  PROTOBUF_FIELD_OFFSET(::Journal::OpLine2d_V1, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::Journal::OpLine2d_V1, _impl_.color_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Journal::OpLine2d, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Journal::OpLine2d, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::Journal::OpLine2d, _impl_.V_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Journal::OpText2d_V1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Journal::OpText2d_V1, _impl_.newobjectid_),
  PROTOBUF_FIELD_OFFSET(::Journal::OpText2d_V1, _impl_.objectid_),
  PROTOBUF_FIELD_OFFSET(::Journal::OpText2d_V1, _impl_.visiblewithinstate_),
  PROTOBUF_FIELD_OFFSET(::Journal::OpText2d_V1, _impl_.point_),
  PROTOBUF_FIELD_OFFSET(::Journal::OpText2d_V1, _impl_.text_),
  PROTOBUF_FIELD_OFFSET(::Journal::OpText2d_V1, _impl_.language_),
  PROTOBUF_FIELD_OFFSET(::Journal::OpText2d_V1, _impl_.color_),
  PROTOBUF_FIELD_OFFSET(::Journal::OpText2d_V1, _impl_.size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Journal::OpText2d, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Journal::OpText2d, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::Journal::OpText2d, _impl_.V_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Journal::OpText2dModify_V1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Journal::OpText2dModify_V1, _impl_.objectid_),
  PROTOBUF_FIELD_OFFSET(::Journal::OpText2dModify_V1, _impl_.text_),
  PROTOBUF_FIELD_OFFSET(::Journal::OpText2dModify_V1, _impl_.language_),
  PROTOBUF_FIELD_OFFSET(::Journal::OpText2dModify_V1, _impl_.translatedfromtext_),
  PROTOBUF_FIELD_OFFSET(::Journal::OpText2dModify_V1, _impl_.translatedfromlanguage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Journal::OpText2dModify, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Journal::OpText2dModify, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::Journal::OpText2dModify, _impl_.V_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Journal::OpImage2d_V1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Journal::OpImage2d_V1, _impl_.newobjectid_),
  PROTOBUF_FIELD_OFFSET(::Journal::OpImage2d_V1, _impl_.placementdata_),
  PROTOBUF_FIELD_OFFSET(::Journal::OpImage2d_V1, _impl_.contentid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Journal::OpImage2d, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Journal::OpImage2d, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::Journal::OpImage2d, _impl_.V_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Journal::OpLine3d_V1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Journal::OpLine3d_V1, _impl_.newobjectid_),
  PROTOBUF_FIELD_OFFSET(::Journal::OpLine3d_V1, _impl_.objectid_),
  PROTOBUF_FIELD_OFFSET(::Journal::OpLine3d_V1, _impl_.points_),
  PROTOBUF_FIELD_OFFSET(::Journal::OpLine3d_V1, _impl_.normals_),
  PROTOBUF_FIELD_OFFSET(::Journal::OpLine3d_V1, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::Journal::OpLine3d_V1, _impl_.color_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Journal::OpLine3d, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Journal::OpLine3d, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::Journal::OpLine3d, _impl_.V_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Journal::OpText3d_V1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Journal::OpText3d_V1, _impl_.newobjectid_),
  PROTOBUF_FIELD_OFFSET(::Journal::OpText3d_V1, _impl_.placementdata_),
  PROTOBUF_FIELD_OFFSET(::Journal::OpText3d_V1, _impl_.text_),
  PROTOBUF_FIELD_OFFSET(::Journal::OpText3d_V1, _impl_.language_),
  PROTOBUF_FIELD_OFFSET(::Journal::OpText3d_V1, _impl_.color_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Journal::OpText3d, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Journal::OpText3d, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::Journal::OpText3d, _impl_.V_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Journal::OpText3dModify_V1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Journal::OpText3dModify_V1, _impl_.objectid_),
  PROTOBUF_FIELD_OFFSET(::Journal::OpText3dModify_V1, _impl_.text_),
  PROTOBUF_FIELD_OFFSET(::Journal::OpText3dModify_V1, _impl_.language_),
  PROTOBUF_FIELD_OFFSET(::Journal::OpText3dModify_V1, _impl_.color_),
  PROTOBUF_FIELD_OFFSET(::Journal::OpText3dModify_V1, _impl_.translatedfromtext_),
  PROTOBUF_FIELD_OFFSET(::Journal::OpText3dModify_V1, _impl_.translatedfromlanguage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Journal::OpText3dModify, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Journal::OpText3dModify, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::Journal::OpText3dModify, _impl_.V_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Journal::OpImage3d_V1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Journal::OpImage3d_V1, _impl_.newobjectid_),
  PROTOBUF_FIELD_OFFSET(::Journal::OpImage3d_V1, _impl_.placementdata_),
  PROTOBUF_FIELD_OFFSET(::Journal::OpImage3d_V1, _impl_.contentid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Journal::OpImage3d, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Journal::OpImage3d, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::Journal::OpImage3d, _impl_.V_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Journal::OpUpdatePropertyValue_V1, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Journal::OpUpdatePropertyValue_V1, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Journal::OpUpdatePropertyValue_V1, _impl_.propid_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::Journal::OpUpdatePropertyValue_V1, _impl_.ValueType_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Journal::OpUpdatePropertyValue, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Journal::OpUpdatePropertyValue, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::Journal::OpUpdatePropertyValue, _impl_.V_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Journal::OpDeclareProperty_V1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Journal::OpDeclareProperty_V1, _impl_.propid_),
  PROTOBUF_FIELD_OFFSET(::Journal::OpDeclareProperty_V1, _impl_.decl_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Journal::OpDeclareProperty, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Journal::OpDeclareProperty, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::Journal::OpDeclareProperty, _impl_.V_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Journal::OpBlindDataOp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Journal::OpBlindDataOp, _impl_.blinddataidentifier_),
  PROTOBUF_FIELD_OFFSET(::Journal::OpBlindDataOp, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Journal::UserAuthorityPayload, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Journal::UserAuthorityPayload, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::Journal::UserAuthorityPayload, _impl_.FinalizationPayload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Journal::OpUserAuthorityData_V1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Journal::OpUserAuthorityData_V1, _impl_.authorityrequestedkey_),
  PROTOBUF_FIELD_OFFSET(::Journal::OpUserAuthorityData_V1, _impl_.coordinationeventtype_),
  PROTOBUF_FIELD_OFFSET(::Journal::OpUserAuthorityData_V1, _impl_.requestorconnectionid_),
  PROTOBUF_FIELD_OFFSET(::Journal::OpUserAuthorityData_V1, _impl_.ordinal_),
  PROTOBUF_FIELD_OFFSET(::Journal::OpUserAuthorityData_V1, _impl_.payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Journal::OpUserAuthorityData, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Journal::OpUserAuthorityData, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::Journal::OpUserAuthorityData, _impl_.V_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Journal::OpSetPartHighlight_V1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Journal::OpSetPartHighlight_V1, _impl_.objectid_),
  PROTOBUF_FIELD_OFFSET(::Journal::OpSetPartHighlight_V1, _impl_.set_),
  PROTOBUF_FIELD_OFFSET(::Journal::OpSetPartHighlight_V1, _impl_.highlightdata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Journal::OpSetPartHighlight, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Journal::OpSetPartHighlight, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::Journal::OpSetPartHighlight, _impl_.V_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Journal::OperationId)},
  { 8, -1, -1, sizeof(::Journal::OperationReferenceCollection_ReferenceTimeSpan)},
  { 16, -1, -1, sizeof(::Journal::OperationReferenceCollection_ReferenceSinglesByConnection)},
  { 24, -1, -1, sizeof(::Journal::OperationReferenceCollection)},
  { 32, -1, -1, sizeof(::Journal::OpRemoveOps_V1)},
  { 40, -1, -1, sizeof(::Journal::OpRemoveOps_V2)},
  { 48, -1, -1, sizeof(::Journal::OpRemoveOps)},
  { 57, -1, -1, sizeof(::Journal::OpLine2d_V1)},
  { 69, -1, -1, sizeof(::Journal::OpLine2d)},
  { 77, -1, -1, sizeof(::Journal::OpText2d_V1)},
  { 91, -1, -1, sizeof(::Journal::OpText2d)},
  { 99, -1, -1, sizeof(::Journal::OpText2dModify_V1)},
  { 110, -1, -1, sizeof(::Journal::OpText2dModify)},
  { 118, -1, -1, sizeof(::Journal::OpImage2d_V1)},
  { 127, -1, -1, sizeof(::Journal::OpImage2d)},
  { 135, -1, -1, sizeof(::Journal::OpLine3d_V1)},
  { 147, -1, -1, sizeof(::Journal::OpLine3d)},
  { 155, -1, -1, sizeof(::Journal::OpText3d_V1)},
  { 166, -1, -1, sizeof(::Journal::OpText3d)},
  { 174, -1, -1, sizeof(::Journal::OpText3dModify_V1)},
  { 186, -1, -1, sizeof(::Journal::OpText3dModify)},
  { 194, -1, -1, sizeof(::Journal::OpImage3d_V1)},
  { 203, -1, -1, sizeof(::Journal::OpImage3d)},
  { 211, -1, -1, sizeof(::Journal::OpUpdatePropertyValue_V1)},
  { 227, -1, -1, sizeof(::Journal::OpUpdatePropertyValue)},
  { 235, -1, -1, sizeof(::Journal::OpDeclareProperty_V1)},
  { 243, -1, -1, sizeof(::Journal::OpDeclareProperty)},
  { 251, -1, -1, sizeof(::Journal::OpBlindDataOp)},
  { 259, -1, -1, sizeof(::Journal::UserAuthorityPayload)},
  { 268, -1, -1, sizeof(::Journal::OpUserAuthorityData_V1)},
  { 279, -1, -1, sizeof(::Journal::OpUserAuthorityData)},
  { 287, -1, -1, sizeof(::Journal::OpSetPartHighlight_V1)},
  { 296, -1, -1, sizeof(::Journal::OpSetPartHighlight)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Journal::_OperationId_default_instance_._instance,
  &::Journal::_OperationReferenceCollection_ReferenceTimeSpan_default_instance_._instance,
  &::Journal::_OperationReferenceCollection_ReferenceSinglesByConnection_default_instance_._instance,
  &::Journal::_OperationReferenceCollection_default_instance_._instance,
  &::Journal::_OpRemoveOps_V1_default_instance_._instance,
  &::Journal::_OpRemoveOps_V2_default_instance_._instance,
  &::Journal::_OpRemoveOps_default_instance_._instance,
  &::Journal::_OpLine2d_V1_default_instance_._instance,
  &::Journal::_OpLine2d_default_instance_._instance,
  &::Journal::_OpText2d_V1_default_instance_._instance,
  &::Journal::_OpText2d_default_instance_._instance,
  &::Journal::_OpText2dModify_V1_default_instance_._instance,
  &::Journal::_OpText2dModify_default_instance_._instance,
  &::Journal::_OpImage2d_V1_default_instance_._instance,
  &::Journal::_OpImage2d_default_instance_._instance,
  &::Journal::_OpLine3d_V1_default_instance_._instance,
  &::Journal::_OpLine3d_default_instance_._instance,
  &::Journal::_OpText3d_V1_default_instance_._instance,
  &::Journal::_OpText3d_default_instance_._instance,
  &::Journal::_OpText3dModify_V1_default_instance_._instance,
  &::Journal::_OpText3dModify_default_instance_._instance,
  &::Journal::_OpImage3d_V1_default_instance_._instance,
  &::Journal::_OpImage3d_default_instance_._instance,
  &::Journal::_OpUpdatePropertyValue_V1_default_instance_._instance,
  &::Journal::_OpUpdatePropertyValue_default_instance_._instance,
  &::Journal::_OpDeclareProperty_V1_default_instance_._instance,
  &::Journal::_OpDeclareProperty_default_instance_._instance,
  &::Journal::_OpBlindDataOp_default_instance_._instance,
  &::Journal::_UserAuthorityPayload_default_instance_._instance,
  &::Journal::_OpUserAuthorityData_V1_default_instance_._instance,
  &::Journal::_OpUserAuthorityData_default_instance_._instance,
  &::Journal::_OpSetPartHighlight_V1_default_instance_._instance,
  &::Journal::_OpSetPartHighlight_default_instance_._instance,
};

const char descriptor_table_protodef_journal_5foperations_5fcommon_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\037journal_operations_common.proto\022\007Journ"
  "al\032\037google/protobuf/timestamp.proto\032\014com"
  "mon.proto\032\021journaldata.proto\032\020properties"
  ".proto\"M\n\013OperationId\022(\n\004time\030\001 \001(\0132\032.go"
  "ogle.protobuf.Timestamp\022\024\n\014connectionId\030"
  "\002 \001(\t\"\226\003\n\034OperationReferenceCollection\022F"
  "\n\005spans\030\001 \003(\01327.Journal.OperationReferen"
  "ceCollection.ReferenceTimeSpan\022S\n\007single"
  "s\030\002 \003(\0132B.Journal.OperationReferenceColl"
  "ection.ReferenceSinglesByConnection\032p\n\021R"
  "eferenceTimeSpan\022)\n\005begin\030\001 \001(\0132\032.google"
  ".protobuf.Timestamp\0220\n\014endInclusive\030\002 \001("
  "\0132\032.google.protobuf.Timestamp\032g\n\034Referen"
  "ceSinglesByConnection\022\030\n\020fromConnectionI"
  "d\030\001 \001(\t\022-\n\tatTimeSet\030\002 \003(\0132\032.google.prot"
  "obuf.Timestamp\"\202\003\n\013OpRemoveOps\022%\n\002v1\030\001 \001"
  "(\0132\027.Journal.OpRemoveOps.V1H\000\022%\n\002v2\030\002 \001("
  "\0132\027.Journal.OpRemoveOps.V2H\000\032\241\001\n\002V1\0222\n\003i"
  "ds\030\001 \001(\0132%.Journal.OperationReferenceCol"
  "lection\0229\n\013removalType\030\002 \001(\0162$.Journal.O"
  "pRemoveOps.V1.UndoRedoType\",\n\014UndoRedoTy"
  "pe\022\010\n\004None\020\000\022\010\n\004Undo\020\001\022\010\n\004Redo\020\002\032|\n\002V2\022\r"
  "\n\005opIds\030\001 \003(\t\0229\n\013removalType\030\002 \001(\0162$.Jou"
  "rnal.OpRemoveOps.V2.UndoRedoType\",\n\014Undo"
  "RedoType\022\010\n\004None\020\000\022\010\n\004Undo\020\001\022\010\n\004Redo\020\002B\003"
  "\n\001V\"\200\002\n\010OpLine2d\022\"\n\002v1\030\001 \001(\0132\024.Journal.O"
  "pLine2d.V1H\000\032\312\001\n\002V1\022\023\n\013newObjectId\030\n \001(\t"
  "\022\'\n\010objectId\030\001 \001(\0132\025.JournalData.ObjectI"
  "d\0223\n\022visibleWithinState\030\002 \001(\0132\027.JournalD"
  "ata.BoardState\022#\n\006points\030\003 \001(\0132\023.Common."
  "Float2Array\022\r\n\005width\030\004 \001(\002\022\035\n\005color\030\005 \001("
  "\0132\016.Common.Color4B\003\n\001V\"\231\002\n\010OpText2d\022\"\n\002v"
  "1\030\001 \001(\0132\024.Journal.OpText2d.V1H\000\032\343\001\n\002V1\022\023"
  "\n\013newObjectId\030\n \001(\t\022\'\n\010objectId\030\001 \001(\0132\025."
  "JournalData.ObjectId\0223\n\022visibleWithinSta"
  "te\030\002 \001(\0132\027.JournalData.BoardState\022\035\n\005poi"
  "nt\030\003 \001(\0132\016.Common.Float2\022\014\n\004text\030\004 \001(\t\022\020"
  "\n\010language\030\005 \001(\t\022\035\n\005color\030\006 \001(\0132\016.Common"
  ".Color4\022\014\n\004size\030\007 \001(\002B\003\n\001V\"\313\001\n\016OpText2dM"
  "odify\022(\n\002v1\030\001 \001(\0132\032.Journal.OpText2dModi"
  "fy.V1H\000\032\211\001\n\002V1\022\'\n\010objectId\030\001 \001(\0132\025.Journ"
  "alData.ObjectId\022\014\n\004text\030\004 \001(\t\022\020\n\010languag"
  "e\030\005 \001(\t\022\032\n\022translatedFromText\030\006 \001(\t\022\036\n\026t"
  "ranslatedFromLanguage\030\007 \001(\tB\003\n\001V\"\275\001\n\tOpI"
  "mage2d\022#\n\002v1\030\001 \001(\0132\025.Journal.OpImage2d.V"
  "1H\000\032\205\001\n\002V1\022\023\n\013newObjectId\030\n \001(\t\0228\n\rplace"
  "mentData\030\001 \001(\0132!.JournalData.Image2dPlac"
  "ementData\0220\n\tcontentId\030\002 \001(\0132\035.JournalDa"
  "ta.ImageContentTypeB\003\n\001V\"\361\001\n\010OpLine3d\022\"\n"
  "\002v1\030\001 \001(\0132\024.Journal.OpLine3d.V1H\000\032\273\001\n\002V1"
  "\022\023\n\013newObjectId\030\n \001(\t\022\'\n\010objectId\030\001 \001(\0132"
  "\025.JournalData.ObjectId\022#\n\006points\030\002 \001(\0132\023"
  ".Common.Float3Array\022$\n\007normals\030\003 \001(\0132\023.C"
  "ommon.Float3Array\022\r\n\005width\030\004 \001(\002\022\035\n\005colo"
  "r\030\005 \001(\0132\016.Common.Color4B\003\n\001V\"\304\001\n\010OpText3"
  "d\022\"\n\002v1\030\001 \001(\0132\024.Journal.OpText3d.V1H\000\032\216\001"
  "\n\002V1\022\023\n\013newObjectId\030\001 \001(\t\0224\n\rplacementDa"
  "ta\030\002 \001(\0132\035.JournalData.TagPlacementData\022"
  "\014\n\004text\030\003 \001(\t\022\020\n\010language\030\004 \001(\t\022\035\n\005color"
  "\030\005 \001(\0132\016.Common.Color4B\003\n\001V\"\352\001\n\016OpText3d"
  "Modify\022(\n\002v1\030\001 \001(\0132\032.Journal.OpText3dMod"
  "ify.V1H\000\032\250\001\n\002V1\022\'\n\010objectId\030\001 \001(\0132\025.Jour"
  "nalData.ObjectId\022\014\n\004text\030\003 \001(\t\022\020\n\010langua"
  "ge\030\004 \001(\t\022\035\n\005color\030\005 \001(\0132\016.Common.Color4\022"
  "\032\n\022translatedFromText\030\006 \001(\t\022\036\n\026translate"
  "dFromLanguage\030\007 \001(\tB\003\n\001V\"\271\001\n\tOpImage3d\022#"
  "\n\002v1\030\001 \001(\0132\025.Journal.OpImage3d.V1H\000\032\201\001\n\002"
  "V1\022\023\n\013newObjectId\030\001 \001(\t\0224\n\rplacementData"
  "\030\002 \001(\0132\035.JournalData.TagPlacementData\0220\n"
  "\tcontentId\030\003 \001(\0132\035.JournalData.ImageCont"
  "entTypeB\003\n\001V\"\275\004\n\025OpUpdatePropertyValue\022/"
  "\n\002v1\030\001 \001(\0132!.Journal.OpUpdatePropertyVal"
  "ue.V1H\000\032\355\003\n\002V1\022,\n\006propId\030\001 \001(\0132\034.Propert"
  "y.PropertyIdentifier\0224\n\006scalar\030\002 \001(\0132\".P"
  "roperty.ScalarPropertyAssignmentH\000\0224\n\006st"
  "ring\030\003 \001(\0132\".Property.StringPropertyAssi"
  "gnmentH\000\0224\n\006vector\030\004 \001(\0132\".Property.Vect"
  "orPropertyAssignmentH\000\0222\n\005color\030\005 \001(\0132!."
  "Property.ColorPropertyAssignmentH\000\022:\n\ttr"
  "ansform\030\006 \001(\0132%.Property.TransformProper"
  "tyAssignmentH\000\0226\n\007boolean\030\007 \001(\0132#.Proper"
  "ty.BooleanPropertyAssignmentH\000\0220\n\004json\030\t"
  " \001(\0132 .Property.JsonPropertyAssignmentH\000"
  "\0220\n\004link\030\n \001(\0132 .Property.LinkPropertyAs"
  "signmentH\000B\013\n\tValueTypeB\003\n\001V\"\251\001\n\021OpDecla"
  "reProperty\022+\n\002v1\030\001 \001(\0132\035.Journal.OpDecla"
  "reProperty.V1H\000\032b\n\002V1\022,\n\006propId\030\001 \001(\0132\034."
  "Property.PropertyIdentifier\022.\n\004decl\030\002 \001("
  "\0132 .Property.AnyPropertyDeclarationB\003\n\001V"
  "\":\n\rOpBlindDataOp\022\033\n\023blindDataIdentifier"
  "\030\001 \001(\t\022\014\n\004data\030\002 \001(\014\"P\n\024UserAuthorityPay"
  "load\022\021\n\007message\030\n \001(\tH\000\022\016\n\004json\030\013 \001(\tH\000B"
  "\025\n\023FinalizationPayload\"\362\002\n\023OpUserAuthori"
  "tyData\022-\n\002v1\030\001 \001(\0132\037.Journal.OpUserAutho"
  "rityData.V1H\000\032\246\002\n\002V1\022\035\n\025authorityRequest"
  "edKey\030\001 \001(\t\022]\n\025coordinationEventType\030\002 \001"
  "(\0162>.Journal.OpUserAuthorityData.V1.Auth"
  "orityCoordinationEventEnum\022\035\n\025requestorC"
  "onnectionId\030\003 \001(\t\022\017\n\007ordinal\030\005 \001(\005\022.\n\007pa"
  "yload\030\004 \001(\0132\035.Journal.UserAuthorityPaylo"
  "ad\"B\n\036AuthorityCoordinationEventEnum\022\016\n\n"
  "Finalizing\020\000\022\020\n\014Coordinating\020\001B\003\n\001V\"\272\001\n\022"
  "OpSetPartHighlight\022,\n\002v1\030\001 \001(\0132\036.Journal"
  ".OpSetPartHighlight.V1H\000\032q\n\002V1\022\'\n\010object"
  "Id\030\001 \001(\0132\025.JournalData.ObjectId\022\013\n\003set\030\002"
  " \001(\010\0225\n\rhighlightData\030\n \001(\0132\036.JournalDat"
  "a.PartHighlightDataB\003\n\001VB\036\252\002\033Collab.Prox"
  "y.Comm.LiveTypesb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_journal_5foperations_5fcommon_2eproto_deps[4] = {
  &::descriptor_table_common_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_journaldata_2eproto,
  &::descriptor_table_properties_2eproto,
};
static ::_pbi::once_flag descriptor_table_journal_5foperations_5fcommon_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_journal_5foperations_5fcommon_2eproto = {
    false, false, 4304, descriptor_table_protodef_journal_5foperations_5fcommon_2eproto,
    "journal_operations_common.proto",
    &descriptor_table_journal_5foperations_5fcommon_2eproto_once, descriptor_table_journal_5foperations_5fcommon_2eproto_deps, 4, 33,
    schemas, file_default_instances, TableStruct_journal_5foperations_5fcommon_2eproto::offsets,
    file_level_metadata_journal_5foperations_5fcommon_2eproto, file_level_enum_descriptors_journal_5foperations_5fcommon_2eproto,
    file_level_service_descriptors_journal_5foperations_5fcommon_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_journal_5foperations_5fcommon_2eproto_getter() {
  return &descriptor_table_journal_5foperations_5fcommon_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_journal_5foperations_5fcommon_2eproto(&descriptor_table_journal_5foperations_5fcommon_2eproto);
namespace Journal {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OpRemoveOps_V1_UndoRedoType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_journal_5foperations_5fcommon_2eproto);
  return file_level_enum_descriptors_journal_5foperations_5fcommon_2eproto[0];
}
bool OpRemoveOps_V1_UndoRedoType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr OpRemoveOps_V1_UndoRedoType OpRemoveOps_V1::None;
constexpr OpRemoveOps_V1_UndoRedoType OpRemoveOps_V1::Undo;
constexpr OpRemoveOps_V1_UndoRedoType OpRemoveOps_V1::Redo;
constexpr OpRemoveOps_V1_UndoRedoType OpRemoveOps_V1::UndoRedoType_MIN;
constexpr OpRemoveOps_V1_UndoRedoType OpRemoveOps_V1::UndoRedoType_MAX;
constexpr int OpRemoveOps_V1::UndoRedoType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OpRemoveOps_V2_UndoRedoType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_journal_5foperations_5fcommon_2eproto);
  return file_level_enum_descriptors_journal_5foperations_5fcommon_2eproto[1];
}
bool OpRemoveOps_V2_UndoRedoType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr OpRemoveOps_V2_UndoRedoType OpRemoveOps_V2::None;
constexpr OpRemoveOps_V2_UndoRedoType OpRemoveOps_V2::Undo;
constexpr OpRemoveOps_V2_UndoRedoType OpRemoveOps_V2::Redo;
constexpr OpRemoveOps_V2_UndoRedoType OpRemoveOps_V2::UndoRedoType_MIN;
constexpr OpRemoveOps_V2_UndoRedoType OpRemoveOps_V2::UndoRedoType_MAX;
constexpr int OpRemoveOps_V2::UndoRedoType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OpUserAuthorityData_V1_AuthorityCoordinationEventEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_journal_5foperations_5fcommon_2eproto);
  return file_level_enum_descriptors_journal_5foperations_5fcommon_2eproto[2];
}
bool OpUserAuthorityData_V1_AuthorityCoordinationEventEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr OpUserAuthorityData_V1_AuthorityCoordinationEventEnum OpUserAuthorityData_V1::Finalizing;
constexpr OpUserAuthorityData_V1_AuthorityCoordinationEventEnum OpUserAuthorityData_V1::Coordinating;
constexpr OpUserAuthorityData_V1_AuthorityCoordinationEventEnum OpUserAuthorityData_V1::AuthorityCoordinationEventEnum_MIN;
constexpr OpUserAuthorityData_V1_AuthorityCoordinationEventEnum OpUserAuthorityData_V1::AuthorityCoordinationEventEnum_MAX;
constexpr int OpUserAuthorityData_V1::AuthorityCoordinationEventEnum_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class OperationId::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time(const OperationId* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
OperationId::_Internal::time(const OperationId* msg) {
  return *msg->_impl_.time_;
}
void OperationId::clear_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
}
OperationId::OperationId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Journal.OperationId)
}
OperationId::OperationId(const OperationId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OperationId* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.connectionid_){}
    , decltype(_impl_.time_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.connectionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.connectionid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_connectionid().empty()) {
    _this->_impl_.connectionid_.Set(from._internal_connectionid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_time()) {
    _this->_impl_.time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_);
  }
  // @@protoc_insertion_point(copy_constructor:Journal.OperationId)
}

inline void OperationId::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.connectionid_){}
    , decltype(_impl_.time_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.connectionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.connectionid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OperationId::~OperationId() {
  // @@protoc_insertion_point(destructor:Journal.OperationId)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OperationId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.connectionid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.time_;
}

void OperationId::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OperationId::Clear() {
// @@protoc_insertion_point(message_clear_start:Journal.OperationId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.connectionid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperationId::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string connectionId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_connectionid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Journal.OperationId.connectionId"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OperationId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Journal.OperationId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp time = 1;
  if (this->_internal_has_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::time(this),
        _Internal::time(this).GetCachedSize(), target, stream);
  }

  // string connectionId = 2;
  if (!this->_internal_connectionid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_connectionid().data(), static_cast<int>(this->_internal_connectionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Journal.OperationId.connectionId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_connectionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Journal.OperationId)
  return target;
}

size_t OperationId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Journal.OperationId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string connectionId = 2;
  if (!this->_internal_connectionid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_connectionid());
  }

  // .google.protobuf.Timestamp time = 1;
  if (this->_internal_has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OperationId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OperationId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OperationId::GetClassData() const { return &_class_data_; }


void OperationId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OperationId*>(&to_msg);
  auto& from = static_cast<const OperationId&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Journal.OperationId)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_connectionid().empty()) {
    _this->_internal_set_connectionid(from._internal_connectionid());
  }
  if (from._internal_has_time()) {
    _this->_internal_mutable_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OperationId::CopyFrom(const OperationId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Journal.OperationId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationId::IsInitialized() const {
  return true;
}

void OperationId::InternalSwap(OperationId* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.connectionid_, lhs_arena,
      &other->_impl_.connectionid_, rhs_arena
  );
  swap(_impl_.time_, other->_impl_.time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OperationId::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_journal_5foperations_5fcommon_2eproto_getter, &descriptor_table_journal_5foperations_5fcommon_2eproto_once,
      file_level_metadata_journal_5foperations_5fcommon_2eproto[0]);
}

// ===================================================================

class OperationReferenceCollection_ReferenceTimeSpan::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& begin(const OperationReferenceCollection_ReferenceTimeSpan* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& endinclusive(const OperationReferenceCollection_ReferenceTimeSpan* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
OperationReferenceCollection_ReferenceTimeSpan::_Internal::begin(const OperationReferenceCollection_ReferenceTimeSpan* msg) {
  return *msg->_impl_.begin_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
OperationReferenceCollection_ReferenceTimeSpan::_Internal::endinclusive(const OperationReferenceCollection_ReferenceTimeSpan* msg) {
  return *msg->_impl_.endinclusive_;
}
void OperationReferenceCollection_ReferenceTimeSpan::clear_begin() {
  if (GetArenaForAllocation() == nullptr && _impl_.begin_ != nullptr) {
    delete _impl_.begin_;
  }
  _impl_.begin_ = nullptr;
}
void OperationReferenceCollection_ReferenceTimeSpan::clear_endinclusive() {
  if (GetArenaForAllocation() == nullptr && _impl_.endinclusive_ != nullptr) {
    delete _impl_.endinclusive_;
  }
  _impl_.endinclusive_ = nullptr;
}
OperationReferenceCollection_ReferenceTimeSpan::OperationReferenceCollection_ReferenceTimeSpan(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Journal.OperationReferenceCollection.ReferenceTimeSpan)
}
OperationReferenceCollection_ReferenceTimeSpan::OperationReferenceCollection_ReferenceTimeSpan(const OperationReferenceCollection_ReferenceTimeSpan& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OperationReferenceCollection_ReferenceTimeSpan* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.begin_){nullptr}
    , decltype(_impl_.endinclusive_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_begin()) {
    _this->_impl_.begin_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.begin_);
  }
  if (from._internal_has_endinclusive()) {
    _this->_impl_.endinclusive_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.endinclusive_);
  }
  // @@protoc_insertion_point(copy_constructor:Journal.OperationReferenceCollection.ReferenceTimeSpan)
}

inline void OperationReferenceCollection_ReferenceTimeSpan::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.begin_){nullptr}
    , decltype(_impl_.endinclusive_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OperationReferenceCollection_ReferenceTimeSpan::~OperationReferenceCollection_ReferenceTimeSpan() {
  // @@protoc_insertion_point(destructor:Journal.OperationReferenceCollection.ReferenceTimeSpan)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OperationReferenceCollection_ReferenceTimeSpan::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.begin_;
  if (this != internal_default_instance()) delete _impl_.endinclusive_;
}

void OperationReferenceCollection_ReferenceTimeSpan::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OperationReferenceCollection_ReferenceTimeSpan::Clear() {
// @@protoc_insertion_point(message_clear_start:Journal.OperationReferenceCollection.ReferenceTimeSpan)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.begin_ != nullptr) {
    delete _impl_.begin_;
  }
  _impl_.begin_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.endinclusive_ != nullptr) {
    delete _impl_.endinclusive_;
  }
  _impl_.endinclusive_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperationReferenceCollection_ReferenceTimeSpan::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp begin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_begin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp endInclusive = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_endinclusive(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OperationReferenceCollection_ReferenceTimeSpan::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Journal.OperationReferenceCollection.ReferenceTimeSpan)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp begin = 1;
  if (this->_internal_has_begin()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::begin(this),
        _Internal::begin(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp endInclusive = 2;
  if (this->_internal_has_endinclusive()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::endinclusive(this),
        _Internal::endinclusive(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Journal.OperationReferenceCollection.ReferenceTimeSpan)
  return target;
}

size_t OperationReferenceCollection_ReferenceTimeSpan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Journal.OperationReferenceCollection.ReferenceTimeSpan)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp begin = 1;
  if (this->_internal_has_begin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.begin_);
  }

  // .google.protobuf.Timestamp endInclusive = 2;
  if (this->_internal_has_endinclusive()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.endinclusive_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OperationReferenceCollection_ReferenceTimeSpan::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OperationReferenceCollection_ReferenceTimeSpan::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OperationReferenceCollection_ReferenceTimeSpan::GetClassData() const { return &_class_data_; }


void OperationReferenceCollection_ReferenceTimeSpan::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OperationReferenceCollection_ReferenceTimeSpan*>(&to_msg);
  auto& from = static_cast<const OperationReferenceCollection_ReferenceTimeSpan&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Journal.OperationReferenceCollection.ReferenceTimeSpan)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_begin()) {
    _this->_internal_mutable_begin()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_begin());
  }
  if (from._internal_has_endinclusive()) {
    _this->_internal_mutable_endinclusive()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_endinclusive());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OperationReferenceCollection_ReferenceTimeSpan::CopyFrom(const OperationReferenceCollection_ReferenceTimeSpan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Journal.OperationReferenceCollection.ReferenceTimeSpan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationReferenceCollection_ReferenceTimeSpan::IsInitialized() const {
  return true;
}

void OperationReferenceCollection_ReferenceTimeSpan::InternalSwap(OperationReferenceCollection_ReferenceTimeSpan* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OperationReferenceCollection_ReferenceTimeSpan, _impl_.endinclusive_)
      + sizeof(OperationReferenceCollection_ReferenceTimeSpan::_impl_.endinclusive_)
      - PROTOBUF_FIELD_OFFSET(OperationReferenceCollection_ReferenceTimeSpan, _impl_.begin_)>(
          reinterpret_cast<char*>(&_impl_.begin_),
          reinterpret_cast<char*>(&other->_impl_.begin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OperationReferenceCollection_ReferenceTimeSpan::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_journal_5foperations_5fcommon_2eproto_getter, &descriptor_table_journal_5foperations_5fcommon_2eproto_once,
      file_level_metadata_journal_5foperations_5fcommon_2eproto[1]);
}

// ===================================================================

class OperationReferenceCollection_ReferenceSinglesByConnection::_Internal {
 public:
};

void OperationReferenceCollection_ReferenceSinglesByConnection::clear_attimeset() {
  _impl_.attimeset_.Clear();
}
OperationReferenceCollection_ReferenceSinglesByConnection::OperationReferenceCollection_ReferenceSinglesByConnection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Journal.OperationReferenceCollection.ReferenceSinglesByConnection)
}
OperationReferenceCollection_ReferenceSinglesByConnection::OperationReferenceCollection_ReferenceSinglesByConnection(const OperationReferenceCollection_ReferenceSinglesByConnection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OperationReferenceCollection_ReferenceSinglesByConnection* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.attimeset_){from._impl_.attimeset_}
    , decltype(_impl_.fromconnectionid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.fromconnectionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fromconnectionid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fromconnectionid().empty()) {
    _this->_impl_.fromconnectionid_.Set(from._internal_fromconnectionid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Journal.OperationReferenceCollection.ReferenceSinglesByConnection)
}

inline void OperationReferenceCollection_ReferenceSinglesByConnection::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.attimeset_){arena}
    , decltype(_impl_.fromconnectionid_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.fromconnectionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fromconnectionid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OperationReferenceCollection_ReferenceSinglesByConnection::~OperationReferenceCollection_ReferenceSinglesByConnection() {
  // @@protoc_insertion_point(destructor:Journal.OperationReferenceCollection.ReferenceSinglesByConnection)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OperationReferenceCollection_ReferenceSinglesByConnection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attimeset_.~RepeatedPtrField();
  _impl_.fromconnectionid_.Destroy();
}

void OperationReferenceCollection_ReferenceSinglesByConnection::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OperationReferenceCollection_ReferenceSinglesByConnection::Clear() {
// @@protoc_insertion_point(message_clear_start:Journal.OperationReferenceCollection.ReferenceSinglesByConnection)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attimeset_.Clear();
  _impl_.fromconnectionid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperationReferenceCollection_ReferenceSinglesByConnection::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string fromConnectionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_fromconnectionid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Journal.OperationReferenceCollection.ReferenceSinglesByConnection.fromConnectionId"));
        } else
          goto handle_unusual;
        continue;
      // repeated .google.protobuf.Timestamp atTimeSet = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attimeset(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OperationReferenceCollection_ReferenceSinglesByConnection::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Journal.OperationReferenceCollection.ReferenceSinglesByConnection)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string fromConnectionId = 1;
  if (!this->_internal_fromconnectionid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fromconnectionid().data(), static_cast<int>(this->_internal_fromconnectionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Journal.OperationReferenceCollection.ReferenceSinglesByConnection.fromConnectionId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_fromconnectionid(), target);
  }

  // repeated .google.protobuf.Timestamp atTimeSet = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_attimeset_size()); i < n; i++) {
    const auto& repfield = this->_internal_attimeset(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Journal.OperationReferenceCollection.ReferenceSinglesByConnection)
  return target;
}

size_t OperationReferenceCollection_ReferenceSinglesByConnection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Journal.OperationReferenceCollection.ReferenceSinglesByConnection)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.Timestamp atTimeSet = 2;
  total_size += 1UL * this->_internal_attimeset_size();
  for (const auto& msg : this->_impl_.attimeset_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string fromConnectionId = 1;
  if (!this->_internal_fromconnectionid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fromconnectionid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OperationReferenceCollection_ReferenceSinglesByConnection::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OperationReferenceCollection_ReferenceSinglesByConnection::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OperationReferenceCollection_ReferenceSinglesByConnection::GetClassData() const { return &_class_data_; }


void OperationReferenceCollection_ReferenceSinglesByConnection::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OperationReferenceCollection_ReferenceSinglesByConnection*>(&to_msg);
  auto& from = static_cast<const OperationReferenceCollection_ReferenceSinglesByConnection&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Journal.OperationReferenceCollection.ReferenceSinglesByConnection)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.attimeset_.MergeFrom(from._impl_.attimeset_);
  if (!from._internal_fromconnectionid().empty()) {
    _this->_internal_set_fromconnectionid(from._internal_fromconnectionid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OperationReferenceCollection_ReferenceSinglesByConnection::CopyFrom(const OperationReferenceCollection_ReferenceSinglesByConnection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Journal.OperationReferenceCollection.ReferenceSinglesByConnection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationReferenceCollection_ReferenceSinglesByConnection::IsInitialized() const {
  return true;
}

void OperationReferenceCollection_ReferenceSinglesByConnection::InternalSwap(OperationReferenceCollection_ReferenceSinglesByConnection* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.attimeset_.InternalSwap(&other->_impl_.attimeset_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fromconnectionid_, lhs_arena,
      &other->_impl_.fromconnectionid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata OperationReferenceCollection_ReferenceSinglesByConnection::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_journal_5foperations_5fcommon_2eproto_getter, &descriptor_table_journal_5foperations_5fcommon_2eproto_once,
      file_level_metadata_journal_5foperations_5fcommon_2eproto[2]);
}

// ===================================================================

class OperationReferenceCollection::_Internal {
 public:
};

OperationReferenceCollection::OperationReferenceCollection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Journal.OperationReferenceCollection)
}
OperationReferenceCollection::OperationReferenceCollection(const OperationReferenceCollection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OperationReferenceCollection* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.spans_){from._impl_.spans_}
    , decltype(_impl_.singles_){from._impl_.singles_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Journal.OperationReferenceCollection)
}

inline void OperationReferenceCollection::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.spans_){arena}
    , decltype(_impl_.singles_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OperationReferenceCollection::~OperationReferenceCollection() {
  // @@protoc_insertion_point(destructor:Journal.OperationReferenceCollection)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OperationReferenceCollection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.spans_.~RepeatedPtrField();
  _impl_.singles_.~RepeatedPtrField();
}

void OperationReferenceCollection::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OperationReferenceCollection::Clear() {
// @@protoc_insertion_point(message_clear_start:Journal.OperationReferenceCollection)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.spans_.Clear();
  _impl_.singles_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperationReferenceCollection::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Journal.OperationReferenceCollection.ReferenceTimeSpan spans = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_spans(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .Journal.OperationReferenceCollection.ReferenceSinglesByConnection singles = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_singles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OperationReferenceCollection::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Journal.OperationReferenceCollection)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Journal.OperationReferenceCollection.ReferenceTimeSpan spans = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_spans_size()); i < n; i++) {
    const auto& repfield = this->_internal_spans(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Journal.OperationReferenceCollection.ReferenceSinglesByConnection singles = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_singles_size()); i < n; i++) {
    const auto& repfield = this->_internal_singles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Journal.OperationReferenceCollection)
  return target;
}

size_t OperationReferenceCollection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Journal.OperationReferenceCollection)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Journal.OperationReferenceCollection.ReferenceTimeSpan spans = 1;
  total_size += 1UL * this->_internal_spans_size();
  for (const auto& msg : this->_impl_.spans_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Journal.OperationReferenceCollection.ReferenceSinglesByConnection singles = 2;
  total_size += 1UL * this->_internal_singles_size();
  for (const auto& msg : this->_impl_.singles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OperationReferenceCollection::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OperationReferenceCollection::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OperationReferenceCollection::GetClassData() const { return &_class_data_; }


void OperationReferenceCollection::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OperationReferenceCollection*>(&to_msg);
  auto& from = static_cast<const OperationReferenceCollection&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Journal.OperationReferenceCollection)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.spans_.MergeFrom(from._impl_.spans_);
  _this->_impl_.singles_.MergeFrom(from._impl_.singles_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OperationReferenceCollection::CopyFrom(const OperationReferenceCollection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Journal.OperationReferenceCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationReferenceCollection::IsInitialized() const {
  return true;
}

void OperationReferenceCollection::InternalSwap(OperationReferenceCollection* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.spans_.InternalSwap(&other->_impl_.spans_);
  _impl_.singles_.InternalSwap(&other->_impl_.singles_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OperationReferenceCollection::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_journal_5foperations_5fcommon_2eproto_getter, &descriptor_table_journal_5foperations_5fcommon_2eproto_once,
      file_level_metadata_journal_5foperations_5fcommon_2eproto[3]);
}

// ===================================================================

class OpRemoveOps_V1::_Internal {
 public:
  static const ::Journal::OperationReferenceCollection& ids(const OpRemoveOps_V1* msg);
};

const ::Journal::OperationReferenceCollection&
OpRemoveOps_V1::_Internal::ids(const OpRemoveOps_V1* msg) {
  return *msg->_impl_.ids_;
}
OpRemoveOps_V1::OpRemoveOps_V1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Journal.OpRemoveOps.V1)
}
OpRemoveOps_V1::OpRemoveOps_V1(const OpRemoveOps_V1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OpRemoveOps_V1* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_){nullptr}
    , decltype(_impl_.removaltype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ids()) {
    _this->_impl_.ids_ = new ::Journal::OperationReferenceCollection(*from._impl_.ids_);
  }
  _this->_impl_.removaltype_ = from._impl_.removaltype_;
  // @@protoc_insertion_point(copy_constructor:Journal.OpRemoveOps.V1)
}

inline void OpRemoveOps_V1::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_){nullptr}
    , decltype(_impl_.removaltype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OpRemoveOps_V1::~OpRemoveOps_V1() {
  // @@protoc_insertion_point(destructor:Journal.OpRemoveOps.V1)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OpRemoveOps_V1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.ids_;
}

void OpRemoveOps_V1::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OpRemoveOps_V1::Clear() {
// @@protoc_insertion_point(message_clear_start:Journal.OpRemoveOps.V1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.ids_ != nullptr) {
    delete _impl_.ids_;
  }
  _impl_.ids_ = nullptr;
  _impl_.removaltype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpRemoveOps_V1::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Journal.OperationReferenceCollection ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ids(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Journal.OpRemoveOps.V1.UndoRedoType removalType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_removaltype(static_cast<::Journal::OpRemoveOps_V1_UndoRedoType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OpRemoveOps_V1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Journal.OpRemoveOps.V1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Journal.OperationReferenceCollection ids = 1;
  if (this->_internal_has_ids()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::ids(this),
        _Internal::ids(this).GetCachedSize(), target, stream);
  }

  // .Journal.OpRemoveOps.V1.UndoRedoType removalType = 2;
  if (this->_internal_removaltype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_removaltype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Journal.OpRemoveOps.V1)
  return target;
}

size_t OpRemoveOps_V1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Journal.OpRemoveOps.V1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Journal.OperationReferenceCollection ids = 1;
  if (this->_internal_has_ids()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ids_);
  }

  // .Journal.OpRemoveOps.V1.UndoRedoType removalType = 2;
  if (this->_internal_removaltype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_removaltype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OpRemoveOps_V1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OpRemoveOps_V1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OpRemoveOps_V1::GetClassData() const { return &_class_data_; }


void OpRemoveOps_V1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OpRemoveOps_V1*>(&to_msg);
  auto& from = static_cast<const OpRemoveOps_V1&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Journal.OpRemoveOps.V1)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ids()) {
    _this->_internal_mutable_ids()->::Journal::OperationReferenceCollection::MergeFrom(
        from._internal_ids());
  }
  if (from._internal_removaltype() != 0) {
    _this->_internal_set_removaltype(from._internal_removaltype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OpRemoveOps_V1::CopyFrom(const OpRemoveOps_V1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Journal.OpRemoveOps.V1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpRemoveOps_V1::IsInitialized() const {
  return true;
}

void OpRemoveOps_V1::InternalSwap(OpRemoveOps_V1* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OpRemoveOps_V1, _impl_.removaltype_)
      + sizeof(OpRemoveOps_V1::_impl_.removaltype_)
      - PROTOBUF_FIELD_OFFSET(OpRemoveOps_V1, _impl_.ids_)>(
          reinterpret_cast<char*>(&_impl_.ids_),
          reinterpret_cast<char*>(&other->_impl_.ids_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OpRemoveOps_V1::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_journal_5foperations_5fcommon_2eproto_getter, &descriptor_table_journal_5foperations_5fcommon_2eproto_once,
      file_level_metadata_journal_5foperations_5fcommon_2eproto[4]);
}

// ===================================================================

class OpRemoveOps_V2::_Internal {
 public:
};

OpRemoveOps_V2::OpRemoveOps_V2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Journal.OpRemoveOps.V2)
}
OpRemoveOps_V2::OpRemoveOps_V2(const OpRemoveOps_V2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OpRemoveOps_V2* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.opids_){from._impl_.opids_}
    , decltype(_impl_.removaltype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.removaltype_ = from._impl_.removaltype_;
  // @@protoc_insertion_point(copy_constructor:Journal.OpRemoveOps.V2)
}

inline void OpRemoveOps_V2::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.opids_){arena}
    , decltype(_impl_.removaltype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OpRemoveOps_V2::~OpRemoveOps_V2() {
  // @@protoc_insertion_point(destructor:Journal.OpRemoveOps.V2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OpRemoveOps_V2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.opids_.~RepeatedPtrField();
}

void OpRemoveOps_V2::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OpRemoveOps_V2::Clear() {
// @@protoc_insertion_point(message_clear_start:Journal.OpRemoveOps.V2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.opids_.Clear();
  _impl_.removaltype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpRemoveOps_V2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string opIds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_opids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "Journal.OpRemoveOps.V2.opIds"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .Journal.OpRemoveOps.V2.UndoRedoType removalType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_removaltype(static_cast<::Journal::OpRemoveOps_V2_UndoRedoType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OpRemoveOps_V2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Journal.OpRemoveOps.V2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string opIds = 1;
  for (int i = 0, n = this->_internal_opids_size(); i < n; i++) {
    const auto& s = this->_internal_opids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Journal.OpRemoveOps.V2.opIds");
    target = stream->WriteString(1, s, target);
  }

  // .Journal.OpRemoveOps.V2.UndoRedoType removalType = 2;
  if (this->_internal_removaltype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_removaltype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Journal.OpRemoveOps.V2)
  return target;
}

size_t OpRemoveOps_V2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Journal.OpRemoveOps.V2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string opIds = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.opids_.size());
  for (int i = 0, n = _impl_.opids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.opids_.Get(i));
  }

  // .Journal.OpRemoveOps.V2.UndoRedoType removalType = 2;
  if (this->_internal_removaltype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_removaltype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OpRemoveOps_V2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OpRemoveOps_V2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OpRemoveOps_V2::GetClassData() const { return &_class_data_; }


void OpRemoveOps_V2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OpRemoveOps_V2*>(&to_msg);
  auto& from = static_cast<const OpRemoveOps_V2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Journal.OpRemoveOps.V2)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.opids_.MergeFrom(from._impl_.opids_);
  if (from._internal_removaltype() != 0) {
    _this->_internal_set_removaltype(from._internal_removaltype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OpRemoveOps_V2::CopyFrom(const OpRemoveOps_V2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Journal.OpRemoveOps.V2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpRemoveOps_V2::IsInitialized() const {
  return true;
}

void OpRemoveOps_V2::InternalSwap(OpRemoveOps_V2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.opids_.InternalSwap(&other->_impl_.opids_);
  swap(_impl_.removaltype_, other->_impl_.removaltype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OpRemoveOps_V2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_journal_5foperations_5fcommon_2eproto_getter, &descriptor_table_journal_5foperations_5fcommon_2eproto_once,
      file_level_metadata_journal_5foperations_5fcommon_2eproto[5]);
}

// ===================================================================

class OpRemoveOps::_Internal {
 public:
  static const ::Journal::OpRemoveOps_V1& v1(const OpRemoveOps* msg);
  static const ::Journal::OpRemoveOps_V2& v2(const OpRemoveOps* msg);
};

const ::Journal::OpRemoveOps_V1&
OpRemoveOps::_Internal::v1(const OpRemoveOps* msg) {
  return *msg->_impl_.V_.v1_;
}
const ::Journal::OpRemoveOps_V2&
OpRemoveOps::_Internal::v2(const OpRemoveOps* msg) {
  return *msg->_impl_.V_.v2_;
}
void OpRemoveOps::set_allocated_v1(::Journal::OpRemoveOps_V1* v1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_V();
  if (v1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(v1);
    if (message_arena != submessage_arena) {
      v1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, v1, submessage_arena);
    }
    set_has_v1();
    _impl_.V_.v1_ = v1;
  }
  // @@protoc_insertion_point(field_set_allocated:Journal.OpRemoveOps.v1)
}
void OpRemoveOps::set_allocated_v2(::Journal::OpRemoveOps_V2* v2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_V();
  if (v2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(v2);
    if (message_arena != submessage_arena) {
      v2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, v2, submessage_arena);
    }
    set_has_v2();
    _impl_.V_.v2_ = v2;
  }
  // @@protoc_insertion_point(field_set_allocated:Journal.OpRemoveOps.v2)
}
OpRemoveOps::OpRemoveOps(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Journal.OpRemoveOps)
}
OpRemoveOps::OpRemoveOps(const OpRemoveOps& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OpRemoveOps* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.V_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_V();
  switch (from.V_case()) {
    case kV1: {
      _this->_internal_mutable_v1()->::Journal::OpRemoveOps_V1::MergeFrom(
          from._internal_v1());
      break;
    }
    case kV2: {
      _this->_internal_mutable_v2()->::Journal::OpRemoveOps_V2::MergeFrom(
          from._internal_v2());
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Journal.OpRemoveOps)
}

inline void OpRemoveOps::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.V_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_V();
}

OpRemoveOps::~OpRemoveOps() {
  // @@protoc_insertion_point(destructor:Journal.OpRemoveOps)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OpRemoveOps::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_V()) {
    clear_V();
  }
}

void OpRemoveOps::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OpRemoveOps::clear_V() {
// @@protoc_insertion_point(one_of_clear_start:Journal.OpRemoveOps)
  switch (V_case()) {
    case kV1: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.V_.v1_;
      }
      break;
    }
    case kV2: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.V_.v2_;
      }
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = V_NOT_SET;
}


void OpRemoveOps::Clear() {
// @@protoc_insertion_point(message_clear_start:Journal.OpRemoveOps)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_V();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpRemoveOps::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Journal.OpRemoveOps.V1 v1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_v1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Journal.OpRemoveOps.V2 v2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_v2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OpRemoveOps::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Journal.OpRemoveOps)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Journal.OpRemoveOps.V1 v1 = 1;
  if (_internal_has_v1()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::v1(this),
        _Internal::v1(this).GetCachedSize(), target, stream);
  }

  // .Journal.OpRemoveOps.V2 v2 = 2;
  if (_internal_has_v2()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::v2(this),
        _Internal::v2(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Journal.OpRemoveOps)
  return target;
}

size_t OpRemoveOps::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Journal.OpRemoveOps)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (V_case()) {
    // .Journal.OpRemoveOps.V1 v1 = 1;
    case kV1: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.V_.v1_);
      break;
    }
    // .Journal.OpRemoveOps.V2 v2 = 2;
    case kV2: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.V_.v2_);
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OpRemoveOps::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OpRemoveOps::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OpRemoveOps::GetClassData() const { return &_class_data_; }


void OpRemoveOps::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OpRemoveOps*>(&to_msg);
  auto& from = static_cast<const OpRemoveOps&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Journal.OpRemoveOps)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.V_case()) {
    case kV1: {
      _this->_internal_mutable_v1()->::Journal::OpRemoveOps_V1::MergeFrom(
          from._internal_v1());
      break;
    }
    case kV2: {
      _this->_internal_mutable_v2()->::Journal::OpRemoveOps_V2::MergeFrom(
          from._internal_v2());
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OpRemoveOps::CopyFrom(const OpRemoveOps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Journal.OpRemoveOps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpRemoveOps::IsInitialized() const {
  return true;
}

void OpRemoveOps::InternalSwap(OpRemoveOps* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.V_, other->_impl_.V_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata OpRemoveOps::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_journal_5foperations_5fcommon_2eproto_getter, &descriptor_table_journal_5foperations_5fcommon_2eproto_once,
      file_level_metadata_journal_5foperations_5fcommon_2eproto[6]);
}

// ===================================================================

class OpLine2d_V1::_Internal {
 public:
  static const ::JournalData::ObjectId& objectid(const OpLine2d_V1* msg);
  static const ::JournalData::BoardState& visiblewithinstate(const OpLine2d_V1* msg);
  static const ::Common::Float2Array& points(const OpLine2d_V1* msg);
  static const ::Common::Color4& color(const OpLine2d_V1* msg);
};

const ::JournalData::ObjectId&
OpLine2d_V1::_Internal::objectid(const OpLine2d_V1* msg) {
  return *msg->_impl_.objectid_;
}
const ::JournalData::BoardState&
OpLine2d_V1::_Internal::visiblewithinstate(const OpLine2d_V1* msg) {
  return *msg->_impl_.visiblewithinstate_;
}
const ::Common::Float2Array&
OpLine2d_V1::_Internal::points(const OpLine2d_V1* msg) {
  return *msg->_impl_.points_;
}
const ::Common::Color4&
OpLine2d_V1::_Internal::color(const OpLine2d_V1* msg) {
  return *msg->_impl_.color_;
}
void OpLine2d_V1::clear_objectid() {
  if (GetArenaForAllocation() == nullptr && _impl_.objectid_ != nullptr) {
    delete _impl_.objectid_;
  }
  _impl_.objectid_ = nullptr;
}
void OpLine2d_V1::clear_visiblewithinstate() {
  if (GetArenaForAllocation() == nullptr && _impl_.visiblewithinstate_ != nullptr) {
    delete _impl_.visiblewithinstate_;
  }
  _impl_.visiblewithinstate_ = nullptr;
}
void OpLine2d_V1::clear_points() {
  if (GetArenaForAllocation() == nullptr && _impl_.points_ != nullptr) {
    delete _impl_.points_;
  }
  _impl_.points_ = nullptr;
}
void OpLine2d_V1::clear_color() {
  if (GetArenaForAllocation() == nullptr && _impl_.color_ != nullptr) {
    delete _impl_.color_;
  }
  _impl_.color_ = nullptr;
}
OpLine2d_V1::OpLine2d_V1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Journal.OpLine2d.V1)
}
OpLine2d_V1::OpLine2d_V1(const OpLine2d_V1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OpLine2d_V1* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.newobjectid_){}
    , decltype(_impl_.objectid_){nullptr}
    , decltype(_impl_.visiblewithinstate_){nullptr}
    , decltype(_impl_.points_){nullptr}
    , decltype(_impl_.color_){nullptr}
    , decltype(_impl_.width_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.newobjectid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.newobjectid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_newobjectid().empty()) {
    _this->_impl_.newobjectid_.Set(from._internal_newobjectid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_objectid()) {
    _this->_impl_.objectid_ = new ::JournalData::ObjectId(*from._impl_.objectid_);
  }
  if (from._internal_has_visiblewithinstate()) {
    _this->_impl_.visiblewithinstate_ = new ::JournalData::BoardState(*from._impl_.visiblewithinstate_);
  }
  if (from._internal_has_points()) {
    _this->_impl_.points_ = new ::Common::Float2Array(*from._impl_.points_);
  }
  if (from._internal_has_color()) {
    _this->_impl_.color_ = new ::Common::Color4(*from._impl_.color_);
  }
  _this->_impl_.width_ = from._impl_.width_;
  // @@protoc_insertion_point(copy_constructor:Journal.OpLine2d.V1)
}

inline void OpLine2d_V1::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.newobjectid_){}
    , decltype(_impl_.objectid_){nullptr}
    , decltype(_impl_.visiblewithinstate_){nullptr}
    , decltype(_impl_.points_){nullptr}
    , decltype(_impl_.color_){nullptr}
    , decltype(_impl_.width_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.newobjectid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.newobjectid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OpLine2d_V1::~OpLine2d_V1() {
  // @@protoc_insertion_point(destructor:Journal.OpLine2d.V1)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OpLine2d_V1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.newobjectid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.objectid_;
  if (this != internal_default_instance()) delete _impl_.visiblewithinstate_;
  if (this != internal_default_instance()) delete _impl_.points_;
  if (this != internal_default_instance()) delete _impl_.color_;
}

void OpLine2d_V1::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OpLine2d_V1::Clear() {
// @@protoc_insertion_point(message_clear_start:Journal.OpLine2d.V1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.newobjectid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.objectid_ != nullptr) {
    delete _impl_.objectid_;
  }
  _impl_.objectid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.visiblewithinstate_ != nullptr) {
    delete _impl_.visiblewithinstate_;
  }
  _impl_.visiblewithinstate_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.points_ != nullptr) {
    delete _impl_.points_;
  }
  _impl_.points_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.color_ != nullptr) {
    delete _impl_.color_;
  }
  _impl_.color_ = nullptr;
  _impl_.width_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpLine2d_V1::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .JournalData.ObjectId objectId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_objectid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .JournalData.BoardState visibleWithinState = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_visiblewithinstate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Common.Float2Array points = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_points(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float width = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .Common.Color4 color = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string newObjectId = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_newobjectid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Journal.OpLine2d.V1.newObjectId"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OpLine2d_V1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Journal.OpLine2d.V1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .JournalData.ObjectId objectId = 1;
  if (this->_internal_has_objectid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::objectid(this),
        _Internal::objectid(this).GetCachedSize(), target, stream);
  }

  // .JournalData.BoardState visibleWithinState = 2;
  if (this->_internal_has_visiblewithinstate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::visiblewithinstate(this),
        _Internal::visiblewithinstate(this).GetCachedSize(), target, stream);
  }

  // .Common.Float2Array points = 3;
  if (this->_internal_has_points()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::points(this),
        _Internal::points(this).GetCachedSize(), target, stream);
  }

  // float width = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_width = this->_internal_width();
  uint32_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_width(), target);
  }

  // .Common.Color4 color = 5;
  if (this->_internal_has_color()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::color(this),
        _Internal::color(this).GetCachedSize(), target, stream);
  }

  // string newObjectId = 10;
  if (!this->_internal_newobjectid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_newobjectid().data(), static_cast<int>(this->_internal_newobjectid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Journal.OpLine2d.V1.newObjectId");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_newobjectid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Journal.OpLine2d.V1)
  return target;
}

size_t OpLine2d_V1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Journal.OpLine2d.V1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string newObjectId = 10;
  if (!this->_internal_newobjectid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_newobjectid());
  }

  // .JournalData.ObjectId objectId = 1;
  if (this->_internal_has_objectid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.objectid_);
  }

  // .JournalData.BoardState visibleWithinState = 2;
  if (this->_internal_has_visiblewithinstate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.visiblewithinstate_);
  }

  // .Common.Float2Array points = 3;
  if (this->_internal_has_points()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.points_);
  }

  // .Common.Color4 color = 5;
  if (this->_internal_has_color()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.color_);
  }

  // float width = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_width = this->_internal_width();
  uint32_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OpLine2d_V1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OpLine2d_V1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OpLine2d_V1::GetClassData() const { return &_class_data_; }


void OpLine2d_V1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OpLine2d_V1*>(&to_msg);
  auto& from = static_cast<const OpLine2d_V1&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Journal.OpLine2d.V1)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_newobjectid().empty()) {
    _this->_internal_set_newobjectid(from._internal_newobjectid());
  }
  if (from._internal_has_objectid()) {
    _this->_internal_mutable_objectid()->::JournalData::ObjectId::MergeFrom(
        from._internal_objectid());
  }
  if (from._internal_has_visiblewithinstate()) {
    _this->_internal_mutable_visiblewithinstate()->::JournalData::BoardState::MergeFrom(
        from._internal_visiblewithinstate());
  }
  if (from._internal_has_points()) {
    _this->_internal_mutable_points()->::Common::Float2Array::MergeFrom(
        from._internal_points());
  }
  if (from._internal_has_color()) {
    _this->_internal_mutable_color()->::Common::Color4::MergeFrom(
        from._internal_color());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_width = from._internal_width();
  uint32_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OpLine2d_V1::CopyFrom(const OpLine2d_V1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Journal.OpLine2d.V1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpLine2d_V1::IsInitialized() const {
  return true;
}

void OpLine2d_V1::InternalSwap(OpLine2d_V1* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.newobjectid_, lhs_arena,
      &other->_impl_.newobjectid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OpLine2d_V1, _impl_.width_)
      + sizeof(OpLine2d_V1::_impl_.width_)
      - PROTOBUF_FIELD_OFFSET(OpLine2d_V1, _impl_.objectid_)>(
          reinterpret_cast<char*>(&_impl_.objectid_),
          reinterpret_cast<char*>(&other->_impl_.objectid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OpLine2d_V1::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_journal_5foperations_5fcommon_2eproto_getter, &descriptor_table_journal_5foperations_5fcommon_2eproto_once,
      file_level_metadata_journal_5foperations_5fcommon_2eproto[7]);
}

// ===================================================================

class OpLine2d::_Internal {
 public:
  static const ::Journal::OpLine2d_V1& v1(const OpLine2d* msg);
};

const ::Journal::OpLine2d_V1&
OpLine2d::_Internal::v1(const OpLine2d* msg) {
  return *msg->_impl_.V_.v1_;
}
void OpLine2d::set_allocated_v1(::Journal::OpLine2d_V1* v1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_V();
  if (v1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(v1);
    if (message_arena != submessage_arena) {
      v1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, v1, submessage_arena);
    }
    set_has_v1();
    _impl_.V_.v1_ = v1;
  }
  // @@protoc_insertion_point(field_set_allocated:Journal.OpLine2d.v1)
}
OpLine2d::OpLine2d(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Journal.OpLine2d)
}
OpLine2d::OpLine2d(const OpLine2d& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OpLine2d* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.V_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_V();
  switch (from.V_case()) {
    case kV1: {
      _this->_internal_mutable_v1()->::Journal::OpLine2d_V1::MergeFrom(
          from._internal_v1());
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Journal.OpLine2d)
}

inline void OpLine2d::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.V_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_V();
}

OpLine2d::~OpLine2d() {
  // @@protoc_insertion_point(destructor:Journal.OpLine2d)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OpLine2d::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_V()) {
    clear_V();
  }
}

void OpLine2d::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OpLine2d::clear_V() {
// @@protoc_insertion_point(one_of_clear_start:Journal.OpLine2d)
  switch (V_case()) {
    case kV1: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.V_.v1_;
      }
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = V_NOT_SET;
}


void OpLine2d::Clear() {
// @@protoc_insertion_point(message_clear_start:Journal.OpLine2d)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_V();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpLine2d::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Journal.OpLine2d.V1 v1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_v1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OpLine2d::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Journal.OpLine2d)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Journal.OpLine2d.V1 v1 = 1;
  if (_internal_has_v1()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::v1(this),
        _Internal::v1(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Journal.OpLine2d)
  return target;
}

size_t OpLine2d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Journal.OpLine2d)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (V_case()) {
    // .Journal.OpLine2d.V1 v1 = 1;
    case kV1: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.V_.v1_);
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OpLine2d::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OpLine2d::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OpLine2d::GetClassData() const { return &_class_data_; }


void OpLine2d::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OpLine2d*>(&to_msg);
  auto& from = static_cast<const OpLine2d&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Journal.OpLine2d)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.V_case()) {
    case kV1: {
      _this->_internal_mutable_v1()->::Journal::OpLine2d_V1::MergeFrom(
          from._internal_v1());
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OpLine2d::CopyFrom(const OpLine2d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Journal.OpLine2d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpLine2d::IsInitialized() const {
  return true;
}

void OpLine2d::InternalSwap(OpLine2d* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.V_, other->_impl_.V_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata OpLine2d::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_journal_5foperations_5fcommon_2eproto_getter, &descriptor_table_journal_5foperations_5fcommon_2eproto_once,
      file_level_metadata_journal_5foperations_5fcommon_2eproto[8]);
}

// ===================================================================

class OpText2d_V1::_Internal {
 public:
  static const ::JournalData::ObjectId& objectid(const OpText2d_V1* msg);
  static const ::JournalData::BoardState& visiblewithinstate(const OpText2d_V1* msg);
  static const ::Common::Float2& point(const OpText2d_V1* msg);
  static const ::Common::Color4& color(const OpText2d_V1* msg);
};

const ::JournalData::ObjectId&
OpText2d_V1::_Internal::objectid(const OpText2d_V1* msg) {
  return *msg->_impl_.objectid_;
}
const ::JournalData::BoardState&
OpText2d_V1::_Internal::visiblewithinstate(const OpText2d_V1* msg) {
  return *msg->_impl_.visiblewithinstate_;
}
const ::Common::Float2&
OpText2d_V1::_Internal::point(const OpText2d_V1* msg) {
  return *msg->_impl_.point_;
}
const ::Common::Color4&
OpText2d_V1::_Internal::color(const OpText2d_V1* msg) {
  return *msg->_impl_.color_;
}
void OpText2d_V1::clear_objectid() {
  if (GetArenaForAllocation() == nullptr && _impl_.objectid_ != nullptr) {
    delete _impl_.objectid_;
  }
  _impl_.objectid_ = nullptr;
}
void OpText2d_V1::clear_visiblewithinstate() {
  if (GetArenaForAllocation() == nullptr && _impl_.visiblewithinstate_ != nullptr) {
    delete _impl_.visiblewithinstate_;
  }
  _impl_.visiblewithinstate_ = nullptr;
}
void OpText2d_V1::clear_point() {
  if (GetArenaForAllocation() == nullptr && _impl_.point_ != nullptr) {
    delete _impl_.point_;
  }
  _impl_.point_ = nullptr;
}
void OpText2d_V1::clear_color() {
  if (GetArenaForAllocation() == nullptr && _impl_.color_ != nullptr) {
    delete _impl_.color_;
  }
  _impl_.color_ = nullptr;
}
OpText2d_V1::OpText2d_V1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Journal.OpText2d.V1)
}
OpText2d_V1::OpText2d_V1(const OpText2d_V1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OpText2d_V1* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.text_){}
    , decltype(_impl_.language_){}
    , decltype(_impl_.newobjectid_){}
    , decltype(_impl_.objectid_){nullptr}
    , decltype(_impl_.visiblewithinstate_){nullptr}
    , decltype(_impl_.point_){nullptr}
    , decltype(_impl_.color_){nullptr}
    , decltype(_impl_.size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  _impl_.language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_language().empty()) {
    _this->_impl_.language_.Set(from._internal_language(), 
      _this->GetArenaForAllocation());
  }
  _impl_.newobjectid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.newobjectid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_newobjectid().empty()) {
    _this->_impl_.newobjectid_.Set(from._internal_newobjectid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_objectid()) {
    _this->_impl_.objectid_ = new ::JournalData::ObjectId(*from._impl_.objectid_);
  }
  if (from._internal_has_visiblewithinstate()) {
    _this->_impl_.visiblewithinstate_ = new ::JournalData::BoardState(*from._impl_.visiblewithinstate_);
  }
  if (from._internal_has_point()) {
    _this->_impl_.point_ = new ::Common::Float2(*from._impl_.point_);
  }
  if (from._internal_has_color()) {
    _this->_impl_.color_ = new ::Common::Color4(*from._impl_.color_);
  }
  _this->_impl_.size_ = from._impl_.size_;
  // @@protoc_insertion_point(copy_constructor:Journal.OpText2d.V1)
}

inline void OpText2d_V1::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.text_){}
    , decltype(_impl_.language_){}
    , decltype(_impl_.newobjectid_){}
    , decltype(_impl_.objectid_){nullptr}
    , decltype(_impl_.visiblewithinstate_){nullptr}
    , decltype(_impl_.point_){nullptr}
    , decltype(_impl_.color_){nullptr}
    , decltype(_impl_.size_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.newobjectid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.newobjectid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OpText2d_V1::~OpText2d_V1() {
  // @@protoc_insertion_point(destructor:Journal.OpText2d.V1)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OpText2d_V1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.text_.Destroy();
  _impl_.language_.Destroy();
  _impl_.newobjectid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.objectid_;
  if (this != internal_default_instance()) delete _impl_.visiblewithinstate_;
  if (this != internal_default_instance()) delete _impl_.point_;
  if (this != internal_default_instance()) delete _impl_.color_;
}

void OpText2d_V1::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OpText2d_V1::Clear() {
// @@protoc_insertion_point(message_clear_start:Journal.OpText2d.V1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.text_.ClearToEmpty();
  _impl_.language_.ClearToEmpty();
  _impl_.newobjectid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.objectid_ != nullptr) {
    delete _impl_.objectid_;
  }
  _impl_.objectid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.visiblewithinstate_ != nullptr) {
    delete _impl_.visiblewithinstate_;
  }
  _impl_.visiblewithinstate_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.point_ != nullptr) {
    delete _impl_.point_;
  }
  _impl_.point_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.color_ != nullptr) {
    delete _impl_.color_;
  }
  _impl_.color_ = nullptr;
  _impl_.size_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpText2d_V1::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .JournalData.ObjectId objectId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_objectid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .JournalData.BoardState visibleWithinState = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_visiblewithinstate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Common.Float2 point = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_point(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string text = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Journal.OpText2d.V1.text"));
        } else
          goto handle_unusual;
        continue;
      // string language = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_language();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Journal.OpText2d.V1.language"));
        } else
          goto handle_unusual;
        continue;
      // .Common.Color4 color = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float size = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // string newObjectId = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_newobjectid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Journal.OpText2d.V1.newObjectId"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OpText2d_V1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Journal.OpText2d.V1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .JournalData.ObjectId objectId = 1;
  if (this->_internal_has_objectid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::objectid(this),
        _Internal::objectid(this).GetCachedSize(), target, stream);
  }

  // .JournalData.BoardState visibleWithinState = 2;
  if (this->_internal_has_visiblewithinstate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::visiblewithinstate(this),
        _Internal::visiblewithinstate(this).GetCachedSize(), target, stream);
  }

  // .Common.Float2 point = 3;
  if (this->_internal_has_point()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::point(this),
        _Internal::point(this).GetCachedSize(), target, stream);
  }

  // string text = 4;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Journal.OpText2d.V1.text");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_text(), target);
  }

  // string language = 5;
  if (!this->_internal_language().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Journal.OpText2d.V1.language");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_language(), target);
  }

  // .Common.Color4 color = 6;
  if (this->_internal_has_color()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::color(this),
        _Internal::color(this).GetCachedSize(), target, stream);
  }

  // float size = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_size = this->_internal_size();
  uint32_t raw_size;
  memcpy(&raw_size, &tmp_size, sizeof(tmp_size));
  if (raw_size != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_size(), target);
  }

  // string newObjectId = 10;
  if (!this->_internal_newobjectid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_newobjectid().data(), static_cast<int>(this->_internal_newobjectid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Journal.OpText2d.V1.newObjectId");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_newobjectid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Journal.OpText2d.V1)
  return target;
}

size_t OpText2d_V1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Journal.OpText2d.V1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 4;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // string language = 5;
  if (!this->_internal_language().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language());
  }

  // string newObjectId = 10;
  if (!this->_internal_newobjectid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_newobjectid());
  }

  // .JournalData.ObjectId objectId = 1;
  if (this->_internal_has_objectid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.objectid_);
  }

  // .JournalData.BoardState visibleWithinState = 2;
  if (this->_internal_has_visiblewithinstate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.visiblewithinstate_);
  }

  // .Common.Float2 point = 3;
  if (this->_internal_has_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.point_);
  }

  // .Common.Color4 color = 6;
  if (this->_internal_has_color()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.color_);
  }

  // float size = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_size = this->_internal_size();
  uint32_t raw_size;
  memcpy(&raw_size, &tmp_size, sizeof(tmp_size));
  if (raw_size != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OpText2d_V1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OpText2d_V1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OpText2d_V1::GetClassData() const { return &_class_data_; }


void OpText2d_V1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OpText2d_V1*>(&to_msg);
  auto& from = static_cast<const OpText2d_V1&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Journal.OpText2d.V1)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_text().empty()) {
    _this->_internal_set_text(from._internal_text());
  }
  if (!from._internal_language().empty()) {
    _this->_internal_set_language(from._internal_language());
  }
  if (!from._internal_newobjectid().empty()) {
    _this->_internal_set_newobjectid(from._internal_newobjectid());
  }
  if (from._internal_has_objectid()) {
    _this->_internal_mutable_objectid()->::JournalData::ObjectId::MergeFrom(
        from._internal_objectid());
  }
  if (from._internal_has_visiblewithinstate()) {
    _this->_internal_mutable_visiblewithinstate()->::JournalData::BoardState::MergeFrom(
        from._internal_visiblewithinstate());
  }
  if (from._internal_has_point()) {
    _this->_internal_mutable_point()->::Common::Float2::MergeFrom(
        from._internal_point());
  }
  if (from._internal_has_color()) {
    _this->_internal_mutable_color()->::Common::Color4::MergeFrom(
        from._internal_color());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_size = from._internal_size();
  uint32_t raw_size;
  memcpy(&raw_size, &tmp_size, sizeof(tmp_size));
  if (raw_size != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OpText2d_V1::CopyFrom(const OpText2d_V1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Journal.OpText2d.V1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpText2d_V1::IsInitialized() const {
  return true;
}

void OpText2d_V1::InternalSwap(OpText2d_V1* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.language_, lhs_arena,
      &other->_impl_.language_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.newobjectid_, lhs_arena,
      &other->_impl_.newobjectid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OpText2d_V1, _impl_.size_)
      + sizeof(OpText2d_V1::_impl_.size_)
      - PROTOBUF_FIELD_OFFSET(OpText2d_V1, _impl_.objectid_)>(
          reinterpret_cast<char*>(&_impl_.objectid_),
          reinterpret_cast<char*>(&other->_impl_.objectid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OpText2d_V1::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_journal_5foperations_5fcommon_2eproto_getter, &descriptor_table_journal_5foperations_5fcommon_2eproto_once,
      file_level_metadata_journal_5foperations_5fcommon_2eproto[9]);
}

// ===================================================================

class OpText2d::_Internal {
 public:
  static const ::Journal::OpText2d_V1& v1(const OpText2d* msg);
};

const ::Journal::OpText2d_V1&
OpText2d::_Internal::v1(const OpText2d* msg) {
  return *msg->_impl_.V_.v1_;
}
void OpText2d::set_allocated_v1(::Journal::OpText2d_V1* v1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_V();
  if (v1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(v1);
    if (message_arena != submessage_arena) {
      v1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, v1, submessage_arena);
    }
    set_has_v1();
    _impl_.V_.v1_ = v1;
  }
  // @@protoc_insertion_point(field_set_allocated:Journal.OpText2d.v1)
}
OpText2d::OpText2d(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Journal.OpText2d)
}
OpText2d::OpText2d(const OpText2d& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OpText2d* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.V_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_V();
  switch (from.V_case()) {
    case kV1: {
      _this->_internal_mutable_v1()->::Journal::OpText2d_V1::MergeFrom(
          from._internal_v1());
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Journal.OpText2d)
}

inline void OpText2d::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.V_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_V();
}

OpText2d::~OpText2d() {
  // @@protoc_insertion_point(destructor:Journal.OpText2d)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OpText2d::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_V()) {
    clear_V();
  }
}

void OpText2d::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OpText2d::clear_V() {
// @@protoc_insertion_point(one_of_clear_start:Journal.OpText2d)
  switch (V_case()) {
    case kV1: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.V_.v1_;
      }
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = V_NOT_SET;
}


void OpText2d::Clear() {
// @@protoc_insertion_point(message_clear_start:Journal.OpText2d)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_V();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpText2d::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Journal.OpText2d.V1 v1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_v1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OpText2d::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Journal.OpText2d)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Journal.OpText2d.V1 v1 = 1;
  if (_internal_has_v1()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::v1(this),
        _Internal::v1(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Journal.OpText2d)
  return target;
}

size_t OpText2d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Journal.OpText2d)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (V_case()) {
    // .Journal.OpText2d.V1 v1 = 1;
    case kV1: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.V_.v1_);
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OpText2d::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OpText2d::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OpText2d::GetClassData() const { return &_class_data_; }


void OpText2d::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OpText2d*>(&to_msg);
  auto& from = static_cast<const OpText2d&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Journal.OpText2d)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.V_case()) {
    case kV1: {
      _this->_internal_mutable_v1()->::Journal::OpText2d_V1::MergeFrom(
          from._internal_v1());
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OpText2d::CopyFrom(const OpText2d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Journal.OpText2d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpText2d::IsInitialized() const {
  return true;
}

void OpText2d::InternalSwap(OpText2d* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.V_, other->_impl_.V_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata OpText2d::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_journal_5foperations_5fcommon_2eproto_getter, &descriptor_table_journal_5foperations_5fcommon_2eproto_once,
      file_level_metadata_journal_5foperations_5fcommon_2eproto[10]);
}

// ===================================================================

class OpText2dModify_V1::_Internal {
 public:
  static const ::JournalData::ObjectId& objectid(const OpText2dModify_V1* msg);
};

const ::JournalData::ObjectId&
OpText2dModify_V1::_Internal::objectid(const OpText2dModify_V1* msg) {
  return *msg->_impl_.objectid_;
}
void OpText2dModify_V1::clear_objectid() {
  if (GetArenaForAllocation() == nullptr && _impl_.objectid_ != nullptr) {
    delete _impl_.objectid_;
  }
  _impl_.objectid_ = nullptr;
}
OpText2dModify_V1::OpText2dModify_V1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Journal.OpText2dModify.V1)
}
OpText2dModify_V1::OpText2dModify_V1(const OpText2dModify_V1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OpText2dModify_V1* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.text_){}
    , decltype(_impl_.language_){}
    , decltype(_impl_.translatedfromtext_){}
    , decltype(_impl_.translatedfromlanguage_){}
    , decltype(_impl_.objectid_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  _impl_.language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_language().empty()) {
    _this->_impl_.language_.Set(from._internal_language(), 
      _this->GetArenaForAllocation());
  }
  _impl_.translatedfromtext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.translatedfromtext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_translatedfromtext().empty()) {
    _this->_impl_.translatedfromtext_.Set(from._internal_translatedfromtext(), 
      _this->GetArenaForAllocation());
  }
  _impl_.translatedfromlanguage_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.translatedfromlanguage_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_translatedfromlanguage().empty()) {
    _this->_impl_.translatedfromlanguage_.Set(from._internal_translatedfromlanguage(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_objectid()) {
    _this->_impl_.objectid_ = new ::JournalData::ObjectId(*from._impl_.objectid_);
  }
  // @@protoc_insertion_point(copy_constructor:Journal.OpText2dModify.V1)
}

inline void OpText2dModify_V1::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.text_){}
    , decltype(_impl_.language_){}
    , decltype(_impl_.translatedfromtext_){}
    , decltype(_impl_.translatedfromlanguage_){}
    , decltype(_impl_.objectid_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.translatedfromtext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.translatedfromtext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.translatedfromlanguage_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.translatedfromlanguage_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OpText2dModify_V1::~OpText2dModify_V1() {
  // @@protoc_insertion_point(destructor:Journal.OpText2dModify.V1)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OpText2dModify_V1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.text_.Destroy();
  _impl_.language_.Destroy();
  _impl_.translatedfromtext_.Destroy();
  _impl_.translatedfromlanguage_.Destroy();
  if (this != internal_default_instance()) delete _impl_.objectid_;
}

void OpText2dModify_V1::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OpText2dModify_V1::Clear() {
// @@protoc_insertion_point(message_clear_start:Journal.OpText2dModify.V1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.text_.ClearToEmpty();
  _impl_.language_.ClearToEmpty();
  _impl_.translatedfromtext_.ClearToEmpty();
  _impl_.translatedfromlanguage_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.objectid_ != nullptr) {
    delete _impl_.objectid_;
  }
  _impl_.objectid_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpText2dModify_V1::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .JournalData.ObjectId objectId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_objectid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string text = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Journal.OpText2dModify.V1.text"));
        } else
          goto handle_unusual;
        continue;
      // string language = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_language();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Journal.OpText2dModify.V1.language"));
        } else
          goto handle_unusual;
        continue;
      // string translatedFromText = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_translatedfromtext();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Journal.OpText2dModify.V1.translatedFromText"));
        } else
          goto handle_unusual;
        continue;
      // string translatedFromLanguage = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_translatedfromlanguage();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Journal.OpText2dModify.V1.translatedFromLanguage"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OpText2dModify_V1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Journal.OpText2dModify.V1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .JournalData.ObjectId objectId = 1;
  if (this->_internal_has_objectid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::objectid(this),
        _Internal::objectid(this).GetCachedSize(), target, stream);
  }

  // string text = 4;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Journal.OpText2dModify.V1.text");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_text(), target);
  }

  // string language = 5;
  if (!this->_internal_language().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Journal.OpText2dModify.V1.language");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_language(), target);
  }

  // string translatedFromText = 6;
  if (!this->_internal_translatedfromtext().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_translatedfromtext().data(), static_cast<int>(this->_internal_translatedfromtext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Journal.OpText2dModify.V1.translatedFromText");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_translatedfromtext(), target);
  }

  // string translatedFromLanguage = 7;
  if (!this->_internal_translatedfromlanguage().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_translatedfromlanguage().data(), static_cast<int>(this->_internal_translatedfromlanguage().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Journal.OpText2dModify.V1.translatedFromLanguage");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_translatedfromlanguage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Journal.OpText2dModify.V1)
  return target;
}

size_t OpText2dModify_V1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Journal.OpText2dModify.V1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 4;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // string language = 5;
  if (!this->_internal_language().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language());
  }

  // string translatedFromText = 6;
  if (!this->_internal_translatedfromtext().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_translatedfromtext());
  }

  // string translatedFromLanguage = 7;
  if (!this->_internal_translatedfromlanguage().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_translatedfromlanguage());
  }

  // .JournalData.ObjectId objectId = 1;
  if (this->_internal_has_objectid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.objectid_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OpText2dModify_V1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OpText2dModify_V1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OpText2dModify_V1::GetClassData() const { return &_class_data_; }


void OpText2dModify_V1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OpText2dModify_V1*>(&to_msg);
  auto& from = static_cast<const OpText2dModify_V1&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Journal.OpText2dModify.V1)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_text().empty()) {
    _this->_internal_set_text(from._internal_text());
  }
  if (!from._internal_language().empty()) {
    _this->_internal_set_language(from._internal_language());
  }
  if (!from._internal_translatedfromtext().empty()) {
    _this->_internal_set_translatedfromtext(from._internal_translatedfromtext());
  }
  if (!from._internal_translatedfromlanguage().empty()) {
    _this->_internal_set_translatedfromlanguage(from._internal_translatedfromlanguage());
  }
  if (from._internal_has_objectid()) {
    _this->_internal_mutable_objectid()->::JournalData::ObjectId::MergeFrom(
        from._internal_objectid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OpText2dModify_V1::CopyFrom(const OpText2dModify_V1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Journal.OpText2dModify.V1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpText2dModify_V1::IsInitialized() const {
  return true;
}

void OpText2dModify_V1::InternalSwap(OpText2dModify_V1* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.language_, lhs_arena,
      &other->_impl_.language_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.translatedfromtext_, lhs_arena,
      &other->_impl_.translatedfromtext_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.translatedfromlanguage_, lhs_arena,
      &other->_impl_.translatedfromlanguage_, rhs_arena
  );
  swap(_impl_.objectid_, other->_impl_.objectid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OpText2dModify_V1::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_journal_5foperations_5fcommon_2eproto_getter, &descriptor_table_journal_5foperations_5fcommon_2eproto_once,
      file_level_metadata_journal_5foperations_5fcommon_2eproto[11]);
}

// ===================================================================

class OpText2dModify::_Internal {
 public:
  static const ::Journal::OpText2dModify_V1& v1(const OpText2dModify* msg);
};

const ::Journal::OpText2dModify_V1&
OpText2dModify::_Internal::v1(const OpText2dModify* msg) {
  return *msg->_impl_.V_.v1_;
}
void OpText2dModify::set_allocated_v1(::Journal::OpText2dModify_V1* v1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_V();
  if (v1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(v1);
    if (message_arena != submessage_arena) {
      v1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, v1, submessage_arena);
    }
    set_has_v1();
    _impl_.V_.v1_ = v1;
  }
  // @@protoc_insertion_point(field_set_allocated:Journal.OpText2dModify.v1)
}
OpText2dModify::OpText2dModify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Journal.OpText2dModify)
}
OpText2dModify::OpText2dModify(const OpText2dModify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OpText2dModify* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.V_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_V();
  switch (from.V_case()) {
    case kV1: {
      _this->_internal_mutable_v1()->::Journal::OpText2dModify_V1::MergeFrom(
          from._internal_v1());
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Journal.OpText2dModify)
}

inline void OpText2dModify::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.V_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_V();
}

OpText2dModify::~OpText2dModify() {
  // @@protoc_insertion_point(destructor:Journal.OpText2dModify)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OpText2dModify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_V()) {
    clear_V();
  }
}

void OpText2dModify::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OpText2dModify::clear_V() {
// @@protoc_insertion_point(one_of_clear_start:Journal.OpText2dModify)
  switch (V_case()) {
    case kV1: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.V_.v1_;
      }
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = V_NOT_SET;
}


void OpText2dModify::Clear() {
// @@protoc_insertion_point(message_clear_start:Journal.OpText2dModify)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_V();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpText2dModify::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Journal.OpText2dModify.V1 v1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_v1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OpText2dModify::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Journal.OpText2dModify)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Journal.OpText2dModify.V1 v1 = 1;
  if (_internal_has_v1()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::v1(this),
        _Internal::v1(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Journal.OpText2dModify)
  return target;
}

size_t OpText2dModify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Journal.OpText2dModify)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (V_case()) {
    // .Journal.OpText2dModify.V1 v1 = 1;
    case kV1: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.V_.v1_);
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OpText2dModify::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OpText2dModify::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OpText2dModify::GetClassData() const { return &_class_data_; }


void OpText2dModify::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OpText2dModify*>(&to_msg);
  auto& from = static_cast<const OpText2dModify&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Journal.OpText2dModify)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.V_case()) {
    case kV1: {
      _this->_internal_mutable_v1()->::Journal::OpText2dModify_V1::MergeFrom(
          from._internal_v1());
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OpText2dModify::CopyFrom(const OpText2dModify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Journal.OpText2dModify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpText2dModify::IsInitialized() const {
  return true;
}

void OpText2dModify::InternalSwap(OpText2dModify* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.V_, other->_impl_.V_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata OpText2dModify::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_journal_5foperations_5fcommon_2eproto_getter, &descriptor_table_journal_5foperations_5fcommon_2eproto_once,
      file_level_metadata_journal_5foperations_5fcommon_2eproto[12]);
}

// ===================================================================

class OpImage2d_V1::_Internal {
 public:
  static const ::JournalData::Image2dPlacementData& placementdata(const OpImage2d_V1* msg);
  static const ::JournalData::ImageContentType& contentid(const OpImage2d_V1* msg);
};

const ::JournalData::Image2dPlacementData&
OpImage2d_V1::_Internal::placementdata(const OpImage2d_V1* msg) {
  return *msg->_impl_.placementdata_;
}
const ::JournalData::ImageContentType&
OpImage2d_V1::_Internal::contentid(const OpImage2d_V1* msg) {
  return *msg->_impl_.contentid_;
}
void OpImage2d_V1::clear_placementdata() {
  if (GetArenaForAllocation() == nullptr && _impl_.placementdata_ != nullptr) {
    delete _impl_.placementdata_;
  }
  _impl_.placementdata_ = nullptr;
}
void OpImage2d_V1::clear_contentid() {
  if (GetArenaForAllocation() == nullptr && _impl_.contentid_ != nullptr) {
    delete _impl_.contentid_;
  }
  _impl_.contentid_ = nullptr;
}
OpImage2d_V1::OpImage2d_V1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Journal.OpImage2d.V1)
}
OpImage2d_V1::OpImage2d_V1(const OpImage2d_V1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OpImage2d_V1* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.newobjectid_){}
    , decltype(_impl_.placementdata_){nullptr}
    , decltype(_impl_.contentid_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.newobjectid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.newobjectid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_newobjectid().empty()) {
    _this->_impl_.newobjectid_.Set(from._internal_newobjectid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_placementdata()) {
    _this->_impl_.placementdata_ = new ::JournalData::Image2dPlacementData(*from._impl_.placementdata_);
  }
  if (from._internal_has_contentid()) {
    _this->_impl_.contentid_ = new ::JournalData::ImageContentType(*from._impl_.contentid_);
  }
  // @@protoc_insertion_point(copy_constructor:Journal.OpImage2d.V1)
}

inline void OpImage2d_V1::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.newobjectid_){}
    , decltype(_impl_.placementdata_){nullptr}
    , decltype(_impl_.contentid_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.newobjectid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.newobjectid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OpImage2d_V1::~OpImage2d_V1() {
  // @@protoc_insertion_point(destructor:Journal.OpImage2d.V1)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OpImage2d_V1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.newobjectid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.placementdata_;
  if (this != internal_default_instance()) delete _impl_.contentid_;
}

void OpImage2d_V1::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OpImage2d_V1::Clear() {
// @@protoc_insertion_point(message_clear_start:Journal.OpImage2d.V1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.newobjectid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.placementdata_ != nullptr) {
    delete _impl_.placementdata_;
  }
  _impl_.placementdata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.contentid_ != nullptr) {
    delete _impl_.contentid_;
  }
  _impl_.contentid_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpImage2d_V1::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .JournalData.Image2dPlacementData placementData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_placementdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .JournalData.ImageContentType contentId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_contentid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string newObjectId = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_newobjectid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Journal.OpImage2d.V1.newObjectId"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OpImage2d_V1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Journal.OpImage2d.V1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .JournalData.Image2dPlacementData placementData = 1;
  if (this->_internal_has_placementdata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::placementdata(this),
        _Internal::placementdata(this).GetCachedSize(), target, stream);
  }

  // .JournalData.ImageContentType contentId = 2;
  if (this->_internal_has_contentid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::contentid(this),
        _Internal::contentid(this).GetCachedSize(), target, stream);
  }

  // string newObjectId = 10;
  if (!this->_internal_newobjectid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_newobjectid().data(), static_cast<int>(this->_internal_newobjectid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Journal.OpImage2d.V1.newObjectId");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_newobjectid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Journal.OpImage2d.V1)
  return target;
}

size_t OpImage2d_V1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Journal.OpImage2d.V1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string newObjectId = 10;
  if (!this->_internal_newobjectid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_newobjectid());
  }

  // .JournalData.Image2dPlacementData placementData = 1;
  if (this->_internal_has_placementdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.placementdata_);
  }

  // .JournalData.ImageContentType contentId = 2;
  if (this->_internal_has_contentid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.contentid_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OpImage2d_V1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OpImage2d_V1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OpImage2d_V1::GetClassData() const { return &_class_data_; }


void OpImage2d_V1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OpImage2d_V1*>(&to_msg);
  auto& from = static_cast<const OpImage2d_V1&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Journal.OpImage2d.V1)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_newobjectid().empty()) {
    _this->_internal_set_newobjectid(from._internal_newobjectid());
  }
  if (from._internal_has_placementdata()) {
    _this->_internal_mutable_placementdata()->::JournalData::Image2dPlacementData::MergeFrom(
        from._internal_placementdata());
  }
  if (from._internal_has_contentid()) {
    _this->_internal_mutable_contentid()->::JournalData::ImageContentType::MergeFrom(
        from._internal_contentid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OpImage2d_V1::CopyFrom(const OpImage2d_V1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Journal.OpImage2d.V1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpImage2d_V1::IsInitialized() const {
  return true;
}

void OpImage2d_V1::InternalSwap(OpImage2d_V1* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.newobjectid_, lhs_arena,
      &other->_impl_.newobjectid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OpImage2d_V1, _impl_.contentid_)
      + sizeof(OpImage2d_V1::_impl_.contentid_)
      - PROTOBUF_FIELD_OFFSET(OpImage2d_V1, _impl_.placementdata_)>(
          reinterpret_cast<char*>(&_impl_.placementdata_),
          reinterpret_cast<char*>(&other->_impl_.placementdata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OpImage2d_V1::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_journal_5foperations_5fcommon_2eproto_getter, &descriptor_table_journal_5foperations_5fcommon_2eproto_once,
      file_level_metadata_journal_5foperations_5fcommon_2eproto[13]);
}

// ===================================================================

class OpImage2d::_Internal {
 public:
  static const ::Journal::OpImage2d_V1& v1(const OpImage2d* msg);
};

const ::Journal::OpImage2d_V1&
OpImage2d::_Internal::v1(const OpImage2d* msg) {
  return *msg->_impl_.V_.v1_;
}
void OpImage2d::set_allocated_v1(::Journal::OpImage2d_V1* v1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_V();
  if (v1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(v1);
    if (message_arena != submessage_arena) {
      v1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, v1, submessage_arena);
    }
    set_has_v1();
    _impl_.V_.v1_ = v1;
  }
  // @@protoc_insertion_point(field_set_allocated:Journal.OpImage2d.v1)
}
OpImage2d::OpImage2d(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Journal.OpImage2d)
}
OpImage2d::OpImage2d(const OpImage2d& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OpImage2d* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.V_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_V();
  switch (from.V_case()) {
    case kV1: {
      _this->_internal_mutable_v1()->::Journal::OpImage2d_V1::MergeFrom(
          from._internal_v1());
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Journal.OpImage2d)
}

inline void OpImage2d::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.V_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_V();
}

OpImage2d::~OpImage2d() {
  // @@protoc_insertion_point(destructor:Journal.OpImage2d)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OpImage2d::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_V()) {
    clear_V();
  }
}

void OpImage2d::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OpImage2d::clear_V() {
// @@protoc_insertion_point(one_of_clear_start:Journal.OpImage2d)
  switch (V_case()) {
    case kV1: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.V_.v1_;
      }
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = V_NOT_SET;
}


void OpImage2d::Clear() {
// @@protoc_insertion_point(message_clear_start:Journal.OpImage2d)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_V();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpImage2d::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Journal.OpImage2d.V1 v1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_v1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OpImage2d::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Journal.OpImage2d)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Journal.OpImage2d.V1 v1 = 1;
  if (_internal_has_v1()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::v1(this),
        _Internal::v1(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Journal.OpImage2d)
  return target;
}

size_t OpImage2d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Journal.OpImage2d)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (V_case()) {
    // .Journal.OpImage2d.V1 v1 = 1;
    case kV1: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.V_.v1_);
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OpImage2d::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OpImage2d::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OpImage2d::GetClassData() const { return &_class_data_; }


void OpImage2d::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OpImage2d*>(&to_msg);
  auto& from = static_cast<const OpImage2d&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Journal.OpImage2d)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.V_case()) {
    case kV1: {
      _this->_internal_mutable_v1()->::Journal::OpImage2d_V1::MergeFrom(
          from._internal_v1());
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OpImage2d::CopyFrom(const OpImage2d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Journal.OpImage2d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpImage2d::IsInitialized() const {
  return true;
}

void OpImage2d::InternalSwap(OpImage2d* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.V_, other->_impl_.V_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata OpImage2d::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_journal_5foperations_5fcommon_2eproto_getter, &descriptor_table_journal_5foperations_5fcommon_2eproto_once,
      file_level_metadata_journal_5foperations_5fcommon_2eproto[14]);
}

// ===================================================================

class OpLine3d_V1::_Internal {
 public:
  static const ::JournalData::ObjectId& objectid(const OpLine3d_V1* msg);
  static const ::Common::Float3Array& points(const OpLine3d_V1* msg);
  static const ::Common::Float3Array& normals(const OpLine3d_V1* msg);
  static const ::Common::Color4& color(const OpLine3d_V1* msg);
};

const ::JournalData::ObjectId&
OpLine3d_V1::_Internal::objectid(const OpLine3d_V1* msg) {
  return *msg->_impl_.objectid_;
}
const ::Common::Float3Array&
OpLine3d_V1::_Internal::points(const OpLine3d_V1* msg) {
  return *msg->_impl_.points_;
}
const ::Common::Float3Array&
OpLine3d_V1::_Internal::normals(const OpLine3d_V1* msg) {
  return *msg->_impl_.normals_;
}
const ::Common::Color4&
OpLine3d_V1::_Internal::color(const OpLine3d_V1* msg) {
  return *msg->_impl_.color_;
}
void OpLine3d_V1::clear_objectid() {
  if (GetArenaForAllocation() == nullptr && _impl_.objectid_ != nullptr) {
    delete _impl_.objectid_;
  }
  _impl_.objectid_ = nullptr;
}
void OpLine3d_V1::clear_points() {
  if (GetArenaForAllocation() == nullptr && _impl_.points_ != nullptr) {
    delete _impl_.points_;
  }
  _impl_.points_ = nullptr;
}
void OpLine3d_V1::clear_normals() {
  if (GetArenaForAllocation() == nullptr && _impl_.normals_ != nullptr) {
    delete _impl_.normals_;
  }
  _impl_.normals_ = nullptr;
}
void OpLine3d_V1::clear_color() {
  if (GetArenaForAllocation() == nullptr && _impl_.color_ != nullptr) {
    delete _impl_.color_;
  }
  _impl_.color_ = nullptr;
}
OpLine3d_V1::OpLine3d_V1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Journal.OpLine3d.V1)
}
OpLine3d_V1::OpLine3d_V1(const OpLine3d_V1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OpLine3d_V1* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.newobjectid_){}
    , decltype(_impl_.objectid_){nullptr}
    , decltype(_impl_.points_){nullptr}
    , decltype(_impl_.normals_){nullptr}
    , decltype(_impl_.color_){nullptr}
    , decltype(_impl_.width_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.newobjectid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.newobjectid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_newobjectid().empty()) {
    _this->_impl_.newobjectid_.Set(from._internal_newobjectid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_objectid()) {
    _this->_impl_.objectid_ = new ::JournalData::ObjectId(*from._impl_.objectid_);
  }
  if (from._internal_has_points()) {
    _this->_impl_.points_ = new ::Common::Float3Array(*from._impl_.points_);
  }
  if (from._internal_has_normals()) {
    _this->_impl_.normals_ = new ::Common::Float3Array(*from._impl_.normals_);
  }
  if (from._internal_has_color()) {
    _this->_impl_.color_ = new ::Common::Color4(*from._impl_.color_);
  }
  _this->_impl_.width_ = from._impl_.width_;
  // @@protoc_insertion_point(copy_constructor:Journal.OpLine3d.V1)
}

inline void OpLine3d_V1::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.newobjectid_){}
    , decltype(_impl_.objectid_){nullptr}
    , decltype(_impl_.points_){nullptr}
    , decltype(_impl_.normals_){nullptr}
    , decltype(_impl_.color_){nullptr}
    , decltype(_impl_.width_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.newobjectid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.newobjectid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OpLine3d_V1::~OpLine3d_V1() {
  // @@protoc_insertion_point(destructor:Journal.OpLine3d.V1)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OpLine3d_V1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.newobjectid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.objectid_;
  if (this != internal_default_instance()) delete _impl_.points_;
  if (this != internal_default_instance()) delete _impl_.normals_;
  if (this != internal_default_instance()) delete _impl_.color_;
}

void OpLine3d_V1::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OpLine3d_V1::Clear() {
// @@protoc_insertion_point(message_clear_start:Journal.OpLine3d.V1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.newobjectid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.objectid_ != nullptr) {
    delete _impl_.objectid_;
  }
  _impl_.objectid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.points_ != nullptr) {
    delete _impl_.points_;
  }
  _impl_.points_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.normals_ != nullptr) {
    delete _impl_.normals_;
  }
  _impl_.normals_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.color_ != nullptr) {
    delete _impl_.color_;
  }
  _impl_.color_ = nullptr;
  _impl_.width_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpLine3d_V1::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .JournalData.ObjectId objectId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_objectid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Common.Float3Array points = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_points(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Common.Float3Array normals = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_normals(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float width = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .Common.Color4 color = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string newObjectId = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_newobjectid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Journal.OpLine3d.V1.newObjectId"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OpLine3d_V1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Journal.OpLine3d.V1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .JournalData.ObjectId objectId = 1;
  if (this->_internal_has_objectid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::objectid(this),
        _Internal::objectid(this).GetCachedSize(), target, stream);
  }

  // .Common.Float3Array points = 2;
  if (this->_internal_has_points()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::points(this),
        _Internal::points(this).GetCachedSize(), target, stream);
  }

  // .Common.Float3Array normals = 3;
  if (this->_internal_has_normals()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::normals(this),
        _Internal::normals(this).GetCachedSize(), target, stream);
  }

  // float width = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_width = this->_internal_width();
  uint32_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_width(), target);
  }

  // .Common.Color4 color = 5;
  if (this->_internal_has_color()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::color(this),
        _Internal::color(this).GetCachedSize(), target, stream);
  }

  // string newObjectId = 10;
  if (!this->_internal_newobjectid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_newobjectid().data(), static_cast<int>(this->_internal_newobjectid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Journal.OpLine3d.V1.newObjectId");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_newobjectid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Journal.OpLine3d.V1)
  return target;
}

size_t OpLine3d_V1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Journal.OpLine3d.V1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string newObjectId = 10;
  if (!this->_internal_newobjectid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_newobjectid());
  }

  // .JournalData.ObjectId objectId = 1;
  if (this->_internal_has_objectid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.objectid_);
  }

  // .Common.Float3Array points = 2;
  if (this->_internal_has_points()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.points_);
  }

  // .Common.Float3Array normals = 3;
  if (this->_internal_has_normals()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.normals_);
  }

  // .Common.Color4 color = 5;
  if (this->_internal_has_color()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.color_);
  }

  // float width = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_width = this->_internal_width();
  uint32_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OpLine3d_V1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OpLine3d_V1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OpLine3d_V1::GetClassData() const { return &_class_data_; }


void OpLine3d_V1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OpLine3d_V1*>(&to_msg);
  auto& from = static_cast<const OpLine3d_V1&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Journal.OpLine3d.V1)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_newobjectid().empty()) {
    _this->_internal_set_newobjectid(from._internal_newobjectid());
  }
  if (from._internal_has_objectid()) {
    _this->_internal_mutable_objectid()->::JournalData::ObjectId::MergeFrom(
        from._internal_objectid());
  }
  if (from._internal_has_points()) {
    _this->_internal_mutable_points()->::Common::Float3Array::MergeFrom(
        from._internal_points());
  }
  if (from._internal_has_normals()) {
    _this->_internal_mutable_normals()->::Common::Float3Array::MergeFrom(
        from._internal_normals());
  }
  if (from._internal_has_color()) {
    _this->_internal_mutable_color()->::Common::Color4::MergeFrom(
        from._internal_color());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_width = from._internal_width();
  uint32_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OpLine3d_V1::CopyFrom(const OpLine3d_V1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Journal.OpLine3d.V1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpLine3d_V1::IsInitialized() const {
  return true;
}

void OpLine3d_V1::InternalSwap(OpLine3d_V1* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.newobjectid_, lhs_arena,
      &other->_impl_.newobjectid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OpLine3d_V1, _impl_.width_)
      + sizeof(OpLine3d_V1::_impl_.width_)
      - PROTOBUF_FIELD_OFFSET(OpLine3d_V1, _impl_.objectid_)>(
          reinterpret_cast<char*>(&_impl_.objectid_),
          reinterpret_cast<char*>(&other->_impl_.objectid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OpLine3d_V1::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_journal_5foperations_5fcommon_2eproto_getter, &descriptor_table_journal_5foperations_5fcommon_2eproto_once,
      file_level_metadata_journal_5foperations_5fcommon_2eproto[15]);
}

// ===================================================================

class OpLine3d::_Internal {
 public:
  static const ::Journal::OpLine3d_V1& v1(const OpLine3d* msg);
};

const ::Journal::OpLine3d_V1&
OpLine3d::_Internal::v1(const OpLine3d* msg) {
  return *msg->_impl_.V_.v1_;
}
void OpLine3d::set_allocated_v1(::Journal::OpLine3d_V1* v1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_V();
  if (v1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(v1);
    if (message_arena != submessage_arena) {
      v1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, v1, submessage_arena);
    }
    set_has_v1();
    _impl_.V_.v1_ = v1;
  }
  // @@protoc_insertion_point(field_set_allocated:Journal.OpLine3d.v1)
}
OpLine3d::OpLine3d(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Journal.OpLine3d)
}
OpLine3d::OpLine3d(const OpLine3d& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OpLine3d* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.V_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_V();
  switch (from.V_case()) {
    case kV1: {
      _this->_internal_mutable_v1()->::Journal::OpLine3d_V1::MergeFrom(
          from._internal_v1());
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Journal.OpLine3d)
}

inline void OpLine3d::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.V_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_V();
}

OpLine3d::~OpLine3d() {
  // @@protoc_insertion_point(destructor:Journal.OpLine3d)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OpLine3d::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_V()) {
    clear_V();
  }
}

void OpLine3d::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OpLine3d::clear_V() {
// @@protoc_insertion_point(one_of_clear_start:Journal.OpLine3d)
  switch (V_case()) {
    case kV1: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.V_.v1_;
      }
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = V_NOT_SET;
}


void OpLine3d::Clear() {
// @@protoc_insertion_point(message_clear_start:Journal.OpLine3d)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_V();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpLine3d::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Journal.OpLine3d.V1 v1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_v1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OpLine3d::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Journal.OpLine3d)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Journal.OpLine3d.V1 v1 = 1;
  if (_internal_has_v1()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::v1(this),
        _Internal::v1(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Journal.OpLine3d)
  return target;
}

size_t OpLine3d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Journal.OpLine3d)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (V_case()) {
    // .Journal.OpLine3d.V1 v1 = 1;
    case kV1: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.V_.v1_);
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OpLine3d::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OpLine3d::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OpLine3d::GetClassData() const { return &_class_data_; }


void OpLine3d::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OpLine3d*>(&to_msg);
  auto& from = static_cast<const OpLine3d&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Journal.OpLine3d)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.V_case()) {
    case kV1: {
      _this->_internal_mutable_v1()->::Journal::OpLine3d_V1::MergeFrom(
          from._internal_v1());
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OpLine3d::CopyFrom(const OpLine3d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Journal.OpLine3d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpLine3d::IsInitialized() const {
  return true;
}

void OpLine3d::InternalSwap(OpLine3d* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.V_, other->_impl_.V_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata OpLine3d::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_journal_5foperations_5fcommon_2eproto_getter, &descriptor_table_journal_5foperations_5fcommon_2eproto_once,
      file_level_metadata_journal_5foperations_5fcommon_2eproto[16]);
}

// ===================================================================

class OpText3d_V1::_Internal {
 public:
  static const ::JournalData::TagPlacementData& placementdata(const OpText3d_V1* msg);
  static const ::Common::Color4& color(const OpText3d_V1* msg);
};

const ::JournalData::TagPlacementData&
OpText3d_V1::_Internal::placementdata(const OpText3d_V1* msg) {
  return *msg->_impl_.placementdata_;
}
const ::Common::Color4&
OpText3d_V1::_Internal::color(const OpText3d_V1* msg) {
  return *msg->_impl_.color_;
}
void OpText3d_V1::clear_placementdata() {
  if (GetArenaForAllocation() == nullptr && _impl_.placementdata_ != nullptr) {
    delete _impl_.placementdata_;
  }
  _impl_.placementdata_ = nullptr;
}
void OpText3d_V1::clear_color() {
  if (GetArenaForAllocation() == nullptr && _impl_.color_ != nullptr) {
    delete _impl_.color_;
  }
  _impl_.color_ = nullptr;
}
OpText3d_V1::OpText3d_V1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Journal.OpText3d.V1)
}
OpText3d_V1::OpText3d_V1(const OpText3d_V1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OpText3d_V1* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.newobjectid_){}
    , decltype(_impl_.text_){}
    , decltype(_impl_.language_){}
    , decltype(_impl_.placementdata_){nullptr}
    , decltype(_impl_.color_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.newobjectid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.newobjectid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_newobjectid().empty()) {
    _this->_impl_.newobjectid_.Set(from._internal_newobjectid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  _impl_.language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_language().empty()) {
    _this->_impl_.language_.Set(from._internal_language(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_placementdata()) {
    _this->_impl_.placementdata_ = new ::JournalData::TagPlacementData(*from._impl_.placementdata_);
  }
  if (from._internal_has_color()) {
    _this->_impl_.color_ = new ::Common::Color4(*from._impl_.color_);
  }
  // @@protoc_insertion_point(copy_constructor:Journal.OpText3d.V1)
}

inline void OpText3d_V1::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.newobjectid_){}
    , decltype(_impl_.text_){}
    , decltype(_impl_.language_){}
    , decltype(_impl_.placementdata_){nullptr}
    , decltype(_impl_.color_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.newobjectid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.newobjectid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OpText3d_V1::~OpText3d_V1() {
  // @@protoc_insertion_point(destructor:Journal.OpText3d.V1)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OpText3d_V1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.newobjectid_.Destroy();
  _impl_.text_.Destroy();
  _impl_.language_.Destroy();
  if (this != internal_default_instance()) delete _impl_.placementdata_;
  if (this != internal_default_instance()) delete _impl_.color_;
}

void OpText3d_V1::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OpText3d_V1::Clear() {
// @@protoc_insertion_point(message_clear_start:Journal.OpText3d.V1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.newobjectid_.ClearToEmpty();
  _impl_.text_.ClearToEmpty();
  _impl_.language_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.placementdata_ != nullptr) {
    delete _impl_.placementdata_;
  }
  _impl_.placementdata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.color_ != nullptr) {
    delete _impl_.color_;
  }
  _impl_.color_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpText3d_V1::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string newObjectId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_newobjectid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Journal.OpText3d.V1.newObjectId"));
        } else
          goto handle_unusual;
        continue;
      // .JournalData.TagPlacementData placementData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_placementdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string text = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Journal.OpText3d.V1.text"));
        } else
          goto handle_unusual;
        continue;
      // string language = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_language();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Journal.OpText3d.V1.language"));
        } else
          goto handle_unusual;
        continue;
      // .Common.Color4 color = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OpText3d_V1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Journal.OpText3d.V1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string newObjectId = 1;
  if (!this->_internal_newobjectid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_newobjectid().data(), static_cast<int>(this->_internal_newobjectid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Journal.OpText3d.V1.newObjectId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_newobjectid(), target);
  }

  // .JournalData.TagPlacementData placementData = 2;
  if (this->_internal_has_placementdata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::placementdata(this),
        _Internal::placementdata(this).GetCachedSize(), target, stream);
  }

  // string text = 3;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Journal.OpText3d.V1.text");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_text(), target);
  }

  // string language = 4;
  if (!this->_internal_language().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Journal.OpText3d.V1.language");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_language(), target);
  }

  // .Common.Color4 color = 5;
  if (this->_internal_has_color()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::color(this),
        _Internal::color(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Journal.OpText3d.V1)
  return target;
}

size_t OpText3d_V1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Journal.OpText3d.V1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string newObjectId = 1;
  if (!this->_internal_newobjectid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_newobjectid());
  }

  // string text = 3;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // string language = 4;
  if (!this->_internal_language().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language());
  }

  // .JournalData.TagPlacementData placementData = 2;
  if (this->_internal_has_placementdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.placementdata_);
  }

  // .Common.Color4 color = 5;
  if (this->_internal_has_color()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.color_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OpText3d_V1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OpText3d_V1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OpText3d_V1::GetClassData() const { return &_class_data_; }


void OpText3d_V1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OpText3d_V1*>(&to_msg);
  auto& from = static_cast<const OpText3d_V1&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Journal.OpText3d.V1)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_newobjectid().empty()) {
    _this->_internal_set_newobjectid(from._internal_newobjectid());
  }
  if (!from._internal_text().empty()) {
    _this->_internal_set_text(from._internal_text());
  }
  if (!from._internal_language().empty()) {
    _this->_internal_set_language(from._internal_language());
  }
  if (from._internal_has_placementdata()) {
    _this->_internal_mutable_placementdata()->::JournalData::TagPlacementData::MergeFrom(
        from._internal_placementdata());
  }
  if (from._internal_has_color()) {
    _this->_internal_mutable_color()->::Common::Color4::MergeFrom(
        from._internal_color());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OpText3d_V1::CopyFrom(const OpText3d_V1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Journal.OpText3d.V1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpText3d_V1::IsInitialized() const {
  return true;
}

void OpText3d_V1::InternalSwap(OpText3d_V1* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.newobjectid_, lhs_arena,
      &other->_impl_.newobjectid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.language_, lhs_arena,
      &other->_impl_.language_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OpText3d_V1, _impl_.color_)
      + sizeof(OpText3d_V1::_impl_.color_)
      - PROTOBUF_FIELD_OFFSET(OpText3d_V1, _impl_.placementdata_)>(
          reinterpret_cast<char*>(&_impl_.placementdata_),
          reinterpret_cast<char*>(&other->_impl_.placementdata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OpText3d_V1::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_journal_5foperations_5fcommon_2eproto_getter, &descriptor_table_journal_5foperations_5fcommon_2eproto_once,
      file_level_metadata_journal_5foperations_5fcommon_2eproto[17]);
}

// ===================================================================

class OpText3d::_Internal {
 public:
  static const ::Journal::OpText3d_V1& v1(const OpText3d* msg);
};

const ::Journal::OpText3d_V1&
OpText3d::_Internal::v1(const OpText3d* msg) {
  return *msg->_impl_.V_.v1_;
}
void OpText3d::set_allocated_v1(::Journal::OpText3d_V1* v1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_V();
  if (v1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(v1);
    if (message_arena != submessage_arena) {
      v1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, v1, submessage_arena);
    }
    set_has_v1();
    _impl_.V_.v1_ = v1;
  }
  // @@protoc_insertion_point(field_set_allocated:Journal.OpText3d.v1)
}
OpText3d::OpText3d(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Journal.OpText3d)
}
OpText3d::OpText3d(const OpText3d& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OpText3d* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.V_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_V();
  switch (from.V_case()) {
    case kV1: {
      _this->_internal_mutable_v1()->::Journal::OpText3d_V1::MergeFrom(
          from._internal_v1());
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Journal.OpText3d)
}

inline void OpText3d::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.V_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_V();
}

OpText3d::~OpText3d() {
  // @@protoc_insertion_point(destructor:Journal.OpText3d)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OpText3d::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_V()) {
    clear_V();
  }
}

void OpText3d::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OpText3d::clear_V() {
// @@protoc_insertion_point(one_of_clear_start:Journal.OpText3d)
  switch (V_case()) {
    case kV1: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.V_.v1_;
      }
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = V_NOT_SET;
}


void OpText3d::Clear() {
// @@protoc_insertion_point(message_clear_start:Journal.OpText3d)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_V();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpText3d::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Journal.OpText3d.V1 v1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_v1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OpText3d::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Journal.OpText3d)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Journal.OpText3d.V1 v1 = 1;
  if (_internal_has_v1()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::v1(this),
        _Internal::v1(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Journal.OpText3d)
  return target;
}

size_t OpText3d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Journal.OpText3d)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (V_case()) {
    // .Journal.OpText3d.V1 v1 = 1;
    case kV1: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.V_.v1_);
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OpText3d::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OpText3d::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OpText3d::GetClassData() const { return &_class_data_; }


void OpText3d::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OpText3d*>(&to_msg);
  auto& from = static_cast<const OpText3d&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Journal.OpText3d)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.V_case()) {
    case kV1: {
      _this->_internal_mutable_v1()->::Journal::OpText3d_V1::MergeFrom(
          from._internal_v1());
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OpText3d::CopyFrom(const OpText3d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Journal.OpText3d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpText3d::IsInitialized() const {
  return true;
}

void OpText3d::InternalSwap(OpText3d* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.V_, other->_impl_.V_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata OpText3d::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_journal_5foperations_5fcommon_2eproto_getter, &descriptor_table_journal_5foperations_5fcommon_2eproto_once,
      file_level_metadata_journal_5foperations_5fcommon_2eproto[18]);
}

// ===================================================================

class OpText3dModify_V1::_Internal {
 public:
  static const ::JournalData::ObjectId& objectid(const OpText3dModify_V1* msg);
  static const ::Common::Color4& color(const OpText3dModify_V1* msg);
};

const ::JournalData::ObjectId&
OpText3dModify_V1::_Internal::objectid(const OpText3dModify_V1* msg) {
  return *msg->_impl_.objectid_;
}
const ::Common::Color4&
OpText3dModify_V1::_Internal::color(const OpText3dModify_V1* msg) {
  return *msg->_impl_.color_;
}
void OpText3dModify_V1::clear_objectid() {
  if (GetArenaForAllocation() == nullptr && _impl_.objectid_ != nullptr) {
    delete _impl_.objectid_;
  }
  _impl_.objectid_ = nullptr;
}
void OpText3dModify_V1::clear_color() {
  if (GetArenaForAllocation() == nullptr && _impl_.color_ != nullptr) {
    delete _impl_.color_;
  }
  _impl_.color_ = nullptr;
}
OpText3dModify_V1::OpText3dModify_V1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Journal.OpText3dModify.V1)
}
OpText3dModify_V1::OpText3dModify_V1(const OpText3dModify_V1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OpText3dModify_V1* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.text_){}
    , decltype(_impl_.language_){}
    , decltype(_impl_.translatedfromtext_){}
    , decltype(_impl_.translatedfromlanguage_){}
    , decltype(_impl_.objectid_){nullptr}
    , decltype(_impl_.color_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  _impl_.language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_language().empty()) {
    _this->_impl_.language_.Set(from._internal_language(), 
      _this->GetArenaForAllocation());
  }
  _impl_.translatedfromtext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.translatedfromtext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_translatedfromtext().empty()) {
    _this->_impl_.translatedfromtext_.Set(from._internal_translatedfromtext(), 
      _this->GetArenaForAllocation());
  }
  _impl_.translatedfromlanguage_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.translatedfromlanguage_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_translatedfromlanguage().empty()) {
    _this->_impl_.translatedfromlanguage_.Set(from._internal_translatedfromlanguage(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_objectid()) {
    _this->_impl_.objectid_ = new ::JournalData::ObjectId(*from._impl_.objectid_);
  }
  if (from._internal_has_color()) {
    _this->_impl_.color_ = new ::Common::Color4(*from._impl_.color_);
  }
  // @@protoc_insertion_point(copy_constructor:Journal.OpText3dModify.V1)
}

inline void OpText3dModify_V1::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.text_){}
    , decltype(_impl_.language_){}
    , decltype(_impl_.translatedfromtext_){}
    , decltype(_impl_.translatedfromlanguage_){}
    , decltype(_impl_.objectid_){nullptr}
    , decltype(_impl_.color_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.translatedfromtext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.translatedfromtext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.translatedfromlanguage_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.translatedfromlanguage_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OpText3dModify_V1::~OpText3dModify_V1() {
  // @@protoc_insertion_point(destructor:Journal.OpText3dModify.V1)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OpText3dModify_V1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.text_.Destroy();
  _impl_.language_.Destroy();
  _impl_.translatedfromtext_.Destroy();
  _impl_.translatedfromlanguage_.Destroy();
  if (this != internal_default_instance()) delete _impl_.objectid_;
  if (this != internal_default_instance()) delete _impl_.color_;
}

void OpText3dModify_V1::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OpText3dModify_V1::Clear() {
// @@protoc_insertion_point(message_clear_start:Journal.OpText3dModify.V1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.text_.ClearToEmpty();
  _impl_.language_.ClearToEmpty();
  _impl_.translatedfromtext_.ClearToEmpty();
  _impl_.translatedfromlanguage_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.objectid_ != nullptr) {
    delete _impl_.objectid_;
  }
  _impl_.objectid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.color_ != nullptr) {
    delete _impl_.color_;
  }
  _impl_.color_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpText3dModify_V1::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .JournalData.ObjectId objectId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_objectid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string text = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Journal.OpText3dModify.V1.text"));
        } else
          goto handle_unusual;
        continue;
      // string language = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_language();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Journal.OpText3dModify.V1.language"));
        } else
          goto handle_unusual;
        continue;
      // .Common.Color4 color = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string translatedFromText = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_translatedfromtext();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Journal.OpText3dModify.V1.translatedFromText"));
        } else
          goto handle_unusual;
        continue;
      // string translatedFromLanguage = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_translatedfromlanguage();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Journal.OpText3dModify.V1.translatedFromLanguage"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OpText3dModify_V1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Journal.OpText3dModify.V1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .JournalData.ObjectId objectId = 1;
  if (this->_internal_has_objectid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::objectid(this),
        _Internal::objectid(this).GetCachedSize(), target, stream);
  }

  // string text = 3;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Journal.OpText3dModify.V1.text");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_text(), target);
  }

  // string language = 4;
  if (!this->_internal_language().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Journal.OpText3dModify.V1.language");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_language(), target);
  }

  // .Common.Color4 color = 5;
  if (this->_internal_has_color()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::color(this),
        _Internal::color(this).GetCachedSize(), target, stream);
  }

  // string translatedFromText = 6;
  if (!this->_internal_translatedfromtext().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_translatedfromtext().data(), static_cast<int>(this->_internal_translatedfromtext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Journal.OpText3dModify.V1.translatedFromText");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_translatedfromtext(), target);
  }

  // string translatedFromLanguage = 7;
  if (!this->_internal_translatedfromlanguage().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_translatedfromlanguage().data(), static_cast<int>(this->_internal_translatedfromlanguage().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Journal.OpText3dModify.V1.translatedFromLanguage");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_translatedfromlanguage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Journal.OpText3dModify.V1)
  return target;
}

size_t OpText3dModify_V1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Journal.OpText3dModify.V1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 3;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // string language = 4;
  if (!this->_internal_language().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language());
  }

  // string translatedFromText = 6;
  if (!this->_internal_translatedfromtext().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_translatedfromtext());
  }

  // string translatedFromLanguage = 7;
  if (!this->_internal_translatedfromlanguage().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_translatedfromlanguage());
  }

  // .JournalData.ObjectId objectId = 1;
  if (this->_internal_has_objectid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.objectid_);
  }

  // .Common.Color4 color = 5;
  if (this->_internal_has_color()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.color_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OpText3dModify_V1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OpText3dModify_V1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OpText3dModify_V1::GetClassData() const { return &_class_data_; }


void OpText3dModify_V1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OpText3dModify_V1*>(&to_msg);
  auto& from = static_cast<const OpText3dModify_V1&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Journal.OpText3dModify.V1)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_text().empty()) {
    _this->_internal_set_text(from._internal_text());
  }
  if (!from._internal_language().empty()) {
    _this->_internal_set_language(from._internal_language());
  }
  if (!from._internal_translatedfromtext().empty()) {
    _this->_internal_set_translatedfromtext(from._internal_translatedfromtext());
  }
  if (!from._internal_translatedfromlanguage().empty()) {
    _this->_internal_set_translatedfromlanguage(from._internal_translatedfromlanguage());
  }
  if (from._internal_has_objectid()) {
    _this->_internal_mutable_objectid()->::JournalData::ObjectId::MergeFrom(
        from._internal_objectid());
  }
  if (from._internal_has_color()) {
    _this->_internal_mutable_color()->::Common::Color4::MergeFrom(
        from._internal_color());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OpText3dModify_V1::CopyFrom(const OpText3dModify_V1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Journal.OpText3dModify.V1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpText3dModify_V1::IsInitialized() const {
  return true;
}

void OpText3dModify_V1::InternalSwap(OpText3dModify_V1* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.language_, lhs_arena,
      &other->_impl_.language_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.translatedfromtext_, lhs_arena,
      &other->_impl_.translatedfromtext_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.translatedfromlanguage_, lhs_arena,
      &other->_impl_.translatedfromlanguage_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OpText3dModify_V1, _impl_.color_)
      + sizeof(OpText3dModify_V1::_impl_.color_)
      - PROTOBUF_FIELD_OFFSET(OpText3dModify_V1, _impl_.objectid_)>(
          reinterpret_cast<char*>(&_impl_.objectid_),
          reinterpret_cast<char*>(&other->_impl_.objectid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OpText3dModify_V1::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_journal_5foperations_5fcommon_2eproto_getter, &descriptor_table_journal_5foperations_5fcommon_2eproto_once,
      file_level_metadata_journal_5foperations_5fcommon_2eproto[19]);
}

// ===================================================================

class OpText3dModify::_Internal {
 public:
  static const ::Journal::OpText3dModify_V1& v1(const OpText3dModify* msg);
};

const ::Journal::OpText3dModify_V1&
OpText3dModify::_Internal::v1(const OpText3dModify* msg) {
  return *msg->_impl_.V_.v1_;
}
void OpText3dModify::set_allocated_v1(::Journal::OpText3dModify_V1* v1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_V();
  if (v1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(v1);
    if (message_arena != submessage_arena) {
      v1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, v1, submessage_arena);
    }
    set_has_v1();
    _impl_.V_.v1_ = v1;
  }
  // @@protoc_insertion_point(field_set_allocated:Journal.OpText3dModify.v1)
}
OpText3dModify::OpText3dModify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Journal.OpText3dModify)
}
OpText3dModify::OpText3dModify(const OpText3dModify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OpText3dModify* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.V_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_V();
  switch (from.V_case()) {
    case kV1: {
      _this->_internal_mutable_v1()->::Journal::OpText3dModify_V1::MergeFrom(
          from._internal_v1());
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Journal.OpText3dModify)
}

inline void OpText3dModify::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.V_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_V();
}

OpText3dModify::~OpText3dModify() {
  // @@protoc_insertion_point(destructor:Journal.OpText3dModify)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OpText3dModify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_V()) {
    clear_V();
  }
}

void OpText3dModify::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OpText3dModify::clear_V() {
// @@protoc_insertion_point(one_of_clear_start:Journal.OpText3dModify)
  switch (V_case()) {
    case kV1: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.V_.v1_;
      }
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = V_NOT_SET;
}


void OpText3dModify::Clear() {
// @@protoc_insertion_point(message_clear_start:Journal.OpText3dModify)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_V();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpText3dModify::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Journal.OpText3dModify.V1 v1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_v1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OpText3dModify::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Journal.OpText3dModify)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Journal.OpText3dModify.V1 v1 = 1;
  if (_internal_has_v1()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::v1(this),
        _Internal::v1(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Journal.OpText3dModify)
  return target;
}

size_t OpText3dModify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Journal.OpText3dModify)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (V_case()) {
    // .Journal.OpText3dModify.V1 v1 = 1;
    case kV1: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.V_.v1_);
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OpText3dModify::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OpText3dModify::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OpText3dModify::GetClassData() const { return &_class_data_; }


void OpText3dModify::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OpText3dModify*>(&to_msg);
  auto& from = static_cast<const OpText3dModify&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Journal.OpText3dModify)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.V_case()) {
    case kV1: {
      _this->_internal_mutable_v1()->::Journal::OpText3dModify_V1::MergeFrom(
          from._internal_v1());
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OpText3dModify::CopyFrom(const OpText3dModify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Journal.OpText3dModify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpText3dModify::IsInitialized() const {
  return true;
}

void OpText3dModify::InternalSwap(OpText3dModify* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.V_, other->_impl_.V_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata OpText3dModify::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_journal_5foperations_5fcommon_2eproto_getter, &descriptor_table_journal_5foperations_5fcommon_2eproto_once,
      file_level_metadata_journal_5foperations_5fcommon_2eproto[20]);
}

// ===================================================================

class OpImage3d_V1::_Internal {
 public:
  static const ::JournalData::TagPlacementData& placementdata(const OpImage3d_V1* msg);
  static const ::JournalData::ImageContentType& contentid(const OpImage3d_V1* msg);
};

const ::JournalData::TagPlacementData&
OpImage3d_V1::_Internal::placementdata(const OpImage3d_V1* msg) {
  return *msg->_impl_.placementdata_;
}
const ::JournalData::ImageContentType&
OpImage3d_V1::_Internal::contentid(const OpImage3d_V1* msg) {
  return *msg->_impl_.contentid_;
}
void OpImage3d_V1::clear_placementdata() {
  if (GetArenaForAllocation() == nullptr && _impl_.placementdata_ != nullptr) {
    delete _impl_.placementdata_;
  }
  _impl_.placementdata_ = nullptr;
}
void OpImage3d_V1::clear_contentid() {
  if (GetArenaForAllocation() == nullptr && _impl_.contentid_ != nullptr) {
    delete _impl_.contentid_;
  }
  _impl_.contentid_ = nullptr;
}
OpImage3d_V1::OpImage3d_V1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Journal.OpImage3d.V1)
}
OpImage3d_V1::OpImage3d_V1(const OpImage3d_V1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OpImage3d_V1* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.newobjectid_){}
    , decltype(_impl_.placementdata_){nullptr}
    , decltype(_impl_.contentid_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.newobjectid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.newobjectid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_newobjectid().empty()) {
    _this->_impl_.newobjectid_.Set(from._internal_newobjectid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_placementdata()) {
    _this->_impl_.placementdata_ = new ::JournalData::TagPlacementData(*from._impl_.placementdata_);
  }
  if (from._internal_has_contentid()) {
    _this->_impl_.contentid_ = new ::JournalData::ImageContentType(*from._impl_.contentid_);
  }
  // @@protoc_insertion_point(copy_constructor:Journal.OpImage3d.V1)
}

inline void OpImage3d_V1::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.newobjectid_){}
    , decltype(_impl_.placementdata_){nullptr}
    , decltype(_impl_.contentid_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.newobjectid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.newobjectid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OpImage3d_V1::~OpImage3d_V1() {
  // @@protoc_insertion_point(destructor:Journal.OpImage3d.V1)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OpImage3d_V1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.newobjectid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.placementdata_;
  if (this != internal_default_instance()) delete _impl_.contentid_;
}

void OpImage3d_V1::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OpImage3d_V1::Clear() {
// @@protoc_insertion_point(message_clear_start:Journal.OpImage3d.V1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.newobjectid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.placementdata_ != nullptr) {
    delete _impl_.placementdata_;
  }
  _impl_.placementdata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.contentid_ != nullptr) {
    delete _impl_.contentid_;
  }
  _impl_.contentid_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpImage3d_V1::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string newObjectId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_newobjectid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Journal.OpImage3d.V1.newObjectId"));
        } else
          goto handle_unusual;
        continue;
      // .JournalData.TagPlacementData placementData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_placementdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .JournalData.ImageContentType contentId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_contentid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OpImage3d_V1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Journal.OpImage3d.V1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string newObjectId = 1;
  if (!this->_internal_newobjectid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_newobjectid().data(), static_cast<int>(this->_internal_newobjectid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Journal.OpImage3d.V1.newObjectId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_newobjectid(), target);
  }

  // .JournalData.TagPlacementData placementData = 2;
  if (this->_internal_has_placementdata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::placementdata(this),
        _Internal::placementdata(this).GetCachedSize(), target, stream);
  }

  // .JournalData.ImageContentType contentId = 3;
  if (this->_internal_has_contentid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::contentid(this),
        _Internal::contentid(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Journal.OpImage3d.V1)
  return target;
}

size_t OpImage3d_V1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Journal.OpImage3d.V1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string newObjectId = 1;
  if (!this->_internal_newobjectid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_newobjectid());
  }

  // .JournalData.TagPlacementData placementData = 2;
  if (this->_internal_has_placementdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.placementdata_);
  }

  // .JournalData.ImageContentType contentId = 3;
  if (this->_internal_has_contentid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.contentid_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OpImage3d_V1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OpImage3d_V1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OpImage3d_V1::GetClassData() const { return &_class_data_; }


void OpImage3d_V1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OpImage3d_V1*>(&to_msg);
  auto& from = static_cast<const OpImage3d_V1&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Journal.OpImage3d.V1)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_newobjectid().empty()) {
    _this->_internal_set_newobjectid(from._internal_newobjectid());
  }
  if (from._internal_has_placementdata()) {
    _this->_internal_mutable_placementdata()->::JournalData::TagPlacementData::MergeFrom(
        from._internal_placementdata());
  }
  if (from._internal_has_contentid()) {
    _this->_internal_mutable_contentid()->::JournalData::ImageContentType::MergeFrom(
        from._internal_contentid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OpImage3d_V1::CopyFrom(const OpImage3d_V1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Journal.OpImage3d.V1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpImage3d_V1::IsInitialized() const {
  return true;
}

void OpImage3d_V1::InternalSwap(OpImage3d_V1* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.newobjectid_, lhs_arena,
      &other->_impl_.newobjectid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OpImage3d_V1, _impl_.contentid_)
      + sizeof(OpImage3d_V1::_impl_.contentid_)
      - PROTOBUF_FIELD_OFFSET(OpImage3d_V1, _impl_.placementdata_)>(
          reinterpret_cast<char*>(&_impl_.placementdata_),
          reinterpret_cast<char*>(&other->_impl_.placementdata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OpImage3d_V1::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_journal_5foperations_5fcommon_2eproto_getter, &descriptor_table_journal_5foperations_5fcommon_2eproto_once,
      file_level_metadata_journal_5foperations_5fcommon_2eproto[21]);
}

// ===================================================================

class OpImage3d::_Internal {
 public:
  static const ::Journal::OpImage3d_V1& v1(const OpImage3d* msg);
};

const ::Journal::OpImage3d_V1&
OpImage3d::_Internal::v1(const OpImage3d* msg) {
  return *msg->_impl_.V_.v1_;
}
void OpImage3d::set_allocated_v1(::Journal::OpImage3d_V1* v1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_V();
  if (v1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(v1);
    if (message_arena != submessage_arena) {
      v1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, v1, submessage_arena);
    }
    set_has_v1();
    _impl_.V_.v1_ = v1;
  }
  // @@protoc_insertion_point(field_set_allocated:Journal.OpImage3d.v1)
}
OpImage3d::OpImage3d(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Journal.OpImage3d)
}
OpImage3d::OpImage3d(const OpImage3d& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OpImage3d* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.V_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_V();
  switch (from.V_case()) {
    case kV1: {
      _this->_internal_mutable_v1()->::Journal::OpImage3d_V1::MergeFrom(
          from._internal_v1());
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Journal.OpImage3d)
}

inline void OpImage3d::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.V_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_V();
}

OpImage3d::~OpImage3d() {
  // @@protoc_insertion_point(destructor:Journal.OpImage3d)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OpImage3d::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_V()) {
    clear_V();
  }
}

void OpImage3d::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OpImage3d::clear_V() {
// @@protoc_insertion_point(one_of_clear_start:Journal.OpImage3d)
  switch (V_case()) {
    case kV1: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.V_.v1_;
      }
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = V_NOT_SET;
}


void OpImage3d::Clear() {
// @@protoc_insertion_point(message_clear_start:Journal.OpImage3d)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_V();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpImage3d::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Journal.OpImage3d.V1 v1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_v1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OpImage3d::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Journal.OpImage3d)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Journal.OpImage3d.V1 v1 = 1;
  if (_internal_has_v1()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::v1(this),
        _Internal::v1(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Journal.OpImage3d)
  return target;
}

size_t OpImage3d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Journal.OpImage3d)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (V_case()) {
    // .Journal.OpImage3d.V1 v1 = 1;
    case kV1: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.V_.v1_);
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OpImage3d::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OpImage3d::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OpImage3d::GetClassData() const { return &_class_data_; }


void OpImage3d::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OpImage3d*>(&to_msg);
  auto& from = static_cast<const OpImage3d&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Journal.OpImage3d)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.V_case()) {
    case kV1: {
      _this->_internal_mutable_v1()->::Journal::OpImage3d_V1::MergeFrom(
          from._internal_v1());
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OpImage3d::CopyFrom(const OpImage3d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Journal.OpImage3d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpImage3d::IsInitialized() const {
  return true;
}

void OpImage3d::InternalSwap(OpImage3d* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.V_, other->_impl_.V_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata OpImage3d::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_journal_5foperations_5fcommon_2eproto_getter, &descriptor_table_journal_5foperations_5fcommon_2eproto_once,
      file_level_metadata_journal_5foperations_5fcommon_2eproto[22]);
}

// ===================================================================

class OpUpdatePropertyValue_V1::_Internal {
 public:
  static const ::Property::PropertyIdentifier& propid(const OpUpdatePropertyValue_V1* msg);
  static const ::Property::ScalarPropertyAssignment& scalar(const OpUpdatePropertyValue_V1* msg);
  static const ::Property::StringPropertyAssignment& string(const OpUpdatePropertyValue_V1* msg);
  static const ::Property::VectorPropertyAssignment& vector(const OpUpdatePropertyValue_V1* msg);
  static const ::Property::ColorPropertyAssignment& color(const OpUpdatePropertyValue_V1* msg);
  static const ::Property::TransformPropertyAssignment& transform(const OpUpdatePropertyValue_V1* msg);
  static const ::Property::BooleanPropertyAssignment& boolean(const OpUpdatePropertyValue_V1* msg);
  static const ::Property::JsonPropertyAssignment& json(const OpUpdatePropertyValue_V1* msg);
  static const ::Property::LinkPropertyAssignment& link(const OpUpdatePropertyValue_V1* msg);
};

const ::Property::PropertyIdentifier&
OpUpdatePropertyValue_V1::_Internal::propid(const OpUpdatePropertyValue_V1* msg) {
  return *msg->_impl_.propid_;
}
const ::Property::ScalarPropertyAssignment&
OpUpdatePropertyValue_V1::_Internal::scalar(const OpUpdatePropertyValue_V1* msg) {
  return *msg->_impl_.ValueType_.scalar_;
}
const ::Property::StringPropertyAssignment&
OpUpdatePropertyValue_V1::_Internal::string(const OpUpdatePropertyValue_V1* msg) {
  return *msg->_impl_.ValueType_.string_;
}
const ::Property::VectorPropertyAssignment&
OpUpdatePropertyValue_V1::_Internal::vector(const OpUpdatePropertyValue_V1* msg) {
  return *msg->_impl_.ValueType_.vector_;
}
const ::Property::ColorPropertyAssignment&
OpUpdatePropertyValue_V1::_Internal::color(const OpUpdatePropertyValue_V1* msg) {
  return *msg->_impl_.ValueType_.color_;
}
const ::Property::TransformPropertyAssignment&
OpUpdatePropertyValue_V1::_Internal::transform(const OpUpdatePropertyValue_V1* msg) {
  return *msg->_impl_.ValueType_.transform_;
}
const ::Property::BooleanPropertyAssignment&
OpUpdatePropertyValue_V1::_Internal::boolean(const OpUpdatePropertyValue_V1* msg) {
  return *msg->_impl_.ValueType_.boolean_;
}
const ::Property::JsonPropertyAssignment&
OpUpdatePropertyValue_V1::_Internal::json(const OpUpdatePropertyValue_V1* msg) {
  return *msg->_impl_.ValueType_.json_;
}
const ::Property::LinkPropertyAssignment&
OpUpdatePropertyValue_V1::_Internal::link(const OpUpdatePropertyValue_V1* msg) {
  return *msg->_impl_.ValueType_.link_;
}
void OpUpdatePropertyValue_V1::clear_propid() {
  if (GetArenaForAllocation() == nullptr && _impl_.propid_ != nullptr) {
    delete _impl_.propid_;
  }
  _impl_.propid_ = nullptr;
}
void OpUpdatePropertyValue_V1::set_allocated_scalar(::Property::ScalarPropertyAssignment* scalar) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_ValueType();
  if (scalar) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scalar));
    if (message_arena != submessage_arena) {
      scalar = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scalar, submessage_arena);
    }
    set_has_scalar();
    _impl_.ValueType_.scalar_ = scalar;
  }
  // @@protoc_insertion_point(field_set_allocated:Journal.OpUpdatePropertyValue.V1.scalar)
}
void OpUpdatePropertyValue_V1::clear_scalar() {
  if (_internal_has_scalar()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.ValueType_.scalar_;
    }
    clear_has_ValueType();
  }
}
void OpUpdatePropertyValue_V1::set_allocated_string(::Property::StringPropertyAssignment* string) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_ValueType();
  if (string) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(string));
    if (message_arena != submessage_arena) {
      string = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, string, submessage_arena);
    }
    set_has_string();
    _impl_.ValueType_.string_ = string;
  }
  // @@protoc_insertion_point(field_set_allocated:Journal.OpUpdatePropertyValue.V1.string)
}
void OpUpdatePropertyValue_V1::clear_string() {
  if (_internal_has_string()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.ValueType_.string_;
    }
    clear_has_ValueType();
  }
}
void OpUpdatePropertyValue_V1::set_allocated_vector(::Property::VectorPropertyAssignment* vector) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_ValueType();
  if (vector) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vector));
    if (message_arena != submessage_arena) {
      vector = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vector, submessage_arena);
    }
    set_has_vector();
    _impl_.ValueType_.vector_ = vector;
  }
  // @@protoc_insertion_point(field_set_allocated:Journal.OpUpdatePropertyValue.V1.vector)
}
void OpUpdatePropertyValue_V1::clear_vector() {
  if (_internal_has_vector()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.ValueType_.vector_;
    }
    clear_has_ValueType();
  }
}
void OpUpdatePropertyValue_V1::set_allocated_color(::Property::ColorPropertyAssignment* color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_ValueType();
  if (color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(color));
    if (message_arena != submessage_arena) {
      color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    set_has_color();
    _impl_.ValueType_.color_ = color;
  }
  // @@protoc_insertion_point(field_set_allocated:Journal.OpUpdatePropertyValue.V1.color)
}
void OpUpdatePropertyValue_V1::clear_color() {
  if (_internal_has_color()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.ValueType_.color_;
    }
    clear_has_ValueType();
  }
}
void OpUpdatePropertyValue_V1::set_allocated_transform(::Property::TransformPropertyAssignment* transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_ValueType();
  if (transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transform));
    if (message_arena != submessage_arena) {
      transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transform, submessage_arena);
    }
    set_has_transform();
    _impl_.ValueType_.transform_ = transform;
  }
  // @@protoc_insertion_point(field_set_allocated:Journal.OpUpdatePropertyValue.V1.transform)
}
void OpUpdatePropertyValue_V1::clear_transform() {
  if (_internal_has_transform()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.ValueType_.transform_;
    }
    clear_has_ValueType();
  }
}
void OpUpdatePropertyValue_V1::set_allocated_boolean(::Property::BooleanPropertyAssignment* boolean) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_ValueType();
  if (boolean) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(boolean));
    if (message_arena != submessage_arena) {
      boolean = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, boolean, submessage_arena);
    }
    set_has_boolean();
    _impl_.ValueType_.boolean_ = boolean;
  }
  // @@protoc_insertion_point(field_set_allocated:Journal.OpUpdatePropertyValue.V1.boolean)
}
void OpUpdatePropertyValue_V1::clear_boolean() {
  if (_internal_has_boolean()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.ValueType_.boolean_;
    }
    clear_has_ValueType();
  }
}
void OpUpdatePropertyValue_V1::set_allocated_json(::Property::JsonPropertyAssignment* json) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_ValueType();
  if (json) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(json));
    if (message_arena != submessage_arena) {
      json = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, json, submessage_arena);
    }
    set_has_json();
    _impl_.ValueType_.json_ = json;
  }
  // @@protoc_insertion_point(field_set_allocated:Journal.OpUpdatePropertyValue.V1.json)
}
void OpUpdatePropertyValue_V1::clear_json() {
  if (_internal_has_json()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.ValueType_.json_;
    }
    clear_has_ValueType();
  }
}
void OpUpdatePropertyValue_V1::set_allocated_link(::Property::LinkPropertyAssignment* link) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_ValueType();
  if (link) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(link));
    if (message_arena != submessage_arena) {
      link = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, link, submessage_arena);
    }
    set_has_link();
    _impl_.ValueType_.link_ = link;
  }
  // @@protoc_insertion_point(field_set_allocated:Journal.OpUpdatePropertyValue.V1.link)
}
void OpUpdatePropertyValue_V1::clear_link() {
  if (_internal_has_link()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.ValueType_.link_;
    }
    clear_has_ValueType();
  }
}
OpUpdatePropertyValue_V1::OpUpdatePropertyValue_V1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Journal.OpUpdatePropertyValue.V1)
}
OpUpdatePropertyValue_V1::OpUpdatePropertyValue_V1(const OpUpdatePropertyValue_V1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OpUpdatePropertyValue_V1* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.propid_){nullptr}
    , decltype(_impl_.ValueType_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_propid()) {
    _this->_impl_.propid_ = new ::Property::PropertyIdentifier(*from._impl_.propid_);
  }
  clear_has_ValueType();
  switch (from.ValueType_case()) {
    case kScalar: {
      _this->_internal_mutable_scalar()->::Property::ScalarPropertyAssignment::MergeFrom(
          from._internal_scalar());
      break;
    }
    case kString: {
      _this->_internal_mutable_string()->::Property::StringPropertyAssignment::MergeFrom(
          from._internal_string());
      break;
    }
    case kVector: {
      _this->_internal_mutable_vector()->::Property::VectorPropertyAssignment::MergeFrom(
          from._internal_vector());
      break;
    }
    case kColor: {
      _this->_internal_mutable_color()->::Property::ColorPropertyAssignment::MergeFrom(
          from._internal_color());
      break;
    }
    case kTransform: {
      _this->_internal_mutable_transform()->::Property::TransformPropertyAssignment::MergeFrom(
          from._internal_transform());
      break;
    }
    case kBoolean: {
      _this->_internal_mutable_boolean()->::Property::BooleanPropertyAssignment::MergeFrom(
          from._internal_boolean());
      break;
    }
    case kJson: {
      _this->_internal_mutable_json()->::Property::JsonPropertyAssignment::MergeFrom(
          from._internal_json());
      break;
    }
    case kLink: {
      _this->_internal_mutable_link()->::Property::LinkPropertyAssignment::MergeFrom(
          from._internal_link());
      break;
    }
    case VALUETYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Journal.OpUpdatePropertyValue.V1)
}

inline void OpUpdatePropertyValue_V1::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.propid_){nullptr}
    , decltype(_impl_.ValueType_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_ValueType();
}

OpUpdatePropertyValue_V1::~OpUpdatePropertyValue_V1() {
  // @@protoc_insertion_point(destructor:Journal.OpUpdatePropertyValue.V1)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OpUpdatePropertyValue_V1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.propid_;
  if (has_ValueType()) {
    clear_ValueType();
  }
}

void OpUpdatePropertyValue_V1::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OpUpdatePropertyValue_V1::clear_ValueType() {
// @@protoc_insertion_point(one_of_clear_start:Journal.OpUpdatePropertyValue.V1)
  switch (ValueType_case()) {
    case kScalar: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.ValueType_.scalar_;
      }
      break;
    }
    case kString: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.ValueType_.string_;
      }
      break;
    }
    case kVector: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.ValueType_.vector_;
      }
      break;
    }
    case kColor: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.ValueType_.color_;
      }
      break;
    }
    case kTransform: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.ValueType_.transform_;
      }
      break;
    }
    case kBoolean: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.ValueType_.boolean_;
      }
      break;
    }
    case kJson: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.ValueType_.json_;
      }
      break;
    }
    case kLink: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.ValueType_.link_;
      }
      break;
    }
    case VALUETYPE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUETYPE_NOT_SET;
}


void OpUpdatePropertyValue_V1::Clear() {
// @@protoc_insertion_point(message_clear_start:Journal.OpUpdatePropertyValue.V1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.propid_ != nullptr) {
    delete _impl_.propid_;
  }
  _impl_.propid_ = nullptr;
  clear_ValueType();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpUpdatePropertyValue_V1::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Property.PropertyIdentifier propId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_propid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Property.ScalarPropertyAssignment scalar = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalar(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Property.StringPropertyAssignment string = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_string(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Property.VectorPropertyAssignment vector = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_vector(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Property.ColorPropertyAssignment color = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Property.TransformPropertyAssignment transform = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_transform(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Property.BooleanPropertyAssignment boolean = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_boolean(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Property.JsonPropertyAssignment json = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_json(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Property.LinkPropertyAssignment link = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_link(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OpUpdatePropertyValue_V1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Journal.OpUpdatePropertyValue.V1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Property.PropertyIdentifier propId = 1;
  if (this->_internal_has_propid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::propid(this),
        _Internal::propid(this).GetCachedSize(), target, stream);
  }

  // .Property.ScalarPropertyAssignment scalar = 2;
  if (_internal_has_scalar()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::scalar(this),
        _Internal::scalar(this).GetCachedSize(), target, stream);
  }

  // .Property.StringPropertyAssignment string = 3;
  if (_internal_has_string()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::string(this),
        _Internal::string(this).GetCachedSize(), target, stream);
  }

  // .Property.VectorPropertyAssignment vector = 4;
  if (_internal_has_vector()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::vector(this),
        _Internal::vector(this).GetCachedSize(), target, stream);
  }

  // .Property.ColorPropertyAssignment color = 5;
  if (_internal_has_color()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::color(this),
        _Internal::color(this).GetCachedSize(), target, stream);
  }

  // .Property.TransformPropertyAssignment transform = 6;
  if (_internal_has_transform()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::transform(this),
        _Internal::transform(this).GetCachedSize(), target, stream);
  }

  // .Property.BooleanPropertyAssignment boolean = 7;
  if (_internal_has_boolean()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::boolean(this),
        _Internal::boolean(this).GetCachedSize(), target, stream);
  }

  // .Property.JsonPropertyAssignment json = 9;
  if (_internal_has_json()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::json(this),
        _Internal::json(this).GetCachedSize(), target, stream);
  }

  // .Property.LinkPropertyAssignment link = 10;
  if (_internal_has_link()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::link(this),
        _Internal::link(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Journal.OpUpdatePropertyValue.V1)
  return target;
}

size_t OpUpdatePropertyValue_V1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Journal.OpUpdatePropertyValue.V1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Property.PropertyIdentifier propId = 1;
  if (this->_internal_has_propid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.propid_);
  }

  switch (ValueType_case()) {
    // .Property.ScalarPropertyAssignment scalar = 2;
    case kScalar: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ValueType_.scalar_);
      break;
    }
    // .Property.StringPropertyAssignment string = 3;
    case kString: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ValueType_.string_);
      break;
    }
    // .Property.VectorPropertyAssignment vector = 4;
    case kVector: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ValueType_.vector_);
      break;
    }
    // .Property.ColorPropertyAssignment color = 5;
    case kColor: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ValueType_.color_);
      break;
    }
    // .Property.TransformPropertyAssignment transform = 6;
    case kTransform: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ValueType_.transform_);
      break;
    }
    // .Property.BooleanPropertyAssignment boolean = 7;
    case kBoolean: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ValueType_.boolean_);
      break;
    }
    // .Property.JsonPropertyAssignment json = 9;
    case kJson: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ValueType_.json_);
      break;
    }
    // .Property.LinkPropertyAssignment link = 10;
    case kLink: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ValueType_.link_);
      break;
    }
    case VALUETYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OpUpdatePropertyValue_V1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OpUpdatePropertyValue_V1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OpUpdatePropertyValue_V1::GetClassData() const { return &_class_data_; }


void OpUpdatePropertyValue_V1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OpUpdatePropertyValue_V1*>(&to_msg);
  auto& from = static_cast<const OpUpdatePropertyValue_V1&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Journal.OpUpdatePropertyValue.V1)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_propid()) {
    _this->_internal_mutable_propid()->::Property::PropertyIdentifier::MergeFrom(
        from._internal_propid());
  }
  switch (from.ValueType_case()) {
    case kScalar: {
      _this->_internal_mutable_scalar()->::Property::ScalarPropertyAssignment::MergeFrom(
          from._internal_scalar());
      break;
    }
    case kString: {
      _this->_internal_mutable_string()->::Property::StringPropertyAssignment::MergeFrom(
          from._internal_string());
      break;
    }
    case kVector: {
      _this->_internal_mutable_vector()->::Property::VectorPropertyAssignment::MergeFrom(
          from._internal_vector());
      break;
    }
    case kColor: {
      _this->_internal_mutable_color()->::Property::ColorPropertyAssignment::MergeFrom(
          from._internal_color());
      break;
    }
    case kTransform: {
      _this->_internal_mutable_transform()->::Property::TransformPropertyAssignment::MergeFrom(
          from._internal_transform());
      break;
    }
    case kBoolean: {
      _this->_internal_mutable_boolean()->::Property::BooleanPropertyAssignment::MergeFrom(
          from._internal_boolean());
      break;
    }
    case kJson: {
      _this->_internal_mutable_json()->::Property::JsonPropertyAssignment::MergeFrom(
          from._internal_json());
      break;
    }
    case kLink: {
      _this->_internal_mutable_link()->::Property::LinkPropertyAssignment::MergeFrom(
          from._internal_link());
      break;
    }
    case VALUETYPE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OpUpdatePropertyValue_V1::CopyFrom(const OpUpdatePropertyValue_V1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Journal.OpUpdatePropertyValue.V1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpUpdatePropertyValue_V1::IsInitialized() const {
  return true;
}

void OpUpdatePropertyValue_V1::InternalSwap(OpUpdatePropertyValue_V1* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.propid_, other->_impl_.propid_);
  swap(_impl_.ValueType_, other->_impl_.ValueType_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata OpUpdatePropertyValue_V1::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_journal_5foperations_5fcommon_2eproto_getter, &descriptor_table_journal_5foperations_5fcommon_2eproto_once,
      file_level_metadata_journal_5foperations_5fcommon_2eproto[23]);
}

// ===================================================================

class OpUpdatePropertyValue::_Internal {
 public:
  static const ::Journal::OpUpdatePropertyValue_V1& v1(const OpUpdatePropertyValue* msg);
};

const ::Journal::OpUpdatePropertyValue_V1&
OpUpdatePropertyValue::_Internal::v1(const OpUpdatePropertyValue* msg) {
  return *msg->_impl_.V_.v1_;
}
void OpUpdatePropertyValue::set_allocated_v1(::Journal::OpUpdatePropertyValue_V1* v1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_V();
  if (v1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(v1);
    if (message_arena != submessage_arena) {
      v1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, v1, submessage_arena);
    }
    set_has_v1();
    _impl_.V_.v1_ = v1;
  }
  // @@protoc_insertion_point(field_set_allocated:Journal.OpUpdatePropertyValue.v1)
}
OpUpdatePropertyValue::OpUpdatePropertyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Journal.OpUpdatePropertyValue)
}
OpUpdatePropertyValue::OpUpdatePropertyValue(const OpUpdatePropertyValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OpUpdatePropertyValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.V_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_V();
  switch (from.V_case()) {
    case kV1: {
      _this->_internal_mutable_v1()->::Journal::OpUpdatePropertyValue_V1::MergeFrom(
          from._internal_v1());
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Journal.OpUpdatePropertyValue)
}

inline void OpUpdatePropertyValue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.V_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_V();
}

OpUpdatePropertyValue::~OpUpdatePropertyValue() {
  // @@protoc_insertion_point(destructor:Journal.OpUpdatePropertyValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OpUpdatePropertyValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_V()) {
    clear_V();
  }
}

void OpUpdatePropertyValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OpUpdatePropertyValue::clear_V() {
// @@protoc_insertion_point(one_of_clear_start:Journal.OpUpdatePropertyValue)
  switch (V_case()) {
    case kV1: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.V_.v1_;
      }
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = V_NOT_SET;
}


void OpUpdatePropertyValue::Clear() {
// @@protoc_insertion_point(message_clear_start:Journal.OpUpdatePropertyValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_V();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpUpdatePropertyValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Journal.OpUpdatePropertyValue.V1 v1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_v1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OpUpdatePropertyValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Journal.OpUpdatePropertyValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Journal.OpUpdatePropertyValue.V1 v1 = 1;
  if (_internal_has_v1()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::v1(this),
        _Internal::v1(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Journal.OpUpdatePropertyValue)
  return target;
}

size_t OpUpdatePropertyValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Journal.OpUpdatePropertyValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (V_case()) {
    // .Journal.OpUpdatePropertyValue.V1 v1 = 1;
    case kV1: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.V_.v1_);
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OpUpdatePropertyValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OpUpdatePropertyValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OpUpdatePropertyValue::GetClassData() const { return &_class_data_; }


void OpUpdatePropertyValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OpUpdatePropertyValue*>(&to_msg);
  auto& from = static_cast<const OpUpdatePropertyValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Journal.OpUpdatePropertyValue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.V_case()) {
    case kV1: {
      _this->_internal_mutable_v1()->::Journal::OpUpdatePropertyValue_V1::MergeFrom(
          from._internal_v1());
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OpUpdatePropertyValue::CopyFrom(const OpUpdatePropertyValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Journal.OpUpdatePropertyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpUpdatePropertyValue::IsInitialized() const {
  return true;
}

void OpUpdatePropertyValue::InternalSwap(OpUpdatePropertyValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.V_, other->_impl_.V_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata OpUpdatePropertyValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_journal_5foperations_5fcommon_2eproto_getter, &descriptor_table_journal_5foperations_5fcommon_2eproto_once,
      file_level_metadata_journal_5foperations_5fcommon_2eproto[24]);
}

// ===================================================================

class OpDeclareProperty_V1::_Internal {
 public:
  static const ::Property::PropertyIdentifier& propid(const OpDeclareProperty_V1* msg);
  static const ::Property::AnyPropertyDeclaration& decl(const OpDeclareProperty_V1* msg);
};

const ::Property::PropertyIdentifier&
OpDeclareProperty_V1::_Internal::propid(const OpDeclareProperty_V1* msg) {
  return *msg->_impl_.propid_;
}
const ::Property::AnyPropertyDeclaration&
OpDeclareProperty_V1::_Internal::decl(const OpDeclareProperty_V1* msg) {
  return *msg->_impl_.decl_;
}
void OpDeclareProperty_V1::clear_propid() {
  if (GetArenaForAllocation() == nullptr && _impl_.propid_ != nullptr) {
    delete _impl_.propid_;
  }
  _impl_.propid_ = nullptr;
}
void OpDeclareProperty_V1::clear_decl() {
  if (GetArenaForAllocation() == nullptr && _impl_.decl_ != nullptr) {
    delete _impl_.decl_;
  }
  _impl_.decl_ = nullptr;
}
OpDeclareProperty_V1::OpDeclareProperty_V1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Journal.OpDeclareProperty.V1)
}
OpDeclareProperty_V1::OpDeclareProperty_V1(const OpDeclareProperty_V1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OpDeclareProperty_V1* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.propid_){nullptr}
    , decltype(_impl_.decl_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_propid()) {
    _this->_impl_.propid_ = new ::Property::PropertyIdentifier(*from._impl_.propid_);
  }
  if (from._internal_has_decl()) {
    _this->_impl_.decl_ = new ::Property::AnyPropertyDeclaration(*from._impl_.decl_);
  }
  // @@protoc_insertion_point(copy_constructor:Journal.OpDeclareProperty.V1)
}

inline void OpDeclareProperty_V1::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.propid_){nullptr}
    , decltype(_impl_.decl_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OpDeclareProperty_V1::~OpDeclareProperty_V1() {
  // @@protoc_insertion_point(destructor:Journal.OpDeclareProperty.V1)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OpDeclareProperty_V1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.propid_;
  if (this != internal_default_instance()) delete _impl_.decl_;
}

void OpDeclareProperty_V1::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OpDeclareProperty_V1::Clear() {
// @@protoc_insertion_point(message_clear_start:Journal.OpDeclareProperty.V1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.propid_ != nullptr) {
    delete _impl_.propid_;
  }
  _impl_.propid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.decl_ != nullptr) {
    delete _impl_.decl_;
  }
  _impl_.decl_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpDeclareProperty_V1::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Property.PropertyIdentifier propId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_propid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Property.AnyPropertyDeclaration decl = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_decl(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OpDeclareProperty_V1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Journal.OpDeclareProperty.V1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Property.PropertyIdentifier propId = 1;
  if (this->_internal_has_propid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::propid(this),
        _Internal::propid(this).GetCachedSize(), target, stream);
  }

  // .Property.AnyPropertyDeclaration decl = 2;
  if (this->_internal_has_decl()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::decl(this),
        _Internal::decl(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Journal.OpDeclareProperty.V1)
  return target;
}

size_t OpDeclareProperty_V1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Journal.OpDeclareProperty.V1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Property.PropertyIdentifier propId = 1;
  if (this->_internal_has_propid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.propid_);
  }

  // .Property.AnyPropertyDeclaration decl = 2;
  if (this->_internal_has_decl()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.decl_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OpDeclareProperty_V1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OpDeclareProperty_V1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OpDeclareProperty_V1::GetClassData() const { return &_class_data_; }


void OpDeclareProperty_V1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OpDeclareProperty_V1*>(&to_msg);
  auto& from = static_cast<const OpDeclareProperty_V1&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Journal.OpDeclareProperty.V1)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_propid()) {
    _this->_internal_mutable_propid()->::Property::PropertyIdentifier::MergeFrom(
        from._internal_propid());
  }
  if (from._internal_has_decl()) {
    _this->_internal_mutable_decl()->::Property::AnyPropertyDeclaration::MergeFrom(
        from._internal_decl());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OpDeclareProperty_V1::CopyFrom(const OpDeclareProperty_V1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Journal.OpDeclareProperty.V1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpDeclareProperty_V1::IsInitialized() const {
  return true;
}

void OpDeclareProperty_V1::InternalSwap(OpDeclareProperty_V1* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OpDeclareProperty_V1, _impl_.decl_)
      + sizeof(OpDeclareProperty_V1::_impl_.decl_)
      - PROTOBUF_FIELD_OFFSET(OpDeclareProperty_V1, _impl_.propid_)>(
          reinterpret_cast<char*>(&_impl_.propid_),
          reinterpret_cast<char*>(&other->_impl_.propid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OpDeclareProperty_V1::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_journal_5foperations_5fcommon_2eproto_getter, &descriptor_table_journal_5foperations_5fcommon_2eproto_once,
      file_level_metadata_journal_5foperations_5fcommon_2eproto[25]);
}

// ===================================================================

class OpDeclareProperty::_Internal {
 public:
  static const ::Journal::OpDeclareProperty_V1& v1(const OpDeclareProperty* msg);
};

const ::Journal::OpDeclareProperty_V1&
OpDeclareProperty::_Internal::v1(const OpDeclareProperty* msg) {
  return *msg->_impl_.V_.v1_;
}
void OpDeclareProperty::set_allocated_v1(::Journal::OpDeclareProperty_V1* v1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_V();
  if (v1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(v1);
    if (message_arena != submessage_arena) {
      v1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, v1, submessage_arena);
    }
    set_has_v1();
    _impl_.V_.v1_ = v1;
  }
  // @@protoc_insertion_point(field_set_allocated:Journal.OpDeclareProperty.v1)
}
OpDeclareProperty::OpDeclareProperty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Journal.OpDeclareProperty)
}
OpDeclareProperty::OpDeclareProperty(const OpDeclareProperty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OpDeclareProperty* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.V_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_V();
  switch (from.V_case()) {
    case kV1: {
      _this->_internal_mutable_v1()->::Journal::OpDeclareProperty_V1::MergeFrom(
          from._internal_v1());
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Journal.OpDeclareProperty)
}

inline void OpDeclareProperty::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.V_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_V();
}

OpDeclareProperty::~OpDeclareProperty() {
  // @@protoc_insertion_point(destructor:Journal.OpDeclareProperty)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OpDeclareProperty::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_V()) {
    clear_V();
  }
}

void OpDeclareProperty::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OpDeclareProperty::clear_V() {
// @@protoc_insertion_point(one_of_clear_start:Journal.OpDeclareProperty)
  switch (V_case()) {
    case kV1: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.V_.v1_;
      }
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = V_NOT_SET;
}


void OpDeclareProperty::Clear() {
// @@protoc_insertion_point(message_clear_start:Journal.OpDeclareProperty)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_V();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpDeclareProperty::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Journal.OpDeclareProperty.V1 v1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_v1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OpDeclareProperty::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Journal.OpDeclareProperty)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Journal.OpDeclareProperty.V1 v1 = 1;
  if (_internal_has_v1()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::v1(this),
        _Internal::v1(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Journal.OpDeclareProperty)
  return target;
}

size_t OpDeclareProperty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Journal.OpDeclareProperty)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (V_case()) {
    // .Journal.OpDeclareProperty.V1 v1 = 1;
    case kV1: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.V_.v1_);
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OpDeclareProperty::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OpDeclareProperty::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OpDeclareProperty::GetClassData() const { return &_class_data_; }


void OpDeclareProperty::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OpDeclareProperty*>(&to_msg);
  auto& from = static_cast<const OpDeclareProperty&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Journal.OpDeclareProperty)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.V_case()) {
    case kV1: {
      _this->_internal_mutable_v1()->::Journal::OpDeclareProperty_V1::MergeFrom(
          from._internal_v1());
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OpDeclareProperty::CopyFrom(const OpDeclareProperty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Journal.OpDeclareProperty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpDeclareProperty::IsInitialized() const {
  return true;
}

void OpDeclareProperty::InternalSwap(OpDeclareProperty* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.V_, other->_impl_.V_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata OpDeclareProperty::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_journal_5foperations_5fcommon_2eproto_getter, &descriptor_table_journal_5foperations_5fcommon_2eproto_once,
      file_level_metadata_journal_5foperations_5fcommon_2eproto[26]);
}

// ===================================================================

class OpBlindDataOp::_Internal {
 public:
};

OpBlindDataOp::OpBlindDataOp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Journal.OpBlindDataOp)
}
OpBlindDataOp::OpBlindDataOp(const OpBlindDataOp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OpBlindDataOp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.blinddataidentifier_){}
    , decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.blinddataidentifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.blinddataidentifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_blinddataidentifier().empty()) {
    _this->_impl_.blinddataidentifier_.Set(from._internal_blinddataidentifier(), 
      _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Journal.OpBlindDataOp)
}

inline void OpBlindDataOp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.blinddataidentifier_){}
    , decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.blinddataidentifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.blinddataidentifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OpBlindDataOp::~OpBlindDataOp() {
  // @@protoc_insertion_point(destructor:Journal.OpBlindDataOp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OpBlindDataOp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.blinddataidentifier_.Destroy();
  _impl_.data_.Destroy();
}

void OpBlindDataOp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OpBlindDataOp::Clear() {
// @@protoc_insertion_point(message_clear_start:Journal.OpBlindDataOp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.blinddataidentifier_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpBlindDataOp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string blindDataIdentifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_blinddataidentifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Journal.OpBlindDataOp.blindDataIdentifier"));
        } else
          goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OpBlindDataOp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Journal.OpBlindDataOp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string blindDataIdentifier = 1;
  if (!this->_internal_blinddataidentifier().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_blinddataidentifier().data(), static_cast<int>(this->_internal_blinddataidentifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Journal.OpBlindDataOp.blindDataIdentifier");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_blinddataidentifier(), target);
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Journal.OpBlindDataOp)
  return target;
}

size_t OpBlindDataOp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Journal.OpBlindDataOp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string blindDataIdentifier = 1;
  if (!this->_internal_blinddataidentifier().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_blinddataidentifier());
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OpBlindDataOp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OpBlindDataOp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OpBlindDataOp::GetClassData() const { return &_class_data_; }


void OpBlindDataOp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OpBlindDataOp*>(&to_msg);
  auto& from = static_cast<const OpBlindDataOp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Journal.OpBlindDataOp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_blinddataidentifier().empty()) {
    _this->_internal_set_blinddataidentifier(from._internal_blinddataidentifier());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OpBlindDataOp::CopyFrom(const OpBlindDataOp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Journal.OpBlindDataOp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpBlindDataOp::IsInitialized() const {
  return true;
}

void OpBlindDataOp::InternalSwap(OpBlindDataOp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.blinddataidentifier_, lhs_arena,
      &other->_impl_.blinddataidentifier_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata OpBlindDataOp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_journal_5foperations_5fcommon_2eproto_getter, &descriptor_table_journal_5foperations_5fcommon_2eproto_once,
      file_level_metadata_journal_5foperations_5fcommon_2eproto[27]);
}

// ===================================================================

class UserAuthorityPayload::_Internal {
 public:
};

UserAuthorityPayload::UserAuthorityPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Journal.UserAuthorityPayload)
}
UserAuthorityPayload::UserAuthorityPayload(const UserAuthorityPayload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserAuthorityPayload* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.FinalizationPayload_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_FinalizationPayload();
  switch (from.FinalizationPayload_case()) {
    case kMessage: {
      _this->_internal_set_message(from._internal_message());
      break;
    }
    case kJson: {
      _this->_internal_set_json(from._internal_json());
      break;
    }
    case FINALIZATIONPAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Journal.UserAuthorityPayload)
}

inline void UserAuthorityPayload::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.FinalizationPayload_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_FinalizationPayload();
}

UserAuthorityPayload::~UserAuthorityPayload() {
  // @@protoc_insertion_point(destructor:Journal.UserAuthorityPayload)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserAuthorityPayload::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_FinalizationPayload()) {
    clear_FinalizationPayload();
  }
}

void UserAuthorityPayload::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserAuthorityPayload::clear_FinalizationPayload() {
// @@protoc_insertion_point(one_of_clear_start:Journal.UserAuthorityPayload)
  switch (FinalizationPayload_case()) {
    case kMessage: {
      _impl_.FinalizationPayload_.message_.Destroy();
      break;
    }
    case kJson: {
      _impl_.FinalizationPayload_.json_.Destroy();
      break;
    }
    case FINALIZATIONPAYLOAD_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = FINALIZATIONPAYLOAD_NOT_SET;
}


void UserAuthorityPayload::Clear() {
// @@protoc_insertion_point(message_clear_start:Journal.UserAuthorityPayload)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_FinalizationPayload();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserAuthorityPayload::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string message = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Journal.UserAuthorityPayload.message"));
        } else
          goto handle_unusual;
        continue;
      // string json = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_json();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Journal.UserAuthorityPayload.json"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserAuthorityPayload::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Journal.UserAuthorityPayload)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 10;
  if (_internal_has_message()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Journal.UserAuthorityPayload.message");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_message(), target);
  }

  // string json = 11;
  if (_internal_has_json()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_json().data(), static_cast<int>(this->_internal_json().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Journal.UserAuthorityPayload.json");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_json(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Journal.UserAuthorityPayload)
  return target;
}

size_t UserAuthorityPayload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Journal.UserAuthorityPayload)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (FinalizationPayload_case()) {
    // string message = 10;
    case kMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message());
      break;
    }
    // string json = 11;
    case kJson: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_json());
      break;
    }
    case FINALIZATIONPAYLOAD_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserAuthorityPayload::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserAuthorityPayload::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserAuthorityPayload::GetClassData() const { return &_class_data_; }


void UserAuthorityPayload::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserAuthorityPayload*>(&to_msg);
  auto& from = static_cast<const UserAuthorityPayload&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Journal.UserAuthorityPayload)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.FinalizationPayload_case()) {
    case kMessage: {
      _this->_internal_set_message(from._internal_message());
      break;
    }
    case kJson: {
      _this->_internal_set_json(from._internal_json());
      break;
    }
    case FINALIZATIONPAYLOAD_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserAuthorityPayload::CopyFrom(const UserAuthorityPayload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Journal.UserAuthorityPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserAuthorityPayload::IsInitialized() const {
  return true;
}

void UserAuthorityPayload::InternalSwap(UserAuthorityPayload* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.FinalizationPayload_, other->_impl_.FinalizationPayload_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserAuthorityPayload::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_journal_5foperations_5fcommon_2eproto_getter, &descriptor_table_journal_5foperations_5fcommon_2eproto_once,
      file_level_metadata_journal_5foperations_5fcommon_2eproto[28]);
}

// ===================================================================

class OpUserAuthorityData_V1::_Internal {
 public:
  static const ::Journal::UserAuthorityPayload& payload(const OpUserAuthorityData_V1* msg);
};

const ::Journal::UserAuthorityPayload&
OpUserAuthorityData_V1::_Internal::payload(const OpUserAuthorityData_V1* msg) {
  return *msg->_impl_.payload_;
}
OpUserAuthorityData_V1::OpUserAuthorityData_V1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Journal.OpUserAuthorityData.V1)
}
OpUserAuthorityData_V1::OpUserAuthorityData_V1(const OpUserAuthorityData_V1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OpUserAuthorityData_V1* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.authorityrequestedkey_){}
    , decltype(_impl_.requestorconnectionid_){}
    , decltype(_impl_.payload_){nullptr}
    , decltype(_impl_.coordinationeventtype_){}
    , decltype(_impl_.ordinal_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.authorityrequestedkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.authorityrequestedkey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_authorityrequestedkey().empty()) {
    _this->_impl_.authorityrequestedkey_.Set(from._internal_authorityrequestedkey(), 
      _this->GetArenaForAllocation());
  }
  _impl_.requestorconnectionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.requestorconnectionid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_requestorconnectionid().empty()) {
    _this->_impl_.requestorconnectionid_.Set(from._internal_requestorconnectionid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_payload()) {
    _this->_impl_.payload_ = new ::Journal::UserAuthorityPayload(*from._impl_.payload_);
  }
  ::memcpy(&_impl_.coordinationeventtype_, &from._impl_.coordinationeventtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ordinal_) -
    reinterpret_cast<char*>(&_impl_.coordinationeventtype_)) + sizeof(_impl_.ordinal_));
  // @@protoc_insertion_point(copy_constructor:Journal.OpUserAuthorityData.V1)
}

inline void OpUserAuthorityData_V1::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.authorityrequestedkey_){}
    , decltype(_impl_.requestorconnectionid_){}
    , decltype(_impl_.payload_){nullptr}
    , decltype(_impl_.coordinationeventtype_){0}
    , decltype(_impl_.ordinal_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.authorityrequestedkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.authorityrequestedkey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.requestorconnectionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.requestorconnectionid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OpUserAuthorityData_V1::~OpUserAuthorityData_V1() {
  // @@protoc_insertion_point(destructor:Journal.OpUserAuthorityData.V1)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OpUserAuthorityData_V1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.authorityrequestedkey_.Destroy();
  _impl_.requestorconnectionid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.payload_;
}

void OpUserAuthorityData_V1::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OpUserAuthorityData_V1::Clear() {
// @@protoc_insertion_point(message_clear_start:Journal.OpUserAuthorityData.V1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.authorityrequestedkey_.ClearToEmpty();
  _impl_.requestorconnectionid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.payload_ != nullptr) {
    delete _impl_.payload_;
  }
  _impl_.payload_ = nullptr;
  ::memset(&_impl_.coordinationeventtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.ordinal_) -
      reinterpret_cast<char*>(&_impl_.coordinationeventtype_)) + sizeof(_impl_.ordinal_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpUserAuthorityData_V1::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string authorityRequestedKey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_authorityrequestedkey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Journal.OpUserAuthorityData.V1.authorityRequestedKey"));
        } else
          goto handle_unusual;
        continue;
      // .Journal.OpUserAuthorityData.V1.AuthorityCoordinationEventEnum coordinationEventType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_coordinationeventtype(static_cast<::Journal::OpUserAuthorityData_V1_AuthorityCoordinationEventEnum>(val));
        } else
          goto handle_unusual;
        continue;
      // string requestorConnectionId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_requestorconnectionid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Journal.OpUserAuthorityData.V1.requestorConnectionId"));
        } else
          goto handle_unusual;
        continue;
      // .Journal.UserAuthorityPayload payload = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_payload(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ordinal = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.ordinal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OpUserAuthorityData_V1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Journal.OpUserAuthorityData.V1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string authorityRequestedKey = 1;
  if (!this->_internal_authorityrequestedkey().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_authorityrequestedkey().data(), static_cast<int>(this->_internal_authorityrequestedkey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Journal.OpUserAuthorityData.V1.authorityRequestedKey");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_authorityrequestedkey(), target);
  }

  // .Journal.OpUserAuthorityData.V1.AuthorityCoordinationEventEnum coordinationEventType = 2;
  if (this->_internal_coordinationeventtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_coordinationeventtype(), target);
  }

  // string requestorConnectionId = 3;
  if (!this->_internal_requestorconnectionid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_requestorconnectionid().data(), static_cast<int>(this->_internal_requestorconnectionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Journal.OpUserAuthorityData.V1.requestorConnectionId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_requestorconnectionid(), target);
  }

  // .Journal.UserAuthorityPayload payload = 4;
  if (this->_internal_has_payload()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::payload(this),
        _Internal::payload(this).GetCachedSize(), target, stream);
  }

  // int32 ordinal = 5;
  if (this->_internal_ordinal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_ordinal(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Journal.OpUserAuthorityData.V1)
  return target;
}

size_t OpUserAuthorityData_V1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Journal.OpUserAuthorityData.V1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string authorityRequestedKey = 1;
  if (!this->_internal_authorityrequestedkey().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_authorityrequestedkey());
  }

  // string requestorConnectionId = 3;
  if (!this->_internal_requestorconnectionid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_requestorconnectionid());
  }

  // .Journal.UserAuthorityPayload payload = 4;
  if (this->_internal_has_payload()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.payload_);
  }

  // .Journal.OpUserAuthorityData.V1.AuthorityCoordinationEventEnum coordinationEventType = 2;
  if (this->_internal_coordinationeventtype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_coordinationeventtype());
  }

  // int32 ordinal = 5;
  if (this->_internal_ordinal() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ordinal());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OpUserAuthorityData_V1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OpUserAuthorityData_V1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OpUserAuthorityData_V1::GetClassData() const { return &_class_data_; }


void OpUserAuthorityData_V1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OpUserAuthorityData_V1*>(&to_msg);
  auto& from = static_cast<const OpUserAuthorityData_V1&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Journal.OpUserAuthorityData.V1)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_authorityrequestedkey().empty()) {
    _this->_internal_set_authorityrequestedkey(from._internal_authorityrequestedkey());
  }
  if (!from._internal_requestorconnectionid().empty()) {
    _this->_internal_set_requestorconnectionid(from._internal_requestorconnectionid());
  }
  if (from._internal_has_payload()) {
    _this->_internal_mutable_payload()->::Journal::UserAuthorityPayload::MergeFrom(
        from._internal_payload());
  }
  if (from._internal_coordinationeventtype() != 0) {
    _this->_internal_set_coordinationeventtype(from._internal_coordinationeventtype());
  }
  if (from._internal_ordinal() != 0) {
    _this->_internal_set_ordinal(from._internal_ordinal());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OpUserAuthorityData_V1::CopyFrom(const OpUserAuthorityData_V1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Journal.OpUserAuthorityData.V1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpUserAuthorityData_V1::IsInitialized() const {
  return true;
}

void OpUserAuthorityData_V1::InternalSwap(OpUserAuthorityData_V1* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.authorityrequestedkey_, lhs_arena,
      &other->_impl_.authorityrequestedkey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.requestorconnectionid_, lhs_arena,
      &other->_impl_.requestorconnectionid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OpUserAuthorityData_V1, _impl_.ordinal_)
      + sizeof(OpUserAuthorityData_V1::_impl_.ordinal_)
      - PROTOBUF_FIELD_OFFSET(OpUserAuthorityData_V1, _impl_.payload_)>(
          reinterpret_cast<char*>(&_impl_.payload_),
          reinterpret_cast<char*>(&other->_impl_.payload_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OpUserAuthorityData_V1::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_journal_5foperations_5fcommon_2eproto_getter, &descriptor_table_journal_5foperations_5fcommon_2eproto_once,
      file_level_metadata_journal_5foperations_5fcommon_2eproto[29]);
}

// ===================================================================

class OpUserAuthorityData::_Internal {
 public:
  static const ::Journal::OpUserAuthorityData_V1& v1(const OpUserAuthorityData* msg);
};

const ::Journal::OpUserAuthorityData_V1&
OpUserAuthorityData::_Internal::v1(const OpUserAuthorityData* msg) {
  return *msg->_impl_.V_.v1_;
}
void OpUserAuthorityData::set_allocated_v1(::Journal::OpUserAuthorityData_V1* v1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_V();
  if (v1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(v1);
    if (message_arena != submessage_arena) {
      v1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, v1, submessage_arena);
    }
    set_has_v1();
    _impl_.V_.v1_ = v1;
  }
  // @@protoc_insertion_point(field_set_allocated:Journal.OpUserAuthorityData.v1)
}
OpUserAuthorityData::OpUserAuthorityData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Journal.OpUserAuthorityData)
}
OpUserAuthorityData::OpUserAuthorityData(const OpUserAuthorityData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OpUserAuthorityData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.V_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_V();
  switch (from.V_case()) {
    case kV1: {
      _this->_internal_mutable_v1()->::Journal::OpUserAuthorityData_V1::MergeFrom(
          from._internal_v1());
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Journal.OpUserAuthorityData)
}

inline void OpUserAuthorityData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.V_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_V();
}

OpUserAuthorityData::~OpUserAuthorityData() {
  // @@protoc_insertion_point(destructor:Journal.OpUserAuthorityData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OpUserAuthorityData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_V()) {
    clear_V();
  }
}

void OpUserAuthorityData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OpUserAuthorityData::clear_V() {
// @@protoc_insertion_point(one_of_clear_start:Journal.OpUserAuthorityData)
  switch (V_case()) {
    case kV1: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.V_.v1_;
      }
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = V_NOT_SET;
}


void OpUserAuthorityData::Clear() {
// @@protoc_insertion_point(message_clear_start:Journal.OpUserAuthorityData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_V();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpUserAuthorityData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Journal.OpUserAuthorityData.V1 v1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_v1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OpUserAuthorityData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Journal.OpUserAuthorityData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Journal.OpUserAuthorityData.V1 v1 = 1;
  if (_internal_has_v1()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::v1(this),
        _Internal::v1(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Journal.OpUserAuthorityData)
  return target;
}

size_t OpUserAuthorityData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Journal.OpUserAuthorityData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (V_case()) {
    // .Journal.OpUserAuthorityData.V1 v1 = 1;
    case kV1: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.V_.v1_);
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OpUserAuthorityData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OpUserAuthorityData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OpUserAuthorityData::GetClassData() const { return &_class_data_; }


void OpUserAuthorityData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OpUserAuthorityData*>(&to_msg);
  auto& from = static_cast<const OpUserAuthorityData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Journal.OpUserAuthorityData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.V_case()) {
    case kV1: {
      _this->_internal_mutable_v1()->::Journal::OpUserAuthorityData_V1::MergeFrom(
          from._internal_v1());
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OpUserAuthorityData::CopyFrom(const OpUserAuthorityData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Journal.OpUserAuthorityData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpUserAuthorityData::IsInitialized() const {
  return true;
}

void OpUserAuthorityData::InternalSwap(OpUserAuthorityData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.V_, other->_impl_.V_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata OpUserAuthorityData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_journal_5foperations_5fcommon_2eproto_getter, &descriptor_table_journal_5foperations_5fcommon_2eproto_once,
      file_level_metadata_journal_5foperations_5fcommon_2eproto[30]);
}

// ===================================================================

class OpSetPartHighlight_V1::_Internal {
 public:
  static const ::JournalData::ObjectId& objectid(const OpSetPartHighlight_V1* msg);
  static const ::JournalData::PartHighlightData& highlightdata(const OpSetPartHighlight_V1* msg);
};

const ::JournalData::ObjectId&
OpSetPartHighlight_V1::_Internal::objectid(const OpSetPartHighlight_V1* msg) {
  return *msg->_impl_.objectid_;
}
const ::JournalData::PartHighlightData&
OpSetPartHighlight_V1::_Internal::highlightdata(const OpSetPartHighlight_V1* msg) {
  return *msg->_impl_.highlightdata_;
}
void OpSetPartHighlight_V1::clear_objectid() {
  if (GetArenaForAllocation() == nullptr && _impl_.objectid_ != nullptr) {
    delete _impl_.objectid_;
  }
  _impl_.objectid_ = nullptr;
}
void OpSetPartHighlight_V1::clear_highlightdata() {
  if (GetArenaForAllocation() == nullptr && _impl_.highlightdata_ != nullptr) {
    delete _impl_.highlightdata_;
  }
  _impl_.highlightdata_ = nullptr;
}
OpSetPartHighlight_V1::OpSetPartHighlight_V1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Journal.OpSetPartHighlight.V1)
}
OpSetPartHighlight_V1::OpSetPartHighlight_V1(const OpSetPartHighlight_V1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OpSetPartHighlight_V1* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.objectid_){nullptr}
    , decltype(_impl_.highlightdata_){nullptr}
    , decltype(_impl_.set_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_objectid()) {
    _this->_impl_.objectid_ = new ::JournalData::ObjectId(*from._impl_.objectid_);
  }
  if (from._internal_has_highlightdata()) {
    _this->_impl_.highlightdata_ = new ::JournalData::PartHighlightData(*from._impl_.highlightdata_);
  }
  _this->_impl_.set_ = from._impl_.set_;
  // @@protoc_insertion_point(copy_constructor:Journal.OpSetPartHighlight.V1)
}

inline void OpSetPartHighlight_V1::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.objectid_){nullptr}
    , decltype(_impl_.highlightdata_){nullptr}
    , decltype(_impl_.set_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OpSetPartHighlight_V1::~OpSetPartHighlight_V1() {
  // @@protoc_insertion_point(destructor:Journal.OpSetPartHighlight.V1)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OpSetPartHighlight_V1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.objectid_;
  if (this != internal_default_instance()) delete _impl_.highlightdata_;
}

void OpSetPartHighlight_V1::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OpSetPartHighlight_V1::Clear() {
// @@protoc_insertion_point(message_clear_start:Journal.OpSetPartHighlight.V1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.objectid_ != nullptr) {
    delete _impl_.objectid_;
  }
  _impl_.objectid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.highlightdata_ != nullptr) {
    delete _impl_.highlightdata_;
  }
  _impl_.highlightdata_ = nullptr;
  _impl_.set_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpSetPartHighlight_V1::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .JournalData.ObjectId objectId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_objectid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool set = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.set_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .JournalData.PartHighlightData highlightData = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_highlightdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OpSetPartHighlight_V1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Journal.OpSetPartHighlight.V1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .JournalData.ObjectId objectId = 1;
  if (this->_internal_has_objectid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::objectid(this),
        _Internal::objectid(this).GetCachedSize(), target, stream);
  }

  // bool set = 2;
  if (this->_internal_set() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_set(), target);
  }

  // .JournalData.PartHighlightData highlightData = 10;
  if (this->_internal_has_highlightdata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::highlightdata(this),
        _Internal::highlightdata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Journal.OpSetPartHighlight.V1)
  return target;
}

size_t OpSetPartHighlight_V1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Journal.OpSetPartHighlight.V1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .JournalData.ObjectId objectId = 1;
  if (this->_internal_has_objectid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.objectid_);
  }

  // .JournalData.PartHighlightData highlightData = 10;
  if (this->_internal_has_highlightdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.highlightdata_);
  }

  // bool set = 2;
  if (this->_internal_set() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OpSetPartHighlight_V1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OpSetPartHighlight_V1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OpSetPartHighlight_V1::GetClassData() const { return &_class_data_; }


void OpSetPartHighlight_V1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OpSetPartHighlight_V1*>(&to_msg);
  auto& from = static_cast<const OpSetPartHighlight_V1&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Journal.OpSetPartHighlight.V1)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_objectid()) {
    _this->_internal_mutable_objectid()->::JournalData::ObjectId::MergeFrom(
        from._internal_objectid());
  }
  if (from._internal_has_highlightdata()) {
    _this->_internal_mutable_highlightdata()->::JournalData::PartHighlightData::MergeFrom(
        from._internal_highlightdata());
  }
  if (from._internal_set() != 0) {
    _this->_internal_set_set(from._internal_set());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OpSetPartHighlight_V1::CopyFrom(const OpSetPartHighlight_V1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Journal.OpSetPartHighlight.V1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpSetPartHighlight_V1::IsInitialized() const {
  return true;
}

void OpSetPartHighlight_V1::InternalSwap(OpSetPartHighlight_V1* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OpSetPartHighlight_V1, _impl_.set_)
      + sizeof(OpSetPartHighlight_V1::_impl_.set_)
      - PROTOBUF_FIELD_OFFSET(OpSetPartHighlight_V1, _impl_.objectid_)>(
          reinterpret_cast<char*>(&_impl_.objectid_),
          reinterpret_cast<char*>(&other->_impl_.objectid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OpSetPartHighlight_V1::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_journal_5foperations_5fcommon_2eproto_getter, &descriptor_table_journal_5foperations_5fcommon_2eproto_once,
      file_level_metadata_journal_5foperations_5fcommon_2eproto[31]);
}

// ===================================================================

class OpSetPartHighlight::_Internal {
 public:
  static const ::Journal::OpSetPartHighlight_V1& v1(const OpSetPartHighlight* msg);
};

const ::Journal::OpSetPartHighlight_V1&
OpSetPartHighlight::_Internal::v1(const OpSetPartHighlight* msg) {
  return *msg->_impl_.V_.v1_;
}
void OpSetPartHighlight::set_allocated_v1(::Journal::OpSetPartHighlight_V1* v1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_V();
  if (v1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(v1);
    if (message_arena != submessage_arena) {
      v1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, v1, submessage_arena);
    }
    set_has_v1();
    _impl_.V_.v1_ = v1;
  }
  // @@protoc_insertion_point(field_set_allocated:Journal.OpSetPartHighlight.v1)
}
OpSetPartHighlight::OpSetPartHighlight(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Journal.OpSetPartHighlight)
}
OpSetPartHighlight::OpSetPartHighlight(const OpSetPartHighlight& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OpSetPartHighlight* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.V_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_V();
  switch (from.V_case()) {
    case kV1: {
      _this->_internal_mutable_v1()->::Journal::OpSetPartHighlight_V1::MergeFrom(
          from._internal_v1());
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Journal.OpSetPartHighlight)
}

inline void OpSetPartHighlight::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.V_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_V();
}

OpSetPartHighlight::~OpSetPartHighlight() {
  // @@protoc_insertion_point(destructor:Journal.OpSetPartHighlight)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OpSetPartHighlight::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_V()) {
    clear_V();
  }
}

void OpSetPartHighlight::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OpSetPartHighlight::clear_V() {
// @@protoc_insertion_point(one_of_clear_start:Journal.OpSetPartHighlight)
  switch (V_case()) {
    case kV1: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.V_.v1_;
      }
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = V_NOT_SET;
}


void OpSetPartHighlight::Clear() {
// @@protoc_insertion_point(message_clear_start:Journal.OpSetPartHighlight)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_V();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpSetPartHighlight::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Journal.OpSetPartHighlight.V1 v1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_v1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OpSetPartHighlight::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Journal.OpSetPartHighlight)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Journal.OpSetPartHighlight.V1 v1 = 1;
  if (_internal_has_v1()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::v1(this),
        _Internal::v1(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Journal.OpSetPartHighlight)
  return target;
}

size_t OpSetPartHighlight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Journal.OpSetPartHighlight)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (V_case()) {
    // .Journal.OpSetPartHighlight.V1 v1 = 1;
    case kV1: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.V_.v1_);
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OpSetPartHighlight::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OpSetPartHighlight::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OpSetPartHighlight::GetClassData() const { return &_class_data_; }


void OpSetPartHighlight::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OpSetPartHighlight*>(&to_msg);
  auto& from = static_cast<const OpSetPartHighlight&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Journal.OpSetPartHighlight)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.V_case()) {
    case kV1: {
      _this->_internal_mutable_v1()->::Journal::OpSetPartHighlight_V1::MergeFrom(
          from._internal_v1());
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OpSetPartHighlight::CopyFrom(const OpSetPartHighlight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Journal.OpSetPartHighlight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpSetPartHighlight::IsInitialized() const {
  return true;
}

void OpSetPartHighlight::InternalSwap(OpSetPartHighlight* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.V_, other->_impl_.V_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata OpSetPartHighlight::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_journal_5foperations_5fcommon_2eproto_getter, &descriptor_table_journal_5foperations_5fcommon_2eproto_once,
      file_level_metadata_journal_5foperations_5fcommon_2eproto[32]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Journal
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Journal::OperationId*
Arena::CreateMaybeMessage< ::Journal::OperationId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Journal::OperationId >(arena);
}
template<> PROTOBUF_NOINLINE ::Journal::OperationReferenceCollection_ReferenceTimeSpan*
Arena::CreateMaybeMessage< ::Journal::OperationReferenceCollection_ReferenceTimeSpan >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Journal::OperationReferenceCollection_ReferenceTimeSpan >(arena);
}
template<> PROTOBUF_NOINLINE ::Journal::OperationReferenceCollection_ReferenceSinglesByConnection*
Arena::CreateMaybeMessage< ::Journal::OperationReferenceCollection_ReferenceSinglesByConnection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Journal::OperationReferenceCollection_ReferenceSinglesByConnection >(arena);
}
template<> PROTOBUF_NOINLINE ::Journal::OperationReferenceCollection*
Arena::CreateMaybeMessage< ::Journal::OperationReferenceCollection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Journal::OperationReferenceCollection >(arena);
}
template<> PROTOBUF_NOINLINE ::Journal::OpRemoveOps_V1*
Arena::CreateMaybeMessage< ::Journal::OpRemoveOps_V1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Journal::OpRemoveOps_V1 >(arena);
}
template<> PROTOBUF_NOINLINE ::Journal::OpRemoveOps_V2*
Arena::CreateMaybeMessage< ::Journal::OpRemoveOps_V2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Journal::OpRemoveOps_V2 >(arena);
}
template<> PROTOBUF_NOINLINE ::Journal::OpRemoveOps*
Arena::CreateMaybeMessage< ::Journal::OpRemoveOps >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Journal::OpRemoveOps >(arena);
}
template<> PROTOBUF_NOINLINE ::Journal::OpLine2d_V1*
Arena::CreateMaybeMessage< ::Journal::OpLine2d_V1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Journal::OpLine2d_V1 >(arena);
}
template<> PROTOBUF_NOINLINE ::Journal::OpLine2d*
Arena::CreateMaybeMessage< ::Journal::OpLine2d >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Journal::OpLine2d >(arena);
}
template<> PROTOBUF_NOINLINE ::Journal::OpText2d_V1*
Arena::CreateMaybeMessage< ::Journal::OpText2d_V1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Journal::OpText2d_V1 >(arena);
}
template<> PROTOBUF_NOINLINE ::Journal::OpText2d*
Arena::CreateMaybeMessage< ::Journal::OpText2d >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Journal::OpText2d >(arena);
}
template<> PROTOBUF_NOINLINE ::Journal::OpText2dModify_V1*
Arena::CreateMaybeMessage< ::Journal::OpText2dModify_V1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Journal::OpText2dModify_V1 >(arena);
}
template<> PROTOBUF_NOINLINE ::Journal::OpText2dModify*
Arena::CreateMaybeMessage< ::Journal::OpText2dModify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Journal::OpText2dModify >(arena);
}
template<> PROTOBUF_NOINLINE ::Journal::OpImage2d_V1*
Arena::CreateMaybeMessage< ::Journal::OpImage2d_V1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Journal::OpImage2d_V1 >(arena);
}
template<> PROTOBUF_NOINLINE ::Journal::OpImage2d*
Arena::CreateMaybeMessage< ::Journal::OpImage2d >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Journal::OpImage2d >(arena);
}
template<> PROTOBUF_NOINLINE ::Journal::OpLine3d_V1*
Arena::CreateMaybeMessage< ::Journal::OpLine3d_V1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Journal::OpLine3d_V1 >(arena);
}
template<> PROTOBUF_NOINLINE ::Journal::OpLine3d*
Arena::CreateMaybeMessage< ::Journal::OpLine3d >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Journal::OpLine3d >(arena);
}
template<> PROTOBUF_NOINLINE ::Journal::OpText3d_V1*
Arena::CreateMaybeMessage< ::Journal::OpText3d_V1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Journal::OpText3d_V1 >(arena);
}
template<> PROTOBUF_NOINLINE ::Journal::OpText3d*
Arena::CreateMaybeMessage< ::Journal::OpText3d >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Journal::OpText3d >(arena);
}
template<> PROTOBUF_NOINLINE ::Journal::OpText3dModify_V1*
Arena::CreateMaybeMessage< ::Journal::OpText3dModify_V1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Journal::OpText3dModify_V1 >(arena);
}
template<> PROTOBUF_NOINLINE ::Journal::OpText3dModify*
Arena::CreateMaybeMessage< ::Journal::OpText3dModify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Journal::OpText3dModify >(arena);
}
template<> PROTOBUF_NOINLINE ::Journal::OpImage3d_V1*
Arena::CreateMaybeMessage< ::Journal::OpImage3d_V1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Journal::OpImage3d_V1 >(arena);
}
template<> PROTOBUF_NOINLINE ::Journal::OpImage3d*
Arena::CreateMaybeMessage< ::Journal::OpImage3d >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Journal::OpImage3d >(arena);
}
template<> PROTOBUF_NOINLINE ::Journal::OpUpdatePropertyValue_V1*
Arena::CreateMaybeMessage< ::Journal::OpUpdatePropertyValue_V1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Journal::OpUpdatePropertyValue_V1 >(arena);
}
template<> PROTOBUF_NOINLINE ::Journal::OpUpdatePropertyValue*
Arena::CreateMaybeMessage< ::Journal::OpUpdatePropertyValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Journal::OpUpdatePropertyValue >(arena);
}
template<> PROTOBUF_NOINLINE ::Journal::OpDeclareProperty_V1*
Arena::CreateMaybeMessage< ::Journal::OpDeclareProperty_V1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Journal::OpDeclareProperty_V1 >(arena);
}
template<> PROTOBUF_NOINLINE ::Journal::OpDeclareProperty*
Arena::CreateMaybeMessage< ::Journal::OpDeclareProperty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Journal::OpDeclareProperty >(arena);
}
template<> PROTOBUF_NOINLINE ::Journal::OpBlindDataOp*
Arena::CreateMaybeMessage< ::Journal::OpBlindDataOp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Journal::OpBlindDataOp >(arena);
}
template<> PROTOBUF_NOINLINE ::Journal::UserAuthorityPayload*
Arena::CreateMaybeMessage< ::Journal::UserAuthorityPayload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Journal::UserAuthorityPayload >(arena);
}
template<> PROTOBUF_NOINLINE ::Journal::OpUserAuthorityData_V1*
Arena::CreateMaybeMessage< ::Journal::OpUserAuthorityData_V1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Journal::OpUserAuthorityData_V1 >(arena);
}
template<> PROTOBUF_NOINLINE ::Journal::OpUserAuthorityData*
Arena::CreateMaybeMessage< ::Journal::OpUserAuthorityData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Journal::OpUserAuthorityData >(arena);
}
template<> PROTOBUF_NOINLINE ::Journal::OpSetPartHighlight_V1*
Arena::CreateMaybeMessage< ::Journal::OpSetPartHighlight_V1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Journal::OpSetPartHighlight_V1 >(arena);
}
template<> PROTOBUF_NOINLINE ::Journal::OpSetPartHighlight*
Arena::CreateMaybeMessage< ::Journal::OpSetPartHighlight >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Journal::OpSetPartHighlight >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
