// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: journal_client.proto

#include "journal_client.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Journal {
PROTOBUF_CONSTEXPR JournalEntry::JournalEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.connectionid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.consumedtransientuniqueid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.time_)*/nullptr
  , /*decltype(_impl_.op_)*/nullptr} {}
struct JournalEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JournalEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~JournalEntryDefaultTypeInternal() {}
  union {
    JournalEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JournalEntryDefaultTypeInternal _JournalEntry_default_instance_;
PROTOBUF_CONSTEXPR Journal::Journal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entries_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct JournalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JournalDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~JournalDefaultTypeInternal() {}
  union {
    Journal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JournalDefaultTypeInternal _Journal_default_instance_;
PROTOBUF_CONSTEXPR OperationCollection::OperationCollection(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.operations_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OperationCollectionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OperationCollectionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OperationCollectionDefaultTypeInternal() {}
  union {
    OperationCollection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OperationCollectionDefaultTypeInternal _OperationCollection_default_instance_;
}  // namespace Journal
static ::_pb::Metadata file_level_metadata_journal_5fclient_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_journal_5fclient_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_journal_5fclient_2eproto = nullptr;

const uint32_t TableStruct_journal_5fclient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::Journal::JournalEntry, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Journal::JournalEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Journal::JournalEntry, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::Journal::JournalEntry, _impl_.connectionid_),
  PROTOBUF_FIELD_OFFSET(::Journal::JournalEntry, _impl_.op_),
  PROTOBUF_FIELD_OFFSET(::Journal::JournalEntry, _impl_.consumedtransientuniqueid_),
  PROTOBUF_FIELD_OFFSET(::Journal::JournalEntry, _impl_.id_),
  ~0u,
  0,
  ~0u,
  1,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Journal::Journal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Journal::Journal, _impl_.entries_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Journal::OperationCollection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Journal::OperationCollection, _impl_.operations_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, -1, sizeof(::Journal::JournalEntry)},
  { 16, -1, -1, sizeof(::Journal::Journal)},
  { 23, -1, -1, sizeof(::Journal::OperationCollection)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Journal::_JournalEntry_default_instance_._instance,
  &::Journal::_Journal_default_instance_._instance,
  &::Journal::_OperationCollection_default_instance_._instance,
};

const char descriptor_table_protodef_journal_5fclient_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024journal_client.proto\022\007Journal\032\037google/"
  "protobuf/timestamp.proto\032\037journal_operat"
  "ions_client.proto\"\326\001\n\014JournalEntry\022(\n\004ti"
  "me\030\002 \001(\0132\032.google.protobuf.Timestamp\022\031\n\014"
  "connectionId\030\003 \001(\tH\000\210\001\001\022\036\n\002op\030\004 \001(\0132\022.Jo"
  "urnal.Operation\022&\n\031consumedTransientUniq"
  "ueId\030\005 \001(\tH\001\210\001\001\022\n\n\002id\030\006 \001(\tB\017\n\r_connecti"
  "onIdB\034\n\032_consumedTransientUniqueId\"1\n\007Jo"
  "urnal\022&\n\007entries\030\001 \003(\0132\025.Journal.Journal"
  "Entry\"=\n\023OperationCollection\022&\n\noperatio"
  "ns\030\001 \003(\0132\022.Journal.OperationB\036\252\002\033Collab."
  "Proxy.Comm.LiveTypesb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_journal_5fclient_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_journal_5foperations_5fclient_2eproto,
};
static ::_pbi::once_flag descriptor_table_journal_5fclient_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_journal_5fclient_2eproto = {
    false, false, 468, descriptor_table_protodef_journal_5fclient_2eproto,
    "journal_client.proto",
    &descriptor_table_journal_5fclient_2eproto_once, descriptor_table_journal_5fclient_2eproto_deps, 2, 3,
    schemas, file_default_instances, TableStruct_journal_5fclient_2eproto::offsets,
    file_level_metadata_journal_5fclient_2eproto, file_level_enum_descriptors_journal_5fclient_2eproto,
    file_level_service_descriptors_journal_5fclient_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_journal_5fclient_2eproto_getter() {
  return &descriptor_table_journal_5fclient_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_journal_5fclient_2eproto(&descriptor_table_journal_5fclient_2eproto);
namespace Journal {

// ===================================================================

class JournalEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<JournalEntry>()._impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time(const JournalEntry* msg);
  static void set_has_connectionid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Journal::Operation& op(const JournalEntry* msg);
  static void set_has_consumedtransientuniqueid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
JournalEntry::_Internal::time(const JournalEntry* msg) {
  return *msg->_impl_.time_;
}
const ::Journal::Operation&
JournalEntry::_Internal::op(const JournalEntry* msg) {
  return *msg->_impl_.op_;
}
void JournalEntry::clear_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
}
void JournalEntry::clear_op() {
  if (GetArenaForAllocation() == nullptr && _impl_.op_ != nullptr) {
    delete _impl_.op_;
  }
  _impl_.op_ = nullptr;
}
JournalEntry::JournalEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Journal.JournalEntry)
}
JournalEntry::JournalEntry(const JournalEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  JournalEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.connectionid_){}
    , decltype(_impl_.consumedtransientuniqueid_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.op_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.connectionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.connectionid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_connectionid()) {
    _this->_impl_.connectionid_.Set(from._internal_connectionid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.consumedtransientuniqueid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.consumedtransientuniqueid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_consumedtransientuniqueid()) {
    _this->_impl_.consumedtransientuniqueid_.Set(from._internal_consumedtransientuniqueid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_time()) {
    _this->_impl_.time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_);
  }
  if (from._internal_has_op()) {
    _this->_impl_.op_ = new ::Journal::Operation(*from._impl_.op_);
  }
  // @@protoc_insertion_point(copy_constructor:Journal.JournalEntry)
}

inline void JournalEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.connectionid_){}
    , decltype(_impl_.consumedtransientuniqueid_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.op_){nullptr}
  };
  _impl_.connectionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.connectionid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.consumedtransientuniqueid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.consumedtransientuniqueid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

JournalEntry::~JournalEntry() {
  // @@protoc_insertion_point(destructor:Journal.JournalEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void JournalEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.connectionid_.Destroy();
  _impl_.consumedtransientuniqueid_.Destroy();
  _impl_.id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.time_;
  if (this != internal_default_instance()) delete _impl_.op_;
}

void JournalEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void JournalEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:Journal.JournalEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.connectionid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.consumedtransientuniqueid_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.op_ != nullptr) {
    delete _impl_.op_;
  }
  _impl_.op_ = nullptr;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JournalEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string connectionId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_connectionid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Journal.JournalEntry.connectionId"));
        } else
          goto handle_unusual;
        continue;
      // .Journal.Operation op = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_op(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string consumedTransientUniqueId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_consumedtransientuniqueid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Journal.JournalEntry.consumedTransientUniqueId"));
        } else
          goto handle_unusual;
        continue;
      // string id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Journal.JournalEntry.id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JournalEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Journal.JournalEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp time = 2;
  if (this->_internal_has_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::time(this),
        _Internal::time(this).GetCachedSize(), target, stream);
  }

  // optional string connectionId = 3;
  if (_internal_has_connectionid()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_connectionid().data(), static_cast<int>(this->_internal_connectionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Journal.JournalEntry.connectionId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_connectionid(), target);
  }

  // .Journal.Operation op = 4;
  if (this->_internal_has_op()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::op(this),
        _Internal::op(this).GetCachedSize(), target, stream);
  }

  // optional string consumedTransientUniqueId = 5;
  if (_internal_has_consumedtransientuniqueid()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_consumedtransientuniqueid().data(), static_cast<int>(this->_internal_consumedtransientuniqueid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Journal.JournalEntry.consumedTransientUniqueId");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_consumedtransientuniqueid(), target);
  }

  // string id = 6;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Journal.JournalEntry.id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Journal.JournalEntry)
  return target;
}

size_t JournalEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Journal.JournalEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string connectionId = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_connectionid());
    }

    // optional string consumedTransientUniqueId = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_consumedtransientuniqueid());
    }

  }
  // string id = 6;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .google.protobuf.Timestamp time = 2;
  if (this->_internal_has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_);
  }

  // .Journal.Operation op = 4;
  if (this->_internal_has_op()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.op_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JournalEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    JournalEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JournalEntry::GetClassData() const { return &_class_data_; }


void JournalEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<JournalEntry*>(&to_msg);
  auto& from = static_cast<const JournalEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Journal.JournalEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_connectionid(from._internal_connectionid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_consumedtransientuniqueid(from._internal_consumedtransientuniqueid());
    }
  }
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_has_time()) {
    _this->_internal_mutable_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_time());
  }
  if (from._internal_has_op()) {
    _this->_internal_mutable_op()->::Journal::Operation::MergeFrom(
        from._internal_op());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JournalEntry::CopyFrom(const JournalEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Journal.JournalEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JournalEntry::IsInitialized() const {
  return true;
}

void JournalEntry::InternalSwap(JournalEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.connectionid_, lhs_arena,
      &other->_impl_.connectionid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.consumedtransientuniqueid_, lhs_arena,
      &other->_impl_.consumedtransientuniqueid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JournalEntry, _impl_.op_)
      + sizeof(JournalEntry::_impl_.op_)
      - PROTOBUF_FIELD_OFFSET(JournalEntry, _impl_.time_)>(
          reinterpret_cast<char*>(&_impl_.time_),
          reinterpret_cast<char*>(&other->_impl_.time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JournalEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_journal_5fclient_2eproto_getter, &descriptor_table_journal_5fclient_2eproto_once,
      file_level_metadata_journal_5fclient_2eproto[0]);
}

// ===================================================================

class Journal::_Internal {
 public:
};

Journal::Journal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Journal.Journal)
}
Journal::Journal(const Journal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Journal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){from._impl_.entries_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Journal.Journal)
}

inline void Journal::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Journal::~Journal() {
  // @@protoc_insertion_point(destructor:Journal.Journal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Journal::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entries_.~RepeatedPtrField();
}

void Journal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Journal::Clear() {
// @@protoc_insertion_point(message_clear_start:Journal.Journal)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entries_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Journal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Journal.JournalEntry entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Journal::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Journal.Journal)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Journal.JournalEntry entries = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Journal.Journal)
  return target;
}

size_t Journal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Journal.Journal)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Journal.JournalEntry entries = 1;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->_impl_.entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Journal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Journal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Journal::GetClassData() const { return &_class_data_; }


void Journal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Journal*>(&to_msg);
  auto& from = static_cast<const Journal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Journal.Journal)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.entries_.MergeFrom(from._impl_.entries_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Journal::CopyFrom(const Journal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Journal.Journal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Journal::IsInitialized() const {
  return true;
}

void Journal::InternalSwap(Journal* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.entries_.InternalSwap(&other->_impl_.entries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Journal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_journal_5fclient_2eproto_getter, &descriptor_table_journal_5fclient_2eproto_once,
      file_level_metadata_journal_5fclient_2eproto[1]);
}

// ===================================================================

class OperationCollection::_Internal {
 public:
};

void OperationCollection::clear_operations() {
  _impl_.operations_.Clear();
}
OperationCollection::OperationCollection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Journal.OperationCollection)
}
OperationCollection::OperationCollection(const OperationCollection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OperationCollection* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.operations_){from._impl_.operations_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Journal.OperationCollection)
}

inline void OperationCollection::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.operations_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OperationCollection::~OperationCollection() {
  // @@protoc_insertion_point(destructor:Journal.OperationCollection)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OperationCollection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.operations_.~RepeatedPtrField();
}

void OperationCollection::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OperationCollection::Clear() {
// @@protoc_insertion_point(message_clear_start:Journal.OperationCollection)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.operations_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperationCollection::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Journal.Operation operations = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_operations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OperationCollection::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Journal.OperationCollection)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Journal.Operation operations = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_operations_size()); i < n; i++) {
    const auto& repfield = this->_internal_operations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Journal.OperationCollection)
  return target;
}

size_t OperationCollection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Journal.OperationCollection)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Journal.Operation operations = 1;
  total_size += 1UL * this->_internal_operations_size();
  for (const auto& msg : this->_impl_.operations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OperationCollection::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OperationCollection::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OperationCollection::GetClassData() const { return &_class_data_; }


void OperationCollection::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OperationCollection*>(&to_msg);
  auto& from = static_cast<const OperationCollection&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Journal.OperationCollection)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.operations_.MergeFrom(from._impl_.operations_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OperationCollection::CopyFrom(const OperationCollection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Journal.OperationCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationCollection::IsInitialized() const {
  return true;
}

void OperationCollection::InternalSwap(OperationCollection* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.operations_.InternalSwap(&other->_impl_.operations_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OperationCollection::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_journal_5fclient_2eproto_getter, &descriptor_table_journal_5fclient_2eproto_once,
      file_level_metadata_journal_5fclient_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Journal
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Journal::JournalEntry*
Arena::CreateMaybeMessage< ::Journal::JournalEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Journal::JournalEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::Journal::Journal*
Arena::CreateMaybeMessage< ::Journal::Journal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Journal::Journal >(arena);
}
template<> PROTOBUF_NOINLINE ::Journal::OperationCollection*
Arena::CreateMaybeMessage< ::Journal::OperationCollection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Journal::OperationCollection >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
