// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: journal_operations_client.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_journal_5foperations_5fclient_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_journal_5foperations_5fclient_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "journaldata.pb.h"
#include "journal_operations_common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_journal_5foperations_5fclient_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_journal_5foperations_5fclient_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_journal_5foperations_5fclient_2eproto;
namespace Journal {
class OpCreateObject;
struct OpCreateObjectDefaultTypeInternal;
extern OpCreateObjectDefaultTypeInternal _OpCreateObject_default_instance_;
class OpCreateObject_V2;
struct OpCreateObject_V2DefaultTypeInternal;
extern OpCreateObject_V2DefaultTypeInternal _OpCreateObject_V2_default_instance_;
class OpCreateObject_V3;
struct OpCreateObject_V3DefaultTypeInternal;
extern OpCreateObject_V3DefaultTypeInternal _OpCreateObject_V3_default_instance_;
class Operation;
struct OperationDefaultTypeInternal;
extern OperationDefaultTypeInternal _Operation_default_instance_;
}  // namespace Journal
PROTOBUF_NAMESPACE_OPEN
template<> ::Journal::OpCreateObject* Arena::CreateMaybeMessage<::Journal::OpCreateObject>(Arena*);
template<> ::Journal::OpCreateObject_V2* Arena::CreateMaybeMessage<::Journal::OpCreateObject_V2>(Arena*);
template<> ::Journal::OpCreateObject_V3* Arena::CreateMaybeMessage<::Journal::OpCreateObject_V3>(Arena*);
template<> ::Journal::Operation* Arena::CreateMaybeMessage<::Journal::Operation>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Journal {

enum Operation_OperationExecutionModeEnum : int {
  Operation_OperationExecutionModeEnum_Standard = 0,
  Operation_OperationExecutionModeEnum_BlockUndo = 1,
  Operation_OperationExecutionModeEnum_Automatic = 2,
  Operation_OperationExecutionModeEnum_Operation_OperationExecutionModeEnum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Operation_OperationExecutionModeEnum_Operation_OperationExecutionModeEnum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Operation_OperationExecutionModeEnum_IsValid(int value);
constexpr Operation_OperationExecutionModeEnum Operation_OperationExecutionModeEnum_OperationExecutionModeEnum_MIN = Operation_OperationExecutionModeEnum_Standard;
constexpr Operation_OperationExecutionModeEnum Operation_OperationExecutionModeEnum_OperationExecutionModeEnum_MAX = Operation_OperationExecutionModeEnum_Automatic;
constexpr int Operation_OperationExecutionModeEnum_OperationExecutionModeEnum_ARRAYSIZE = Operation_OperationExecutionModeEnum_OperationExecutionModeEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Operation_OperationExecutionModeEnum_descriptor();
template<typename T>
inline const std::string& Operation_OperationExecutionModeEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Operation_OperationExecutionModeEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Operation_OperationExecutionModeEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Operation_OperationExecutionModeEnum_descriptor(), enum_t_value);
}
inline bool Operation_OperationExecutionModeEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Operation_OperationExecutionModeEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Operation_OperationExecutionModeEnum>(
    Operation_OperationExecutionModeEnum_descriptor(), name, value);
}
// ===================================================================

class Operation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Journal.Operation) */ {
 public:
  inline Operation() : Operation(nullptr) {}
  ~Operation() override;
  explicit PROTOBUF_CONSTEXPR Operation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Operation(const Operation& from);
  Operation(Operation&& from) noexcept
    : Operation() {
    *this = ::std::move(from);
  }

  inline Operation& operator=(const Operation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Operation& operator=(Operation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Operation& default_instance() {
    return *internal_default_instance();
  }
  enum OpCase {
    kRemoveOps = 1,
    kLine2D = 5,
    kText2D = 6,
    kText2DModify = 91,
    kImage2D = 7,
    kLine3D = 10,
    kText3D = 11,
    kText3DModify = 92,
    kImage3D = 12,
    kCreateObject = 20,
    kSetPartHighlight = 61,
    kUpdatePropertyValue = 13,
    kDeclareProperty = 14,
    kUserAuthorityData = 16,
    kBlindOp = 70,
    OP_NOT_SET = 0,
  };

  static inline const Operation* internal_default_instance() {
    return reinterpret_cast<const Operation*>(
               &_Operation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Operation& a, Operation& b) {
    a.Swap(&b);
  }
  inline void Swap(Operation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Operation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Operation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Operation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Operation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Operation& from) {
    Operation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Operation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Journal.Operation";
  }
  protected:
  explicit Operation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Operation_OperationExecutionModeEnum OperationExecutionModeEnum;
  static constexpr OperationExecutionModeEnum Standard =
    Operation_OperationExecutionModeEnum_Standard;
  static constexpr OperationExecutionModeEnum BlockUndo =
    Operation_OperationExecutionModeEnum_BlockUndo;
  static constexpr OperationExecutionModeEnum Automatic =
    Operation_OperationExecutionModeEnum_Automatic;
  static inline bool OperationExecutionModeEnum_IsValid(int value) {
    return Operation_OperationExecutionModeEnum_IsValid(value);
  }
  static constexpr OperationExecutionModeEnum OperationExecutionModeEnum_MIN =
    Operation_OperationExecutionModeEnum_OperationExecutionModeEnum_MIN;
  static constexpr OperationExecutionModeEnum OperationExecutionModeEnum_MAX =
    Operation_OperationExecutionModeEnum_OperationExecutionModeEnum_MAX;
  static constexpr int OperationExecutionModeEnum_ARRAYSIZE =
    Operation_OperationExecutionModeEnum_OperationExecutionModeEnum_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  OperationExecutionModeEnum_descriptor() {
    return Operation_OperationExecutionModeEnum_descriptor();
  }
  template<typename T>
  static inline const std::string& OperationExecutionModeEnum_Name(T enum_t_value) {
    static_assert(::std::is_same<T, OperationExecutionModeEnum>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function OperationExecutionModeEnum_Name.");
    return Operation_OperationExecutionModeEnum_Name(enum_t_value);
  }
  static inline bool OperationExecutionModeEnum_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      OperationExecutionModeEnum* value) {
    return Operation_OperationExecutionModeEnum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kOperationBatchFieldNumber = 101,
    kOperationExecutionModeFieldNumber = 100,
    kRemoveOpsFieldNumber = 1,
    kLine2DFieldNumber = 5,
    kText2DFieldNumber = 6,
    kText2DModifyFieldNumber = 91,
    kImage2DFieldNumber = 7,
    kLine3DFieldNumber = 10,
    kText3DFieldNumber = 11,
    kText3DModifyFieldNumber = 92,
    kImage3DFieldNumber = 12,
    kCreateObjectFieldNumber = 20,
    kSetPartHighlightFieldNumber = 61,
    kUpdatePropertyValueFieldNumber = 13,
    kDeclarePropertyFieldNumber = 14,
    kUserAuthorityDataFieldNumber = 16,
    kBlindOpFieldNumber = 70,
  };
  // optional string OperationBatch = 101;
  bool has_operationbatch() const;
  private:
  bool _internal_has_operationbatch() const;
  public:
  void clear_operationbatch();
  const std::string& operationbatch() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_operationbatch(ArgT0&& arg0, ArgT... args);
  std::string* mutable_operationbatch();
  PROTOBUF_NODISCARD std::string* release_operationbatch();
  void set_allocated_operationbatch(std::string* operationbatch);
  private:
  const std::string& _internal_operationbatch() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_operationbatch(const std::string& value);
  std::string* _internal_mutable_operationbatch();
  public:

  // optional .Journal.Operation.OperationExecutionModeEnum OperationExecutionMode = 100;
  bool has_operationexecutionmode() const;
  private:
  bool _internal_has_operationexecutionmode() const;
  public:
  void clear_operationexecutionmode();
  ::Journal::Operation_OperationExecutionModeEnum operationexecutionmode() const;
  void set_operationexecutionmode(::Journal::Operation_OperationExecutionModeEnum value);
  private:
  ::Journal::Operation_OperationExecutionModeEnum _internal_operationexecutionmode() const;
  void _internal_set_operationexecutionmode(::Journal::Operation_OperationExecutionModeEnum value);
  public:

  // .Journal.OpRemoveOps removeOps = 1;
  bool has_removeops() const;
  private:
  bool _internal_has_removeops() const;
  public:
  void clear_removeops();
  const ::Journal::OpRemoveOps& removeops() const;
  PROTOBUF_NODISCARD ::Journal::OpRemoveOps* release_removeops();
  ::Journal::OpRemoveOps* mutable_removeops();
  void set_allocated_removeops(::Journal::OpRemoveOps* removeops);
  private:
  const ::Journal::OpRemoveOps& _internal_removeops() const;
  ::Journal::OpRemoveOps* _internal_mutable_removeops();
  public:
  void unsafe_arena_set_allocated_removeops(
      ::Journal::OpRemoveOps* removeops);
  ::Journal::OpRemoveOps* unsafe_arena_release_removeops();

  // .Journal.OpLine2d line2d = 5;
  bool has_line2d() const;
  private:
  bool _internal_has_line2d() const;
  public:
  void clear_line2d();
  const ::Journal::OpLine2d& line2d() const;
  PROTOBUF_NODISCARD ::Journal::OpLine2d* release_line2d();
  ::Journal::OpLine2d* mutable_line2d();
  void set_allocated_line2d(::Journal::OpLine2d* line2d);
  private:
  const ::Journal::OpLine2d& _internal_line2d() const;
  ::Journal::OpLine2d* _internal_mutable_line2d();
  public:
  void unsafe_arena_set_allocated_line2d(
      ::Journal::OpLine2d* line2d);
  ::Journal::OpLine2d* unsafe_arena_release_line2d();

  // .Journal.OpText2d text2d = 6;
  bool has_text2d() const;
  private:
  bool _internal_has_text2d() const;
  public:
  void clear_text2d();
  const ::Journal::OpText2d& text2d() const;
  PROTOBUF_NODISCARD ::Journal::OpText2d* release_text2d();
  ::Journal::OpText2d* mutable_text2d();
  void set_allocated_text2d(::Journal::OpText2d* text2d);
  private:
  const ::Journal::OpText2d& _internal_text2d() const;
  ::Journal::OpText2d* _internal_mutable_text2d();
  public:
  void unsafe_arena_set_allocated_text2d(
      ::Journal::OpText2d* text2d);
  ::Journal::OpText2d* unsafe_arena_release_text2d();

  // .Journal.OpText2dModify text2dModify = 91;
  bool has_text2dmodify() const;
  private:
  bool _internal_has_text2dmodify() const;
  public:
  void clear_text2dmodify();
  const ::Journal::OpText2dModify& text2dmodify() const;
  PROTOBUF_NODISCARD ::Journal::OpText2dModify* release_text2dmodify();
  ::Journal::OpText2dModify* mutable_text2dmodify();
  void set_allocated_text2dmodify(::Journal::OpText2dModify* text2dmodify);
  private:
  const ::Journal::OpText2dModify& _internal_text2dmodify() const;
  ::Journal::OpText2dModify* _internal_mutable_text2dmodify();
  public:
  void unsafe_arena_set_allocated_text2dmodify(
      ::Journal::OpText2dModify* text2dmodify);
  ::Journal::OpText2dModify* unsafe_arena_release_text2dmodify();

  // .Journal.OpImage2d image2d = 7;
  bool has_image2d() const;
  private:
  bool _internal_has_image2d() const;
  public:
  void clear_image2d();
  const ::Journal::OpImage2d& image2d() const;
  PROTOBUF_NODISCARD ::Journal::OpImage2d* release_image2d();
  ::Journal::OpImage2d* mutable_image2d();
  void set_allocated_image2d(::Journal::OpImage2d* image2d);
  private:
  const ::Journal::OpImage2d& _internal_image2d() const;
  ::Journal::OpImage2d* _internal_mutable_image2d();
  public:
  void unsafe_arena_set_allocated_image2d(
      ::Journal::OpImage2d* image2d);
  ::Journal::OpImage2d* unsafe_arena_release_image2d();

  // .Journal.OpLine3d line3d = 10;
  bool has_line3d() const;
  private:
  bool _internal_has_line3d() const;
  public:
  void clear_line3d();
  const ::Journal::OpLine3d& line3d() const;
  PROTOBUF_NODISCARD ::Journal::OpLine3d* release_line3d();
  ::Journal::OpLine3d* mutable_line3d();
  void set_allocated_line3d(::Journal::OpLine3d* line3d);
  private:
  const ::Journal::OpLine3d& _internal_line3d() const;
  ::Journal::OpLine3d* _internal_mutable_line3d();
  public:
  void unsafe_arena_set_allocated_line3d(
      ::Journal::OpLine3d* line3d);
  ::Journal::OpLine3d* unsafe_arena_release_line3d();

  // .Journal.OpText3d text3d = 11;
  bool has_text3d() const;
  private:
  bool _internal_has_text3d() const;
  public:
  void clear_text3d();
  const ::Journal::OpText3d& text3d() const;
  PROTOBUF_NODISCARD ::Journal::OpText3d* release_text3d();
  ::Journal::OpText3d* mutable_text3d();
  void set_allocated_text3d(::Journal::OpText3d* text3d);
  private:
  const ::Journal::OpText3d& _internal_text3d() const;
  ::Journal::OpText3d* _internal_mutable_text3d();
  public:
  void unsafe_arena_set_allocated_text3d(
      ::Journal::OpText3d* text3d);
  ::Journal::OpText3d* unsafe_arena_release_text3d();

  // .Journal.OpText3dModify text3dModify = 92;
  bool has_text3dmodify() const;
  private:
  bool _internal_has_text3dmodify() const;
  public:
  void clear_text3dmodify();
  const ::Journal::OpText3dModify& text3dmodify() const;
  PROTOBUF_NODISCARD ::Journal::OpText3dModify* release_text3dmodify();
  ::Journal::OpText3dModify* mutable_text3dmodify();
  void set_allocated_text3dmodify(::Journal::OpText3dModify* text3dmodify);
  private:
  const ::Journal::OpText3dModify& _internal_text3dmodify() const;
  ::Journal::OpText3dModify* _internal_mutable_text3dmodify();
  public:
  void unsafe_arena_set_allocated_text3dmodify(
      ::Journal::OpText3dModify* text3dmodify);
  ::Journal::OpText3dModify* unsafe_arena_release_text3dmodify();

  // .Journal.OpImage3d image3d = 12;
  bool has_image3d() const;
  private:
  bool _internal_has_image3d() const;
  public:
  void clear_image3d();
  const ::Journal::OpImage3d& image3d() const;
  PROTOBUF_NODISCARD ::Journal::OpImage3d* release_image3d();
  ::Journal::OpImage3d* mutable_image3d();
  void set_allocated_image3d(::Journal::OpImage3d* image3d);
  private:
  const ::Journal::OpImage3d& _internal_image3d() const;
  ::Journal::OpImage3d* _internal_mutable_image3d();
  public:
  void unsafe_arena_set_allocated_image3d(
      ::Journal::OpImage3d* image3d);
  ::Journal::OpImage3d* unsafe_arena_release_image3d();

  // .Journal.OpCreateObject createObject = 20;
  bool has_createobject() const;
  private:
  bool _internal_has_createobject() const;
  public:
  void clear_createobject();
  const ::Journal::OpCreateObject& createobject() const;
  PROTOBUF_NODISCARD ::Journal::OpCreateObject* release_createobject();
  ::Journal::OpCreateObject* mutable_createobject();
  void set_allocated_createobject(::Journal::OpCreateObject* createobject);
  private:
  const ::Journal::OpCreateObject& _internal_createobject() const;
  ::Journal::OpCreateObject* _internal_mutable_createobject();
  public:
  void unsafe_arena_set_allocated_createobject(
      ::Journal::OpCreateObject* createobject);
  ::Journal::OpCreateObject* unsafe_arena_release_createobject();

  // .Journal.OpSetPartHighlight setPartHighlight = 61;
  bool has_setparthighlight() const;
  private:
  bool _internal_has_setparthighlight() const;
  public:
  void clear_setparthighlight();
  const ::Journal::OpSetPartHighlight& setparthighlight() const;
  PROTOBUF_NODISCARD ::Journal::OpSetPartHighlight* release_setparthighlight();
  ::Journal::OpSetPartHighlight* mutable_setparthighlight();
  void set_allocated_setparthighlight(::Journal::OpSetPartHighlight* setparthighlight);
  private:
  const ::Journal::OpSetPartHighlight& _internal_setparthighlight() const;
  ::Journal::OpSetPartHighlight* _internal_mutable_setparthighlight();
  public:
  void unsafe_arena_set_allocated_setparthighlight(
      ::Journal::OpSetPartHighlight* setparthighlight);
  ::Journal::OpSetPartHighlight* unsafe_arena_release_setparthighlight();

  // .Journal.OpUpdatePropertyValue updatePropertyValue = 13;
  bool has_updatepropertyvalue() const;
  private:
  bool _internal_has_updatepropertyvalue() const;
  public:
  void clear_updatepropertyvalue();
  const ::Journal::OpUpdatePropertyValue& updatepropertyvalue() const;
  PROTOBUF_NODISCARD ::Journal::OpUpdatePropertyValue* release_updatepropertyvalue();
  ::Journal::OpUpdatePropertyValue* mutable_updatepropertyvalue();
  void set_allocated_updatepropertyvalue(::Journal::OpUpdatePropertyValue* updatepropertyvalue);
  private:
  const ::Journal::OpUpdatePropertyValue& _internal_updatepropertyvalue() const;
  ::Journal::OpUpdatePropertyValue* _internal_mutable_updatepropertyvalue();
  public:
  void unsafe_arena_set_allocated_updatepropertyvalue(
      ::Journal::OpUpdatePropertyValue* updatepropertyvalue);
  ::Journal::OpUpdatePropertyValue* unsafe_arena_release_updatepropertyvalue();

  // .Journal.OpDeclareProperty declareProperty = 14;
  bool has_declareproperty() const;
  private:
  bool _internal_has_declareproperty() const;
  public:
  void clear_declareproperty();
  const ::Journal::OpDeclareProperty& declareproperty() const;
  PROTOBUF_NODISCARD ::Journal::OpDeclareProperty* release_declareproperty();
  ::Journal::OpDeclareProperty* mutable_declareproperty();
  void set_allocated_declareproperty(::Journal::OpDeclareProperty* declareproperty);
  private:
  const ::Journal::OpDeclareProperty& _internal_declareproperty() const;
  ::Journal::OpDeclareProperty* _internal_mutable_declareproperty();
  public:
  void unsafe_arena_set_allocated_declareproperty(
      ::Journal::OpDeclareProperty* declareproperty);
  ::Journal::OpDeclareProperty* unsafe_arena_release_declareproperty();

  // .Journal.OpUserAuthorityData userAuthorityData = 16;
  bool has_userauthoritydata() const;
  private:
  bool _internal_has_userauthoritydata() const;
  public:
  void clear_userauthoritydata();
  const ::Journal::OpUserAuthorityData& userauthoritydata() const;
  PROTOBUF_NODISCARD ::Journal::OpUserAuthorityData* release_userauthoritydata();
  ::Journal::OpUserAuthorityData* mutable_userauthoritydata();
  void set_allocated_userauthoritydata(::Journal::OpUserAuthorityData* userauthoritydata);
  private:
  const ::Journal::OpUserAuthorityData& _internal_userauthoritydata() const;
  ::Journal::OpUserAuthorityData* _internal_mutable_userauthoritydata();
  public:
  void unsafe_arena_set_allocated_userauthoritydata(
      ::Journal::OpUserAuthorityData* userauthoritydata);
  ::Journal::OpUserAuthorityData* unsafe_arena_release_userauthoritydata();

  // .Journal.OpBlindDataOp blindOp = 70;
  bool has_blindop() const;
  private:
  bool _internal_has_blindop() const;
  public:
  void clear_blindop();
  const ::Journal::OpBlindDataOp& blindop() const;
  PROTOBUF_NODISCARD ::Journal::OpBlindDataOp* release_blindop();
  ::Journal::OpBlindDataOp* mutable_blindop();
  void set_allocated_blindop(::Journal::OpBlindDataOp* blindop);
  private:
  const ::Journal::OpBlindDataOp& _internal_blindop() const;
  ::Journal::OpBlindDataOp* _internal_mutable_blindop();
  public:
  void unsafe_arena_set_allocated_blindop(
      ::Journal::OpBlindDataOp* blindop);
  ::Journal::OpBlindDataOp* unsafe_arena_release_blindop();

  void clear_Op();
  OpCase Op_case() const;
  // @@protoc_insertion_point(class_scope:Journal.Operation)
 private:
  class _Internal;
  void set_has_removeops();
  void set_has_line2d();
  void set_has_text2d();
  void set_has_text2dmodify();
  void set_has_image2d();
  void set_has_line3d();
  void set_has_text3d();
  void set_has_text3dmodify();
  void set_has_image3d();
  void set_has_createobject();
  void set_has_setparthighlight();
  void set_has_updatepropertyvalue();
  void set_has_declareproperty();
  void set_has_userauthoritydata();
  void set_has_blindop();

  inline bool has_Op() const;
  inline void clear_has_Op();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr operationbatch_;
    int operationexecutionmode_;
    union OpUnion {
      constexpr OpUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::Journal::OpRemoveOps* removeops_;
      ::Journal::OpLine2d* line2d_;
      ::Journal::OpText2d* text2d_;
      ::Journal::OpText2dModify* text2dmodify_;
      ::Journal::OpImage2d* image2d_;
      ::Journal::OpLine3d* line3d_;
      ::Journal::OpText3d* text3d_;
      ::Journal::OpText3dModify* text3dmodify_;
      ::Journal::OpImage3d* image3d_;
      ::Journal::OpCreateObject* createobject_;
      ::Journal::OpSetPartHighlight* setparthighlight_;
      ::Journal::OpUpdatePropertyValue* updatepropertyvalue_;
      ::Journal::OpDeclareProperty* declareproperty_;
      ::Journal::OpUserAuthorityData* userauthoritydata_;
      ::Journal::OpBlindDataOp* blindop_;
    } Op_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_journal_5foperations_5fclient_2eproto;
};
// -------------------------------------------------------------------

class OpCreateObject_V2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Journal.OpCreateObject.V2) */ {
 public:
  inline OpCreateObject_V2() : OpCreateObject_V2(nullptr) {}
  ~OpCreateObject_V2() override;
  explicit PROTOBUF_CONSTEXPR OpCreateObject_V2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OpCreateObject_V2(const OpCreateObject_V2& from);
  OpCreateObject_V2(OpCreateObject_V2&& from) noexcept
    : OpCreateObject_V2() {
    *this = ::std::move(from);
  }

  inline OpCreateObject_V2& operator=(const OpCreateObject_V2& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpCreateObject_V2& operator=(OpCreateObject_V2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OpCreateObject_V2& default_instance() {
    return *internal_default_instance();
  }
  static inline const OpCreateObject_V2* internal_default_instance() {
    return reinterpret_cast<const OpCreateObject_V2*>(
               &_OpCreateObject_V2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OpCreateObject_V2& a, OpCreateObject_V2& b) {
    a.Swap(&b);
  }
  inline void Swap(OpCreateObject_V2* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpCreateObject_V2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OpCreateObject_V2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OpCreateObject_V2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OpCreateObject_V2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OpCreateObject_V2& from) {
    OpCreateObject_V2::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpCreateObject_V2* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Journal.OpCreateObject.V2";
  }
  protected:
  explicit OpCreateObject_V2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNewObjectIdFieldNumber = 1,
    kCreatorIdFieldNumber = 7,
    kContentIdFieldNumber = 2,
  };
  // string newObjectId = 1;
  void clear_newobjectid();
  const std::string& newobjectid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_newobjectid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_newobjectid();
  PROTOBUF_NODISCARD std::string* release_newobjectid();
  void set_allocated_newobjectid(std::string* newobjectid);
  private:
  const std::string& _internal_newobjectid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_newobjectid(const std::string& value);
  std::string* _internal_mutable_newobjectid();
  public:

  // string creatorId = 7;
  void clear_creatorid();
  const std::string& creatorid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_creatorid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_creatorid();
  PROTOBUF_NODISCARD std::string* release_creatorid();
  void set_allocated_creatorid(std::string* creatorid);
  private:
  const std::string& _internal_creatorid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_creatorid(const std::string& value);
  std::string* _internal_mutable_creatorid();
  public:

  // .JournalData.ObjectType contentId = 2;
  bool has_contentid() const;
  private:
  bool _internal_has_contentid() const;
  public:
  void clear_contentid();
  const ::JournalData::ObjectType& contentid() const;
  PROTOBUF_NODISCARD ::JournalData::ObjectType* release_contentid();
  ::JournalData::ObjectType* mutable_contentid();
  void set_allocated_contentid(::JournalData::ObjectType* contentid);
  private:
  const ::JournalData::ObjectType& _internal_contentid() const;
  ::JournalData::ObjectType* _internal_mutable_contentid();
  public:
  void unsafe_arena_set_allocated_contentid(
      ::JournalData::ObjectType* contentid);
  ::JournalData::ObjectType* unsafe_arena_release_contentid();

  // @@protoc_insertion_point(class_scope:Journal.OpCreateObject.V2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr newobjectid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr creatorid_;
    ::JournalData::ObjectType* contentid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_journal_5foperations_5fclient_2eproto;
};
// -------------------------------------------------------------------

class OpCreateObject_V3 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Journal.OpCreateObject.V3) */ {
 public:
  inline OpCreateObject_V3() : OpCreateObject_V3(nullptr) {}
  ~OpCreateObject_V3() override;
  explicit PROTOBUF_CONSTEXPR OpCreateObject_V3(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OpCreateObject_V3(const OpCreateObject_V3& from);
  OpCreateObject_V3(OpCreateObject_V3&& from) noexcept
    : OpCreateObject_V3() {
    *this = ::std::move(from);
  }

  inline OpCreateObject_V3& operator=(const OpCreateObject_V3& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpCreateObject_V3& operator=(OpCreateObject_V3&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OpCreateObject_V3& default_instance() {
    return *internal_default_instance();
  }
  static inline const OpCreateObject_V3* internal_default_instance() {
    return reinterpret_cast<const OpCreateObject_V3*>(
               &_OpCreateObject_V3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(OpCreateObject_V3& a, OpCreateObject_V3& b) {
    a.Swap(&b);
  }
  inline void Swap(OpCreateObject_V3* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpCreateObject_V3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OpCreateObject_V3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OpCreateObject_V3>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OpCreateObject_V3& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OpCreateObject_V3& from) {
    OpCreateObject_V3::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpCreateObject_V3* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Journal.OpCreateObject.V3";
  }
  protected:
  explicit OpCreateObject_V3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContextPathFieldNumber = 1,
    kCreatorIdFieldNumber = 7,
    kContentIdFieldNumber = 2,
  };
  // string contextPath = 1;
  void clear_contextpath();
  const std::string& contextpath() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_contextpath(ArgT0&& arg0, ArgT... args);
  std::string* mutable_contextpath();
  PROTOBUF_NODISCARD std::string* release_contextpath();
  void set_allocated_contextpath(std::string* contextpath);
  private:
  const std::string& _internal_contextpath() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contextpath(const std::string& value);
  std::string* _internal_mutable_contextpath();
  public:

  // string creatorId = 7;
  void clear_creatorid();
  const std::string& creatorid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_creatorid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_creatorid();
  PROTOBUF_NODISCARD std::string* release_creatorid();
  void set_allocated_creatorid(std::string* creatorid);
  private:
  const std::string& _internal_creatorid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_creatorid(const std::string& value);
  std::string* _internal_mutable_creatorid();
  public:

  // .JournalData.ObjectType contentId = 2;
  bool has_contentid() const;
  private:
  bool _internal_has_contentid() const;
  public:
  void clear_contentid();
  const ::JournalData::ObjectType& contentid() const;
  PROTOBUF_NODISCARD ::JournalData::ObjectType* release_contentid();
  ::JournalData::ObjectType* mutable_contentid();
  void set_allocated_contentid(::JournalData::ObjectType* contentid);
  private:
  const ::JournalData::ObjectType& _internal_contentid() const;
  ::JournalData::ObjectType* _internal_mutable_contentid();
  public:
  void unsafe_arena_set_allocated_contentid(
      ::JournalData::ObjectType* contentid);
  ::JournalData::ObjectType* unsafe_arena_release_contentid();

  // @@protoc_insertion_point(class_scope:Journal.OpCreateObject.V3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contextpath_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr creatorid_;
    ::JournalData::ObjectType* contentid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_journal_5foperations_5fclient_2eproto;
};
// -------------------------------------------------------------------

class OpCreateObject final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Journal.OpCreateObject) */ {
 public:
  inline OpCreateObject() : OpCreateObject(nullptr) {}
  ~OpCreateObject() override;
  explicit PROTOBUF_CONSTEXPR OpCreateObject(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OpCreateObject(const OpCreateObject& from);
  OpCreateObject(OpCreateObject&& from) noexcept
    : OpCreateObject() {
    *this = ::std::move(from);
  }

  inline OpCreateObject& operator=(const OpCreateObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpCreateObject& operator=(OpCreateObject&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OpCreateObject& default_instance() {
    return *internal_default_instance();
  }
  enum VCase {
    kV2 = 2,
    kV3 = 3,
    V_NOT_SET = 0,
  };

  static inline const OpCreateObject* internal_default_instance() {
    return reinterpret_cast<const OpCreateObject*>(
               &_OpCreateObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(OpCreateObject& a, OpCreateObject& b) {
    a.Swap(&b);
  }
  inline void Swap(OpCreateObject* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpCreateObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OpCreateObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OpCreateObject>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OpCreateObject& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OpCreateObject& from) {
    OpCreateObject::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpCreateObject* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Journal.OpCreateObject";
  }
  protected:
  explicit OpCreateObject(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef OpCreateObject_V2 V2;
  typedef OpCreateObject_V3 V3;

  // accessors -------------------------------------------------------

  enum : int {
    kV2FieldNumber = 2,
    kV3FieldNumber = 3,
  };
  // .Journal.OpCreateObject.V2 v2 = 2;
  bool has_v2() const;
  private:
  bool _internal_has_v2() const;
  public:
  void clear_v2();
  const ::Journal::OpCreateObject_V2& v2() const;
  PROTOBUF_NODISCARD ::Journal::OpCreateObject_V2* release_v2();
  ::Journal::OpCreateObject_V2* mutable_v2();
  void set_allocated_v2(::Journal::OpCreateObject_V2* v2);
  private:
  const ::Journal::OpCreateObject_V2& _internal_v2() const;
  ::Journal::OpCreateObject_V2* _internal_mutable_v2();
  public:
  void unsafe_arena_set_allocated_v2(
      ::Journal::OpCreateObject_V2* v2);
  ::Journal::OpCreateObject_V2* unsafe_arena_release_v2();

  // .Journal.OpCreateObject.V3 v3 = 3;
  bool has_v3() const;
  private:
  bool _internal_has_v3() const;
  public:
  void clear_v3();
  const ::Journal::OpCreateObject_V3& v3() const;
  PROTOBUF_NODISCARD ::Journal::OpCreateObject_V3* release_v3();
  ::Journal::OpCreateObject_V3* mutable_v3();
  void set_allocated_v3(::Journal::OpCreateObject_V3* v3);
  private:
  const ::Journal::OpCreateObject_V3& _internal_v3() const;
  ::Journal::OpCreateObject_V3* _internal_mutable_v3();
  public:
  void unsafe_arena_set_allocated_v3(
      ::Journal::OpCreateObject_V3* v3);
  ::Journal::OpCreateObject_V3* unsafe_arena_release_v3();

  void clear_V();
  VCase V_case() const;
  // @@protoc_insertion_point(class_scope:Journal.OpCreateObject)
 private:
  class _Internal;
  void set_has_v2();
  void set_has_v3();

  inline bool has_V() const;
  inline void clear_has_V();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union VUnion {
      constexpr VUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::Journal::OpCreateObject_V2* v2_;
      ::Journal::OpCreateObject_V3* v3_;
    } V_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_journal_5foperations_5fclient_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Operation

// optional .Journal.Operation.OperationExecutionModeEnum OperationExecutionMode = 100;
inline bool Operation::_internal_has_operationexecutionmode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Operation::has_operationexecutionmode() const {
  return _internal_has_operationexecutionmode();
}
inline void Operation::clear_operationexecutionmode() {
  _impl_.operationexecutionmode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::Journal::Operation_OperationExecutionModeEnum Operation::_internal_operationexecutionmode() const {
  return static_cast< ::Journal::Operation_OperationExecutionModeEnum >(_impl_.operationexecutionmode_);
}
inline ::Journal::Operation_OperationExecutionModeEnum Operation::operationexecutionmode() const {
  // @@protoc_insertion_point(field_get:Journal.Operation.OperationExecutionMode)
  return _internal_operationexecutionmode();
}
inline void Operation::_internal_set_operationexecutionmode(::Journal::Operation_OperationExecutionModeEnum value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.operationexecutionmode_ = value;
}
inline void Operation::set_operationexecutionmode(::Journal::Operation_OperationExecutionModeEnum value) {
  _internal_set_operationexecutionmode(value);
  // @@protoc_insertion_point(field_set:Journal.Operation.OperationExecutionMode)
}

// optional string OperationBatch = 101;
inline bool Operation::_internal_has_operationbatch() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Operation::has_operationbatch() const {
  return _internal_has_operationbatch();
}
inline void Operation::clear_operationbatch() {
  _impl_.operationbatch_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Operation::operationbatch() const {
  // @@protoc_insertion_point(field_get:Journal.Operation.OperationBatch)
  return _internal_operationbatch();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Operation::set_operationbatch(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.operationbatch_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Journal.Operation.OperationBatch)
}
inline std::string* Operation::mutable_operationbatch() {
  std::string* _s = _internal_mutable_operationbatch();
  // @@protoc_insertion_point(field_mutable:Journal.Operation.OperationBatch)
  return _s;
}
inline const std::string& Operation::_internal_operationbatch() const {
  return _impl_.operationbatch_.Get();
}
inline void Operation::_internal_set_operationbatch(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.operationbatch_.Set(value, GetArenaForAllocation());
}
inline std::string* Operation::_internal_mutable_operationbatch() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.operationbatch_.Mutable(GetArenaForAllocation());
}
inline std::string* Operation::release_operationbatch() {
  // @@protoc_insertion_point(field_release:Journal.Operation.OperationBatch)
  if (!_internal_has_operationbatch()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.operationbatch_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.operationbatch_.IsDefault()) {
    _impl_.operationbatch_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Operation::set_allocated_operationbatch(std::string* operationbatch) {
  if (operationbatch != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.operationbatch_.SetAllocated(operationbatch, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.operationbatch_.IsDefault()) {
    _impl_.operationbatch_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Journal.Operation.OperationBatch)
}

// .Journal.OpRemoveOps removeOps = 1;
inline bool Operation::_internal_has_removeops() const {
  return Op_case() == kRemoveOps;
}
inline bool Operation::has_removeops() const {
  return _internal_has_removeops();
}
inline void Operation::set_has_removeops() {
  _impl_._oneof_case_[0] = kRemoveOps;
}
inline ::Journal::OpRemoveOps* Operation::release_removeops() {
  // @@protoc_insertion_point(field_release:Journal.Operation.removeOps)
  if (_internal_has_removeops()) {
    clear_has_Op();
    ::Journal::OpRemoveOps* temp = _impl_.Op_.removeops_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Op_.removeops_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Journal::OpRemoveOps& Operation::_internal_removeops() const {
  return _internal_has_removeops()
      ? *_impl_.Op_.removeops_
      : reinterpret_cast< ::Journal::OpRemoveOps&>(::Journal::_OpRemoveOps_default_instance_);
}
inline const ::Journal::OpRemoveOps& Operation::removeops() const {
  // @@protoc_insertion_point(field_get:Journal.Operation.removeOps)
  return _internal_removeops();
}
inline ::Journal::OpRemoveOps* Operation::unsafe_arena_release_removeops() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Journal.Operation.removeOps)
  if (_internal_has_removeops()) {
    clear_has_Op();
    ::Journal::OpRemoveOps* temp = _impl_.Op_.removeops_;
    _impl_.Op_.removeops_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Operation::unsafe_arena_set_allocated_removeops(::Journal::OpRemoveOps* removeops) {
  clear_Op();
  if (removeops) {
    set_has_removeops();
    _impl_.Op_.removeops_ = removeops;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Journal.Operation.removeOps)
}
inline ::Journal::OpRemoveOps* Operation::_internal_mutable_removeops() {
  if (!_internal_has_removeops()) {
    clear_Op();
    set_has_removeops();
    _impl_.Op_.removeops_ = CreateMaybeMessage< ::Journal::OpRemoveOps >(GetArenaForAllocation());
  }
  return _impl_.Op_.removeops_;
}
inline ::Journal::OpRemoveOps* Operation::mutable_removeops() {
  ::Journal::OpRemoveOps* _msg = _internal_mutable_removeops();
  // @@protoc_insertion_point(field_mutable:Journal.Operation.removeOps)
  return _msg;
}

// .Journal.OpLine2d line2d = 5;
inline bool Operation::_internal_has_line2d() const {
  return Op_case() == kLine2D;
}
inline bool Operation::has_line2d() const {
  return _internal_has_line2d();
}
inline void Operation::set_has_line2d() {
  _impl_._oneof_case_[0] = kLine2D;
}
inline ::Journal::OpLine2d* Operation::release_line2d() {
  // @@protoc_insertion_point(field_release:Journal.Operation.line2d)
  if (_internal_has_line2d()) {
    clear_has_Op();
    ::Journal::OpLine2d* temp = _impl_.Op_.line2d_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Op_.line2d_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Journal::OpLine2d& Operation::_internal_line2d() const {
  return _internal_has_line2d()
      ? *_impl_.Op_.line2d_
      : reinterpret_cast< ::Journal::OpLine2d&>(::Journal::_OpLine2d_default_instance_);
}
inline const ::Journal::OpLine2d& Operation::line2d() const {
  // @@protoc_insertion_point(field_get:Journal.Operation.line2d)
  return _internal_line2d();
}
inline ::Journal::OpLine2d* Operation::unsafe_arena_release_line2d() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Journal.Operation.line2d)
  if (_internal_has_line2d()) {
    clear_has_Op();
    ::Journal::OpLine2d* temp = _impl_.Op_.line2d_;
    _impl_.Op_.line2d_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Operation::unsafe_arena_set_allocated_line2d(::Journal::OpLine2d* line2d) {
  clear_Op();
  if (line2d) {
    set_has_line2d();
    _impl_.Op_.line2d_ = line2d;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Journal.Operation.line2d)
}
inline ::Journal::OpLine2d* Operation::_internal_mutable_line2d() {
  if (!_internal_has_line2d()) {
    clear_Op();
    set_has_line2d();
    _impl_.Op_.line2d_ = CreateMaybeMessage< ::Journal::OpLine2d >(GetArenaForAllocation());
  }
  return _impl_.Op_.line2d_;
}
inline ::Journal::OpLine2d* Operation::mutable_line2d() {
  ::Journal::OpLine2d* _msg = _internal_mutable_line2d();
  // @@protoc_insertion_point(field_mutable:Journal.Operation.line2d)
  return _msg;
}

// .Journal.OpText2d text2d = 6;
inline bool Operation::_internal_has_text2d() const {
  return Op_case() == kText2D;
}
inline bool Operation::has_text2d() const {
  return _internal_has_text2d();
}
inline void Operation::set_has_text2d() {
  _impl_._oneof_case_[0] = kText2D;
}
inline ::Journal::OpText2d* Operation::release_text2d() {
  // @@protoc_insertion_point(field_release:Journal.Operation.text2d)
  if (_internal_has_text2d()) {
    clear_has_Op();
    ::Journal::OpText2d* temp = _impl_.Op_.text2d_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Op_.text2d_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Journal::OpText2d& Operation::_internal_text2d() const {
  return _internal_has_text2d()
      ? *_impl_.Op_.text2d_
      : reinterpret_cast< ::Journal::OpText2d&>(::Journal::_OpText2d_default_instance_);
}
inline const ::Journal::OpText2d& Operation::text2d() const {
  // @@protoc_insertion_point(field_get:Journal.Operation.text2d)
  return _internal_text2d();
}
inline ::Journal::OpText2d* Operation::unsafe_arena_release_text2d() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Journal.Operation.text2d)
  if (_internal_has_text2d()) {
    clear_has_Op();
    ::Journal::OpText2d* temp = _impl_.Op_.text2d_;
    _impl_.Op_.text2d_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Operation::unsafe_arena_set_allocated_text2d(::Journal::OpText2d* text2d) {
  clear_Op();
  if (text2d) {
    set_has_text2d();
    _impl_.Op_.text2d_ = text2d;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Journal.Operation.text2d)
}
inline ::Journal::OpText2d* Operation::_internal_mutable_text2d() {
  if (!_internal_has_text2d()) {
    clear_Op();
    set_has_text2d();
    _impl_.Op_.text2d_ = CreateMaybeMessage< ::Journal::OpText2d >(GetArenaForAllocation());
  }
  return _impl_.Op_.text2d_;
}
inline ::Journal::OpText2d* Operation::mutable_text2d() {
  ::Journal::OpText2d* _msg = _internal_mutable_text2d();
  // @@protoc_insertion_point(field_mutable:Journal.Operation.text2d)
  return _msg;
}

// .Journal.OpText2dModify text2dModify = 91;
inline bool Operation::_internal_has_text2dmodify() const {
  return Op_case() == kText2DModify;
}
inline bool Operation::has_text2dmodify() const {
  return _internal_has_text2dmodify();
}
inline void Operation::set_has_text2dmodify() {
  _impl_._oneof_case_[0] = kText2DModify;
}
inline ::Journal::OpText2dModify* Operation::release_text2dmodify() {
  // @@protoc_insertion_point(field_release:Journal.Operation.text2dModify)
  if (_internal_has_text2dmodify()) {
    clear_has_Op();
    ::Journal::OpText2dModify* temp = _impl_.Op_.text2dmodify_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Op_.text2dmodify_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Journal::OpText2dModify& Operation::_internal_text2dmodify() const {
  return _internal_has_text2dmodify()
      ? *_impl_.Op_.text2dmodify_
      : reinterpret_cast< ::Journal::OpText2dModify&>(::Journal::_OpText2dModify_default_instance_);
}
inline const ::Journal::OpText2dModify& Operation::text2dmodify() const {
  // @@protoc_insertion_point(field_get:Journal.Operation.text2dModify)
  return _internal_text2dmodify();
}
inline ::Journal::OpText2dModify* Operation::unsafe_arena_release_text2dmodify() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Journal.Operation.text2dModify)
  if (_internal_has_text2dmodify()) {
    clear_has_Op();
    ::Journal::OpText2dModify* temp = _impl_.Op_.text2dmodify_;
    _impl_.Op_.text2dmodify_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Operation::unsafe_arena_set_allocated_text2dmodify(::Journal::OpText2dModify* text2dmodify) {
  clear_Op();
  if (text2dmodify) {
    set_has_text2dmodify();
    _impl_.Op_.text2dmodify_ = text2dmodify;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Journal.Operation.text2dModify)
}
inline ::Journal::OpText2dModify* Operation::_internal_mutable_text2dmodify() {
  if (!_internal_has_text2dmodify()) {
    clear_Op();
    set_has_text2dmodify();
    _impl_.Op_.text2dmodify_ = CreateMaybeMessage< ::Journal::OpText2dModify >(GetArenaForAllocation());
  }
  return _impl_.Op_.text2dmodify_;
}
inline ::Journal::OpText2dModify* Operation::mutable_text2dmodify() {
  ::Journal::OpText2dModify* _msg = _internal_mutable_text2dmodify();
  // @@protoc_insertion_point(field_mutable:Journal.Operation.text2dModify)
  return _msg;
}

// .Journal.OpImage2d image2d = 7;
inline bool Operation::_internal_has_image2d() const {
  return Op_case() == kImage2D;
}
inline bool Operation::has_image2d() const {
  return _internal_has_image2d();
}
inline void Operation::set_has_image2d() {
  _impl_._oneof_case_[0] = kImage2D;
}
inline ::Journal::OpImage2d* Operation::release_image2d() {
  // @@protoc_insertion_point(field_release:Journal.Operation.image2d)
  if (_internal_has_image2d()) {
    clear_has_Op();
    ::Journal::OpImage2d* temp = _impl_.Op_.image2d_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Op_.image2d_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Journal::OpImage2d& Operation::_internal_image2d() const {
  return _internal_has_image2d()
      ? *_impl_.Op_.image2d_
      : reinterpret_cast< ::Journal::OpImage2d&>(::Journal::_OpImage2d_default_instance_);
}
inline const ::Journal::OpImage2d& Operation::image2d() const {
  // @@protoc_insertion_point(field_get:Journal.Operation.image2d)
  return _internal_image2d();
}
inline ::Journal::OpImage2d* Operation::unsafe_arena_release_image2d() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Journal.Operation.image2d)
  if (_internal_has_image2d()) {
    clear_has_Op();
    ::Journal::OpImage2d* temp = _impl_.Op_.image2d_;
    _impl_.Op_.image2d_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Operation::unsafe_arena_set_allocated_image2d(::Journal::OpImage2d* image2d) {
  clear_Op();
  if (image2d) {
    set_has_image2d();
    _impl_.Op_.image2d_ = image2d;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Journal.Operation.image2d)
}
inline ::Journal::OpImage2d* Operation::_internal_mutable_image2d() {
  if (!_internal_has_image2d()) {
    clear_Op();
    set_has_image2d();
    _impl_.Op_.image2d_ = CreateMaybeMessage< ::Journal::OpImage2d >(GetArenaForAllocation());
  }
  return _impl_.Op_.image2d_;
}
inline ::Journal::OpImage2d* Operation::mutable_image2d() {
  ::Journal::OpImage2d* _msg = _internal_mutable_image2d();
  // @@protoc_insertion_point(field_mutable:Journal.Operation.image2d)
  return _msg;
}

// .Journal.OpLine3d line3d = 10;
inline bool Operation::_internal_has_line3d() const {
  return Op_case() == kLine3D;
}
inline bool Operation::has_line3d() const {
  return _internal_has_line3d();
}
inline void Operation::set_has_line3d() {
  _impl_._oneof_case_[0] = kLine3D;
}
inline ::Journal::OpLine3d* Operation::release_line3d() {
  // @@protoc_insertion_point(field_release:Journal.Operation.line3d)
  if (_internal_has_line3d()) {
    clear_has_Op();
    ::Journal::OpLine3d* temp = _impl_.Op_.line3d_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Op_.line3d_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Journal::OpLine3d& Operation::_internal_line3d() const {
  return _internal_has_line3d()
      ? *_impl_.Op_.line3d_
      : reinterpret_cast< ::Journal::OpLine3d&>(::Journal::_OpLine3d_default_instance_);
}
inline const ::Journal::OpLine3d& Operation::line3d() const {
  // @@protoc_insertion_point(field_get:Journal.Operation.line3d)
  return _internal_line3d();
}
inline ::Journal::OpLine3d* Operation::unsafe_arena_release_line3d() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Journal.Operation.line3d)
  if (_internal_has_line3d()) {
    clear_has_Op();
    ::Journal::OpLine3d* temp = _impl_.Op_.line3d_;
    _impl_.Op_.line3d_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Operation::unsafe_arena_set_allocated_line3d(::Journal::OpLine3d* line3d) {
  clear_Op();
  if (line3d) {
    set_has_line3d();
    _impl_.Op_.line3d_ = line3d;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Journal.Operation.line3d)
}
inline ::Journal::OpLine3d* Operation::_internal_mutable_line3d() {
  if (!_internal_has_line3d()) {
    clear_Op();
    set_has_line3d();
    _impl_.Op_.line3d_ = CreateMaybeMessage< ::Journal::OpLine3d >(GetArenaForAllocation());
  }
  return _impl_.Op_.line3d_;
}
inline ::Journal::OpLine3d* Operation::mutable_line3d() {
  ::Journal::OpLine3d* _msg = _internal_mutable_line3d();
  // @@protoc_insertion_point(field_mutable:Journal.Operation.line3d)
  return _msg;
}

// .Journal.OpText3d text3d = 11;
inline bool Operation::_internal_has_text3d() const {
  return Op_case() == kText3D;
}
inline bool Operation::has_text3d() const {
  return _internal_has_text3d();
}
inline void Operation::set_has_text3d() {
  _impl_._oneof_case_[0] = kText3D;
}
inline ::Journal::OpText3d* Operation::release_text3d() {
  // @@protoc_insertion_point(field_release:Journal.Operation.text3d)
  if (_internal_has_text3d()) {
    clear_has_Op();
    ::Journal::OpText3d* temp = _impl_.Op_.text3d_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Op_.text3d_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Journal::OpText3d& Operation::_internal_text3d() const {
  return _internal_has_text3d()
      ? *_impl_.Op_.text3d_
      : reinterpret_cast< ::Journal::OpText3d&>(::Journal::_OpText3d_default_instance_);
}
inline const ::Journal::OpText3d& Operation::text3d() const {
  // @@protoc_insertion_point(field_get:Journal.Operation.text3d)
  return _internal_text3d();
}
inline ::Journal::OpText3d* Operation::unsafe_arena_release_text3d() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Journal.Operation.text3d)
  if (_internal_has_text3d()) {
    clear_has_Op();
    ::Journal::OpText3d* temp = _impl_.Op_.text3d_;
    _impl_.Op_.text3d_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Operation::unsafe_arena_set_allocated_text3d(::Journal::OpText3d* text3d) {
  clear_Op();
  if (text3d) {
    set_has_text3d();
    _impl_.Op_.text3d_ = text3d;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Journal.Operation.text3d)
}
inline ::Journal::OpText3d* Operation::_internal_mutable_text3d() {
  if (!_internal_has_text3d()) {
    clear_Op();
    set_has_text3d();
    _impl_.Op_.text3d_ = CreateMaybeMessage< ::Journal::OpText3d >(GetArenaForAllocation());
  }
  return _impl_.Op_.text3d_;
}
inline ::Journal::OpText3d* Operation::mutable_text3d() {
  ::Journal::OpText3d* _msg = _internal_mutable_text3d();
  // @@protoc_insertion_point(field_mutable:Journal.Operation.text3d)
  return _msg;
}

// .Journal.OpText3dModify text3dModify = 92;
inline bool Operation::_internal_has_text3dmodify() const {
  return Op_case() == kText3DModify;
}
inline bool Operation::has_text3dmodify() const {
  return _internal_has_text3dmodify();
}
inline void Operation::set_has_text3dmodify() {
  _impl_._oneof_case_[0] = kText3DModify;
}
inline ::Journal::OpText3dModify* Operation::release_text3dmodify() {
  // @@protoc_insertion_point(field_release:Journal.Operation.text3dModify)
  if (_internal_has_text3dmodify()) {
    clear_has_Op();
    ::Journal::OpText3dModify* temp = _impl_.Op_.text3dmodify_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Op_.text3dmodify_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Journal::OpText3dModify& Operation::_internal_text3dmodify() const {
  return _internal_has_text3dmodify()
      ? *_impl_.Op_.text3dmodify_
      : reinterpret_cast< ::Journal::OpText3dModify&>(::Journal::_OpText3dModify_default_instance_);
}
inline const ::Journal::OpText3dModify& Operation::text3dmodify() const {
  // @@protoc_insertion_point(field_get:Journal.Operation.text3dModify)
  return _internal_text3dmodify();
}
inline ::Journal::OpText3dModify* Operation::unsafe_arena_release_text3dmodify() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Journal.Operation.text3dModify)
  if (_internal_has_text3dmodify()) {
    clear_has_Op();
    ::Journal::OpText3dModify* temp = _impl_.Op_.text3dmodify_;
    _impl_.Op_.text3dmodify_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Operation::unsafe_arena_set_allocated_text3dmodify(::Journal::OpText3dModify* text3dmodify) {
  clear_Op();
  if (text3dmodify) {
    set_has_text3dmodify();
    _impl_.Op_.text3dmodify_ = text3dmodify;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Journal.Operation.text3dModify)
}
inline ::Journal::OpText3dModify* Operation::_internal_mutable_text3dmodify() {
  if (!_internal_has_text3dmodify()) {
    clear_Op();
    set_has_text3dmodify();
    _impl_.Op_.text3dmodify_ = CreateMaybeMessage< ::Journal::OpText3dModify >(GetArenaForAllocation());
  }
  return _impl_.Op_.text3dmodify_;
}
inline ::Journal::OpText3dModify* Operation::mutable_text3dmodify() {
  ::Journal::OpText3dModify* _msg = _internal_mutable_text3dmodify();
  // @@protoc_insertion_point(field_mutable:Journal.Operation.text3dModify)
  return _msg;
}

// .Journal.OpImage3d image3d = 12;
inline bool Operation::_internal_has_image3d() const {
  return Op_case() == kImage3D;
}
inline bool Operation::has_image3d() const {
  return _internal_has_image3d();
}
inline void Operation::set_has_image3d() {
  _impl_._oneof_case_[0] = kImage3D;
}
inline ::Journal::OpImage3d* Operation::release_image3d() {
  // @@protoc_insertion_point(field_release:Journal.Operation.image3d)
  if (_internal_has_image3d()) {
    clear_has_Op();
    ::Journal::OpImage3d* temp = _impl_.Op_.image3d_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Op_.image3d_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Journal::OpImage3d& Operation::_internal_image3d() const {
  return _internal_has_image3d()
      ? *_impl_.Op_.image3d_
      : reinterpret_cast< ::Journal::OpImage3d&>(::Journal::_OpImage3d_default_instance_);
}
inline const ::Journal::OpImage3d& Operation::image3d() const {
  // @@protoc_insertion_point(field_get:Journal.Operation.image3d)
  return _internal_image3d();
}
inline ::Journal::OpImage3d* Operation::unsafe_arena_release_image3d() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Journal.Operation.image3d)
  if (_internal_has_image3d()) {
    clear_has_Op();
    ::Journal::OpImage3d* temp = _impl_.Op_.image3d_;
    _impl_.Op_.image3d_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Operation::unsafe_arena_set_allocated_image3d(::Journal::OpImage3d* image3d) {
  clear_Op();
  if (image3d) {
    set_has_image3d();
    _impl_.Op_.image3d_ = image3d;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Journal.Operation.image3d)
}
inline ::Journal::OpImage3d* Operation::_internal_mutable_image3d() {
  if (!_internal_has_image3d()) {
    clear_Op();
    set_has_image3d();
    _impl_.Op_.image3d_ = CreateMaybeMessage< ::Journal::OpImage3d >(GetArenaForAllocation());
  }
  return _impl_.Op_.image3d_;
}
inline ::Journal::OpImage3d* Operation::mutable_image3d() {
  ::Journal::OpImage3d* _msg = _internal_mutable_image3d();
  // @@protoc_insertion_point(field_mutable:Journal.Operation.image3d)
  return _msg;
}

// .Journal.OpCreateObject createObject = 20;
inline bool Operation::_internal_has_createobject() const {
  return Op_case() == kCreateObject;
}
inline bool Operation::has_createobject() const {
  return _internal_has_createobject();
}
inline void Operation::set_has_createobject() {
  _impl_._oneof_case_[0] = kCreateObject;
}
inline void Operation::clear_createobject() {
  if (_internal_has_createobject()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.Op_.createobject_;
    }
    clear_has_Op();
  }
}
inline ::Journal::OpCreateObject* Operation::release_createobject() {
  // @@protoc_insertion_point(field_release:Journal.Operation.createObject)
  if (_internal_has_createobject()) {
    clear_has_Op();
    ::Journal::OpCreateObject* temp = _impl_.Op_.createobject_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Op_.createobject_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Journal::OpCreateObject& Operation::_internal_createobject() const {
  return _internal_has_createobject()
      ? *_impl_.Op_.createobject_
      : reinterpret_cast< ::Journal::OpCreateObject&>(::Journal::_OpCreateObject_default_instance_);
}
inline const ::Journal::OpCreateObject& Operation::createobject() const {
  // @@protoc_insertion_point(field_get:Journal.Operation.createObject)
  return _internal_createobject();
}
inline ::Journal::OpCreateObject* Operation::unsafe_arena_release_createobject() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Journal.Operation.createObject)
  if (_internal_has_createobject()) {
    clear_has_Op();
    ::Journal::OpCreateObject* temp = _impl_.Op_.createobject_;
    _impl_.Op_.createobject_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Operation::unsafe_arena_set_allocated_createobject(::Journal::OpCreateObject* createobject) {
  clear_Op();
  if (createobject) {
    set_has_createobject();
    _impl_.Op_.createobject_ = createobject;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Journal.Operation.createObject)
}
inline ::Journal::OpCreateObject* Operation::_internal_mutable_createobject() {
  if (!_internal_has_createobject()) {
    clear_Op();
    set_has_createobject();
    _impl_.Op_.createobject_ = CreateMaybeMessage< ::Journal::OpCreateObject >(GetArenaForAllocation());
  }
  return _impl_.Op_.createobject_;
}
inline ::Journal::OpCreateObject* Operation::mutable_createobject() {
  ::Journal::OpCreateObject* _msg = _internal_mutable_createobject();
  // @@protoc_insertion_point(field_mutable:Journal.Operation.createObject)
  return _msg;
}

// .Journal.OpSetPartHighlight setPartHighlight = 61;
inline bool Operation::_internal_has_setparthighlight() const {
  return Op_case() == kSetPartHighlight;
}
inline bool Operation::has_setparthighlight() const {
  return _internal_has_setparthighlight();
}
inline void Operation::set_has_setparthighlight() {
  _impl_._oneof_case_[0] = kSetPartHighlight;
}
inline ::Journal::OpSetPartHighlight* Operation::release_setparthighlight() {
  // @@protoc_insertion_point(field_release:Journal.Operation.setPartHighlight)
  if (_internal_has_setparthighlight()) {
    clear_has_Op();
    ::Journal::OpSetPartHighlight* temp = _impl_.Op_.setparthighlight_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Op_.setparthighlight_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Journal::OpSetPartHighlight& Operation::_internal_setparthighlight() const {
  return _internal_has_setparthighlight()
      ? *_impl_.Op_.setparthighlight_
      : reinterpret_cast< ::Journal::OpSetPartHighlight&>(::Journal::_OpSetPartHighlight_default_instance_);
}
inline const ::Journal::OpSetPartHighlight& Operation::setparthighlight() const {
  // @@protoc_insertion_point(field_get:Journal.Operation.setPartHighlight)
  return _internal_setparthighlight();
}
inline ::Journal::OpSetPartHighlight* Operation::unsafe_arena_release_setparthighlight() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Journal.Operation.setPartHighlight)
  if (_internal_has_setparthighlight()) {
    clear_has_Op();
    ::Journal::OpSetPartHighlight* temp = _impl_.Op_.setparthighlight_;
    _impl_.Op_.setparthighlight_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Operation::unsafe_arena_set_allocated_setparthighlight(::Journal::OpSetPartHighlight* setparthighlight) {
  clear_Op();
  if (setparthighlight) {
    set_has_setparthighlight();
    _impl_.Op_.setparthighlight_ = setparthighlight;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Journal.Operation.setPartHighlight)
}
inline ::Journal::OpSetPartHighlight* Operation::_internal_mutable_setparthighlight() {
  if (!_internal_has_setparthighlight()) {
    clear_Op();
    set_has_setparthighlight();
    _impl_.Op_.setparthighlight_ = CreateMaybeMessage< ::Journal::OpSetPartHighlight >(GetArenaForAllocation());
  }
  return _impl_.Op_.setparthighlight_;
}
inline ::Journal::OpSetPartHighlight* Operation::mutable_setparthighlight() {
  ::Journal::OpSetPartHighlight* _msg = _internal_mutable_setparthighlight();
  // @@protoc_insertion_point(field_mutable:Journal.Operation.setPartHighlight)
  return _msg;
}

// .Journal.OpUpdatePropertyValue updatePropertyValue = 13;
inline bool Operation::_internal_has_updatepropertyvalue() const {
  return Op_case() == kUpdatePropertyValue;
}
inline bool Operation::has_updatepropertyvalue() const {
  return _internal_has_updatepropertyvalue();
}
inline void Operation::set_has_updatepropertyvalue() {
  _impl_._oneof_case_[0] = kUpdatePropertyValue;
}
inline ::Journal::OpUpdatePropertyValue* Operation::release_updatepropertyvalue() {
  // @@protoc_insertion_point(field_release:Journal.Operation.updatePropertyValue)
  if (_internal_has_updatepropertyvalue()) {
    clear_has_Op();
    ::Journal::OpUpdatePropertyValue* temp = _impl_.Op_.updatepropertyvalue_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Op_.updatepropertyvalue_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Journal::OpUpdatePropertyValue& Operation::_internal_updatepropertyvalue() const {
  return _internal_has_updatepropertyvalue()
      ? *_impl_.Op_.updatepropertyvalue_
      : reinterpret_cast< ::Journal::OpUpdatePropertyValue&>(::Journal::_OpUpdatePropertyValue_default_instance_);
}
inline const ::Journal::OpUpdatePropertyValue& Operation::updatepropertyvalue() const {
  // @@protoc_insertion_point(field_get:Journal.Operation.updatePropertyValue)
  return _internal_updatepropertyvalue();
}
inline ::Journal::OpUpdatePropertyValue* Operation::unsafe_arena_release_updatepropertyvalue() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Journal.Operation.updatePropertyValue)
  if (_internal_has_updatepropertyvalue()) {
    clear_has_Op();
    ::Journal::OpUpdatePropertyValue* temp = _impl_.Op_.updatepropertyvalue_;
    _impl_.Op_.updatepropertyvalue_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Operation::unsafe_arena_set_allocated_updatepropertyvalue(::Journal::OpUpdatePropertyValue* updatepropertyvalue) {
  clear_Op();
  if (updatepropertyvalue) {
    set_has_updatepropertyvalue();
    _impl_.Op_.updatepropertyvalue_ = updatepropertyvalue;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Journal.Operation.updatePropertyValue)
}
inline ::Journal::OpUpdatePropertyValue* Operation::_internal_mutable_updatepropertyvalue() {
  if (!_internal_has_updatepropertyvalue()) {
    clear_Op();
    set_has_updatepropertyvalue();
    _impl_.Op_.updatepropertyvalue_ = CreateMaybeMessage< ::Journal::OpUpdatePropertyValue >(GetArenaForAllocation());
  }
  return _impl_.Op_.updatepropertyvalue_;
}
inline ::Journal::OpUpdatePropertyValue* Operation::mutable_updatepropertyvalue() {
  ::Journal::OpUpdatePropertyValue* _msg = _internal_mutable_updatepropertyvalue();
  // @@protoc_insertion_point(field_mutable:Journal.Operation.updatePropertyValue)
  return _msg;
}

// .Journal.OpDeclareProperty declareProperty = 14;
inline bool Operation::_internal_has_declareproperty() const {
  return Op_case() == kDeclareProperty;
}
inline bool Operation::has_declareproperty() const {
  return _internal_has_declareproperty();
}
inline void Operation::set_has_declareproperty() {
  _impl_._oneof_case_[0] = kDeclareProperty;
}
inline ::Journal::OpDeclareProperty* Operation::release_declareproperty() {
  // @@protoc_insertion_point(field_release:Journal.Operation.declareProperty)
  if (_internal_has_declareproperty()) {
    clear_has_Op();
    ::Journal::OpDeclareProperty* temp = _impl_.Op_.declareproperty_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Op_.declareproperty_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Journal::OpDeclareProperty& Operation::_internal_declareproperty() const {
  return _internal_has_declareproperty()
      ? *_impl_.Op_.declareproperty_
      : reinterpret_cast< ::Journal::OpDeclareProperty&>(::Journal::_OpDeclareProperty_default_instance_);
}
inline const ::Journal::OpDeclareProperty& Operation::declareproperty() const {
  // @@protoc_insertion_point(field_get:Journal.Operation.declareProperty)
  return _internal_declareproperty();
}
inline ::Journal::OpDeclareProperty* Operation::unsafe_arena_release_declareproperty() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Journal.Operation.declareProperty)
  if (_internal_has_declareproperty()) {
    clear_has_Op();
    ::Journal::OpDeclareProperty* temp = _impl_.Op_.declareproperty_;
    _impl_.Op_.declareproperty_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Operation::unsafe_arena_set_allocated_declareproperty(::Journal::OpDeclareProperty* declareproperty) {
  clear_Op();
  if (declareproperty) {
    set_has_declareproperty();
    _impl_.Op_.declareproperty_ = declareproperty;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Journal.Operation.declareProperty)
}
inline ::Journal::OpDeclareProperty* Operation::_internal_mutable_declareproperty() {
  if (!_internal_has_declareproperty()) {
    clear_Op();
    set_has_declareproperty();
    _impl_.Op_.declareproperty_ = CreateMaybeMessage< ::Journal::OpDeclareProperty >(GetArenaForAllocation());
  }
  return _impl_.Op_.declareproperty_;
}
inline ::Journal::OpDeclareProperty* Operation::mutable_declareproperty() {
  ::Journal::OpDeclareProperty* _msg = _internal_mutable_declareproperty();
  // @@protoc_insertion_point(field_mutable:Journal.Operation.declareProperty)
  return _msg;
}

// .Journal.OpUserAuthorityData userAuthorityData = 16;
inline bool Operation::_internal_has_userauthoritydata() const {
  return Op_case() == kUserAuthorityData;
}
inline bool Operation::has_userauthoritydata() const {
  return _internal_has_userauthoritydata();
}
inline void Operation::set_has_userauthoritydata() {
  _impl_._oneof_case_[0] = kUserAuthorityData;
}
inline ::Journal::OpUserAuthorityData* Operation::release_userauthoritydata() {
  // @@protoc_insertion_point(field_release:Journal.Operation.userAuthorityData)
  if (_internal_has_userauthoritydata()) {
    clear_has_Op();
    ::Journal::OpUserAuthorityData* temp = _impl_.Op_.userauthoritydata_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Op_.userauthoritydata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Journal::OpUserAuthorityData& Operation::_internal_userauthoritydata() const {
  return _internal_has_userauthoritydata()
      ? *_impl_.Op_.userauthoritydata_
      : reinterpret_cast< ::Journal::OpUserAuthorityData&>(::Journal::_OpUserAuthorityData_default_instance_);
}
inline const ::Journal::OpUserAuthorityData& Operation::userauthoritydata() const {
  // @@protoc_insertion_point(field_get:Journal.Operation.userAuthorityData)
  return _internal_userauthoritydata();
}
inline ::Journal::OpUserAuthorityData* Operation::unsafe_arena_release_userauthoritydata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Journal.Operation.userAuthorityData)
  if (_internal_has_userauthoritydata()) {
    clear_has_Op();
    ::Journal::OpUserAuthorityData* temp = _impl_.Op_.userauthoritydata_;
    _impl_.Op_.userauthoritydata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Operation::unsafe_arena_set_allocated_userauthoritydata(::Journal::OpUserAuthorityData* userauthoritydata) {
  clear_Op();
  if (userauthoritydata) {
    set_has_userauthoritydata();
    _impl_.Op_.userauthoritydata_ = userauthoritydata;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Journal.Operation.userAuthorityData)
}
inline ::Journal::OpUserAuthorityData* Operation::_internal_mutable_userauthoritydata() {
  if (!_internal_has_userauthoritydata()) {
    clear_Op();
    set_has_userauthoritydata();
    _impl_.Op_.userauthoritydata_ = CreateMaybeMessage< ::Journal::OpUserAuthorityData >(GetArenaForAllocation());
  }
  return _impl_.Op_.userauthoritydata_;
}
inline ::Journal::OpUserAuthorityData* Operation::mutable_userauthoritydata() {
  ::Journal::OpUserAuthorityData* _msg = _internal_mutable_userauthoritydata();
  // @@protoc_insertion_point(field_mutable:Journal.Operation.userAuthorityData)
  return _msg;
}

// .Journal.OpBlindDataOp blindOp = 70;
inline bool Operation::_internal_has_blindop() const {
  return Op_case() == kBlindOp;
}
inline bool Operation::has_blindop() const {
  return _internal_has_blindop();
}
inline void Operation::set_has_blindop() {
  _impl_._oneof_case_[0] = kBlindOp;
}
inline ::Journal::OpBlindDataOp* Operation::release_blindop() {
  // @@protoc_insertion_point(field_release:Journal.Operation.blindOp)
  if (_internal_has_blindop()) {
    clear_has_Op();
    ::Journal::OpBlindDataOp* temp = _impl_.Op_.blindop_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Op_.blindop_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Journal::OpBlindDataOp& Operation::_internal_blindop() const {
  return _internal_has_blindop()
      ? *_impl_.Op_.blindop_
      : reinterpret_cast< ::Journal::OpBlindDataOp&>(::Journal::_OpBlindDataOp_default_instance_);
}
inline const ::Journal::OpBlindDataOp& Operation::blindop() const {
  // @@protoc_insertion_point(field_get:Journal.Operation.blindOp)
  return _internal_blindop();
}
inline ::Journal::OpBlindDataOp* Operation::unsafe_arena_release_blindop() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Journal.Operation.blindOp)
  if (_internal_has_blindop()) {
    clear_has_Op();
    ::Journal::OpBlindDataOp* temp = _impl_.Op_.blindop_;
    _impl_.Op_.blindop_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Operation::unsafe_arena_set_allocated_blindop(::Journal::OpBlindDataOp* blindop) {
  clear_Op();
  if (blindop) {
    set_has_blindop();
    _impl_.Op_.blindop_ = blindop;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Journal.Operation.blindOp)
}
inline ::Journal::OpBlindDataOp* Operation::_internal_mutable_blindop() {
  if (!_internal_has_blindop()) {
    clear_Op();
    set_has_blindop();
    _impl_.Op_.blindop_ = CreateMaybeMessage< ::Journal::OpBlindDataOp >(GetArenaForAllocation());
  }
  return _impl_.Op_.blindop_;
}
inline ::Journal::OpBlindDataOp* Operation::mutable_blindop() {
  ::Journal::OpBlindDataOp* _msg = _internal_mutable_blindop();
  // @@protoc_insertion_point(field_mutable:Journal.Operation.blindOp)
  return _msg;
}

inline bool Operation::has_Op() const {
  return Op_case() != OP_NOT_SET;
}
inline void Operation::clear_has_Op() {
  _impl_._oneof_case_[0] = OP_NOT_SET;
}
inline Operation::OpCase Operation::Op_case() const {
  return Operation::OpCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// OpCreateObject_V2

// string newObjectId = 1;
inline void OpCreateObject_V2::clear_newobjectid() {
  _impl_.newobjectid_.ClearToEmpty();
}
inline const std::string& OpCreateObject_V2::newobjectid() const {
  // @@protoc_insertion_point(field_get:Journal.OpCreateObject.V2.newObjectId)
  return _internal_newobjectid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpCreateObject_V2::set_newobjectid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.newobjectid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Journal.OpCreateObject.V2.newObjectId)
}
inline std::string* OpCreateObject_V2::mutable_newobjectid() {
  std::string* _s = _internal_mutable_newobjectid();
  // @@protoc_insertion_point(field_mutable:Journal.OpCreateObject.V2.newObjectId)
  return _s;
}
inline const std::string& OpCreateObject_V2::_internal_newobjectid() const {
  return _impl_.newobjectid_.Get();
}
inline void OpCreateObject_V2::_internal_set_newobjectid(const std::string& value) {
  
  _impl_.newobjectid_.Set(value, GetArenaForAllocation());
}
inline std::string* OpCreateObject_V2::_internal_mutable_newobjectid() {
  
  return _impl_.newobjectid_.Mutable(GetArenaForAllocation());
}
inline std::string* OpCreateObject_V2::release_newobjectid() {
  // @@protoc_insertion_point(field_release:Journal.OpCreateObject.V2.newObjectId)
  return _impl_.newobjectid_.Release();
}
inline void OpCreateObject_V2::set_allocated_newobjectid(std::string* newobjectid) {
  if (newobjectid != nullptr) {
    
  } else {
    
  }
  _impl_.newobjectid_.SetAllocated(newobjectid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.newobjectid_.IsDefault()) {
    _impl_.newobjectid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Journal.OpCreateObject.V2.newObjectId)
}

// .JournalData.ObjectType contentId = 2;
inline bool OpCreateObject_V2::_internal_has_contentid() const {
  return this != internal_default_instance() && _impl_.contentid_ != nullptr;
}
inline bool OpCreateObject_V2::has_contentid() const {
  return _internal_has_contentid();
}
inline const ::JournalData::ObjectType& OpCreateObject_V2::_internal_contentid() const {
  const ::JournalData::ObjectType* p = _impl_.contentid_;
  return p != nullptr ? *p : reinterpret_cast<const ::JournalData::ObjectType&>(
      ::JournalData::_ObjectType_default_instance_);
}
inline const ::JournalData::ObjectType& OpCreateObject_V2::contentid() const {
  // @@protoc_insertion_point(field_get:Journal.OpCreateObject.V2.contentId)
  return _internal_contentid();
}
inline void OpCreateObject_V2::unsafe_arena_set_allocated_contentid(
    ::JournalData::ObjectType* contentid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.contentid_);
  }
  _impl_.contentid_ = contentid;
  if (contentid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Journal.OpCreateObject.V2.contentId)
}
inline ::JournalData::ObjectType* OpCreateObject_V2::release_contentid() {
  
  ::JournalData::ObjectType* temp = _impl_.contentid_;
  _impl_.contentid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::JournalData::ObjectType* OpCreateObject_V2::unsafe_arena_release_contentid() {
  // @@protoc_insertion_point(field_release:Journal.OpCreateObject.V2.contentId)
  
  ::JournalData::ObjectType* temp = _impl_.contentid_;
  _impl_.contentid_ = nullptr;
  return temp;
}
inline ::JournalData::ObjectType* OpCreateObject_V2::_internal_mutable_contentid() {
  
  if (_impl_.contentid_ == nullptr) {
    auto* p = CreateMaybeMessage<::JournalData::ObjectType>(GetArenaForAllocation());
    _impl_.contentid_ = p;
  }
  return _impl_.contentid_;
}
inline ::JournalData::ObjectType* OpCreateObject_V2::mutable_contentid() {
  ::JournalData::ObjectType* _msg = _internal_mutable_contentid();
  // @@protoc_insertion_point(field_mutable:Journal.OpCreateObject.V2.contentId)
  return _msg;
}
inline void OpCreateObject_V2::set_allocated_contentid(::JournalData::ObjectType* contentid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.contentid_);
  }
  if (contentid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contentid));
    if (message_arena != submessage_arena) {
      contentid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contentid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.contentid_ = contentid;
  // @@protoc_insertion_point(field_set_allocated:Journal.OpCreateObject.V2.contentId)
}

// string creatorId = 7;
inline void OpCreateObject_V2::clear_creatorid() {
  _impl_.creatorid_.ClearToEmpty();
}
inline const std::string& OpCreateObject_V2::creatorid() const {
  // @@protoc_insertion_point(field_get:Journal.OpCreateObject.V2.creatorId)
  return _internal_creatorid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpCreateObject_V2::set_creatorid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.creatorid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Journal.OpCreateObject.V2.creatorId)
}
inline std::string* OpCreateObject_V2::mutable_creatorid() {
  std::string* _s = _internal_mutable_creatorid();
  // @@protoc_insertion_point(field_mutable:Journal.OpCreateObject.V2.creatorId)
  return _s;
}
inline const std::string& OpCreateObject_V2::_internal_creatorid() const {
  return _impl_.creatorid_.Get();
}
inline void OpCreateObject_V2::_internal_set_creatorid(const std::string& value) {
  
  _impl_.creatorid_.Set(value, GetArenaForAllocation());
}
inline std::string* OpCreateObject_V2::_internal_mutable_creatorid() {
  
  return _impl_.creatorid_.Mutable(GetArenaForAllocation());
}
inline std::string* OpCreateObject_V2::release_creatorid() {
  // @@protoc_insertion_point(field_release:Journal.OpCreateObject.V2.creatorId)
  return _impl_.creatorid_.Release();
}
inline void OpCreateObject_V2::set_allocated_creatorid(std::string* creatorid) {
  if (creatorid != nullptr) {
    
  } else {
    
  }
  _impl_.creatorid_.SetAllocated(creatorid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.creatorid_.IsDefault()) {
    _impl_.creatorid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Journal.OpCreateObject.V2.creatorId)
}

// -------------------------------------------------------------------

// OpCreateObject_V3

// string contextPath = 1;
inline void OpCreateObject_V3::clear_contextpath() {
  _impl_.contextpath_.ClearToEmpty();
}
inline const std::string& OpCreateObject_V3::contextpath() const {
  // @@protoc_insertion_point(field_get:Journal.OpCreateObject.V3.contextPath)
  return _internal_contextpath();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpCreateObject_V3::set_contextpath(ArgT0&& arg0, ArgT... args) {
 
 _impl_.contextpath_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Journal.OpCreateObject.V3.contextPath)
}
inline std::string* OpCreateObject_V3::mutable_contextpath() {
  std::string* _s = _internal_mutable_contextpath();
  // @@protoc_insertion_point(field_mutable:Journal.OpCreateObject.V3.contextPath)
  return _s;
}
inline const std::string& OpCreateObject_V3::_internal_contextpath() const {
  return _impl_.contextpath_.Get();
}
inline void OpCreateObject_V3::_internal_set_contextpath(const std::string& value) {
  
  _impl_.contextpath_.Set(value, GetArenaForAllocation());
}
inline std::string* OpCreateObject_V3::_internal_mutable_contextpath() {
  
  return _impl_.contextpath_.Mutable(GetArenaForAllocation());
}
inline std::string* OpCreateObject_V3::release_contextpath() {
  // @@protoc_insertion_point(field_release:Journal.OpCreateObject.V3.contextPath)
  return _impl_.contextpath_.Release();
}
inline void OpCreateObject_V3::set_allocated_contextpath(std::string* contextpath) {
  if (contextpath != nullptr) {
    
  } else {
    
  }
  _impl_.contextpath_.SetAllocated(contextpath, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.contextpath_.IsDefault()) {
    _impl_.contextpath_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Journal.OpCreateObject.V3.contextPath)
}

// .JournalData.ObjectType contentId = 2;
inline bool OpCreateObject_V3::_internal_has_contentid() const {
  return this != internal_default_instance() && _impl_.contentid_ != nullptr;
}
inline bool OpCreateObject_V3::has_contentid() const {
  return _internal_has_contentid();
}
inline const ::JournalData::ObjectType& OpCreateObject_V3::_internal_contentid() const {
  const ::JournalData::ObjectType* p = _impl_.contentid_;
  return p != nullptr ? *p : reinterpret_cast<const ::JournalData::ObjectType&>(
      ::JournalData::_ObjectType_default_instance_);
}
inline const ::JournalData::ObjectType& OpCreateObject_V3::contentid() const {
  // @@protoc_insertion_point(field_get:Journal.OpCreateObject.V3.contentId)
  return _internal_contentid();
}
inline void OpCreateObject_V3::unsafe_arena_set_allocated_contentid(
    ::JournalData::ObjectType* contentid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.contentid_);
  }
  _impl_.contentid_ = contentid;
  if (contentid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Journal.OpCreateObject.V3.contentId)
}
inline ::JournalData::ObjectType* OpCreateObject_V3::release_contentid() {
  
  ::JournalData::ObjectType* temp = _impl_.contentid_;
  _impl_.contentid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::JournalData::ObjectType* OpCreateObject_V3::unsafe_arena_release_contentid() {
  // @@protoc_insertion_point(field_release:Journal.OpCreateObject.V3.contentId)
  
  ::JournalData::ObjectType* temp = _impl_.contentid_;
  _impl_.contentid_ = nullptr;
  return temp;
}
inline ::JournalData::ObjectType* OpCreateObject_V3::_internal_mutable_contentid() {
  
  if (_impl_.contentid_ == nullptr) {
    auto* p = CreateMaybeMessage<::JournalData::ObjectType>(GetArenaForAllocation());
    _impl_.contentid_ = p;
  }
  return _impl_.contentid_;
}
inline ::JournalData::ObjectType* OpCreateObject_V3::mutable_contentid() {
  ::JournalData::ObjectType* _msg = _internal_mutable_contentid();
  // @@protoc_insertion_point(field_mutable:Journal.OpCreateObject.V3.contentId)
  return _msg;
}
inline void OpCreateObject_V3::set_allocated_contentid(::JournalData::ObjectType* contentid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.contentid_);
  }
  if (contentid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contentid));
    if (message_arena != submessage_arena) {
      contentid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contentid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.contentid_ = contentid;
  // @@protoc_insertion_point(field_set_allocated:Journal.OpCreateObject.V3.contentId)
}

// string creatorId = 7;
inline void OpCreateObject_V3::clear_creatorid() {
  _impl_.creatorid_.ClearToEmpty();
}
inline const std::string& OpCreateObject_V3::creatorid() const {
  // @@protoc_insertion_point(field_get:Journal.OpCreateObject.V3.creatorId)
  return _internal_creatorid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpCreateObject_V3::set_creatorid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.creatorid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Journal.OpCreateObject.V3.creatorId)
}
inline std::string* OpCreateObject_V3::mutable_creatorid() {
  std::string* _s = _internal_mutable_creatorid();
  // @@protoc_insertion_point(field_mutable:Journal.OpCreateObject.V3.creatorId)
  return _s;
}
inline const std::string& OpCreateObject_V3::_internal_creatorid() const {
  return _impl_.creatorid_.Get();
}
inline void OpCreateObject_V3::_internal_set_creatorid(const std::string& value) {
  
  _impl_.creatorid_.Set(value, GetArenaForAllocation());
}
inline std::string* OpCreateObject_V3::_internal_mutable_creatorid() {
  
  return _impl_.creatorid_.Mutable(GetArenaForAllocation());
}
inline std::string* OpCreateObject_V3::release_creatorid() {
  // @@protoc_insertion_point(field_release:Journal.OpCreateObject.V3.creatorId)
  return _impl_.creatorid_.Release();
}
inline void OpCreateObject_V3::set_allocated_creatorid(std::string* creatorid) {
  if (creatorid != nullptr) {
    
  } else {
    
  }
  _impl_.creatorid_.SetAllocated(creatorid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.creatorid_.IsDefault()) {
    _impl_.creatorid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Journal.OpCreateObject.V3.creatorId)
}

// -------------------------------------------------------------------

// OpCreateObject

// .Journal.OpCreateObject.V2 v2 = 2;
inline bool OpCreateObject::_internal_has_v2() const {
  return V_case() == kV2;
}
inline bool OpCreateObject::has_v2() const {
  return _internal_has_v2();
}
inline void OpCreateObject::set_has_v2() {
  _impl_._oneof_case_[0] = kV2;
}
inline void OpCreateObject::clear_v2() {
  if (_internal_has_v2()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.V_.v2_;
    }
    clear_has_V();
  }
}
inline ::Journal::OpCreateObject_V2* OpCreateObject::release_v2() {
  // @@protoc_insertion_point(field_release:Journal.OpCreateObject.v2)
  if (_internal_has_v2()) {
    clear_has_V();
    ::Journal::OpCreateObject_V2* temp = _impl_.V_.v2_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.V_.v2_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Journal::OpCreateObject_V2& OpCreateObject::_internal_v2() const {
  return _internal_has_v2()
      ? *_impl_.V_.v2_
      : reinterpret_cast< ::Journal::OpCreateObject_V2&>(::Journal::_OpCreateObject_V2_default_instance_);
}
inline const ::Journal::OpCreateObject_V2& OpCreateObject::v2() const {
  // @@protoc_insertion_point(field_get:Journal.OpCreateObject.v2)
  return _internal_v2();
}
inline ::Journal::OpCreateObject_V2* OpCreateObject::unsafe_arena_release_v2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Journal.OpCreateObject.v2)
  if (_internal_has_v2()) {
    clear_has_V();
    ::Journal::OpCreateObject_V2* temp = _impl_.V_.v2_;
    _impl_.V_.v2_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OpCreateObject::unsafe_arena_set_allocated_v2(::Journal::OpCreateObject_V2* v2) {
  clear_V();
  if (v2) {
    set_has_v2();
    _impl_.V_.v2_ = v2;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Journal.OpCreateObject.v2)
}
inline ::Journal::OpCreateObject_V2* OpCreateObject::_internal_mutable_v2() {
  if (!_internal_has_v2()) {
    clear_V();
    set_has_v2();
    _impl_.V_.v2_ = CreateMaybeMessage< ::Journal::OpCreateObject_V2 >(GetArenaForAllocation());
  }
  return _impl_.V_.v2_;
}
inline ::Journal::OpCreateObject_V2* OpCreateObject::mutable_v2() {
  ::Journal::OpCreateObject_V2* _msg = _internal_mutable_v2();
  // @@protoc_insertion_point(field_mutable:Journal.OpCreateObject.v2)
  return _msg;
}

// .Journal.OpCreateObject.V3 v3 = 3;
inline bool OpCreateObject::_internal_has_v3() const {
  return V_case() == kV3;
}
inline bool OpCreateObject::has_v3() const {
  return _internal_has_v3();
}
inline void OpCreateObject::set_has_v3() {
  _impl_._oneof_case_[0] = kV3;
}
inline void OpCreateObject::clear_v3() {
  if (_internal_has_v3()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.V_.v3_;
    }
    clear_has_V();
  }
}
inline ::Journal::OpCreateObject_V3* OpCreateObject::release_v3() {
  // @@protoc_insertion_point(field_release:Journal.OpCreateObject.v3)
  if (_internal_has_v3()) {
    clear_has_V();
    ::Journal::OpCreateObject_V3* temp = _impl_.V_.v3_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.V_.v3_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Journal::OpCreateObject_V3& OpCreateObject::_internal_v3() const {
  return _internal_has_v3()
      ? *_impl_.V_.v3_
      : reinterpret_cast< ::Journal::OpCreateObject_V3&>(::Journal::_OpCreateObject_V3_default_instance_);
}
inline const ::Journal::OpCreateObject_V3& OpCreateObject::v3() const {
  // @@protoc_insertion_point(field_get:Journal.OpCreateObject.v3)
  return _internal_v3();
}
inline ::Journal::OpCreateObject_V3* OpCreateObject::unsafe_arena_release_v3() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Journal.OpCreateObject.v3)
  if (_internal_has_v3()) {
    clear_has_V();
    ::Journal::OpCreateObject_V3* temp = _impl_.V_.v3_;
    _impl_.V_.v3_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OpCreateObject::unsafe_arena_set_allocated_v3(::Journal::OpCreateObject_V3* v3) {
  clear_V();
  if (v3) {
    set_has_v3();
    _impl_.V_.v3_ = v3;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Journal.OpCreateObject.v3)
}
inline ::Journal::OpCreateObject_V3* OpCreateObject::_internal_mutable_v3() {
  if (!_internal_has_v3()) {
    clear_V();
    set_has_v3();
    _impl_.V_.v3_ = CreateMaybeMessage< ::Journal::OpCreateObject_V3 >(GetArenaForAllocation());
  }
  return _impl_.V_.v3_;
}
inline ::Journal::OpCreateObject_V3* OpCreateObject::mutable_v3() {
  ::Journal::OpCreateObject_V3* _msg = _internal_mutable_v3();
  // @@protoc_insertion_point(field_mutable:Journal.OpCreateObject.v3)
  return _msg;
}

inline bool OpCreateObject::has_V() const {
  return V_case() != V_NOT_SET;
}
inline void OpCreateObject::clear_has_V() {
  _impl_._oneof_case_[0] = V_NOT_SET;
}
inline OpCreateObject::VCase OpCreateObject::V_case() const {
  return OpCreateObject::VCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Journal

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Journal::Operation_OperationExecutionModeEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Journal::Operation_OperationExecutionModeEnum>() {
  return ::Journal::Operation_OperationExecutionModeEnum_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_journal_5foperations_5fclient_2eproto
