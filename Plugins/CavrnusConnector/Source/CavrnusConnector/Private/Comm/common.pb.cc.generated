// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#include "common.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Common {
PROTOBUF_CONSTEXPR Float2::Float2(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Float2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Float2DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Float2DefaultTypeInternal() {}
  union {
    Float2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Float2DefaultTypeInternal _Float2_default_instance_;
PROTOBUF_CONSTEXPR Float2Array::Float2Array(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.f2array_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Float2ArrayDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Float2ArrayDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Float2ArrayDefaultTypeInternal() {}
  union {
    Float2Array _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Float2ArrayDefaultTypeInternal _Float2Array_default_instance_;
PROTOBUF_CONSTEXPR Float3::Float3(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Float3DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Float3DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Float3DefaultTypeInternal() {}
  union {
    Float3 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Float3DefaultTypeInternal _Float3_default_instance_;
PROTOBUF_CONSTEXPR Float3Array::Float3Array(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.f3array_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Float3ArrayDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Float3ArrayDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Float3ArrayDefaultTypeInternal() {}
  union {
    Float3Array _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Float3ArrayDefaultTypeInternal _Float3Array_default_instance_;
PROTOBUF_CONSTEXPR Float4::Float4(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_.w_)*/0} {}
struct Float4DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Float4DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Float4DefaultTypeInternal() {}
  union {
    Float4 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Float4DefaultTypeInternal _Float4_default_instance_;
PROTOBUF_CONSTEXPR Float4Array::Float4Array(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.f4array_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Float4ArrayDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Float4ArrayDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Float4ArrayDefaultTypeInternal() {}
  union {
    Float4Array _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Float4ArrayDefaultTypeInternal _Float4Array_default_instance_;
PROTOBUF_CONSTEXPR AxisAlignedBoundingBox::AxisAlignedBoundingBox(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.min_)*/nullptr
  , /*decltype(_impl_.max_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AxisAlignedBoundingBoxDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AxisAlignedBoundingBoxDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AxisAlignedBoundingBoxDefaultTypeInternal() {}
  union {
    AxisAlignedBoundingBox _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AxisAlignedBoundingBoxDefaultTypeInternal _AxisAlignedBoundingBox_default_instance_;
PROTOBUF_CONSTEXPR Color4::Color4(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.r_)*/0
  , /*decltype(_impl_.g_)*/0
  , /*decltype(_impl_.b_)*/0
  , /*decltype(_impl_.a_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Color4DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Color4DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Color4DefaultTypeInternal() {}
  union {
    Color4 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Color4DefaultTypeInternal _Color4_default_instance_;
PROTOBUF_CONSTEXPR IntSpan::IntSpan(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.from_)*/0
  , /*decltype(_impl_.to_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IntSpanDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IntSpanDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IntSpanDefaultTypeInternal() {}
  union {
    IntSpan _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IntSpanDefaultTypeInternal _IntSpan_default_instance_;
PROTOBUF_CONSTEXPR GenericMessage_V1::GenericMessage_V1(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.category_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GenericMessage_V1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR GenericMessage_V1DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GenericMessage_V1DefaultTypeInternal() {}
  union {
    GenericMessage_V1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GenericMessage_V1DefaultTypeInternal _GenericMessage_V1_default_instance_;
PROTOBUF_CONSTEXPR GenericMessage::GenericMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.V_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct GenericMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GenericMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GenericMessageDefaultTypeInternal() {}
  union {
    GenericMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GenericMessageDefaultTypeInternal _GenericMessage_default_instance_;
PROTOBUF_CONSTEXPR Ping_V1::Ping_V1(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.senttime_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Ping_V1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Ping_V1DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Ping_V1DefaultTypeInternal() {}
  union {
    Ping_V1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Ping_V1DefaultTypeInternal _Ping_V1_default_instance_;
PROTOBUF_CONSTEXPR Ping::Ping(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.V_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct PingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PingDefaultTypeInternal() {}
  union {
    Ping _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PingDefaultTypeInternal _Ping_default_instance_;
}  // namespace Common
static ::_pb::Metadata file_level_metadata_common_2eproto[13];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_common_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_common_2eproto = nullptr;

const uint32_t TableStruct_common_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Common::Float2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Common::Float2, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::Common::Float2, _impl_.y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Common::Float2Array, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Common::Float2Array, _impl_.f2array_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Common::Float3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Common::Float3, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::Common::Float3, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::Common::Float3, _impl_.z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Common::Float3Array, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Common::Float3Array, _impl_.f3array_),
  PROTOBUF_FIELD_OFFSET(::Common::Float4, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Common::Float4, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Common::Float4, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::Common::Float4, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::Common::Float4, _impl_.z_),
  PROTOBUF_FIELD_OFFSET(::Common::Float4, _impl_.w_),
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Common::Float4Array, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Common::Float4Array, _impl_.f4array_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Common::AxisAlignedBoundingBox, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Common::AxisAlignedBoundingBox, _impl_.min_),
  PROTOBUF_FIELD_OFFSET(::Common::AxisAlignedBoundingBox, _impl_.max_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Common::Color4, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Common::Color4, _impl_.r_),
  PROTOBUF_FIELD_OFFSET(::Common::Color4, _impl_.g_),
  PROTOBUF_FIELD_OFFSET(::Common::Color4, _impl_.b_),
  PROTOBUF_FIELD_OFFSET(::Common::Color4, _impl_.a_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Common::IntSpan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Common::IntSpan, _impl_.from_),
  PROTOBUF_FIELD_OFFSET(::Common::IntSpan, _impl_.to_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Common::GenericMessage_V1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Common::GenericMessage_V1, _impl_.category_),
  PROTOBUF_FIELD_OFFSET(::Common::GenericMessage_V1, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Common::GenericMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Common::GenericMessage, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::Common::GenericMessage, _impl_.V_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Common::Ping_V1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Common::Ping_V1, _impl_.senttime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Common::Ping, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Common::Ping, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::Common::Ping, _impl_.V_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Common::Float2)},
  { 8, -1, -1, sizeof(::Common::Float2Array)},
  { 15, -1, -1, sizeof(::Common::Float3)},
  { 24, -1, -1, sizeof(::Common::Float3Array)},
  { 31, 41, -1, sizeof(::Common::Float4)},
  { 45, -1, -1, sizeof(::Common::Float4Array)},
  { 52, -1, -1, sizeof(::Common::AxisAlignedBoundingBox)},
  { 60, -1, -1, sizeof(::Common::Color4)},
  { 70, -1, -1, sizeof(::Common::IntSpan)},
  { 78, -1, -1, sizeof(::Common::GenericMessage_V1)},
  { 86, -1, -1, sizeof(::Common::GenericMessage)},
  { 94, -1, -1, sizeof(::Common::Ping_V1)},
  { 101, -1, -1, sizeof(::Common::Ping)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Common::_Float2_default_instance_._instance,
  &::Common::_Float2Array_default_instance_._instance,
  &::Common::_Float3_default_instance_._instance,
  &::Common::_Float3Array_default_instance_._instance,
  &::Common::_Float4_default_instance_._instance,
  &::Common::_Float4Array_default_instance_._instance,
  &::Common::_AxisAlignedBoundingBox_default_instance_._instance,
  &::Common::_Color4_default_instance_._instance,
  &::Common::_IntSpan_default_instance_._instance,
  &::Common::_GenericMessage_V1_default_instance_._instance,
  &::Common::_GenericMessage_default_instance_._instance,
  &::Common::_Ping_V1_default_instance_._instance,
  &::Common::_Ping_default_instance_._instance,
};

const char descriptor_table_protodef_common_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014common.proto\022\006Common\032\037google/protobuf/"
  "timestamp.proto\"\036\n\006Float2\022\t\n\001x\030\001 \001(\002\022\t\n\001"
  "y\030\002 \001(\002\"\036\n\013Float2Array\022\017\n\007f2array\030\001 \001(\014\""
  ")\n\006Float3\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001"
  "(\002\"\036\n\013Float3Array\022\017\n\007f3array\030\001 \001(\014\"\?\n\006Fl"
  "oat4\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\022\016\n"
  "\001w\030\004 \001(\002H\000\210\001\001B\004\n\002_w\"\036\n\013Float4Array\022\017\n\007f4"
  "array\030\001 \001(\014\"R\n\026AxisAlignedBoundingBox\022\033\n"
  "\003min\030\001 \001(\0132\016.Common.Float3\022\033\n\003max\030\002 \001(\0132"
  "\016.Common.Float3\"4\n\006Color4\022\t\n\001r\030\001 \001(\002\022\t\n\001"
  "g\030\002 \001(\002\022\t\n\001b\030\003 \001(\002\022\t\n\001a\030\004 \001(\002\"#\n\007IntSpan"
  "\022\014\n\004from\030\001 \001(\005\022\n\n\002to\030\002 \001(\005\"\337\001\n\016GenericMe"
  "ssage\022\'\n\002v1\030\001 \001(\0132\031.Common.GenericMessag"
  "e.V1H\000\032\236\001\n\002V1\0224\n\010category\030\001 \001(\0162\".Common"
  ".GenericMessage.V1.Category\022\017\n\007message\030\002"
  " \001(\t\"Q\n\010Category\022\007\n\003Log\020\000\022\017\n\013UserMessage"
  "\020\001\022\031\n\025CriticalServerMessage\020\002\022\020\n\014Program"
  "Error\020\003B\003\n\001V\"^\n\004Ping\022\035\n\002v1\030\001 \001(\0132\017.Commo"
  "n.Ping.V1H\000\0322\n\002V1\022,\n\010sentTime\030\001 \001(\0132\032.go"
  "ogle.protobuf.TimestampB\003\n\001V*g\n\020Comparis"
  "onMethod\022\t\n\005Equal\020\000\022\014\n\010NotEqual\020\001\022\010\n\004Les"
  "s\020\n\022\017\n\013LessOrEqual\020\013\022\022\n\016GreaterOrEqual\020\024"
  "\022\013\n\007Greater\020\025B\036\252\002\033Collab.Proxy.Comm.Live"
  "Typesb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_common_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_common_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_common_2eproto = {
    false, false, 933, descriptor_table_protodef_common_2eproto,
    "common.proto",
    &descriptor_table_common_2eproto_once, descriptor_table_common_2eproto_deps, 1, 13,
    schemas, file_default_instances, TableStruct_common_2eproto::offsets,
    file_level_metadata_common_2eproto, file_level_enum_descriptors_common_2eproto,
    file_level_service_descriptors_common_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_common_2eproto_getter() {
  return &descriptor_table_common_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_common_2eproto(&descriptor_table_common_2eproto);
namespace Common {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GenericMessage_V1_Category_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[0];
}
bool GenericMessage_V1_Category_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr GenericMessage_V1_Category GenericMessage_V1::Log;
constexpr GenericMessage_V1_Category GenericMessage_V1::UserMessage;
constexpr GenericMessage_V1_Category GenericMessage_V1::CriticalServerMessage;
constexpr GenericMessage_V1_Category GenericMessage_V1::ProgramError;
constexpr GenericMessage_V1_Category GenericMessage_V1::Category_MIN;
constexpr GenericMessage_V1_Category GenericMessage_V1::Category_MAX;
constexpr int GenericMessage_V1::Category_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ComparisonMethod_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[1];
}
bool ComparisonMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 10:
    case 11:
    case 20:
    case 21:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Float2::_Internal {
 public:
};

Float2::Float2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Common.Float2)
}
Float2::Float2(const Float2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Float2* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:Common.Float2)
}

inline void Float2::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Float2::~Float2() {
  // @@protoc_insertion_point(destructor:Common.Float2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Float2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Float2::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Float2::Clear() {
// @@protoc_insertion_point(message_clear_start:Common.Float2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Float2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Float2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.Float2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.Float2)
  return target;
}

size_t Float2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Common.Float2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Float2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Float2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Float2::GetClassData() const { return &_class_data_; }


void Float2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Float2*>(&to_msg);
  auto& from = static_cast<const Float2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Common.Float2)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Float2::CopyFrom(const Float2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Common.Float2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Float2::IsInitialized() const {
  return true;
}

void Float2::InternalSwap(Float2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Float2, _impl_.y_)
      + sizeof(Float2::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(Float2, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Float2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[0]);
}

// ===================================================================

class Float2Array::_Internal {
 public:
};

Float2Array::Float2Array(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Common.Float2Array)
}
Float2Array::Float2Array(const Float2Array& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Float2Array* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.f2array_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.f2array_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.f2array_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_f2array().empty()) {
    _this->_impl_.f2array_.Set(from._internal_f2array(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Common.Float2Array)
}

inline void Float2Array::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.f2array_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.f2array_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.f2array_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Float2Array::~Float2Array() {
  // @@protoc_insertion_point(destructor:Common.Float2Array)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Float2Array::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.f2array_.Destroy();
}

void Float2Array::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Float2Array::Clear() {
// @@protoc_insertion_point(message_clear_start:Common.Float2Array)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.f2array_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Float2Array::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes f2array = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_f2array();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Float2Array::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.Float2Array)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes f2array = 1;
  if (!this->_internal_f2array().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_f2array(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.Float2Array)
  return target;
}

size_t Float2Array::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Common.Float2Array)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes f2array = 1;
  if (!this->_internal_f2array().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_f2array());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Float2Array::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Float2Array::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Float2Array::GetClassData() const { return &_class_data_; }


void Float2Array::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Float2Array*>(&to_msg);
  auto& from = static_cast<const Float2Array&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Common.Float2Array)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_f2array().empty()) {
    _this->_internal_set_f2array(from._internal_f2array());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Float2Array::CopyFrom(const Float2Array& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Common.Float2Array)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Float2Array::IsInitialized() const {
  return true;
}

void Float2Array::InternalSwap(Float2Array* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.f2array_, lhs_arena,
      &other->_impl_.f2array_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Float2Array::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[1]);
}

// ===================================================================

class Float3::_Internal {
 public:
};

Float3::Float3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Common.Float3)
}
Float3::Float3(const Float3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Float3* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.z_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  // @@protoc_insertion_point(copy_constructor:Common.Float3)
}

inline void Float3::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Float3::~Float3() {
  // @@protoc_insertion_point(destructor:Common.Float3)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Float3::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Float3::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Float3::Clear() {
// @@protoc_insertion_point(message_clear_start:Common.Float3)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.z_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Float3::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Float3::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.Float3)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.Float3)
  return target;
}

size_t Float3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Common.Float3)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Float3::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Float3::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Float3::GetClassData() const { return &_class_data_; }


void Float3::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Float3*>(&to_msg);
  auto& from = static_cast<const Float3&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Common.Float3)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Float3::CopyFrom(const Float3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Common.Float3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Float3::IsInitialized() const {
  return true;
}

void Float3::InternalSwap(Float3* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Float3, _impl_.z_)
      + sizeof(Float3::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(Float3, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Float3::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[2]);
}

// ===================================================================

class Float3Array::_Internal {
 public:
};

Float3Array::Float3Array(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Common.Float3Array)
}
Float3Array::Float3Array(const Float3Array& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Float3Array* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.f3array_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.f3array_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.f3array_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_f3array().empty()) {
    _this->_impl_.f3array_.Set(from._internal_f3array(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Common.Float3Array)
}

inline void Float3Array::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.f3array_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.f3array_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.f3array_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Float3Array::~Float3Array() {
  // @@protoc_insertion_point(destructor:Common.Float3Array)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Float3Array::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.f3array_.Destroy();
}

void Float3Array::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Float3Array::Clear() {
// @@protoc_insertion_point(message_clear_start:Common.Float3Array)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.f3array_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Float3Array::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes f3array = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_f3array();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Float3Array::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.Float3Array)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes f3array = 1;
  if (!this->_internal_f3array().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_f3array(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.Float3Array)
  return target;
}

size_t Float3Array::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Common.Float3Array)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes f3array = 1;
  if (!this->_internal_f3array().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_f3array());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Float3Array::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Float3Array::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Float3Array::GetClassData() const { return &_class_data_; }


void Float3Array::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Float3Array*>(&to_msg);
  auto& from = static_cast<const Float3Array&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Common.Float3Array)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_f3array().empty()) {
    _this->_internal_set_f3array(from._internal_f3array());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Float3Array::CopyFrom(const Float3Array& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Common.Float3Array)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Float3Array::IsInitialized() const {
  return true;
}

void Float3Array::InternalSwap(Float3Array* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.f3array_, lhs_arena,
      &other->_impl_.f3array_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Float3Array::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[3]);
}

// ===================================================================

class Float4::_Internal {
 public:
  using HasBits = decltype(std::declval<Float4>()._impl_._has_bits_);
  static void set_has_w(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Float4::Float4(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Common.Float4)
}
Float4::Float4(const Float4& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Float4* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , decltype(_impl_.w_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.w_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.w_));
  // @@protoc_insertion_point(copy_constructor:Common.Float4)
}

inline void Float4::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , decltype(_impl_.w_){0}
  };
}

Float4::~Float4() {
  // @@protoc_insertion_point(destructor:Common.Float4)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Float4::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Float4::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Float4::Clear() {
// @@protoc_insertion_point(message_clear_start:Common.Float4)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.z_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  _impl_.w_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Float4::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float w = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_w(&has_bits);
          _impl_.w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Float4::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.Float4)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  // optional float w = 4;
  if (_internal_has_w()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_w(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.Float4)
  return target;
}

size_t Float4::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Common.Float4)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  // optional float w = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Float4::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Float4::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Float4::GetClassData() const { return &_class_data_; }


void Float4::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Float4*>(&to_msg);
  auto& from = static_cast<const Float4&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Common.Float4)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  if (from._internal_has_w()) {
    _this->_internal_set_w(from._internal_w());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Float4::CopyFrom(const Float4& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Common.Float4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Float4::IsInitialized() const {
  return true;
}

void Float4::InternalSwap(Float4* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Float4, _impl_.w_)
      + sizeof(Float4::_impl_.w_)
      - PROTOBUF_FIELD_OFFSET(Float4, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Float4::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[4]);
}

// ===================================================================

class Float4Array::_Internal {
 public:
};

Float4Array::Float4Array(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Common.Float4Array)
}
Float4Array::Float4Array(const Float4Array& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Float4Array* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.f4array_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.f4array_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.f4array_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_f4array().empty()) {
    _this->_impl_.f4array_.Set(from._internal_f4array(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Common.Float4Array)
}

inline void Float4Array::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.f4array_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.f4array_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.f4array_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Float4Array::~Float4Array() {
  // @@protoc_insertion_point(destructor:Common.Float4Array)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Float4Array::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.f4array_.Destroy();
}

void Float4Array::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Float4Array::Clear() {
// @@protoc_insertion_point(message_clear_start:Common.Float4Array)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.f4array_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Float4Array::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes f4array = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_f4array();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Float4Array::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.Float4Array)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes f4array = 1;
  if (!this->_internal_f4array().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_f4array(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.Float4Array)
  return target;
}

size_t Float4Array::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Common.Float4Array)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes f4array = 1;
  if (!this->_internal_f4array().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_f4array());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Float4Array::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Float4Array::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Float4Array::GetClassData() const { return &_class_data_; }


void Float4Array::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Float4Array*>(&to_msg);
  auto& from = static_cast<const Float4Array&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Common.Float4Array)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_f4array().empty()) {
    _this->_internal_set_f4array(from._internal_f4array());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Float4Array::CopyFrom(const Float4Array& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Common.Float4Array)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Float4Array::IsInitialized() const {
  return true;
}

void Float4Array::InternalSwap(Float4Array* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.f4array_, lhs_arena,
      &other->_impl_.f4array_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Float4Array::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[5]);
}

// ===================================================================

class AxisAlignedBoundingBox::_Internal {
 public:
  static const ::Common::Float3& min(const AxisAlignedBoundingBox* msg);
  static const ::Common::Float3& max(const AxisAlignedBoundingBox* msg);
};

const ::Common::Float3&
AxisAlignedBoundingBox::_Internal::min(const AxisAlignedBoundingBox* msg) {
  return *msg->_impl_.min_;
}
const ::Common::Float3&
AxisAlignedBoundingBox::_Internal::max(const AxisAlignedBoundingBox* msg) {
  return *msg->_impl_.max_;
}
AxisAlignedBoundingBox::AxisAlignedBoundingBox(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Common.AxisAlignedBoundingBox)
}
AxisAlignedBoundingBox::AxisAlignedBoundingBox(const AxisAlignedBoundingBox& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AxisAlignedBoundingBox* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.min_){nullptr}
    , decltype(_impl_.max_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_min()) {
    _this->_impl_.min_ = new ::Common::Float3(*from._impl_.min_);
  }
  if (from._internal_has_max()) {
    _this->_impl_.max_ = new ::Common::Float3(*from._impl_.max_);
  }
  // @@protoc_insertion_point(copy_constructor:Common.AxisAlignedBoundingBox)
}

inline void AxisAlignedBoundingBox::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.min_){nullptr}
    , decltype(_impl_.max_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AxisAlignedBoundingBox::~AxisAlignedBoundingBox() {
  // @@protoc_insertion_point(destructor:Common.AxisAlignedBoundingBox)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AxisAlignedBoundingBox::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.min_;
  if (this != internal_default_instance()) delete _impl_.max_;
}

void AxisAlignedBoundingBox::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AxisAlignedBoundingBox::Clear() {
// @@protoc_insertion_point(message_clear_start:Common.AxisAlignedBoundingBox)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.min_ != nullptr) {
    delete _impl_.min_;
  }
  _impl_.min_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.max_ != nullptr) {
    delete _impl_.max_;
  }
  _impl_.max_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AxisAlignedBoundingBox::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Common.Float3 min = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_min(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Common.Float3 max = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_max(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AxisAlignedBoundingBox::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.AxisAlignedBoundingBox)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Common.Float3 min = 1;
  if (this->_internal_has_min()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::min(this),
        _Internal::min(this).GetCachedSize(), target, stream);
  }

  // .Common.Float3 max = 2;
  if (this->_internal_has_max()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::max(this),
        _Internal::max(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.AxisAlignedBoundingBox)
  return target;
}

size_t AxisAlignedBoundingBox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Common.AxisAlignedBoundingBox)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Common.Float3 min = 1;
  if (this->_internal_has_min()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.min_);
  }

  // .Common.Float3 max = 2;
  if (this->_internal_has_max()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.max_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AxisAlignedBoundingBox::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AxisAlignedBoundingBox::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AxisAlignedBoundingBox::GetClassData() const { return &_class_data_; }


void AxisAlignedBoundingBox::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AxisAlignedBoundingBox*>(&to_msg);
  auto& from = static_cast<const AxisAlignedBoundingBox&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Common.AxisAlignedBoundingBox)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_min()) {
    _this->_internal_mutable_min()->::Common::Float3::MergeFrom(
        from._internal_min());
  }
  if (from._internal_has_max()) {
    _this->_internal_mutable_max()->::Common::Float3::MergeFrom(
        from._internal_max());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AxisAlignedBoundingBox::CopyFrom(const AxisAlignedBoundingBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Common.AxisAlignedBoundingBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AxisAlignedBoundingBox::IsInitialized() const {
  return true;
}

void AxisAlignedBoundingBox::InternalSwap(AxisAlignedBoundingBox* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AxisAlignedBoundingBox, _impl_.max_)
      + sizeof(AxisAlignedBoundingBox::_impl_.max_)
      - PROTOBUF_FIELD_OFFSET(AxisAlignedBoundingBox, _impl_.min_)>(
          reinterpret_cast<char*>(&_impl_.min_),
          reinterpret_cast<char*>(&other->_impl_.min_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AxisAlignedBoundingBox::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[6]);
}

// ===================================================================

class Color4::_Internal {
 public:
};

Color4::Color4(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Common.Color4)
}
Color4::Color4(const Color4& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Color4* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.r_){}
    , decltype(_impl_.g_){}
    , decltype(_impl_.b_){}
    , decltype(_impl_.a_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.r_, &from._impl_.r_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.a_) -
    reinterpret_cast<char*>(&_impl_.r_)) + sizeof(_impl_.a_));
  // @@protoc_insertion_point(copy_constructor:Common.Color4)
}

inline void Color4::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.r_){0}
    , decltype(_impl_.g_){0}
    , decltype(_impl_.b_){0}
    , decltype(_impl_.a_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Color4::~Color4() {
  // @@protoc_insertion_point(destructor:Common.Color4)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Color4::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Color4::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Color4::Clear() {
// @@protoc_insertion_point(message_clear_start:Common.Color4)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.r_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.a_) -
      reinterpret_cast<char*>(&_impl_.r_)) + sizeof(_impl_.a_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Color4::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float r = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.r_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float g = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.g_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float b = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.b_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Color4::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.Color4)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float r = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_r = this->_internal_r();
  uint32_t raw_r;
  memcpy(&raw_r, &tmp_r, sizeof(tmp_r));
  if (raw_r != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_r(), target);
  }

  // float g = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_g = this->_internal_g();
  uint32_t raw_g;
  memcpy(&raw_g, &tmp_g, sizeof(tmp_g));
  if (raw_g != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_g(), target);
  }

  // float b = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_b = this->_internal_b();
  uint32_t raw_b;
  memcpy(&raw_b, &tmp_b, sizeof(tmp_b));
  if (raw_b != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_b(), target);
  }

  // float a = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a = this->_internal_a();
  uint32_t raw_a;
  memcpy(&raw_a, &tmp_a, sizeof(tmp_a));
  if (raw_a != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_a(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.Color4)
  return target;
}

size_t Color4::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Common.Color4)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float r = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_r = this->_internal_r();
  uint32_t raw_r;
  memcpy(&raw_r, &tmp_r, sizeof(tmp_r));
  if (raw_r != 0) {
    total_size += 1 + 4;
  }

  // float g = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_g = this->_internal_g();
  uint32_t raw_g;
  memcpy(&raw_g, &tmp_g, sizeof(tmp_g));
  if (raw_g != 0) {
    total_size += 1 + 4;
  }

  // float b = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_b = this->_internal_b();
  uint32_t raw_b;
  memcpy(&raw_b, &tmp_b, sizeof(tmp_b));
  if (raw_b != 0) {
    total_size += 1 + 4;
  }

  // float a = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a = this->_internal_a();
  uint32_t raw_a;
  memcpy(&raw_a, &tmp_a, sizeof(tmp_a));
  if (raw_a != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Color4::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Color4::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Color4::GetClassData() const { return &_class_data_; }


void Color4::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Color4*>(&to_msg);
  auto& from = static_cast<const Color4&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Common.Color4)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_r = from._internal_r();
  uint32_t raw_r;
  memcpy(&raw_r, &tmp_r, sizeof(tmp_r));
  if (raw_r != 0) {
    _this->_internal_set_r(from._internal_r());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_g = from._internal_g();
  uint32_t raw_g;
  memcpy(&raw_g, &tmp_g, sizeof(tmp_g));
  if (raw_g != 0) {
    _this->_internal_set_g(from._internal_g());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_b = from._internal_b();
  uint32_t raw_b;
  memcpy(&raw_b, &tmp_b, sizeof(tmp_b));
  if (raw_b != 0) {
    _this->_internal_set_b(from._internal_b());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a = from._internal_a();
  uint32_t raw_a;
  memcpy(&raw_a, &tmp_a, sizeof(tmp_a));
  if (raw_a != 0) {
    _this->_internal_set_a(from._internal_a());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Color4::CopyFrom(const Color4& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Common.Color4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Color4::IsInitialized() const {
  return true;
}

void Color4::InternalSwap(Color4* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Color4, _impl_.a_)
      + sizeof(Color4::_impl_.a_)
      - PROTOBUF_FIELD_OFFSET(Color4, _impl_.r_)>(
          reinterpret_cast<char*>(&_impl_.r_),
          reinterpret_cast<char*>(&other->_impl_.r_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Color4::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[7]);
}

// ===================================================================

class IntSpan::_Internal {
 public:
};

IntSpan::IntSpan(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Common.IntSpan)
}
IntSpan::IntSpan(const IntSpan& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IntSpan* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.from_){}
    , decltype(_impl_.to_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.from_, &from._impl_.from_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.to_) -
    reinterpret_cast<char*>(&_impl_.from_)) + sizeof(_impl_.to_));
  // @@protoc_insertion_point(copy_constructor:Common.IntSpan)
}

inline void IntSpan::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.from_){0}
    , decltype(_impl_.to_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IntSpan::~IntSpan() {
  // @@protoc_insertion_point(destructor:Common.IntSpan)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IntSpan::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IntSpan::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IntSpan::Clear() {
// @@protoc_insertion_point(message_clear_start:Common.IntSpan)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.to_) -
      reinterpret_cast<char*>(&_impl_.from_)) + sizeof(_impl_.to_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IntSpan::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IntSpan::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.IntSpan)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 from = 1;
  if (this->_internal_from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_from(), target);
  }

  // int32 to = 2;
  if (this->_internal_to() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_to(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.IntSpan)
  return target;
}

size_t IntSpan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Common.IntSpan)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 from = 1;
  if (this->_internal_from() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_from());
  }

  // int32 to = 2;
  if (this->_internal_to() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_to());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IntSpan::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IntSpan::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IntSpan::GetClassData() const { return &_class_data_; }


void IntSpan::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IntSpan*>(&to_msg);
  auto& from = static_cast<const IntSpan&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Common.IntSpan)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_from() != 0) {
    _this->_internal_set_from(from._internal_from());
  }
  if (from._internal_to() != 0) {
    _this->_internal_set_to(from._internal_to());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IntSpan::CopyFrom(const IntSpan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Common.IntSpan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntSpan::IsInitialized() const {
  return true;
}

void IntSpan::InternalSwap(IntSpan* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IntSpan, _impl_.to_)
      + sizeof(IntSpan::_impl_.to_)
      - PROTOBUF_FIELD_OFFSET(IntSpan, _impl_.from_)>(
          reinterpret_cast<char*>(&_impl_.from_),
          reinterpret_cast<char*>(&other->_impl_.from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IntSpan::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[8]);
}

// ===================================================================

class GenericMessage_V1::_Internal {
 public:
};

GenericMessage_V1::GenericMessage_V1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Common.GenericMessage.V1)
}
GenericMessage_V1::GenericMessage_V1(const GenericMessage_V1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GenericMessage_V1* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.category_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.category_ = from._impl_.category_;
  // @@protoc_insertion_point(copy_constructor:Common.GenericMessage.V1)
}

inline void GenericMessage_V1::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.category_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GenericMessage_V1::~GenericMessage_V1() {
  // @@protoc_insertion_point(destructor:Common.GenericMessage.V1)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GenericMessage_V1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void GenericMessage_V1::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GenericMessage_V1::Clear() {
// @@protoc_insertion_point(message_clear_start:Common.GenericMessage.V1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.category_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenericMessage_V1::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Common.GenericMessage.V1.Category category = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_category(static_cast<::Common::GenericMessage_V1_Category>(val));
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Common.GenericMessage.V1.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GenericMessage_V1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.GenericMessage.V1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Common.GenericMessage.V1.Category category = 1;
  if (this->_internal_category() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_category(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Common.GenericMessage.V1.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.GenericMessage.V1)
  return target;
}

size_t GenericMessage_V1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Common.GenericMessage.V1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .Common.GenericMessage.V1.Category category = 1;
  if (this->_internal_category() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_category());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GenericMessage_V1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GenericMessage_V1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GenericMessage_V1::GetClassData() const { return &_class_data_; }


void GenericMessage_V1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GenericMessage_V1*>(&to_msg);
  auto& from = static_cast<const GenericMessage_V1&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Common.GenericMessage.V1)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_category() != 0) {
    _this->_internal_set_category(from._internal_category());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GenericMessage_V1::CopyFrom(const GenericMessage_V1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Common.GenericMessage.V1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericMessage_V1::IsInitialized() const {
  return true;
}

void GenericMessage_V1::InternalSwap(GenericMessage_V1* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  swap(_impl_.category_, other->_impl_.category_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GenericMessage_V1::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[9]);
}

// ===================================================================

class GenericMessage::_Internal {
 public:
  static const ::Common::GenericMessage_V1& v1(const GenericMessage* msg);
};

const ::Common::GenericMessage_V1&
GenericMessage::_Internal::v1(const GenericMessage* msg) {
  return *msg->_impl_.V_.v1_;
}
void GenericMessage::set_allocated_v1(::Common::GenericMessage_V1* v1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_V();
  if (v1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(v1);
    if (message_arena != submessage_arena) {
      v1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, v1, submessage_arena);
    }
    set_has_v1();
    _impl_.V_.v1_ = v1;
  }
  // @@protoc_insertion_point(field_set_allocated:Common.GenericMessage.v1)
}
GenericMessage::GenericMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Common.GenericMessage)
}
GenericMessage::GenericMessage(const GenericMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GenericMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.V_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_V();
  switch (from.V_case()) {
    case kV1: {
      _this->_internal_mutable_v1()->::Common::GenericMessage_V1::MergeFrom(
          from._internal_v1());
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Common.GenericMessage)
}

inline void GenericMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.V_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_V();
}

GenericMessage::~GenericMessage() {
  // @@protoc_insertion_point(destructor:Common.GenericMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GenericMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_V()) {
    clear_V();
  }
}

void GenericMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GenericMessage::clear_V() {
// @@protoc_insertion_point(one_of_clear_start:Common.GenericMessage)
  switch (V_case()) {
    case kV1: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.V_.v1_;
      }
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = V_NOT_SET;
}


void GenericMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:Common.GenericMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_V();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenericMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Common.GenericMessage.V1 v1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_v1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GenericMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.GenericMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Common.GenericMessage.V1 v1 = 1;
  if (_internal_has_v1()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::v1(this),
        _Internal::v1(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.GenericMessage)
  return target;
}

size_t GenericMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Common.GenericMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (V_case()) {
    // .Common.GenericMessage.V1 v1 = 1;
    case kV1: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.V_.v1_);
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GenericMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GenericMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GenericMessage::GetClassData() const { return &_class_data_; }


void GenericMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GenericMessage*>(&to_msg);
  auto& from = static_cast<const GenericMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Common.GenericMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.V_case()) {
    case kV1: {
      _this->_internal_mutable_v1()->::Common::GenericMessage_V1::MergeFrom(
          from._internal_v1());
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GenericMessage::CopyFrom(const GenericMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Common.GenericMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericMessage::IsInitialized() const {
  return true;
}

void GenericMessage::InternalSwap(GenericMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.V_, other->_impl_.V_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GenericMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[10]);
}

// ===================================================================

class Ping_V1::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& senttime(const Ping_V1* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Ping_V1::_Internal::senttime(const Ping_V1* msg) {
  return *msg->_impl_.senttime_;
}
void Ping_V1::clear_senttime() {
  if (GetArenaForAllocation() == nullptr && _impl_.senttime_ != nullptr) {
    delete _impl_.senttime_;
  }
  _impl_.senttime_ = nullptr;
}
Ping_V1::Ping_V1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Common.Ping.V1)
}
Ping_V1::Ping_V1(const Ping_V1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Ping_V1* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.senttime_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_senttime()) {
    _this->_impl_.senttime_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.senttime_);
  }
  // @@protoc_insertion_point(copy_constructor:Common.Ping.V1)
}

inline void Ping_V1::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.senttime_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Ping_V1::~Ping_V1() {
  // @@protoc_insertion_point(destructor:Common.Ping.V1)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Ping_V1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.senttime_;
}

void Ping_V1::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Ping_V1::Clear() {
// @@protoc_insertion_point(message_clear_start:Common.Ping.V1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.senttime_ != nullptr) {
    delete _impl_.senttime_;
  }
  _impl_.senttime_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ping_V1::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp sentTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_senttime(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Ping_V1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.Ping.V1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp sentTime = 1;
  if (this->_internal_has_senttime()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::senttime(this),
        _Internal::senttime(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.Ping.V1)
  return target;
}

size_t Ping_V1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Common.Ping.V1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp sentTime = 1;
  if (this->_internal_has_senttime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.senttime_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Ping_V1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Ping_V1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Ping_V1::GetClassData() const { return &_class_data_; }


void Ping_V1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Ping_V1*>(&to_msg);
  auto& from = static_cast<const Ping_V1&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Common.Ping.V1)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_senttime()) {
    _this->_internal_mutable_senttime()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_senttime());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Ping_V1::CopyFrom(const Ping_V1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Common.Ping.V1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ping_V1::IsInitialized() const {
  return true;
}

void Ping_V1::InternalSwap(Ping_V1* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.senttime_, other->_impl_.senttime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Ping_V1::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[11]);
}

// ===================================================================

class Ping::_Internal {
 public:
  static const ::Common::Ping_V1& v1(const Ping* msg);
};

const ::Common::Ping_V1&
Ping::_Internal::v1(const Ping* msg) {
  return *msg->_impl_.V_.v1_;
}
void Ping::set_allocated_v1(::Common::Ping_V1* v1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_V();
  if (v1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(v1);
    if (message_arena != submessage_arena) {
      v1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, v1, submessage_arena);
    }
    set_has_v1();
    _impl_.V_.v1_ = v1;
  }
  // @@protoc_insertion_point(field_set_allocated:Common.Ping.v1)
}
Ping::Ping(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Common.Ping)
}
Ping::Ping(const Ping& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Ping* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.V_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_V();
  switch (from.V_case()) {
    case kV1: {
      _this->_internal_mutable_v1()->::Common::Ping_V1::MergeFrom(
          from._internal_v1());
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Common.Ping)
}

inline void Ping::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.V_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_V();
}

Ping::~Ping() {
  // @@protoc_insertion_point(destructor:Common.Ping)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Ping::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_V()) {
    clear_V();
  }
}

void Ping::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Ping::clear_V() {
// @@protoc_insertion_point(one_of_clear_start:Common.Ping)
  switch (V_case()) {
    case kV1: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.V_.v1_;
      }
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = V_NOT_SET;
}


void Ping::Clear() {
// @@protoc_insertion_point(message_clear_start:Common.Ping)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_V();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ping::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Common.Ping.V1 v1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_v1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Ping::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common.Ping)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Common.Ping.V1 v1 = 1;
  if (_internal_has_v1()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::v1(this),
        _Internal::v1(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common.Ping)
  return target;
}

size_t Ping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Common.Ping)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (V_case()) {
    // .Common.Ping.V1 v1 = 1;
    case kV1: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.V_.v1_);
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Ping::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Ping::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Ping::GetClassData() const { return &_class_data_; }


void Ping::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Ping*>(&to_msg);
  auto& from = static_cast<const Ping&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Common.Ping)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.V_case()) {
    case kV1: {
      _this->_internal_mutable_v1()->::Common::Ping_V1::MergeFrom(
          from._internal_v1());
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Ping::CopyFrom(const Ping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Common.Ping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ping::IsInitialized() const {
  return true;
}

void Ping::InternalSwap(Ping* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.V_, other->_impl_.V_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Ping::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[12]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Common
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Common::Float2*
Arena::CreateMaybeMessage< ::Common::Float2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Common::Float2 >(arena);
}
template<> PROTOBUF_NOINLINE ::Common::Float2Array*
Arena::CreateMaybeMessage< ::Common::Float2Array >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Common::Float2Array >(arena);
}
template<> PROTOBUF_NOINLINE ::Common::Float3*
Arena::CreateMaybeMessage< ::Common::Float3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Common::Float3 >(arena);
}
template<> PROTOBUF_NOINLINE ::Common::Float3Array*
Arena::CreateMaybeMessage< ::Common::Float3Array >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Common::Float3Array >(arena);
}
template<> PROTOBUF_NOINLINE ::Common::Float4*
Arena::CreateMaybeMessage< ::Common::Float4 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Common::Float4 >(arena);
}
template<> PROTOBUF_NOINLINE ::Common::Float4Array*
Arena::CreateMaybeMessage< ::Common::Float4Array >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Common::Float4Array >(arena);
}
template<> PROTOBUF_NOINLINE ::Common::AxisAlignedBoundingBox*
Arena::CreateMaybeMessage< ::Common::AxisAlignedBoundingBox >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Common::AxisAlignedBoundingBox >(arena);
}
template<> PROTOBUF_NOINLINE ::Common::Color4*
Arena::CreateMaybeMessage< ::Common::Color4 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Common::Color4 >(arena);
}
template<> PROTOBUF_NOINLINE ::Common::IntSpan*
Arena::CreateMaybeMessage< ::Common::IntSpan >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Common::IntSpan >(arena);
}
template<> PROTOBUF_NOINLINE ::Common::GenericMessage_V1*
Arena::CreateMaybeMessage< ::Common::GenericMessage_V1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Common::GenericMessage_V1 >(arena);
}
template<> PROTOBUF_NOINLINE ::Common::GenericMessage*
Arena::CreateMaybeMessage< ::Common::GenericMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Common::GenericMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::Common::Ping_V1*
Arena::CreateMaybeMessage< ::Common::Ping_V1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Common::Ping_V1 >(arena);
}
template<> PROTOBUF_NOINLINE ::Common::Ping*
Arena::CreateMaybeMessage< ::Common::Ping >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Common::Ping >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
