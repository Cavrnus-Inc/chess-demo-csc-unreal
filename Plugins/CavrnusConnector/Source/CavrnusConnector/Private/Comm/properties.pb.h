// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: properties.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_properties_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_properties_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_properties_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_properties_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_properties_2eproto;
namespace Property {
class AnyPropertyDeclaration;
struct AnyPropertyDeclarationDefaultTypeInternal;
extern AnyPropertyDeclarationDefaultTypeInternal _AnyPropertyDeclaration_default_instance_;
class AnyPropertyValue;
struct AnyPropertyValueDefaultTypeInternal;
extern AnyPropertyValueDefaultTypeInternal _AnyPropertyValue_default_instance_;
class BooleanEditingMetadata;
struct BooleanEditingMetadataDefaultTypeInternal;
extern BooleanEditingMetadataDefaultTypeInternal _BooleanEditingMetadata_default_instance_;
class BooleanGeneratorMetadata;
struct BooleanGeneratorMetadataDefaultTypeInternal;
extern BooleanGeneratorMetadataDefaultTypeInternal _BooleanGeneratorMetadata_default_instance_;
class BooleanPropertyAssignment;
struct BooleanPropertyAssignmentDefaultTypeInternal;
extern BooleanPropertyAssignmentDefaultTypeInternal _BooleanPropertyAssignment_default_instance_;
class BooleanPropertyDeclaration;
struct BooleanPropertyDeclarationDefaultTypeInternal;
extern BooleanPropertyDeclarationDefaultTypeInternal _BooleanPropertyDeclaration_default_instance_;
class BooleanPropertyKeyframed;
struct BooleanPropertyKeyframedDefaultTypeInternal;
extern BooleanPropertyKeyframedDefaultTypeInternal _BooleanPropertyKeyframed_default_instance_;
class BooleanPropertyKeyframed_BooleanKeyframe;
struct BooleanPropertyKeyframed_BooleanKeyframeDefaultTypeInternal;
extern BooleanPropertyKeyframed_BooleanKeyframeDefaultTypeInternal _BooleanPropertyKeyframed_BooleanKeyframe_default_instance_;
class BooleanPropertyMetadata;
struct BooleanPropertyMetadataDefaultTypeInternal;
extern BooleanPropertyMetadataDefaultTypeInternal _BooleanPropertyMetadata_default_instance_;
class BooleanPropertyScalarComparison;
struct BooleanPropertyScalarComparisonDefaultTypeInternal;
extern BooleanPropertyScalarComparisonDefaultTypeInternal _BooleanPropertyScalarComparison_default_instance_;
class BooleanPropertyValue;
struct BooleanPropertyValueDefaultTypeInternal;
extern BooleanPropertyValueDefaultTypeInternal _BooleanPropertyValue_default_instance_;
class ColorEditingMetadata;
struct ColorEditingMetadataDefaultTypeInternal;
extern ColorEditingMetadataDefaultTypeInternal _ColorEditingMetadata_default_instance_;
class ColorGeneratorMetadata;
struct ColorGeneratorMetadataDefaultTypeInternal;
extern ColorGeneratorMetadataDefaultTypeInternal _ColorGeneratorMetadata_default_instance_;
class ColorPerChannel;
struct ColorPerChannelDefaultTypeInternal;
extern ColorPerChannelDefaultTypeInternal _ColorPerChannel_default_instance_;
class ColorPropertyApproach;
struct ColorPropertyApproachDefaultTypeInternal;
extern ColorPropertyApproachDefaultTypeInternal _ColorPropertyApproach_default_instance_;
class ColorPropertyAssignment;
struct ColorPropertyAssignmentDefaultTypeInternal;
extern ColorPropertyAssignmentDefaultTypeInternal _ColorPropertyAssignment_default_instance_;
class ColorPropertyDeclaration;
struct ColorPropertyDeclarationDefaultTypeInternal;
extern ColorPropertyDeclarationDefaultTypeInternal _ColorPropertyDeclaration_default_instance_;
class ColorPropertyInterpolator;
struct ColorPropertyInterpolatorDefaultTypeInternal;
extern ColorPropertyInterpolatorDefaultTypeInternal _ColorPropertyInterpolator_default_instance_;
class ColorPropertyKeyframed;
struct ColorPropertyKeyframedDefaultTypeInternal;
extern ColorPropertyKeyframedDefaultTypeInternal _ColorPropertyKeyframed_default_instance_;
class ColorPropertyKeyframed_ColorKeyframe;
struct ColorPropertyKeyframed_ColorKeyframeDefaultTypeInternal;
extern ColorPropertyKeyframed_ColorKeyframeDefaultTypeInternal _ColorPropertyKeyframed_ColorKeyframe_default_instance_;
class ColorPropertyMetadata;
struct ColorPropertyMetadataDefaultTypeInternal;
extern ColorPropertyMetadataDefaultTypeInternal _ColorPropertyMetadata_default_instance_;
class ColorPropertyValue;
struct ColorPropertyValueDefaultTypeInternal;
extern ColorPropertyValueDefaultTypeInternal _ColorPropertyValue_default_instance_;
class CustomGeneratorSubGen;
struct CustomGeneratorSubGenDefaultTypeInternal;
extern CustomGeneratorSubGenDefaultTypeInternal _CustomGeneratorSubGen_default_instance_;
class CustomGeneratorSubGenBoolean;
struct CustomGeneratorSubGenBooleanDefaultTypeInternal;
extern CustomGeneratorSubGenBooleanDefaultTypeInternal _CustomGeneratorSubGenBoolean_default_instance_;
class CustomGeneratorSubGenColor;
struct CustomGeneratorSubGenColorDefaultTypeInternal;
extern CustomGeneratorSubGenColorDefaultTypeInternal _CustomGeneratorSubGenColor_default_instance_;
class CustomGeneratorSubGenJson;
struct CustomGeneratorSubGenJsonDefaultTypeInternal;
extern CustomGeneratorSubGenJsonDefaultTypeInternal _CustomGeneratorSubGenJson_default_instance_;
class CustomGeneratorSubGenLink;
struct CustomGeneratorSubGenLinkDefaultTypeInternal;
extern CustomGeneratorSubGenLinkDefaultTypeInternal _CustomGeneratorSubGenLink_default_instance_;
class CustomGeneratorSubGenScalar;
struct CustomGeneratorSubGenScalarDefaultTypeInternal;
extern CustomGeneratorSubGenScalarDefaultTypeInternal _CustomGeneratorSubGenScalar_default_instance_;
class CustomGeneratorSubGenString;
struct CustomGeneratorSubGenStringDefaultTypeInternal;
extern CustomGeneratorSubGenStringDefaultTypeInternal _CustomGeneratorSubGenString_default_instance_;
class CustomGeneratorSubGenTransform;
struct CustomGeneratorSubGenTransformDefaultTypeInternal;
extern CustomGeneratorSubGenTransformDefaultTypeInternal _CustomGeneratorSubGenTransform_default_instance_;
class CustomGeneratorSubGenVector;
struct CustomGeneratorSubGenVectorDefaultTypeInternal;
extern CustomGeneratorSubGenVectorDefaultTypeInternal _CustomGeneratorSubGenVector_default_instance_;
class CustomGeneratorValue;
struct CustomGeneratorValueDefaultTypeInternal;
extern CustomGeneratorValueDefaultTypeInternal _CustomGeneratorValue_default_instance_;
class GeneratorMetadata;
struct GeneratorMetadataDefaultTypeInternal;
extern GeneratorMetadataDefaultTypeInternal _GeneratorMetadata_default_instance_;
class Interpolation;
struct InterpolationDefaultTypeInternal;
extern InterpolationDefaultTypeInternal _Interpolation_default_instance_;
class JsonEditingMetadata;
struct JsonEditingMetadataDefaultTypeInternal;
extern JsonEditingMetadataDefaultTypeInternal _JsonEditingMetadata_default_instance_;
class JsonGeneratorMetadata;
struct JsonGeneratorMetadataDefaultTypeInternal;
extern JsonGeneratorMetadataDefaultTypeInternal _JsonGeneratorMetadata_default_instance_;
class JsonPropertyAssignment;
struct JsonPropertyAssignmentDefaultTypeInternal;
extern JsonPropertyAssignmentDefaultTypeInternal _JsonPropertyAssignment_default_instance_;
class JsonPropertyDeclaration;
struct JsonPropertyDeclarationDefaultTypeInternal;
extern JsonPropertyDeclarationDefaultTypeInternal _JsonPropertyDeclaration_default_instance_;
class JsonPropertyMetadata;
struct JsonPropertyMetadataDefaultTypeInternal;
extern JsonPropertyMetadataDefaultTypeInternal _JsonPropertyMetadata_default_instance_;
class JsonPropertyValue;
struct JsonPropertyValueDefaultTypeInternal;
extern JsonPropertyValueDefaultTypeInternal _JsonPropertyValue_default_instance_;
class LinkContentTypeSpecifier;
struct LinkContentTypeSpecifierDefaultTypeInternal;
extern LinkContentTypeSpecifierDefaultTypeInternal _LinkContentTypeSpecifier_default_instance_;
class LinkEditingMetadata;
struct LinkEditingMetadataDefaultTypeInternal;
extern LinkEditingMetadataDefaultTypeInternal _LinkEditingMetadata_default_instance_;
class LinkGeneratorMetadata;
struct LinkGeneratorMetadataDefaultTypeInternal;
extern LinkGeneratorMetadataDefaultTypeInternal _LinkGeneratorMetadata_default_instance_;
class LinkPropertyAssignment;
struct LinkPropertyAssignmentDefaultTypeInternal;
extern LinkPropertyAssignmentDefaultTypeInternal _LinkPropertyAssignment_default_instance_;
class LinkPropertyDeclaration;
struct LinkPropertyDeclarationDefaultTypeInternal;
extern LinkPropertyDeclarationDefaultTypeInternal _LinkPropertyDeclaration_default_instance_;
class LinkPropertyMetadata;
struct LinkPropertyMetadataDefaultTypeInternal;
extern LinkPropertyMetadataDefaultTypeInternal _LinkPropertyMetadata_default_instance_;
class LinkPropertyValue;
struct LinkPropertyValueDefaultTypeInternal;
extern LinkPropertyValueDefaultTypeInternal _LinkPropertyValue_default_instance_;
class PropertyIdentifier;
struct PropertyIdentifierDefaultTypeInternal;
extern PropertyIdentifierDefaultTypeInternal _PropertyIdentifier_default_instance_;
class PropertyMetadata;
struct PropertyMetadataDefaultTypeInternal;
extern PropertyMetadataDefaultTypeInternal _PropertyMetadata_default_instance_;
class ScalarEditingMetadata;
struct ScalarEditingMetadataDefaultTypeInternal;
extern ScalarEditingMetadataDefaultTypeInternal _ScalarEditingMetadata_default_instance_;
class ScalarGeneratorMetadata;
struct ScalarGeneratorMetadataDefaultTypeInternal;
extern ScalarGeneratorMetadataDefaultTypeInternal _ScalarGeneratorMetadata_default_instance_;
class ScalarPropertyApproach;
struct ScalarPropertyApproachDefaultTypeInternal;
extern ScalarPropertyApproachDefaultTypeInternal _ScalarPropertyApproach_default_instance_;
class ScalarPropertyAssignment;
struct ScalarPropertyAssignmentDefaultTypeInternal;
extern ScalarPropertyAssignmentDefaultTypeInternal _ScalarPropertyAssignment_default_instance_;
class ScalarPropertyDeclaration;
struct ScalarPropertyDeclarationDefaultTypeInternal;
extern ScalarPropertyDeclarationDefaultTypeInternal _ScalarPropertyDeclaration_default_instance_;
class ScalarPropertyInterpolator;
struct ScalarPropertyInterpolatorDefaultTypeInternal;
extern ScalarPropertyInterpolatorDefaultTypeInternal _ScalarPropertyInterpolator_default_instance_;
class ScalarPropertyKeyframed;
struct ScalarPropertyKeyframedDefaultTypeInternal;
extern ScalarPropertyKeyframedDefaultTypeInternal _ScalarPropertyKeyframed_default_instance_;
class ScalarPropertyKeyframed_ScalarKeyframe;
struct ScalarPropertyKeyframed_ScalarKeyframeDefaultTypeInternal;
extern ScalarPropertyKeyframed_ScalarKeyframeDefaultTypeInternal _ScalarPropertyKeyframed_ScalarKeyframe_default_instance_;
class ScalarPropertyMetadata;
struct ScalarPropertyMetadataDefaultTypeInternal;
extern ScalarPropertyMetadataDefaultTypeInternal _ScalarPropertyMetadata_default_instance_;
class ScalarPropertyPlayback;
struct ScalarPropertyPlaybackDefaultTypeInternal;
extern ScalarPropertyPlaybackDefaultTypeInternal _ScalarPropertyPlayback_default_instance_;
class ScalarPropertyPlaybackBasic;
struct ScalarPropertyPlaybackBasicDefaultTypeInternal;
extern ScalarPropertyPlaybackBasicDefaultTypeInternal _ScalarPropertyPlaybackBasic_default_instance_;
class ScalarPropertyPulse;
struct ScalarPropertyPulseDefaultTypeInternal;
extern ScalarPropertyPulseDefaultTypeInternal _ScalarPropertyPulse_default_instance_;
class ScalarPropertyValue;
struct ScalarPropertyValueDefaultTypeInternal;
extern ScalarPropertyValueDefaultTypeInternal _ScalarPropertyValue_default_instance_;
class StringEditingMetadata;
struct StringEditingMetadataDefaultTypeInternal;
extern StringEditingMetadataDefaultTypeInternal _StringEditingMetadata_default_instance_;
class StringGeneratorMetadata;
struct StringGeneratorMetadataDefaultTypeInternal;
extern StringGeneratorMetadataDefaultTypeInternal _StringGeneratorMetadata_default_instance_;
class StringPropertyAssignment;
struct StringPropertyAssignmentDefaultTypeInternal;
extern StringPropertyAssignmentDefaultTypeInternal _StringPropertyAssignment_default_instance_;
class StringPropertyDeclaration;
struct StringPropertyDeclarationDefaultTypeInternal;
extern StringPropertyDeclarationDefaultTypeInternal _StringPropertyDeclaration_default_instance_;
class StringPropertyFormatted;
struct StringPropertyFormattedDefaultTypeInternal;
extern StringPropertyFormattedDefaultTypeInternal _StringPropertyFormatted_default_instance_;
class StringPropertyMetadata;
struct StringPropertyMetadataDefaultTypeInternal;
extern StringPropertyMetadataDefaultTypeInternal _StringPropertyMetadata_default_instance_;
class StringPropertyValue;
struct StringPropertyValueDefaultTypeInternal;
extern StringPropertyValueDefaultTypeInternal _StringPropertyValue_default_instance_;
class StringValueEnumerationOption;
struct StringValueEnumerationOptionDefaultTypeInternal;
extern StringValueEnumerationOptionDefaultTypeInternal _StringValueEnumerationOption_default_instance_;
class TransformEditingMetadata;
struct TransformEditingMetadataDefaultTypeInternal;
extern TransformEditingMetadataDefaultTypeInternal _TransformEditingMetadata_default_instance_;
class TransformGeneratorMetadata;
struct TransformGeneratorMetadataDefaultTypeInternal;
extern TransformGeneratorMetadataDefaultTypeInternal _TransformGeneratorMetadata_default_instance_;
class TransformPropertyAssignment;
struct TransformPropertyAssignmentDefaultTypeInternal;
extern TransformPropertyAssignmentDefaultTypeInternal _TransformPropertyAssignment_default_instance_;
class TransformPropertyDeclaration;
struct TransformPropertyDeclarationDefaultTypeInternal;
extern TransformPropertyDeclarationDefaultTypeInternal _TransformPropertyDeclaration_default_instance_;
class TransformPropertyMetadata;
struct TransformPropertyMetadataDefaultTypeInternal;
extern TransformPropertyMetadataDefaultTypeInternal _TransformPropertyMetadata_default_instance_;
class TransformSet;
struct TransformSetDefaultTypeInternal;
extern TransformSetDefaultTypeInternal _TransformSet_default_instance_;
class TransformSetApproach;
struct TransformSetApproachDefaultTypeInternal;
extern TransformSetApproachDefaultTypeInternal _TransformSetApproach_default_instance_;
class TransformSetConditional;
struct TransformSetConditionalDefaultTypeInternal;
extern TransformSetConditionalDefaultTypeInternal _TransformSetConditional_default_instance_;
class TransformSetInterpolatorLookAt;
struct TransformSetInterpolatorLookAtDefaultTypeInternal;
extern TransformSetInterpolatorLookAtDefaultTypeInternal _TransformSetInterpolatorLookAt_default_instance_;
class TransformSetInterpolatorSQT;
struct TransformSetInterpolatorSQTDefaultTypeInternal;
extern TransformSetInterpolatorSQTDefaultTypeInternal _TransformSetInterpolatorSQT_default_instance_;
class TransformSetInterpolatorSRT;
struct TransformSetInterpolatorSRTDefaultTypeInternal;
extern TransformSetInterpolatorSRTDefaultTypeInternal _TransformSetInterpolatorSRT_default_instance_;
class TransformSetLookAt;
struct TransformSetLookAtDefaultTypeInternal;
extern TransformSetLookAtDefaultTypeInternal _TransformSetLookAt_default_instance_;
class TransformSetSQT;
struct TransformSetSQTDefaultTypeInternal;
extern TransformSetSQTDefaultTypeInternal _TransformSetSQT_default_instance_;
class TransformSetSRT;
struct TransformSetSRTDefaultTypeInternal;
extern TransformSetSRTDefaultTypeInternal _TransformSetSRT_default_instance_;
class TransformUpdate;
struct TransformUpdateDefaultTypeInternal;
extern TransformUpdateDefaultTypeInternal _TransformUpdate_default_instance_;
class TransformUpdateAddQ;
struct TransformUpdateAddQDefaultTypeInternal;
extern TransformUpdateAddQDefaultTypeInternal _TransformUpdateAddQ_default_instance_;
class TransformUpdateAddR;
struct TransformUpdateAddRDefaultTypeInternal;
extern TransformUpdateAddRDefaultTypeInternal _TransformUpdateAddR_default_instance_;
class TransformUpdateAddT;
struct TransformUpdateAddTDefaultTypeInternal;
extern TransformUpdateAddTDefaultTypeInternal _TransformUpdateAddT_default_instance_;
class TransformUpdateLookAt;
struct TransformUpdateLookAtDefaultTypeInternal;
extern TransformUpdateLookAtDefaultTypeInternal _TransformUpdateLookAt_default_instance_;
class TransformUpdateRotateToEuler;
struct TransformUpdateRotateToEulerDefaultTypeInternal;
extern TransformUpdateRotateToEulerDefaultTypeInternal _TransformUpdateRotateToEuler_default_instance_;
class TransformUpdateRotateToQuat;
struct TransformUpdateRotateToQuatDefaultTypeInternal;
extern TransformUpdateRotateToQuatDefaultTypeInternal _TransformUpdateRotateToQuat_default_instance_;
class TransformUpdateScaleNonuniform;
struct TransformUpdateScaleNonuniformDefaultTypeInternal;
extern TransformUpdateScaleNonuniformDefaultTypeInternal _TransformUpdateScaleNonuniform_default_instance_;
class TransformUpdateScaleUniform;
struct TransformUpdateScaleUniformDefaultTypeInternal;
extern TransformUpdateScaleUniformDefaultTypeInternal _TransformUpdateScaleUniform_default_instance_;
class VectorEditingMetadata;
struct VectorEditingMetadataDefaultTypeInternal;
extern VectorEditingMetadataDefaultTypeInternal _VectorEditingMetadata_default_instance_;
class VectorGeneratorMetadata;
struct VectorGeneratorMetadataDefaultTypeInternal;
extern VectorGeneratorMetadataDefaultTypeInternal _VectorGeneratorMetadata_default_instance_;
class VectorPerChannel;
struct VectorPerChannelDefaultTypeInternal;
extern VectorPerChannelDefaultTypeInternal _VectorPerChannel_default_instance_;
class VectorPropertyApproach;
struct VectorPropertyApproachDefaultTypeInternal;
extern VectorPropertyApproachDefaultTypeInternal _VectorPropertyApproach_default_instance_;
class VectorPropertyAssignment;
struct VectorPropertyAssignmentDefaultTypeInternal;
extern VectorPropertyAssignmentDefaultTypeInternal _VectorPropertyAssignment_default_instance_;
class VectorPropertyDeclaration;
struct VectorPropertyDeclarationDefaultTypeInternal;
extern VectorPropertyDeclarationDefaultTypeInternal _VectorPropertyDeclaration_default_instance_;
class VectorPropertyInterpolator;
struct VectorPropertyInterpolatorDefaultTypeInternal;
extern VectorPropertyInterpolatorDefaultTypeInternal _VectorPropertyInterpolator_default_instance_;
class VectorPropertyKeyframed;
struct VectorPropertyKeyframedDefaultTypeInternal;
extern VectorPropertyKeyframedDefaultTypeInternal _VectorPropertyKeyframed_default_instance_;
class VectorPropertyKeyframed_VectorKeyframe;
struct VectorPropertyKeyframed_VectorKeyframeDefaultTypeInternal;
extern VectorPropertyKeyframed_VectorKeyframeDefaultTypeInternal _VectorPropertyKeyframed_VectorKeyframe_default_instance_;
class VectorPropertyMetadata;
struct VectorPropertyMetadataDefaultTypeInternal;
extern VectorPropertyMetadataDefaultTypeInternal _VectorPropertyMetadata_default_instance_;
class VectorPropertyQuadratic;
struct VectorPropertyQuadraticDefaultTypeInternal;
extern VectorPropertyQuadraticDefaultTypeInternal _VectorPropertyQuadratic_default_instance_;
class VectorPropertyValue;
struct VectorPropertyValueDefaultTypeInternal;
extern VectorPropertyValueDefaultTypeInternal _VectorPropertyValue_default_instance_;
}  // namespace Property
PROTOBUF_NAMESPACE_OPEN
template<> ::Property::AnyPropertyDeclaration* Arena::CreateMaybeMessage<::Property::AnyPropertyDeclaration>(Arena*);
template<> ::Property::AnyPropertyValue* Arena::CreateMaybeMessage<::Property::AnyPropertyValue>(Arena*);
template<> ::Property::BooleanEditingMetadata* Arena::CreateMaybeMessage<::Property::BooleanEditingMetadata>(Arena*);
template<> ::Property::BooleanGeneratorMetadata* Arena::CreateMaybeMessage<::Property::BooleanGeneratorMetadata>(Arena*);
template<> ::Property::BooleanPropertyAssignment* Arena::CreateMaybeMessage<::Property::BooleanPropertyAssignment>(Arena*);
template<> ::Property::BooleanPropertyDeclaration* Arena::CreateMaybeMessage<::Property::BooleanPropertyDeclaration>(Arena*);
template<> ::Property::BooleanPropertyKeyframed* Arena::CreateMaybeMessage<::Property::BooleanPropertyKeyframed>(Arena*);
template<> ::Property::BooleanPropertyKeyframed_BooleanKeyframe* Arena::CreateMaybeMessage<::Property::BooleanPropertyKeyframed_BooleanKeyframe>(Arena*);
template<> ::Property::BooleanPropertyMetadata* Arena::CreateMaybeMessage<::Property::BooleanPropertyMetadata>(Arena*);
template<> ::Property::BooleanPropertyScalarComparison* Arena::CreateMaybeMessage<::Property::BooleanPropertyScalarComparison>(Arena*);
template<> ::Property::BooleanPropertyValue* Arena::CreateMaybeMessage<::Property::BooleanPropertyValue>(Arena*);
template<> ::Property::ColorEditingMetadata* Arena::CreateMaybeMessage<::Property::ColorEditingMetadata>(Arena*);
template<> ::Property::ColorGeneratorMetadata* Arena::CreateMaybeMessage<::Property::ColorGeneratorMetadata>(Arena*);
template<> ::Property::ColorPerChannel* Arena::CreateMaybeMessage<::Property::ColorPerChannel>(Arena*);
template<> ::Property::ColorPropertyApproach* Arena::CreateMaybeMessage<::Property::ColorPropertyApproach>(Arena*);
template<> ::Property::ColorPropertyAssignment* Arena::CreateMaybeMessage<::Property::ColorPropertyAssignment>(Arena*);
template<> ::Property::ColorPropertyDeclaration* Arena::CreateMaybeMessage<::Property::ColorPropertyDeclaration>(Arena*);
template<> ::Property::ColorPropertyInterpolator* Arena::CreateMaybeMessage<::Property::ColorPropertyInterpolator>(Arena*);
template<> ::Property::ColorPropertyKeyframed* Arena::CreateMaybeMessage<::Property::ColorPropertyKeyframed>(Arena*);
template<> ::Property::ColorPropertyKeyframed_ColorKeyframe* Arena::CreateMaybeMessage<::Property::ColorPropertyKeyframed_ColorKeyframe>(Arena*);
template<> ::Property::ColorPropertyMetadata* Arena::CreateMaybeMessage<::Property::ColorPropertyMetadata>(Arena*);
template<> ::Property::ColorPropertyValue* Arena::CreateMaybeMessage<::Property::ColorPropertyValue>(Arena*);
template<> ::Property::CustomGeneratorSubGen* Arena::CreateMaybeMessage<::Property::CustomGeneratorSubGen>(Arena*);
template<> ::Property::CustomGeneratorSubGenBoolean* Arena::CreateMaybeMessage<::Property::CustomGeneratorSubGenBoolean>(Arena*);
template<> ::Property::CustomGeneratorSubGenColor* Arena::CreateMaybeMessage<::Property::CustomGeneratorSubGenColor>(Arena*);
template<> ::Property::CustomGeneratorSubGenJson* Arena::CreateMaybeMessage<::Property::CustomGeneratorSubGenJson>(Arena*);
template<> ::Property::CustomGeneratorSubGenLink* Arena::CreateMaybeMessage<::Property::CustomGeneratorSubGenLink>(Arena*);
template<> ::Property::CustomGeneratorSubGenScalar* Arena::CreateMaybeMessage<::Property::CustomGeneratorSubGenScalar>(Arena*);
template<> ::Property::CustomGeneratorSubGenString* Arena::CreateMaybeMessage<::Property::CustomGeneratorSubGenString>(Arena*);
template<> ::Property::CustomGeneratorSubGenTransform* Arena::CreateMaybeMessage<::Property::CustomGeneratorSubGenTransform>(Arena*);
template<> ::Property::CustomGeneratorSubGenVector* Arena::CreateMaybeMessage<::Property::CustomGeneratorSubGenVector>(Arena*);
template<> ::Property::CustomGeneratorValue* Arena::CreateMaybeMessage<::Property::CustomGeneratorValue>(Arena*);
template<> ::Property::GeneratorMetadata* Arena::CreateMaybeMessage<::Property::GeneratorMetadata>(Arena*);
template<> ::Property::Interpolation* Arena::CreateMaybeMessage<::Property::Interpolation>(Arena*);
template<> ::Property::JsonEditingMetadata* Arena::CreateMaybeMessage<::Property::JsonEditingMetadata>(Arena*);
template<> ::Property::JsonGeneratorMetadata* Arena::CreateMaybeMessage<::Property::JsonGeneratorMetadata>(Arena*);
template<> ::Property::JsonPropertyAssignment* Arena::CreateMaybeMessage<::Property::JsonPropertyAssignment>(Arena*);
template<> ::Property::JsonPropertyDeclaration* Arena::CreateMaybeMessage<::Property::JsonPropertyDeclaration>(Arena*);
template<> ::Property::JsonPropertyMetadata* Arena::CreateMaybeMessage<::Property::JsonPropertyMetadata>(Arena*);
template<> ::Property::JsonPropertyValue* Arena::CreateMaybeMessage<::Property::JsonPropertyValue>(Arena*);
template<> ::Property::LinkContentTypeSpecifier* Arena::CreateMaybeMessage<::Property::LinkContentTypeSpecifier>(Arena*);
template<> ::Property::LinkEditingMetadata* Arena::CreateMaybeMessage<::Property::LinkEditingMetadata>(Arena*);
template<> ::Property::LinkGeneratorMetadata* Arena::CreateMaybeMessage<::Property::LinkGeneratorMetadata>(Arena*);
template<> ::Property::LinkPropertyAssignment* Arena::CreateMaybeMessage<::Property::LinkPropertyAssignment>(Arena*);
template<> ::Property::LinkPropertyDeclaration* Arena::CreateMaybeMessage<::Property::LinkPropertyDeclaration>(Arena*);
template<> ::Property::LinkPropertyMetadata* Arena::CreateMaybeMessage<::Property::LinkPropertyMetadata>(Arena*);
template<> ::Property::LinkPropertyValue* Arena::CreateMaybeMessage<::Property::LinkPropertyValue>(Arena*);
template<> ::Property::PropertyIdentifier* Arena::CreateMaybeMessage<::Property::PropertyIdentifier>(Arena*);
template<> ::Property::PropertyMetadata* Arena::CreateMaybeMessage<::Property::PropertyMetadata>(Arena*);
template<> ::Property::ScalarEditingMetadata* Arena::CreateMaybeMessage<::Property::ScalarEditingMetadata>(Arena*);
template<> ::Property::ScalarGeneratorMetadata* Arena::CreateMaybeMessage<::Property::ScalarGeneratorMetadata>(Arena*);
template<> ::Property::ScalarPropertyApproach* Arena::CreateMaybeMessage<::Property::ScalarPropertyApproach>(Arena*);
template<> ::Property::ScalarPropertyAssignment* Arena::CreateMaybeMessage<::Property::ScalarPropertyAssignment>(Arena*);
template<> ::Property::ScalarPropertyDeclaration* Arena::CreateMaybeMessage<::Property::ScalarPropertyDeclaration>(Arena*);
template<> ::Property::ScalarPropertyInterpolator* Arena::CreateMaybeMessage<::Property::ScalarPropertyInterpolator>(Arena*);
template<> ::Property::ScalarPropertyKeyframed* Arena::CreateMaybeMessage<::Property::ScalarPropertyKeyframed>(Arena*);
template<> ::Property::ScalarPropertyKeyframed_ScalarKeyframe* Arena::CreateMaybeMessage<::Property::ScalarPropertyKeyframed_ScalarKeyframe>(Arena*);
template<> ::Property::ScalarPropertyMetadata* Arena::CreateMaybeMessage<::Property::ScalarPropertyMetadata>(Arena*);
template<> ::Property::ScalarPropertyPlayback* Arena::CreateMaybeMessage<::Property::ScalarPropertyPlayback>(Arena*);
template<> ::Property::ScalarPropertyPlaybackBasic* Arena::CreateMaybeMessage<::Property::ScalarPropertyPlaybackBasic>(Arena*);
template<> ::Property::ScalarPropertyPulse* Arena::CreateMaybeMessage<::Property::ScalarPropertyPulse>(Arena*);
template<> ::Property::ScalarPropertyValue* Arena::CreateMaybeMessage<::Property::ScalarPropertyValue>(Arena*);
template<> ::Property::StringEditingMetadata* Arena::CreateMaybeMessage<::Property::StringEditingMetadata>(Arena*);
template<> ::Property::StringGeneratorMetadata* Arena::CreateMaybeMessage<::Property::StringGeneratorMetadata>(Arena*);
template<> ::Property::StringPropertyAssignment* Arena::CreateMaybeMessage<::Property::StringPropertyAssignment>(Arena*);
template<> ::Property::StringPropertyDeclaration* Arena::CreateMaybeMessage<::Property::StringPropertyDeclaration>(Arena*);
template<> ::Property::StringPropertyFormatted* Arena::CreateMaybeMessage<::Property::StringPropertyFormatted>(Arena*);
template<> ::Property::StringPropertyMetadata* Arena::CreateMaybeMessage<::Property::StringPropertyMetadata>(Arena*);
template<> ::Property::StringPropertyValue* Arena::CreateMaybeMessage<::Property::StringPropertyValue>(Arena*);
template<> ::Property::StringValueEnumerationOption* Arena::CreateMaybeMessage<::Property::StringValueEnumerationOption>(Arena*);
template<> ::Property::TransformEditingMetadata* Arena::CreateMaybeMessage<::Property::TransformEditingMetadata>(Arena*);
template<> ::Property::TransformGeneratorMetadata* Arena::CreateMaybeMessage<::Property::TransformGeneratorMetadata>(Arena*);
template<> ::Property::TransformPropertyAssignment* Arena::CreateMaybeMessage<::Property::TransformPropertyAssignment>(Arena*);
template<> ::Property::TransformPropertyDeclaration* Arena::CreateMaybeMessage<::Property::TransformPropertyDeclaration>(Arena*);
template<> ::Property::TransformPropertyMetadata* Arena::CreateMaybeMessage<::Property::TransformPropertyMetadata>(Arena*);
template<> ::Property::TransformSet* Arena::CreateMaybeMessage<::Property::TransformSet>(Arena*);
template<> ::Property::TransformSetApproach* Arena::CreateMaybeMessage<::Property::TransformSetApproach>(Arena*);
template<> ::Property::TransformSetConditional* Arena::CreateMaybeMessage<::Property::TransformSetConditional>(Arena*);
template<> ::Property::TransformSetInterpolatorLookAt* Arena::CreateMaybeMessage<::Property::TransformSetInterpolatorLookAt>(Arena*);
template<> ::Property::TransformSetInterpolatorSQT* Arena::CreateMaybeMessage<::Property::TransformSetInterpolatorSQT>(Arena*);
template<> ::Property::TransformSetInterpolatorSRT* Arena::CreateMaybeMessage<::Property::TransformSetInterpolatorSRT>(Arena*);
template<> ::Property::TransformSetLookAt* Arena::CreateMaybeMessage<::Property::TransformSetLookAt>(Arena*);
template<> ::Property::TransformSetSQT* Arena::CreateMaybeMessage<::Property::TransformSetSQT>(Arena*);
template<> ::Property::TransformSetSRT* Arena::CreateMaybeMessage<::Property::TransformSetSRT>(Arena*);
template<> ::Property::TransformUpdate* Arena::CreateMaybeMessage<::Property::TransformUpdate>(Arena*);
template<> ::Property::TransformUpdateAddQ* Arena::CreateMaybeMessage<::Property::TransformUpdateAddQ>(Arena*);
template<> ::Property::TransformUpdateAddR* Arena::CreateMaybeMessage<::Property::TransformUpdateAddR>(Arena*);
template<> ::Property::TransformUpdateAddT* Arena::CreateMaybeMessage<::Property::TransformUpdateAddT>(Arena*);
template<> ::Property::TransformUpdateLookAt* Arena::CreateMaybeMessage<::Property::TransformUpdateLookAt>(Arena*);
template<> ::Property::TransformUpdateRotateToEuler* Arena::CreateMaybeMessage<::Property::TransformUpdateRotateToEuler>(Arena*);
template<> ::Property::TransformUpdateRotateToQuat* Arena::CreateMaybeMessage<::Property::TransformUpdateRotateToQuat>(Arena*);
template<> ::Property::TransformUpdateScaleNonuniform* Arena::CreateMaybeMessage<::Property::TransformUpdateScaleNonuniform>(Arena*);
template<> ::Property::TransformUpdateScaleUniform* Arena::CreateMaybeMessage<::Property::TransformUpdateScaleUniform>(Arena*);
template<> ::Property::VectorEditingMetadata* Arena::CreateMaybeMessage<::Property::VectorEditingMetadata>(Arena*);
template<> ::Property::VectorGeneratorMetadata* Arena::CreateMaybeMessage<::Property::VectorGeneratorMetadata>(Arena*);
template<> ::Property::VectorPerChannel* Arena::CreateMaybeMessage<::Property::VectorPerChannel>(Arena*);
template<> ::Property::VectorPropertyApproach* Arena::CreateMaybeMessage<::Property::VectorPropertyApproach>(Arena*);
template<> ::Property::VectorPropertyAssignment* Arena::CreateMaybeMessage<::Property::VectorPropertyAssignment>(Arena*);
template<> ::Property::VectorPropertyDeclaration* Arena::CreateMaybeMessage<::Property::VectorPropertyDeclaration>(Arena*);
template<> ::Property::VectorPropertyInterpolator* Arena::CreateMaybeMessage<::Property::VectorPropertyInterpolator>(Arena*);
template<> ::Property::VectorPropertyKeyframed* Arena::CreateMaybeMessage<::Property::VectorPropertyKeyframed>(Arena*);
template<> ::Property::VectorPropertyKeyframed_VectorKeyframe* Arena::CreateMaybeMessage<::Property::VectorPropertyKeyframed_VectorKeyframe>(Arena*);
template<> ::Property::VectorPropertyMetadata* Arena::CreateMaybeMessage<::Property::VectorPropertyMetadata>(Arena*);
template<> ::Property::VectorPropertyQuadratic* Arena::CreateMaybeMessage<::Property::VectorPropertyQuadratic>(Arena*);
template<> ::Property::VectorPropertyValue* Arena::CreateMaybeMessage<::Property::VectorPropertyValue>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Property {

enum PropertyMetadata_PropertySync : int {
  PropertyMetadata_PropertySync_Full = 0,
  PropertyMetadata_PropertySync_Transient = 1,
  PropertyMetadata_PropertySync_Local = 2,
  PropertyMetadata_PropertySync_SyncedOnly = 3,
  PropertyMetadata_PropertySync_PropertyMetadata_PropertySync_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PropertyMetadata_PropertySync_PropertyMetadata_PropertySync_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PropertyMetadata_PropertySync_IsValid(int value);
constexpr PropertyMetadata_PropertySync PropertyMetadata_PropertySync_PropertySync_MIN = PropertyMetadata_PropertySync_Full;
constexpr PropertyMetadata_PropertySync PropertyMetadata_PropertySync_PropertySync_MAX = PropertyMetadata_PropertySync_SyncedOnly;
constexpr int PropertyMetadata_PropertySync_PropertySync_ARRAYSIZE = PropertyMetadata_PropertySync_PropertySync_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PropertyMetadata_PropertySync_descriptor();
template<typename T>
inline const std::string& PropertyMetadata_PropertySync_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PropertyMetadata_PropertySync>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PropertyMetadata_PropertySync_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PropertyMetadata_PropertySync_descriptor(), enum_t_value);
}
inline bool PropertyMetadata_PropertySync_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PropertyMetadata_PropertySync* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PropertyMetadata_PropertySync>(
    PropertyMetadata_PropertySync_descriptor(), name, value);
}
enum ScalarPropertyAssignment_ScalarPropertyMethod : int {
  ScalarPropertyAssignment_ScalarPropertyMethod_Overriding = 0,
  ScalarPropertyAssignment_ScalarPropertyMethod_Additive = 1,
  ScalarPropertyAssignment_ScalarPropertyMethod_ScalarPropertyAssignment_ScalarPropertyMethod_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ScalarPropertyAssignment_ScalarPropertyMethod_ScalarPropertyAssignment_ScalarPropertyMethod_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ScalarPropertyAssignment_ScalarPropertyMethod_IsValid(int value);
constexpr ScalarPropertyAssignment_ScalarPropertyMethod ScalarPropertyAssignment_ScalarPropertyMethod_ScalarPropertyMethod_MIN = ScalarPropertyAssignment_ScalarPropertyMethod_Overriding;
constexpr ScalarPropertyAssignment_ScalarPropertyMethod ScalarPropertyAssignment_ScalarPropertyMethod_ScalarPropertyMethod_MAX = ScalarPropertyAssignment_ScalarPropertyMethod_Additive;
constexpr int ScalarPropertyAssignment_ScalarPropertyMethod_ScalarPropertyMethod_ARRAYSIZE = ScalarPropertyAssignment_ScalarPropertyMethod_ScalarPropertyMethod_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ScalarPropertyAssignment_ScalarPropertyMethod_descriptor();
template<typename T>
inline const std::string& ScalarPropertyAssignment_ScalarPropertyMethod_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ScalarPropertyAssignment_ScalarPropertyMethod>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ScalarPropertyAssignment_ScalarPropertyMethod_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ScalarPropertyAssignment_ScalarPropertyMethod_descriptor(), enum_t_value);
}
inline bool ScalarPropertyAssignment_ScalarPropertyMethod_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ScalarPropertyAssignment_ScalarPropertyMethod* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ScalarPropertyAssignment_ScalarPropertyMethod>(
    ScalarPropertyAssignment_ScalarPropertyMethod_descriptor(), name, value);
}
enum ScalarEditingMetadata_ScalarInterpretationEnum : int {
  ScalarEditingMetadata_ScalarInterpretationEnum_Standard = 0,
  ScalarEditingMetadata_ScalarInterpretationEnum_Time = 1,
  ScalarEditingMetadata_ScalarInterpretationEnum_Playback = 3,
  ScalarEditingMetadata_ScalarInterpretationEnum_Scaler = 4,
  ScalarEditingMetadata_ScalarInterpretationEnum_ScalarEditingMetadata_ScalarInterpretationEnum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ScalarEditingMetadata_ScalarInterpretationEnum_ScalarEditingMetadata_ScalarInterpretationEnum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ScalarEditingMetadata_ScalarInterpretationEnum_IsValid(int value);
constexpr ScalarEditingMetadata_ScalarInterpretationEnum ScalarEditingMetadata_ScalarInterpretationEnum_ScalarInterpretationEnum_MIN = ScalarEditingMetadata_ScalarInterpretationEnum_Standard;
constexpr ScalarEditingMetadata_ScalarInterpretationEnum ScalarEditingMetadata_ScalarInterpretationEnum_ScalarInterpretationEnum_MAX = ScalarEditingMetadata_ScalarInterpretationEnum_Scaler;
constexpr int ScalarEditingMetadata_ScalarInterpretationEnum_ScalarInterpretationEnum_ARRAYSIZE = ScalarEditingMetadata_ScalarInterpretationEnum_ScalarInterpretationEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ScalarEditingMetadata_ScalarInterpretationEnum_descriptor();
template<typename T>
inline const std::string& ScalarEditingMetadata_ScalarInterpretationEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ScalarEditingMetadata_ScalarInterpretationEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ScalarEditingMetadata_ScalarInterpretationEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ScalarEditingMetadata_ScalarInterpretationEnum_descriptor(), enum_t_value);
}
inline bool ScalarEditingMetadata_ScalarInterpretationEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ScalarEditingMetadata_ScalarInterpretationEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ScalarEditingMetadata_ScalarInterpretationEnum>(
    ScalarEditingMetadata_ScalarInterpretationEnum_descriptor(), name, value);
}
enum LinkContentTypeSpecifier_TextureType : int {
  LinkContentTypeSpecifier_TextureType_AllTextures = 0,
  LinkContentTypeSpecifier_TextureType_ColorMaps = 1,
  LinkContentTypeSpecifier_TextureType_NormalMaps = 2,
  LinkContentTypeSpecifier_TextureType_Skyboxes = 3,
  LinkContentTypeSpecifier_TextureType_ArTrackers = 4,
  LinkContentTypeSpecifier_TextureType_Profiles = 5,
  LinkContentTypeSpecifier_TextureType_LinkContentTypeSpecifier_TextureType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  LinkContentTypeSpecifier_TextureType_LinkContentTypeSpecifier_TextureType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool LinkContentTypeSpecifier_TextureType_IsValid(int value);
constexpr LinkContentTypeSpecifier_TextureType LinkContentTypeSpecifier_TextureType_TextureType_MIN = LinkContentTypeSpecifier_TextureType_AllTextures;
constexpr LinkContentTypeSpecifier_TextureType LinkContentTypeSpecifier_TextureType_TextureType_MAX = LinkContentTypeSpecifier_TextureType_Profiles;
constexpr int LinkContentTypeSpecifier_TextureType_TextureType_ARRAYSIZE = LinkContentTypeSpecifier_TextureType_TextureType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LinkContentTypeSpecifier_TextureType_descriptor();
template<typename T>
inline const std::string& LinkContentTypeSpecifier_TextureType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LinkContentTypeSpecifier_TextureType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LinkContentTypeSpecifier_TextureType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LinkContentTypeSpecifier_TextureType_descriptor(), enum_t_value);
}
inline bool LinkContentTypeSpecifier_TextureType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LinkContentTypeSpecifier_TextureType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LinkContentTypeSpecifier_TextureType>(
    LinkContentTypeSpecifier_TextureType_descriptor(), name, value);
}
enum LinkContentTypeSpecifier_MaterialType : int {
  LinkContentTypeSpecifier_MaterialType_AllMaterials = 0,
  LinkContentTypeSpecifier_MaterialType_LinkContentTypeSpecifier_MaterialType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  LinkContentTypeSpecifier_MaterialType_LinkContentTypeSpecifier_MaterialType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool LinkContentTypeSpecifier_MaterialType_IsValid(int value);
constexpr LinkContentTypeSpecifier_MaterialType LinkContentTypeSpecifier_MaterialType_MaterialType_MIN = LinkContentTypeSpecifier_MaterialType_AllMaterials;
constexpr LinkContentTypeSpecifier_MaterialType LinkContentTypeSpecifier_MaterialType_MaterialType_MAX = LinkContentTypeSpecifier_MaterialType_AllMaterials;
constexpr int LinkContentTypeSpecifier_MaterialType_MaterialType_ARRAYSIZE = LinkContentTypeSpecifier_MaterialType_MaterialType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LinkContentTypeSpecifier_MaterialType_descriptor();
template<typename T>
inline const std::string& LinkContentTypeSpecifier_MaterialType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LinkContentTypeSpecifier_MaterialType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LinkContentTypeSpecifier_MaterialType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LinkContentTypeSpecifier_MaterialType_descriptor(), enum_t_value);
}
inline bool LinkContentTypeSpecifier_MaterialType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LinkContentTypeSpecifier_MaterialType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LinkContentTypeSpecifier_MaterialType>(
    LinkContentTypeSpecifier_MaterialType_descriptor(), name, value);
}
enum LinkContentTypeSpecifier_GeometryType : int {
  LinkContentTypeSpecifier_GeometryType_AnyGeometry = 0,
  LinkContentTypeSpecifier_GeometryType_LinkContentTypeSpecifier_GeometryType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  LinkContentTypeSpecifier_GeometryType_LinkContentTypeSpecifier_GeometryType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool LinkContentTypeSpecifier_GeometryType_IsValid(int value);
constexpr LinkContentTypeSpecifier_GeometryType LinkContentTypeSpecifier_GeometryType_GeometryType_MIN = LinkContentTypeSpecifier_GeometryType_AnyGeometry;
constexpr LinkContentTypeSpecifier_GeometryType LinkContentTypeSpecifier_GeometryType_GeometryType_MAX = LinkContentTypeSpecifier_GeometryType_AnyGeometry;
constexpr int LinkContentTypeSpecifier_GeometryType_GeometryType_ARRAYSIZE = LinkContentTypeSpecifier_GeometryType_GeometryType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LinkContentTypeSpecifier_GeometryType_descriptor();
template<typename T>
inline const std::string& LinkContentTypeSpecifier_GeometryType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LinkContentTypeSpecifier_GeometryType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LinkContentTypeSpecifier_GeometryType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LinkContentTypeSpecifier_GeometryType_descriptor(), enum_t_value);
}
inline bool LinkContentTypeSpecifier_GeometryType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LinkContentTypeSpecifier_GeometryType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LinkContentTypeSpecifier_GeometryType>(
    LinkContentTypeSpecifier_GeometryType_descriptor(), name, value);
}
enum VectorPropertyAssignment_VectorPropertyMethod : int {
  VectorPropertyAssignment_VectorPropertyMethod_Overriding = 0,
  VectorPropertyAssignment_VectorPropertyMethod_Additive = 1,
  VectorPropertyAssignment_VectorPropertyMethod_VectorPropertyAssignment_VectorPropertyMethod_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  VectorPropertyAssignment_VectorPropertyMethod_VectorPropertyAssignment_VectorPropertyMethod_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool VectorPropertyAssignment_VectorPropertyMethod_IsValid(int value);
constexpr VectorPropertyAssignment_VectorPropertyMethod VectorPropertyAssignment_VectorPropertyMethod_VectorPropertyMethod_MIN = VectorPropertyAssignment_VectorPropertyMethod_Overriding;
constexpr VectorPropertyAssignment_VectorPropertyMethod VectorPropertyAssignment_VectorPropertyMethod_VectorPropertyMethod_MAX = VectorPropertyAssignment_VectorPropertyMethod_Additive;
constexpr int VectorPropertyAssignment_VectorPropertyMethod_VectorPropertyMethod_ARRAYSIZE = VectorPropertyAssignment_VectorPropertyMethod_VectorPropertyMethod_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VectorPropertyAssignment_VectorPropertyMethod_descriptor();
template<typename T>
inline const std::string& VectorPropertyAssignment_VectorPropertyMethod_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VectorPropertyAssignment_VectorPropertyMethod>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VectorPropertyAssignment_VectorPropertyMethod_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VectorPropertyAssignment_VectorPropertyMethod_descriptor(), enum_t_value);
}
inline bool VectorPropertyAssignment_VectorPropertyMethod_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, VectorPropertyAssignment_VectorPropertyMethod* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VectorPropertyAssignment_VectorPropertyMethod>(
    VectorPropertyAssignment_VectorPropertyMethod_descriptor(), name, value);
}
enum VectorPropertyKeyframed_VectorInterpolationMethod : int {
  VectorPropertyKeyframed_VectorInterpolationMethod_Cartesian = 0,
  VectorPropertyKeyframed_VectorInterpolationMethod_Spherical = 1,
  VectorPropertyKeyframed_VectorInterpolationMethod_Quaternion = 2,
  VectorPropertyKeyframed_VectorInterpolationMethod_VectorPropertyKeyframed_VectorInterpolationMethod_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  VectorPropertyKeyframed_VectorInterpolationMethod_VectorPropertyKeyframed_VectorInterpolationMethod_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool VectorPropertyKeyframed_VectorInterpolationMethod_IsValid(int value);
constexpr VectorPropertyKeyframed_VectorInterpolationMethod VectorPropertyKeyframed_VectorInterpolationMethod_VectorInterpolationMethod_MIN = VectorPropertyKeyframed_VectorInterpolationMethod_Cartesian;
constexpr VectorPropertyKeyframed_VectorInterpolationMethod VectorPropertyKeyframed_VectorInterpolationMethod_VectorInterpolationMethod_MAX = VectorPropertyKeyframed_VectorInterpolationMethod_Quaternion;
constexpr int VectorPropertyKeyframed_VectorInterpolationMethod_VectorInterpolationMethod_ARRAYSIZE = VectorPropertyKeyframed_VectorInterpolationMethod_VectorInterpolationMethod_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VectorPropertyKeyframed_VectorInterpolationMethod_descriptor();
template<typename T>
inline const std::string& VectorPropertyKeyframed_VectorInterpolationMethod_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VectorPropertyKeyframed_VectorInterpolationMethod>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VectorPropertyKeyframed_VectorInterpolationMethod_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VectorPropertyKeyframed_VectorInterpolationMethod_descriptor(), enum_t_value);
}
inline bool VectorPropertyKeyframed_VectorInterpolationMethod_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, VectorPropertyKeyframed_VectorInterpolationMethod* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VectorPropertyKeyframed_VectorInterpolationMethod>(
    VectorPropertyKeyframed_VectorInterpolationMethod_descriptor(), name, value);
}
enum VectorEditingMetadata_VectorInterpretationEnum : int {
  VectorEditingMetadata_VectorInterpretationEnum_Point = 0,
  VectorEditingMetadata_VectorInterpretationEnum_Direction = 1,
  VectorEditingMetadata_VectorInterpretationEnum_Eulers = 2,
  VectorEditingMetadata_VectorInterpretationEnum_Scale = 3,
  VectorEditingMetadata_VectorInterpretationEnum_Quaternion = 4,
  VectorEditingMetadata_VectorInterpretationEnum_Point2D = 5,
  VectorEditingMetadata_VectorInterpretationEnum_Direction2D = 6,
  VectorEditingMetadata_VectorInterpretationEnum_Scale2D = 7,
  VectorEditingMetadata_VectorInterpretationEnum_OffsetScale = 10,
  VectorEditingMetadata_VectorInterpretationEnum_VectorEditingMetadata_VectorInterpretationEnum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  VectorEditingMetadata_VectorInterpretationEnum_VectorEditingMetadata_VectorInterpretationEnum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool VectorEditingMetadata_VectorInterpretationEnum_IsValid(int value);
constexpr VectorEditingMetadata_VectorInterpretationEnum VectorEditingMetadata_VectorInterpretationEnum_VectorInterpretationEnum_MIN = VectorEditingMetadata_VectorInterpretationEnum_Point;
constexpr VectorEditingMetadata_VectorInterpretationEnum VectorEditingMetadata_VectorInterpretationEnum_VectorInterpretationEnum_MAX = VectorEditingMetadata_VectorInterpretationEnum_OffsetScale;
constexpr int VectorEditingMetadata_VectorInterpretationEnum_VectorInterpretationEnum_ARRAYSIZE = VectorEditingMetadata_VectorInterpretationEnum_VectorInterpretationEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VectorEditingMetadata_VectorInterpretationEnum_descriptor();
template<typename T>
inline const std::string& VectorEditingMetadata_VectorInterpretationEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VectorEditingMetadata_VectorInterpretationEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VectorEditingMetadata_VectorInterpretationEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VectorEditingMetadata_VectorInterpretationEnum_descriptor(), enum_t_value);
}
inline bool VectorEditingMetadata_VectorInterpretationEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, VectorEditingMetadata_VectorInterpretationEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VectorEditingMetadata_VectorInterpretationEnum>(
    VectorEditingMetadata_VectorInterpretationEnum_descriptor(), name, value);
}
enum ColorPropertyAssignment_ColorPropertyMethod : int {
  ColorPropertyAssignment_ColorPropertyMethod_Overriding = 0,
  ColorPropertyAssignment_ColorPropertyMethod_Additive = 1,
  ColorPropertyAssignment_ColorPropertyMethod_ColorPropertyAssignment_ColorPropertyMethod_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ColorPropertyAssignment_ColorPropertyMethod_ColorPropertyAssignment_ColorPropertyMethod_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ColorPropertyAssignment_ColorPropertyMethod_IsValid(int value);
constexpr ColorPropertyAssignment_ColorPropertyMethod ColorPropertyAssignment_ColorPropertyMethod_ColorPropertyMethod_MIN = ColorPropertyAssignment_ColorPropertyMethod_Overriding;
constexpr ColorPropertyAssignment_ColorPropertyMethod ColorPropertyAssignment_ColorPropertyMethod_ColorPropertyMethod_MAX = ColorPropertyAssignment_ColorPropertyMethod_Additive;
constexpr int ColorPropertyAssignment_ColorPropertyMethod_ColorPropertyMethod_ARRAYSIZE = ColorPropertyAssignment_ColorPropertyMethod_ColorPropertyMethod_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ColorPropertyAssignment_ColorPropertyMethod_descriptor();
template<typename T>
inline const std::string& ColorPropertyAssignment_ColorPropertyMethod_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ColorPropertyAssignment_ColorPropertyMethod>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ColorPropertyAssignment_ColorPropertyMethod_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ColorPropertyAssignment_ColorPropertyMethod_descriptor(), enum_t_value);
}
inline bool ColorPropertyAssignment_ColorPropertyMethod_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ColorPropertyAssignment_ColorPropertyMethod* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ColorPropertyAssignment_ColorPropertyMethod>(
    ColorPropertyAssignment_ColorPropertyMethod_descriptor(), name, value);
}
enum KeyframeLoopingEnum : int {
  Clamp = 0,
  Loop = 1,
  LoopOffset = 2,
  Mirror = 3,
  KeyframeLoopingEnum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  KeyframeLoopingEnum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool KeyframeLoopingEnum_IsValid(int value);
constexpr KeyframeLoopingEnum KeyframeLoopingEnum_MIN = Clamp;
constexpr KeyframeLoopingEnum KeyframeLoopingEnum_MAX = Mirror;
constexpr int KeyframeLoopingEnum_ARRAYSIZE = KeyframeLoopingEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* KeyframeLoopingEnum_descriptor();
template<typename T>
inline const std::string& KeyframeLoopingEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, KeyframeLoopingEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function KeyframeLoopingEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    KeyframeLoopingEnum_descriptor(), enum_t_value);
}
inline bool KeyframeLoopingEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, KeyframeLoopingEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<KeyframeLoopingEnum>(
    KeyframeLoopingEnum_descriptor(), name, value);
}
enum TangentsAutocomputeMethodEnum : int {
  Zero = 0,
  Linear = 1,
  Cubic = 2,
  TangentsAutocomputeMethodEnum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TangentsAutocomputeMethodEnum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TangentsAutocomputeMethodEnum_IsValid(int value);
constexpr TangentsAutocomputeMethodEnum TangentsAutocomputeMethodEnum_MIN = Zero;
constexpr TangentsAutocomputeMethodEnum TangentsAutocomputeMethodEnum_MAX = Cubic;
constexpr int TangentsAutocomputeMethodEnum_ARRAYSIZE = TangentsAutocomputeMethodEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TangentsAutocomputeMethodEnum_descriptor();
template<typename T>
inline const std::string& TangentsAutocomputeMethodEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TangentsAutocomputeMethodEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TangentsAutocomputeMethodEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TangentsAutocomputeMethodEnum_descriptor(), enum_t_value);
}
inline bool TangentsAutocomputeMethodEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TangentsAutocomputeMethodEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TangentsAutocomputeMethodEnum>(
    TangentsAutocomputeMethodEnum_descriptor(), name, value);
}
// ===================================================================

class PropertyIdentifier final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.PropertyIdentifier) */ {
 public:
  inline PropertyIdentifier() : PropertyIdentifier(nullptr) {}
  ~PropertyIdentifier() override;
  explicit PROTOBUF_CONSTEXPR PropertyIdentifier(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PropertyIdentifier(const PropertyIdentifier& from);
  PropertyIdentifier(PropertyIdentifier&& from) noexcept
    : PropertyIdentifier() {
    *this = ::std::move(from);
  }

  inline PropertyIdentifier& operator=(const PropertyIdentifier& from) {
    CopyFrom(from);
    return *this;
  }
  inline PropertyIdentifier& operator=(PropertyIdentifier&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PropertyIdentifier& default_instance() {
    return *internal_default_instance();
  }
  static inline const PropertyIdentifier* internal_default_instance() {
    return reinterpret_cast<const PropertyIdentifier*>(
               &_PropertyIdentifier_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PropertyIdentifier& a, PropertyIdentifier& b) {
    a.Swap(&b);
  }
  inline void Swap(PropertyIdentifier* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PropertyIdentifier* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PropertyIdentifier* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PropertyIdentifier>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PropertyIdentifier& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PropertyIdentifier& from) {
    PropertyIdentifier::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PropertyIdentifier* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.PropertyIdentifier";
  }
  protected:
  explicit PropertyIdentifier(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:Property.PropertyIdentifier)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class AnyPropertyValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.AnyPropertyValue) */ {
 public:
  inline AnyPropertyValue() : AnyPropertyValue(nullptr) {}
  ~AnyPropertyValue() override;
  explicit PROTOBUF_CONSTEXPR AnyPropertyValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AnyPropertyValue(const AnyPropertyValue& from);
  AnyPropertyValue(AnyPropertyValue&& from) noexcept
    : AnyPropertyValue() {
    *this = ::std::move(from);
  }

  inline AnyPropertyValue& operator=(const AnyPropertyValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnyPropertyValue& operator=(AnyPropertyValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnyPropertyValue& default_instance() {
    return *internal_default_instance();
  }
  enum PropertyTypeCase {
    kScalar = 1,
    kString = 2,
    kVector = 3,
    kColor = 4,
    kTransform = 5,
    kTransUpdate = 6,
    kBool = 7,
    kJson = 9,
    kLink = 10,
    PROPERTYTYPE_NOT_SET = 0,
  };

  static inline const AnyPropertyValue* internal_default_instance() {
    return reinterpret_cast<const AnyPropertyValue*>(
               &_AnyPropertyValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AnyPropertyValue& a, AnyPropertyValue& b) {
    a.Swap(&b);
  }
  inline void Swap(AnyPropertyValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnyPropertyValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AnyPropertyValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AnyPropertyValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AnyPropertyValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AnyPropertyValue& from) {
    AnyPropertyValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnyPropertyValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.AnyPropertyValue";
  }
  protected:
  explicit AnyPropertyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScalarFieldNumber = 1,
    kStringFieldNumber = 2,
    kVectorFieldNumber = 3,
    kColorFieldNumber = 4,
    kTransformFieldNumber = 5,
    kTransUpdateFieldNumber = 6,
    kBoolFieldNumber = 7,
    kJsonFieldNumber = 9,
    kLinkFieldNumber = 10,
  };
  // .Property.ScalarPropertyValue scalar = 1;
  bool has_scalar() const;
  private:
  bool _internal_has_scalar() const;
  public:
  void clear_scalar();
  const ::Property::ScalarPropertyValue& scalar() const;
  PROTOBUF_NODISCARD ::Property::ScalarPropertyValue* release_scalar();
  ::Property::ScalarPropertyValue* mutable_scalar();
  void set_allocated_scalar(::Property::ScalarPropertyValue* scalar);
  private:
  const ::Property::ScalarPropertyValue& _internal_scalar() const;
  ::Property::ScalarPropertyValue* _internal_mutable_scalar();
  public:
  void unsafe_arena_set_allocated_scalar(
      ::Property::ScalarPropertyValue* scalar);
  ::Property::ScalarPropertyValue* unsafe_arena_release_scalar();

  // .Property.StringPropertyValue string = 2;
  bool has_string() const;
  private:
  bool _internal_has_string() const;
  public:
  void clear_string();
  const ::Property::StringPropertyValue& string() const;
  PROTOBUF_NODISCARD ::Property::StringPropertyValue* release_string();
  ::Property::StringPropertyValue* mutable_string();
  void set_allocated_string(::Property::StringPropertyValue* string);
  private:
  const ::Property::StringPropertyValue& _internal_string() const;
  ::Property::StringPropertyValue* _internal_mutable_string();
  public:
  void unsafe_arena_set_allocated_string(
      ::Property::StringPropertyValue* string);
  ::Property::StringPropertyValue* unsafe_arena_release_string();

  // .Property.VectorPropertyValue vector = 3;
  bool has_vector() const;
  private:
  bool _internal_has_vector() const;
  public:
  void clear_vector();
  const ::Property::VectorPropertyValue& vector() const;
  PROTOBUF_NODISCARD ::Property::VectorPropertyValue* release_vector();
  ::Property::VectorPropertyValue* mutable_vector();
  void set_allocated_vector(::Property::VectorPropertyValue* vector);
  private:
  const ::Property::VectorPropertyValue& _internal_vector() const;
  ::Property::VectorPropertyValue* _internal_mutable_vector();
  public:
  void unsafe_arena_set_allocated_vector(
      ::Property::VectorPropertyValue* vector);
  ::Property::VectorPropertyValue* unsafe_arena_release_vector();

  // .Property.ColorPropertyValue color = 4;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const ::Property::ColorPropertyValue& color() const;
  PROTOBUF_NODISCARD ::Property::ColorPropertyValue* release_color();
  ::Property::ColorPropertyValue* mutable_color();
  void set_allocated_color(::Property::ColorPropertyValue* color);
  private:
  const ::Property::ColorPropertyValue& _internal_color() const;
  ::Property::ColorPropertyValue* _internal_mutable_color();
  public:
  void unsafe_arena_set_allocated_color(
      ::Property::ColorPropertyValue* color);
  ::Property::ColorPropertyValue* unsafe_arena_release_color();

  // .Property.TransformSet transform = 5;
  bool has_transform() const;
  private:
  bool _internal_has_transform() const;
  public:
  void clear_transform();
  const ::Property::TransformSet& transform() const;
  PROTOBUF_NODISCARD ::Property::TransformSet* release_transform();
  ::Property::TransformSet* mutable_transform();
  void set_allocated_transform(::Property::TransformSet* transform);
  private:
  const ::Property::TransformSet& _internal_transform() const;
  ::Property::TransformSet* _internal_mutable_transform();
  public:
  void unsafe_arena_set_allocated_transform(
      ::Property::TransformSet* transform);
  ::Property::TransformSet* unsafe_arena_release_transform();

  // .Property.TransformUpdate transUpdate = 6;
  bool has_transupdate() const;
  private:
  bool _internal_has_transupdate() const;
  public:
  void clear_transupdate();
  const ::Property::TransformUpdate& transupdate() const;
  PROTOBUF_NODISCARD ::Property::TransformUpdate* release_transupdate();
  ::Property::TransformUpdate* mutable_transupdate();
  void set_allocated_transupdate(::Property::TransformUpdate* transupdate);
  private:
  const ::Property::TransformUpdate& _internal_transupdate() const;
  ::Property::TransformUpdate* _internal_mutable_transupdate();
  public:
  void unsafe_arena_set_allocated_transupdate(
      ::Property::TransformUpdate* transupdate);
  ::Property::TransformUpdate* unsafe_arena_release_transupdate();

  // .Property.BooleanPropertyValue bool = 7;
  bool has_bool_() const;
  private:
  bool _internal_has_bool_() const;
  public:
  void clear_bool_();
  const ::Property::BooleanPropertyValue& bool_() const;
  PROTOBUF_NODISCARD ::Property::BooleanPropertyValue* release_bool_();
  ::Property::BooleanPropertyValue* mutable_bool_();
  void set_allocated_bool_(::Property::BooleanPropertyValue* bool_);
  private:
  const ::Property::BooleanPropertyValue& _internal_bool_() const;
  ::Property::BooleanPropertyValue* _internal_mutable_bool_();
  public:
  void unsafe_arena_set_allocated_bool_(
      ::Property::BooleanPropertyValue* bool_);
  ::Property::BooleanPropertyValue* unsafe_arena_release_bool_();

  // .Property.JsonPropertyValue json = 9;
  bool has_json() const;
  private:
  bool _internal_has_json() const;
  public:
  void clear_json();
  const ::Property::JsonPropertyValue& json() const;
  PROTOBUF_NODISCARD ::Property::JsonPropertyValue* release_json();
  ::Property::JsonPropertyValue* mutable_json();
  void set_allocated_json(::Property::JsonPropertyValue* json);
  private:
  const ::Property::JsonPropertyValue& _internal_json() const;
  ::Property::JsonPropertyValue* _internal_mutable_json();
  public:
  void unsafe_arena_set_allocated_json(
      ::Property::JsonPropertyValue* json);
  ::Property::JsonPropertyValue* unsafe_arena_release_json();

  // .Property.LinkPropertyValue link = 10;
  bool has_link() const;
  private:
  bool _internal_has_link() const;
  public:
  void clear_link();
  const ::Property::LinkPropertyValue& link() const;
  PROTOBUF_NODISCARD ::Property::LinkPropertyValue* release_link();
  ::Property::LinkPropertyValue* mutable_link();
  void set_allocated_link(::Property::LinkPropertyValue* link);
  private:
  const ::Property::LinkPropertyValue& _internal_link() const;
  ::Property::LinkPropertyValue* _internal_mutable_link();
  public:
  void unsafe_arena_set_allocated_link(
      ::Property::LinkPropertyValue* link);
  ::Property::LinkPropertyValue* unsafe_arena_release_link();

  void clear_PropertyType();
  PropertyTypeCase PropertyType_case() const;
  // @@protoc_insertion_point(class_scope:Property.AnyPropertyValue)
 private:
  class _Internal;
  void set_has_scalar();
  void set_has_string();
  void set_has_vector();
  void set_has_color();
  void set_has_transform();
  void set_has_transupdate();
  void set_has_bool_();
  void set_has_json();
  void set_has_link();

  inline bool has_PropertyType() const;
  inline void clear_has_PropertyType();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union PropertyTypeUnion {
      constexpr PropertyTypeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::Property::ScalarPropertyValue* scalar_;
      ::Property::StringPropertyValue* string_;
      ::Property::VectorPropertyValue* vector_;
      ::Property::ColorPropertyValue* color_;
      ::Property::TransformSet* transform_;
      ::Property::TransformUpdate* transupdate_;
      ::Property::BooleanPropertyValue* bool__;
      ::Property::JsonPropertyValue* json_;
      ::Property::LinkPropertyValue* link_;
    } PropertyType_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class GeneratorMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.GeneratorMetadata) */ {
 public:
  inline GeneratorMetadata() : GeneratorMetadata(nullptr) {}
  ~GeneratorMetadata() override;
  explicit PROTOBUF_CONSTEXPR GeneratorMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GeneratorMetadata(const GeneratorMetadata& from);
  GeneratorMetadata(GeneratorMetadata&& from) noexcept
    : GeneratorMetadata() {
    *this = ::std::move(from);
  }

  inline GeneratorMetadata& operator=(const GeneratorMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeneratorMetadata& operator=(GeneratorMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GeneratorMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const GeneratorMetadata* internal_default_instance() {
    return reinterpret_cast<const GeneratorMetadata*>(
               &_GeneratorMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GeneratorMetadata& a, GeneratorMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(GeneratorMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GeneratorMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GeneratorMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GeneratorMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GeneratorMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GeneratorMetadata& from) {
    GeneratorMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeneratorMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.GeneratorMetadata";
  }
  protected:
  explicit GeneratorMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kHiddenFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string description = 2;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // optional bool hidden = 3;
  bool has_hidden() const;
  private:
  bool _internal_has_hidden() const;
  public:
  void clear_hidden();
  bool hidden() const;
  void set_hidden(bool value);
  private:
  bool _internal_hidden() const;
  void _internal_set_hidden(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Property.GeneratorMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    bool hidden_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class PropertyMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.PropertyMetadata) */ {
 public:
  inline PropertyMetadata() : PropertyMetadata(nullptr) {}
  ~PropertyMetadata() override;
  explicit PROTOBUF_CONSTEXPR PropertyMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PropertyMetadata(const PropertyMetadata& from);
  PropertyMetadata(PropertyMetadata&& from) noexcept
    : PropertyMetadata() {
    *this = ::std::move(from);
  }

  inline PropertyMetadata& operator=(const PropertyMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline PropertyMetadata& operator=(PropertyMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PropertyMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const PropertyMetadata* internal_default_instance() {
    return reinterpret_cast<const PropertyMetadata*>(
               &_PropertyMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PropertyMetadata& a, PropertyMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(PropertyMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PropertyMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PropertyMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PropertyMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PropertyMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PropertyMetadata& from) {
    PropertyMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PropertyMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.PropertyMetadata";
  }
  protected:
  explicit PropertyMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PropertyMetadata_PropertySync PropertySync;
  static constexpr PropertySync Full =
    PropertyMetadata_PropertySync_Full;
  static constexpr PropertySync Transient =
    PropertyMetadata_PropertySync_Transient;
  static constexpr PropertySync Local =
    PropertyMetadata_PropertySync_Local;
  static constexpr PropertySync SyncedOnly =
    PropertyMetadata_PropertySync_SyncedOnly;
  static inline bool PropertySync_IsValid(int value) {
    return PropertyMetadata_PropertySync_IsValid(value);
  }
  static constexpr PropertySync PropertySync_MIN =
    PropertyMetadata_PropertySync_PropertySync_MIN;
  static constexpr PropertySync PropertySync_MAX =
    PropertyMetadata_PropertySync_PropertySync_MAX;
  static constexpr int PropertySync_ARRAYSIZE =
    PropertyMetadata_PropertySync_PropertySync_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PropertySync_descriptor() {
    return PropertyMetadata_PropertySync_descriptor();
  }
  template<typename T>
  static inline const std::string& PropertySync_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PropertySync>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PropertySync_Name.");
    return PropertyMetadata_PropertySync_Name(enum_t_value);
  }
  static inline bool PropertySync_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PropertySync* value) {
    return PropertyMetadata_PropertySync_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kCategoryFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kUiVisibilityFieldNumber = 10,
    kCategoryOrderFieldNumber = 6,
    kInternalOrderFieldNumber = 7,
    kIsReadonlyFieldNumber = 5,
    kIsAdvancedFieldNumber = 9,
    kSyncMethodFieldNumber = 8,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string category = 2;
  bool has_category() const;
  private:
  bool _internal_has_category() const;
  public:
  void clear_category();
  const std::string& category() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_category(ArgT0&& arg0, ArgT... args);
  std::string* mutable_category();
  PROTOBUF_NODISCARD std::string* release_category();
  void set_allocated_category(std::string* category);
  private:
  const std::string& _internal_category() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_category(const std::string& value);
  std::string* _internal_mutable_category();
  public:

  // string description = 3;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // optional .Property.BooleanPropertyValue uiVisibility = 10;
  bool has_uivisibility() const;
  private:
  bool _internal_has_uivisibility() const;
  public:
  void clear_uivisibility();
  const ::Property::BooleanPropertyValue& uivisibility() const;
  PROTOBUF_NODISCARD ::Property::BooleanPropertyValue* release_uivisibility();
  ::Property::BooleanPropertyValue* mutable_uivisibility();
  void set_allocated_uivisibility(::Property::BooleanPropertyValue* uivisibility);
  private:
  const ::Property::BooleanPropertyValue& _internal_uivisibility() const;
  ::Property::BooleanPropertyValue* _internal_mutable_uivisibility();
  public:
  void unsafe_arena_set_allocated_uivisibility(
      ::Property::BooleanPropertyValue* uivisibility);
  ::Property::BooleanPropertyValue* unsafe_arena_release_uivisibility();

  // optional float categoryOrder = 6;
  bool has_categoryorder() const;
  private:
  bool _internal_has_categoryorder() const;
  public:
  void clear_categoryorder();
  float categoryorder() const;
  void set_categoryorder(float value);
  private:
  float _internal_categoryorder() const;
  void _internal_set_categoryorder(float value);
  public:

  // optional float internalOrder = 7;
  bool has_internalorder() const;
  private:
  bool _internal_has_internalorder() const;
  public:
  void clear_internalorder();
  float internalorder() const;
  void set_internalorder(float value);
  private:
  float _internal_internalorder() const;
  void _internal_set_internalorder(float value);
  public:

  // optional bool isReadonly = 5;
  bool has_isreadonly() const;
  private:
  bool _internal_has_isreadonly() const;
  public:
  void clear_isreadonly();
  bool isreadonly() const;
  void set_isreadonly(bool value);
  private:
  bool _internal_isreadonly() const;
  void _internal_set_isreadonly(bool value);
  public:

  // optional bool isAdvanced = 9;
  bool has_isadvanced() const;
  private:
  bool _internal_has_isadvanced() const;
  public:
  void clear_isadvanced();
  bool isadvanced() const;
  void set_isadvanced(bool value);
  private:
  bool _internal_isadvanced() const;
  void _internal_set_isadvanced(bool value);
  public:

  // optional .Property.PropertyMetadata.PropertySync syncMethod = 8;
  bool has_syncmethod() const;
  private:
  bool _internal_has_syncmethod() const;
  public:
  void clear_syncmethod();
  ::Property::PropertyMetadata_PropertySync syncmethod() const;
  void set_syncmethod(::Property::PropertyMetadata_PropertySync value);
  private:
  ::Property::PropertyMetadata_PropertySync _internal_syncmethod() const;
  void _internal_set_syncmethod(::Property::PropertyMetadata_PropertySync value);
  public:

  // @@protoc_insertion_point(class_scope:Property.PropertyMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr category_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    ::Property::BooleanPropertyValue* uivisibility_;
    float categoryorder_;
    float internalorder_;
    bool isreadonly_;
    bool isadvanced_;
    int syncmethod_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class AnyPropertyDeclaration final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.AnyPropertyDeclaration) */ {
 public:
  inline AnyPropertyDeclaration() : AnyPropertyDeclaration(nullptr) {}
  ~AnyPropertyDeclaration() override;
  explicit PROTOBUF_CONSTEXPR AnyPropertyDeclaration(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AnyPropertyDeclaration(const AnyPropertyDeclaration& from);
  AnyPropertyDeclaration(AnyPropertyDeclaration&& from) noexcept
    : AnyPropertyDeclaration() {
    *this = ::std::move(from);
  }

  inline AnyPropertyDeclaration& operator=(const AnyPropertyDeclaration& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnyPropertyDeclaration& operator=(AnyPropertyDeclaration&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnyPropertyDeclaration& default_instance() {
    return *internal_default_instance();
  }
  enum ValueTypeCase {
    kScalar = 2,
    kString = 3,
    kVector = 4,
    kColor = 5,
    kTransform = 6,
    kBoolean = 7,
    kJson = 9,
    kLink = 10,
    VALUETYPE_NOT_SET = 0,
  };

  static inline const AnyPropertyDeclaration* internal_default_instance() {
    return reinterpret_cast<const AnyPropertyDeclaration*>(
               &_AnyPropertyDeclaration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AnyPropertyDeclaration& a, AnyPropertyDeclaration& b) {
    a.Swap(&b);
  }
  inline void Swap(AnyPropertyDeclaration* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnyPropertyDeclaration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AnyPropertyDeclaration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AnyPropertyDeclaration>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AnyPropertyDeclaration& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AnyPropertyDeclaration& from) {
    AnyPropertyDeclaration::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnyPropertyDeclaration* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.AnyPropertyDeclaration";
  }
  protected:
  explicit AnyPropertyDeclaration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScalarFieldNumber = 2,
    kStringFieldNumber = 3,
    kVectorFieldNumber = 4,
    kColorFieldNumber = 5,
    kTransformFieldNumber = 6,
    kBooleanFieldNumber = 7,
    kJsonFieldNumber = 9,
    kLinkFieldNumber = 10,
  };
  // .Property.ScalarPropertyDeclaration scalar = 2;
  bool has_scalar() const;
  private:
  bool _internal_has_scalar() const;
  public:
  void clear_scalar();
  const ::Property::ScalarPropertyDeclaration& scalar() const;
  PROTOBUF_NODISCARD ::Property::ScalarPropertyDeclaration* release_scalar();
  ::Property::ScalarPropertyDeclaration* mutable_scalar();
  void set_allocated_scalar(::Property::ScalarPropertyDeclaration* scalar);
  private:
  const ::Property::ScalarPropertyDeclaration& _internal_scalar() const;
  ::Property::ScalarPropertyDeclaration* _internal_mutable_scalar();
  public:
  void unsafe_arena_set_allocated_scalar(
      ::Property::ScalarPropertyDeclaration* scalar);
  ::Property::ScalarPropertyDeclaration* unsafe_arena_release_scalar();

  // .Property.StringPropertyDeclaration string = 3;
  bool has_string() const;
  private:
  bool _internal_has_string() const;
  public:
  void clear_string();
  const ::Property::StringPropertyDeclaration& string() const;
  PROTOBUF_NODISCARD ::Property::StringPropertyDeclaration* release_string();
  ::Property::StringPropertyDeclaration* mutable_string();
  void set_allocated_string(::Property::StringPropertyDeclaration* string);
  private:
  const ::Property::StringPropertyDeclaration& _internal_string() const;
  ::Property::StringPropertyDeclaration* _internal_mutable_string();
  public:
  void unsafe_arena_set_allocated_string(
      ::Property::StringPropertyDeclaration* string);
  ::Property::StringPropertyDeclaration* unsafe_arena_release_string();

  // .Property.VectorPropertyDeclaration vector = 4;
  bool has_vector() const;
  private:
  bool _internal_has_vector() const;
  public:
  void clear_vector();
  const ::Property::VectorPropertyDeclaration& vector() const;
  PROTOBUF_NODISCARD ::Property::VectorPropertyDeclaration* release_vector();
  ::Property::VectorPropertyDeclaration* mutable_vector();
  void set_allocated_vector(::Property::VectorPropertyDeclaration* vector);
  private:
  const ::Property::VectorPropertyDeclaration& _internal_vector() const;
  ::Property::VectorPropertyDeclaration* _internal_mutable_vector();
  public:
  void unsafe_arena_set_allocated_vector(
      ::Property::VectorPropertyDeclaration* vector);
  ::Property::VectorPropertyDeclaration* unsafe_arena_release_vector();

  // .Property.ColorPropertyDeclaration color = 5;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const ::Property::ColorPropertyDeclaration& color() const;
  PROTOBUF_NODISCARD ::Property::ColorPropertyDeclaration* release_color();
  ::Property::ColorPropertyDeclaration* mutable_color();
  void set_allocated_color(::Property::ColorPropertyDeclaration* color);
  private:
  const ::Property::ColorPropertyDeclaration& _internal_color() const;
  ::Property::ColorPropertyDeclaration* _internal_mutable_color();
  public:
  void unsafe_arena_set_allocated_color(
      ::Property::ColorPropertyDeclaration* color);
  ::Property::ColorPropertyDeclaration* unsafe_arena_release_color();

  // .Property.TransformPropertyDeclaration transform = 6;
  bool has_transform() const;
  private:
  bool _internal_has_transform() const;
  public:
  void clear_transform();
  const ::Property::TransformPropertyDeclaration& transform() const;
  PROTOBUF_NODISCARD ::Property::TransformPropertyDeclaration* release_transform();
  ::Property::TransformPropertyDeclaration* mutable_transform();
  void set_allocated_transform(::Property::TransformPropertyDeclaration* transform);
  private:
  const ::Property::TransformPropertyDeclaration& _internal_transform() const;
  ::Property::TransformPropertyDeclaration* _internal_mutable_transform();
  public:
  void unsafe_arena_set_allocated_transform(
      ::Property::TransformPropertyDeclaration* transform);
  ::Property::TransformPropertyDeclaration* unsafe_arena_release_transform();

  // .Property.BooleanPropertyDeclaration boolean = 7;
  bool has_boolean() const;
  private:
  bool _internal_has_boolean() const;
  public:
  void clear_boolean();
  const ::Property::BooleanPropertyDeclaration& boolean() const;
  PROTOBUF_NODISCARD ::Property::BooleanPropertyDeclaration* release_boolean();
  ::Property::BooleanPropertyDeclaration* mutable_boolean();
  void set_allocated_boolean(::Property::BooleanPropertyDeclaration* boolean);
  private:
  const ::Property::BooleanPropertyDeclaration& _internal_boolean() const;
  ::Property::BooleanPropertyDeclaration* _internal_mutable_boolean();
  public:
  void unsafe_arena_set_allocated_boolean(
      ::Property::BooleanPropertyDeclaration* boolean);
  ::Property::BooleanPropertyDeclaration* unsafe_arena_release_boolean();

  // .Property.JsonPropertyDeclaration json = 9;
  bool has_json() const;
  private:
  bool _internal_has_json() const;
  public:
  void clear_json();
  const ::Property::JsonPropertyDeclaration& json() const;
  PROTOBUF_NODISCARD ::Property::JsonPropertyDeclaration* release_json();
  ::Property::JsonPropertyDeclaration* mutable_json();
  void set_allocated_json(::Property::JsonPropertyDeclaration* json);
  private:
  const ::Property::JsonPropertyDeclaration& _internal_json() const;
  ::Property::JsonPropertyDeclaration* _internal_mutable_json();
  public:
  void unsafe_arena_set_allocated_json(
      ::Property::JsonPropertyDeclaration* json);
  ::Property::JsonPropertyDeclaration* unsafe_arena_release_json();

  // .Property.LinkPropertyDeclaration link = 10;
  bool has_link() const;
  private:
  bool _internal_has_link() const;
  public:
  void clear_link();
  const ::Property::LinkPropertyDeclaration& link() const;
  PROTOBUF_NODISCARD ::Property::LinkPropertyDeclaration* release_link();
  ::Property::LinkPropertyDeclaration* mutable_link();
  void set_allocated_link(::Property::LinkPropertyDeclaration* link);
  private:
  const ::Property::LinkPropertyDeclaration& _internal_link() const;
  ::Property::LinkPropertyDeclaration* _internal_mutable_link();
  public:
  void unsafe_arena_set_allocated_link(
      ::Property::LinkPropertyDeclaration* link);
  ::Property::LinkPropertyDeclaration* unsafe_arena_release_link();

  void clear_ValueType();
  ValueTypeCase ValueType_case() const;
  // @@protoc_insertion_point(class_scope:Property.AnyPropertyDeclaration)
 private:
  class _Internal;
  void set_has_scalar();
  void set_has_string();
  void set_has_vector();
  void set_has_color();
  void set_has_transform();
  void set_has_boolean();
  void set_has_json();
  void set_has_link();

  inline bool has_ValueType() const;
  inline void clear_has_ValueType();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union ValueTypeUnion {
      constexpr ValueTypeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::Property::ScalarPropertyDeclaration* scalar_;
      ::Property::StringPropertyDeclaration* string_;
      ::Property::VectorPropertyDeclaration* vector_;
      ::Property::ColorPropertyDeclaration* color_;
      ::Property::TransformPropertyDeclaration* transform_;
      ::Property::BooleanPropertyDeclaration* boolean_;
      ::Property::JsonPropertyDeclaration* json_;
      ::Property::LinkPropertyDeclaration* link_;
    } ValueType_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class Interpolation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.Interpolation) */ {
 public:
  inline Interpolation() : Interpolation(nullptr) {}
  ~Interpolation() override;
  explicit PROTOBUF_CONSTEXPR Interpolation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Interpolation(const Interpolation& from);
  Interpolation(Interpolation&& from) noexcept
    : Interpolation() {
    *this = ::std::move(from);
  }

  inline Interpolation& operator=(const Interpolation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Interpolation& operator=(Interpolation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Interpolation& default_instance() {
    return *internal_default_instance();
  }
  static inline const Interpolation* internal_default_instance() {
    return reinterpret_cast<const Interpolation*>(
               &_Interpolation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Interpolation& a, Interpolation& b) {
    a.Swap(&b);
  }
  inline void Swap(Interpolation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Interpolation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Interpolation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Interpolation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Interpolation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Interpolation& from) {
    Interpolation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Interpolation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.Interpolation";
  }
  protected:
  explicit Interpolation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEaseOutFieldNumber = 1,
    kEaseInFieldNumber = 2,
    kDurationFieldNumber = 3,
    kDelayFieldNumber = 4,
  };
  // optional float easeOut = 1;
  bool has_easeout() const;
  private:
  bool _internal_has_easeout() const;
  public:
  void clear_easeout();
  float easeout() const;
  void set_easeout(float value);
  private:
  float _internal_easeout() const;
  void _internal_set_easeout(float value);
  public:

  // optional float easeIn = 2;
  bool has_easein() const;
  private:
  bool _internal_has_easein() const;
  public:
  void clear_easein();
  float easein() const;
  void set_easein(float value);
  private:
  float _internal_easein() const;
  void _internal_set_easein(float value);
  public:

  // optional float duration = 3;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  float duration() const;
  void set_duration(float value);
  private:
  float _internal_duration() const;
  void _internal_set_duration(float value);
  public:

  // optional float delay = 4;
  bool has_delay() const;
  private:
  bool _internal_has_delay() const;
  public:
  void clear_delay();
  float delay() const;
  void set_delay(float value);
  private:
  float _internal_delay() const;
  void _internal_set_delay(float value);
  public:

  // @@protoc_insertion_point(class_scope:Property.Interpolation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float easeout_;
    float easein_;
    float duration_;
    float delay_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class ScalarPropertyAssignment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.ScalarPropertyAssignment) */ {
 public:
  inline ScalarPropertyAssignment() : ScalarPropertyAssignment(nullptr) {}
  ~ScalarPropertyAssignment() override;
  explicit PROTOBUF_CONSTEXPR ScalarPropertyAssignment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScalarPropertyAssignment(const ScalarPropertyAssignment& from);
  ScalarPropertyAssignment(ScalarPropertyAssignment&& from) noexcept
    : ScalarPropertyAssignment() {
    *this = ::std::move(from);
  }

  inline ScalarPropertyAssignment& operator=(const ScalarPropertyAssignment& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarPropertyAssignment& operator=(ScalarPropertyAssignment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScalarPropertyAssignment& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScalarPropertyAssignment* internal_default_instance() {
    return reinterpret_cast<const ScalarPropertyAssignment*>(
               &_ScalarPropertyAssignment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ScalarPropertyAssignment& a, ScalarPropertyAssignment& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarPropertyAssignment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScalarPropertyAssignment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScalarPropertyAssignment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScalarPropertyAssignment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ScalarPropertyAssignment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ScalarPropertyAssignment& from) {
    ScalarPropertyAssignment::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarPropertyAssignment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.ScalarPropertyAssignment";
  }
  protected:
  explicit ScalarPropertyAssignment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ScalarPropertyAssignment_ScalarPropertyMethod ScalarPropertyMethod;
  static constexpr ScalarPropertyMethod Overriding =
    ScalarPropertyAssignment_ScalarPropertyMethod_Overriding;
  static constexpr ScalarPropertyMethod Additive =
    ScalarPropertyAssignment_ScalarPropertyMethod_Additive;
  static inline bool ScalarPropertyMethod_IsValid(int value) {
    return ScalarPropertyAssignment_ScalarPropertyMethod_IsValid(value);
  }
  static constexpr ScalarPropertyMethod ScalarPropertyMethod_MIN =
    ScalarPropertyAssignment_ScalarPropertyMethod_ScalarPropertyMethod_MIN;
  static constexpr ScalarPropertyMethod ScalarPropertyMethod_MAX =
    ScalarPropertyAssignment_ScalarPropertyMethod_ScalarPropertyMethod_MAX;
  static constexpr int ScalarPropertyMethod_ARRAYSIZE =
    ScalarPropertyAssignment_ScalarPropertyMethod_ScalarPropertyMethod_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ScalarPropertyMethod_descriptor() {
    return ScalarPropertyAssignment_ScalarPropertyMethod_descriptor();
  }
  template<typename T>
  static inline const std::string& ScalarPropertyMethod_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ScalarPropertyMethod>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ScalarPropertyMethod_Name.");
    return ScalarPropertyAssignment_ScalarPropertyMethod_Name(enum_t_value);
  }
  static inline bool ScalarPropertyMethod_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ScalarPropertyMethod* value) {
    return ScalarPropertyAssignment_ScalarPropertyMethod_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAssignmentIdFieldNumber = 4,
    kValueFieldNumber = 3,
    kMethodFieldNumber = 1,
    kOverridingPriorityFieldNumber = 2,
  };
  // string assignmentId = 4;
  void clear_assignmentid();
  const std::string& assignmentid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_assignmentid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_assignmentid();
  PROTOBUF_NODISCARD std::string* release_assignmentid();
  void set_allocated_assignmentid(std::string* assignmentid);
  private:
  const std::string& _internal_assignmentid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_assignmentid(const std::string& value);
  std::string* _internal_mutable_assignmentid();
  public:

  // .Property.ScalarPropertyValue value = 3;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::Property::ScalarPropertyValue& value() const;
  PROTOBUF_NODISCARD ::Property::ScalarPropertyValue* release_value();
  ::Property::ScalarPropertyValue* mutable_value();
  void set_allocated_value(::Property::ScalarPropertyValue* value);
  private:
  const ::Property::ScalarPropertyValue& _internal_value() const;
  ::Property::ScalarPropertyValue* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::Property::ScalarPropertyValue* value);
  ::Property::ScalarPropertyValue* unsafe_arena_release_value();

  // optional .Property.ScalarPropertyAssignment.ScalarPropertyMethod method = 1;
  bool has_method() const;
  private:
  bool _internal_has_method() const;
  public:
  void clear_method();
  ::Property::ScalarPropertyAssignment_ScalarPropertyMethod method() const;
  void set_method(::Property::ScalarPropertyAssignment_ScalarPropertyMethod value);
  private:
  ::Property::ScalarPropertyAssignment_ScalarPropertyMethod _internal_method() const;
  void _internal_set_method(::Property::ScalarPropertyAssignment_ScalarPropertyMethod value);
  public:

  // optional int32 overridingPriority = 2;
  bool has_overridingpriority() const;
  private:
  bool _internal_has_overridingpriority() const;
  public:
  void clear_overridingpriority();
  int32_t overridingpriority() const;
  void set_overridingpriority(int32_t value);
  private:
  int32_t _internal_overridingpriority() const;
  void _internal_set_overridingpriority(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Property.ScalarPropertyAssignment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr assignmentid_;
    ::Property::ScalarPropertyValue* value_;
    int method_;
    int32_t overridingpriority_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class ScalarPropertyValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.ScalarPropertyValue) */ {
 public:
  inline ScalarPropertyValue() : ScalarPropertyValue(nullptr) {}
  ~ScalarPropertyValue() override;
  explicit PROTOBUF_CONSTEXPR ScalarPropertyValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScalarPropertyValue(const ScalarPropertyValue& from);
  ScalarPropertyValue(ScalarPropertyValue&& from) noexcept
    : ScalarPropertyValue() {
    *this = ::std::move(from);
  }

  inline ScalarPropertyValue& operator=(const ScalarPropertyValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarPropertyValue& operator=(ScalarPropertyValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScalarPropertyValue& default_instance() {
    return *internal_default_instance();
  }
  enum ValueTypeCase {
    kConstant = 1,
    kRef = 2,
    kExpr = 3,
    kKeyframes = 4,
    kUseDefault = 5,
    kPulse = 6,
    kPlayback = 7,
    kPlaybackBasic = 8,
    kInterp = 9,
    kCustom = 10,
    kApproach = 11,
    VALUETYPE_NOT_SET = 0,
  };

  static inline const ScalarPropertyValue* internal_default_instance() {
    return reinterpret_cast<const ScalarPropertyValue*>(
               &_ScalarPropertyValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ScalarPropertyValue& a, ScalarPropertyValue& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarPropertyValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScalarPropertyValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScalarPropertyValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScalarPropertyValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ScalarPropertyValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ScalarPropertyValue& from) {
    ScalarPropertyValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarPropertyValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.ScalarPropertyValue";
  }
  protected:
  explicit ScalarPropertyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConstantFieldNumber = 1,
    kRefFieldNumber = 2,
    kExprFieldNumber = 3,
    kKeyframesFieldNumber = 4,
    kUseDefaultFieldNumber = 5,
    kPulseFieldNumber = 6,
    kPlaybackFieldNumber = 7,
    kPlaybackBasicFieldNumber = 8,
    kInterpFieldNumber = 9,
    kCustomFieldNumber = 10,
    kApproachFieldNumber = 11,
  };
  // float constant = 1;
  bool has_constant() const;
  private:
  bool _internal_has_constant() const;
  public:
  void clear_constant();
  float constant() const;
  void set_constant(float value);
  private:
  float _internal_constant() const;
  void _internal_set_constant(float value);
  public:

  // .Property.PropertyIdentifier ref = 2;
  bool has_ref() const;
  private:
  bool _internal_has_ref() const;
  public:
  void clear_ref();
  const ::Property::PropertyIdentifier& ref() const;
  PROTOBUF_NODISCARD ::Property::PropertyIdentifier* release_ref();
  ::Property::PropertyIdentifier* mutable_ref();
  void set_allocated_ref(::Property::PropertyIdentifier* ref);
  private:
  const ::Property::PropertyIdentifier& _internal_ref() const;
  ::Property::PropertyIdentifier* _internal_mutable_ref();
  public:
  void unsafe_arena_set_allocated_ref(
      ::Property::PropertyIdentifier* ref);
  ::Property::PropertyIdentifier* unsafe_arena_release_ref();

  // string expr = 3;
  bool has_expr() const;
  private:
  bool _internal_has_expr() const;
  public:
  void clear_expr();
  const std::string& expr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_expr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_expr();
  PROTOBUF_NODISCARD std::string* release_expr();
  void set_allocated_expr(std::string* expr);
  private:
  const std::string& _internal_expr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_expr(const std::string& value);
  std::string* _internal_mutable_expr();
  public:

  // .Property.ScalarPropertyKeyframed keyframes = 4;
  bool has_keyframes() const;
  private:
  bool _internal_has_keyframes() const;
  public:
  void clear_keyframes();
  const ::Property::ScalarPropertyKeyframed& keyframes() const;
  PROTOBUF_NODISCARD ::Property::ScalarPropertyKeyframed* release_keyframes();
  ::Property::ScalarPropertyKeyframed* mutable_keyframes();
  void set_allocated_keyframes(::Property::ScalarPropertyKeyframed* keyframes);
  private:
  const ::Property::ScalarPropertyKeyframed& _internal_keyframes() const;
  ::Property::ScalarPropertyKeyframed* _internal_mutable_keyframes();
  public:
  void unsafe_arena_set_allocated_keyframes(
      ::Property::ScalarPropertyKeyframed* keyframes);
  ::Property::ScalarPropertyKeyframed* unsafe_arena_release_keyframes();

  // bool useDefault = 5;
  bool has_usedefault() const;
  private:
  bool _internal_has_usedefault() const;
  public:
  void clear_usedefault();
  bool usedefault() const;
  void set_usedefault(bool value);
  private:
  bool _internal_usedefault() const;
  void _internal_set_usedefault(bool value);
  public:

  // .Property.ScalarPropertyPulse pulse = 6;
  bool has_pulse() const;
  private:
  bool _internal_has_pulse() const;
  public:
  void clear_pulse();
  const ::Property::ScalarPropertyPulse& pulse() const;
  PROTOBUF_NODISCARD ::Property::ScalarPropertyPulse* release_pulse();
  ::Property::ScalarPropertyPulse* mutable_pulse();
  void set_allocated_pulse(::Property::ScalarPropertyPulse* pulse);
  private:
  const ::Property::ScalarPropertyPulse& _internal_pulse() const;
  ::Property::ScalarPropertyPulse* _internal_mutable_pulse();
  public:
  void unsafe_arena_set_allocated_pulse(
      ::Property::ScalarPropertyPulse* pulse);
  ::Property::ScalarPropertyPulse* unsafe_arena_release_pulse();

  // .Property.ScalarPropertyPlayback playback = 7;
  bool has_playback() const;
  private:
  bool _internal_has_playback() const;
  public:
  void clear_playback();
  const ::Property::ScalarPropertyPlayback& playback() const;
  PROTOBUF_NODISCARD ::Property::ScalarPropertyPlayback* release_playback();
  ::Property::ScalarPropertyPlayback* mutable_playback();
  void set_allocated_playback(::Property::ScalarPropertyPlayback* playback);
  private:
  const ::Property::ScalarPropertyPlayback& _internal_playback() const;
  ::Property::ScalarPropertyPlayback* _internal_mutable_playback();
  public:
  void unsafe_arena_set_allocated_playback(
      ::Property::ScalarPropertyPlayback* playback);
  ::Property::ScalarPropertyPlayback* unsafe_arena_release_playback();

  // .Property.ScalarPropertyPlaybackBasic playbackBasic = 8;
  bool has_playbackbasic() const;
  private:
  bool _internal_has_playbackbasic() const;
  public:
  void clear_playbackbasic();
  const ::Property::ScalarPropertyPlaybackBasic& playbackbasic() const;
  PROTOBUF_NODISCARD ::Property::ScalarPropertyPlaybackBasic* release_playbackbasic();
  ::Property::ScalarPropertyPlaybackBasic* mutable_playbackbasic();
  void set_allocated_playbackbasic(::Property::ScalarPropertyPlaybackBasic* playbackbasic);
  private:
  const ::Property::ScalarPropertyPlaybackBasic& _internal_playbackbasic() const;
  ::Property::ScalarPropertyPlaybackBasic* _internal_mutable_playbackbasic();
  public:
  void unsafe_arena_set_allocated_playbackbasic(
      ::Property::ScalarPropertyPlaybackBasic* playbackbasic);
  ::Property::ScalarPropertyPlaybackBasic* unsafe_arena_release_playbackbasic();

  // .Property.ScalarPropertyInterpolator interp = 9;
  bool has_interp() const;
  private:
  bool _internal_has_interp() const;
  public:
  void clear_interp();
  const ::Property::ScalarPropertyInterpolator& interp() const;
  PROTOBUF_NODISCARD ::Property::ScalarPropertyInterpolator* release_interp();
  ::Property::ScalarPropertyInterpolator* mutable_interp();
  void set_allocated_interp(::Property::ScalarPropertyInterpolator* interp);
  private:
  const ::Property::ScalarPropertyInterpolator& _internal_interp() const;
  ::Property::ScalarPropertyInterpolator* _internal_mutable_interp();
  public:
  void unsafe_arena_set_allocated_interp(
      ::Property::ScalarPropertyInterpolator* interp);
  ::Property::ScalarPropertyInterpolator* unsafe_arena_release_interp();

  // .Property.CustomGeneratorValue custom = 10;
  bool has_custom() const;
  private:
  bool _internal_has_custom() const;
  public:
  void clear_custom();
  const ::Property::CustomGeneratorValue& custom() const;
  PROTOBUF_NODISCARD ::Property::CustomGeneratorValue* release_custom();
  ::Property::CustomGeneratorValue* mutable_custom();
  void set_allocated_custom(::Property::CustomGeneratorValue* custom);
  private:
  const ::Property::CustomGeneratorValue& _internal_custom() const;
  ::Property::CustomGeneratorValue* _internal_mutable_custom();
  public:
  void unsafe_arena_set_allocated_custom(
      ::Property::CustomGeneratorValue* custom);
  ::Property::CustomGeneratorValue* unsafe_arena_release_custom();

  // .Property.ScalarPropertyApproach approach = 11;
  bool has_approach() const;
  private:
  bool _internal_has_approach() const;
  public:
  void clear_approach();
  const ::Property::ScalarPropertyApproach& approach() const;
  PROTOBUF_NODISCARD ::Property::ScalarPropertyApproach* release_approach();
  ::Property::ScalarPropertyApproach* mutable_approach();
  void set_allocated_approach(::Property::ScalarPropertyApproach* approach);
  private:
  const ::Property::ScalarPropertyApproach& _internal_approach() const;
  ::Property::ScalarPropertyApproach* _internal_mutable_approach();
  public:
  void unsafe_arena_set_allocated_approach(
      ::Property::ScalarPropertyApproach* approach);
  ::Property::ScalarPropertyApproach* unsafe_arena_release_approach();

  void clear_ValueType();
  ValueTypeCase ValueType_case() const;
  // @@protoc_insertion_point(class_scope:Property.ScalarPropertyValue)
 private:
  class _Internal;
  void set_has_constant();
  void set_has_ref();
  void set_has_expr();
  void set_has_keyframes();
  void set_has_usedefault();
  void set_has_pulse();
  void set_has_playback();
  void set_has_playbackbasic();
  void set_has_interp();
  void set_has_custom();
  void set_has_approach();

  inline bool has_ValueType() const;
  inline void clear_has_ValueType();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union ValueTypeUnion {
      constexpr ValueTypeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      float constant_;
      ::Property::PropertyIdentifier* ref_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr expr_;
      ::Property::ScalarPropertyKeyframed* keyframes_;
      bool usedefault_;
      ::Property::ScalarPropertyPulse* pulse_;
      ::Property::ScalarPropertyPlayback* playback_;
      ::Property::ScalarPropertyPlaybackBasic* playbackbasic_;
      ::Property::ScalarPropertyInterpolator* interp_;
      ::Property::CustomGeneratorValue* custom_;
      ::Property::ScalarPropertyApproach* approach_;
    } ValueType_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class ScalarPropertyInterpolator final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.ScalarPropertyInterpolator) */ {
 public:
  inline ScalarPropertyInterpolator() : ScalarPropertyInterpolator(nullptr) {}
  ~ScalarPropertyInterpolator() override;
  explicit PROTOBUF_CONSTEXPR ScalarPropertyInterpolator(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScalarPropertyInterpolator(const ScalarPropertyInterpolator& from);
  ScalarPropertyInterpolator(ScalarPropertyInterpolator&& from) noexcept
    : ScalarPropertyInterpolator() {
    *this = ::std::move(from);
  }

  inline ScalarPropertyInterpolator& operator=(const ScalarPropertyInterpolator& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarPropertyInterpolator& operator=(ScalarPropertyInterpolator&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScalarPropertyInterpolator& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScalarPropertyInterpolator* internal_default_instance() {
    return reinterpret_cast<const ScalarPropertyInterpolator*>(
               &_ScalarPropertyInterpolator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ScalarPropertyInterpolator& a, ScalarPropertyInterpolator& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarPropertyInterpolator* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScalarPropertyInterpolator* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScalarPropertyInterpolator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScalarPropertyInterpolator>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ScalarPropertyInterpolator& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ScalarPropertyInterpolator& from) {
    ScalarPropertyInterpolator::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarPropertyInterpolator* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.ScalarPropertyInterpolator";
  }
  protected:
  explicit ScalarPropertyInterpolator(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kToFieldNumber = 2,
    kByFieldNumber = 3,
    kTFieldNumber = 4,
  };
  // .Property.ScalarPropertyValue from = 1;
  bool has_from() const;
  private:
  bool _internal_has_from() const;
  public:
  void clear_from();
  const ::Property::ScalarPropertyValue& from() const;
  PROTOBUF_NODISCARD ::Property::ScalarPropertyValue* release_from();
  ::Property::ScalarPropertyValue* mutable_from();
  void set_allocated_from(::Property::ScalarPropertyValue* from);
  private:
  const ::Property::ScalarPropertyValue& _internal_from() const;
  ::Property::ScalarPropertyValue* _internal_mutable_from();
  public:
  void unsafe_arena_set_allocated_from(
      ::Property::ScalarPropertyValue* from);
  ::Property::ScalarPropertyValue* unsafe_arena_release_from();

  // .Property.ScalarPropertyValue to = 2;
  bool has_to() const;
  private:
  bool _internal_has_to() const;
  public:
  void clear_to();
  const ::Property::ScalarPropertyValue& to() const;
  PROTOBUF_NODISCARD ::Property::ScalarPropertyValue* release_to();
  ::Property::ScalarPropertyValue* mutable_to();
  void set_allocated_to(::Property::ScalarPropertyValue* to);
  private:
  const ::Property::ScalarPropertyValue& _internal_to() const;
  ::Property::ScalarPropertyValue* _internal_mutable_to();
  public:
  void unsafe_arena_set_allocated_to(
      ::Property::ScalarPropertyValue* to);
  ::Property::ScalarPropertyValue* unsafe_arena_release_to();

  // .Property.Interpolation by = 3;
  bool has_by() const;
  private:
  bool _internal_has_by() const;
  public:
  void clear_by();
  const ::Property::Interpolation& by() const;
  PROTOBUF_NODISCARD ::Property::Interpolation* release_by();
  ::Property::Interpolation* mutable_by();
  void set_allocated_by(::Property::Interpolation* by);
  private:
  const ::Property::Interpolation& _internal_by() const;
  ::Property::Interpolation* _internal_mutable_by();
  public:
  void unsafe_arena_set_allocated_by(
      ::Property::Interpolation* by);
  ::Property::Interpolation* unsafe_arena_release_by();

  // .Property.ScalarPropertyValue t = 4;
  bool has_t() const;
  private:
  bool _internal_has_t() const;
  public:
  void clear_t();
  const ::Property::ScalarPropertyValue& t() const;
  PROTOBUF_NODISCARD ::Property::ScalarPropertyValue* release_t();
  ::Property::ScalarPropertyValue* mutable_t();
  void set_allocated_t(::Property::ScalarPropertyValue* t);
  private:
  const ::Property::ScalarPropertyValue& _internal_t() const;
  ::Property::ScalarPropertyValue* _internal_mutable_t();
  public:
  void unsafe_arena_set_allocated_t(
      ::Property::ScalarPropertyValue* t);
  ::Property::ScalarPropertyValue* unsafe_arena_release_t();

  // @@protoc_insertion_point(class_scope:Property.ScalarPropertyInterpolator)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Property::ScalarPropertyValue* from_;
    ::Property::ScalarPropertyValue* to_;
    ::Property::Interpolation* by_;
    ::Property::ScalarPropertyValue* t_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class ScalarPropertyPulse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.ScalarPropertyPulse) */ {
 public:
  inline ScalarPropertyPulse() : ScalarPropertyPulse(nullptr) {}
  ~ScalarPropertyPulse() override;
  explicit PROTOBUF_CONSTEXPR ScalarPropertyPulse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScalarPropertyPulse(const ScalarPropertyPulse& from);
  ScalarPropertyPulse(ScalarPropertyPulse&& from) noexcept
    : ScalarPropertyPulse() {
    *this = ::std::move(from);
  }

  inline ScalarPropertyPulse& operator=(const ScalarPropertyPulse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarPropertyPulse& operator=(ScalarPropertyPulse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScalarPropertyPulse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScalarPropertyPulse* internal_default_instance() {
    return reinterpret_cast<const ScalarPropertyPulse*>(
               &_ScalarPropertyPulse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ScalarPropertyPulse& a, ScalarPropertyPulse& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarPropertyPulse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScalarPropertyPulse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScalarPropertyPulse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScalarPropertyPulse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ScalarPropertyPulse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ScalarPropertyPulse& from) {
    ScalarPropertyPulse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarPropertyPulse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.ScalarPropertyPulse";
  }
  protected:
  explicit ScalarPropertyPulse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTSrcFieldNumber = 1,
    kLengthFieldNumber = 2,
    kMinFieldNumber = 3,
    kMaxFieldNumber = 4,
  };
  // .Property.ScalarPropertyValue tSrc = 1;
  bool has_tsrc() const;
  private:
  bool _internal_has_tsrc() const;
  public:
  void clear_tsrc();
  const ::Property::ScalarPropertyValue& tsrc() const;
  PROTOBUF_NODISCARD ::Property::ScalarPropertyValue* release_tsrc();
  ::Property::ScalarPropertyValue* mutable_tsrc();
  void set_allocated_tsrc(::Property::ScalarPropertyValue* tsrc);
  private:
  const ::Property::ScalarPropertyValue& _internal_tsrc() const;
  ::Property::ScalarPropertyValue* _internal_mutable_tsrc();
  public:
  void unsafe_arena_set_allocated_tsrc(
      ::Property::ScalarPropertyValue* tsrc);
  ::Property::ScalarPropertyValue* unsafe_arena_release_tsrc();

  // .Property.ScalarPropertyValue length = 2;
  bool has_length() const;
  private:
  bool _internal_has_length() const;
  public:
  void clear_length();
  const ::Property::ScalarPropertyValue& length() const;
  PROTOBUF_NODISCARD ::Property::ScalarPropertyValue* release_length();
  ::Property::ScalarPropertyValue* mutable_length();
  void set_allocated_length(::Property::ScalarPropertyValue* length);
  private:
  const ::Property::ScalarPropertyValue& _internal_length() const;
  ::Property::ScalarPropertyValue* _internal_mutable_length();
  public:
  void unsafe_arena_set_allocated_length(
      ::Property::ScalarPropertyValue* length);
  ::Property::ScalarPropertyValue* unsafe_arena_release_length();

  // .Property.ScalarPropertyValue min = 3;
  bool has_min() const;
  private:
  bool _internal_has_min() const;
  public:
  void clear_min();
  const ::Property::ScalarPropertyValue& min() const;
  PROTOBUF_NODISCARD ::Property::ScalarPropertyValue* release_min();
  ::Property::ScalarPropertyValue* mutable_min();
  void set_allocated_min(::Property::ScalarPropertyValue* min);
  private:
  const ::Property::ScalarPropertyValue& _internal_min() const;
  ::Property::ScalarPropertyValue* _internal_mutable_min();
  public:
  void unsafe_arena_set_allocated_min(
      ::Property::ScalarPropertyValue* min);
  ::Property::ScalarPropertyValue* unsafe_arena_release_min();

  // .Property.ScalarPropertyValue max = 4;
  bool has_max() const;
  private:
  bool _internal_has_max() const;
  public:
  void clear_max();
  const ::Property::ScalarPropertyValue& max() const;
  PROTOBUF_NODISCARD ::Property::ScalarPropertyValue* release_max();
  ::Property::ScalarPropertyValue* mutable_max();
  void set_allocated_max(::Property::ScalarPropertyValue* max);
  private:
  const ::Property::ScalarPropertyValue& _internal_max() const;
  ::Property::ScalarPropertyValue* _internal_mutable_max();
  public:
  void unsafe_arena_set_allocated_max(
      ::Property::ScalarPropertyValue* max);
  ::Property::ScalarPropertyValue* unsafe_arena_release_max();

  // @@protoc_insertion_point(class_scope:Property.ScalarPropertyPulse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Property::ScalarPropertyValue* tsrc_;
    ::Property::ScalarPropertyValue* length_;
    ::Property::ScalarPropertyValue* min_;
    ::Property::ScalarPropertyValue* max_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class ScalarPropertyPlaybackBasic final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.ScalarPropertyPlaybackBasic) */ {
 public:
  inline ScalarPropertyPlaybackBasic() : ScalarPropertyPlaybackBasic(nullptr) {}
  ~ScalarPropertyPlaybackBasic() override;
  explicit PROTOBUF_CONSTEXPR ScalarPropertyPlaybackBasic(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScalarPropertyPlaybackBasic(const ScalarPropertyPlaybackBasic& from);
  ScalarPropertyPlaybackBasic(ScalarPropertyPlaybackBasic&& from) noexcept
    : ScalarPropertyPlaybackBasic() {
    *this = ::std::move(from);
  }

  inline ScalarPropertyPlaybackBasic& operator=(const ScalarPropertyPlaybackBasic& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarPropertyPlaybackBasic& operator=(ScalarPropertyPlaybackBasic&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScalarPropertyPlaybackBasic& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScalarPropertyPlaybackBasic* internal_default_instance() {
    return reinterpret_cast<const ScalarPropertyPlaybackBasic*>(
               &_ScalarPropertyPlaybackBasic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ScalarPropertyPlaybackBasic& a, ScalarPropertyPlaybackBasic& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarPropertyPlaybackBasic* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScalarPropertyPlaybackBasic* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScalarPropertyPlaybackBasic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScalarPropertyPlaybackBasic>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ScalarPropertyPlaybackBasic& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ScalarPropertyPlaybackBasic& from) {
    ScalarPropertyPlaybackBasic::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarPropertyPlaybackBasic* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.ScalarPropertyPlaybackBasic";
  }
  protected:
  explicit ScalarPropertyPlaybackBasic(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartTimeFieldNumber = 2,
    kPlayingFieldNumber = 3,
    kSpeedWhilePlayingFieldNumber = 4,
  };
  // float startTime = 2;
  void clear_starttime();
  float starttime() const;
  void set_starttime(float value);
  private:
  float _internal_starttime() const;
  void _internal_set_starttime(float value);
  public:

  // bool playing = 3;
  void clear_playing();
  bool playing() const;
  void set_playing(bool value);
  private:
  bool _internal_playing() const;
  void _internal_set_playing(bool value);
  public:

  // float speedWhilePlaying = 4;
  void clear_speedwhileplaying();
  float speedwhileplaying() const;
  void set_speedwhileplaying(float value);
  private:
  float _internal_speedwhileplaying() const;
  void _internal_set_speedwhileplaying(float value);
  public:

  // @@protoc_insertion_point(class_scope:Property.ScalarPropertyPlaybackBasic)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float starttime_;
    bool playing_;
    float speedwhileplaying_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class ScalarPropertyPlayback final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.ScalarPropertyPlayback) */ {
 public:
  inline ScalarPropertyPlayback() : ScalarPropertyPlayback(nullptr) {}
  ~ScalarPropertyPlayback() override;
  explicit PROTOBUF_CONSTEXPR ScalarPropertyPlayback(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScalarPropertyPlayback(const ScalarPropertyPlayback& from);
  ScalarPropertyPlayback(ScalarPropertyPlayback&& from) noexcept
    : ScalarPropertyPlayback() {
    *this = ::std::move(from);
  }

  inline ScalarPropertyPlayback& operator=(const ScalarPropertyPlayback& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarPropertyPlayback& operator=(ScalarPropertyPlayback&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScalarPropertyPlayback& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScalarPropertyPlayback* internal_default_instance() {
    return reinterpret_cast<const ScalarPropertyPlayback*>(
               &_ScalarPropertyPlayback_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ScalarPropertyPlayback& a, ScalarPropertyPlayback& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarPropertyPlayback* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScalarPropertyPlayback* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScalarPropertyPlayback* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScalarPropertyPlayback>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ScalarPropertyPlayback& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ScalarPropertyPlayback& from) {
    ScalarPropertyPlayback::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarPropertyPlayback* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.ScalarPropertyPlayback";
  }
  protected:
  explicit ScalarPropertyPlayback(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTSrcFieldNumber = 1,
    kStartTimeFieldNumber = 2,
    kPlayingFieldNumber = 3,
    kSpeedWhilePlayingFieldNumber = 4,
  };
  // .Property.ScalarPropertyValue tSrc = 1;
  bool has_tsrc() const;
  private:
  bool _internal_has_tsrc() const;
  public:
  void clear_tsrc();
  const ::Property::ScalarPropertyValue& tsrc() const;
  PROTOBUF_NODISCARD ::Property::ScalarPropertyValue* release_tsrc();
  ::Property::ScalarPropertyValue* mutable_tsrc();
  void set_allocated_tsrc(::Property::ScalarPropertyValue* tsrc);
  private:
  const ::Property::ScalarPropertyValue& _internal_tsrc() const;
  ::Property::ScalarPropertyValue* _internal_mutable_tsrc();
  public:
  void unsafe_arena_set_allocated_tsrc(
      ::Property::ScalarPropertyValue* tsrc);
  ::Property::ScalarPropertyValue* unsafe_arena_release_tsrc();

  // .Property.ScalarPropertyValue startTime = 2;
  bool has_starttime() const;
  private:
  bool _internal_has_starttime() const;
  public:
  void clear_starttime();
  const ::Property::ScalarPropertyValue& starttime() const;
  PROTOBUF_NODISCARD ::Property::ScalarPropertyValue* release_starttime();
  ::Property::ScalarPropertyValue* mutable_starttime();
  void set_allocated_starttime(::Property::ScalarPropertyValue* starttime);
  private:
  const ::Property::ScalarPropertyValue& _internal_starttime() const;
  ::Property::ScalarPropertyValue* _internal_mutable_starttime();
  public:
  void unsafe_arena_set_allocated_starttime(
      ::Property::ScalarPropertyValue* starttime);
  ::Property::ScalarPropertyValue* unsafe_arena_release_starttime();

  // .Property.BooleanPropertyValue playing = 3;
  bool has_playing() const;
  private:
  bool _internal_has_playing() const;
  public:
  void clear_playing();
  const ::Property::BooleanPropertyValue& playing() const;
  PROTOBUF_NODISCARD ::Property::BooleanPropertyValue* release_playing();
  ::Property::BooleanPropertyValue* mutable_playing();
  void set_allocated_playing(::Property::BooleanPropertyValue* playing);
  private:
  const ::Property::BooleanPropertyValue& _internal_playing() const;
  ::Property::BooleanPropertyValue* _internal_mutable_playing();
  public:
  void unsafe_arena_set_allocated_playing(
      ::Property::BooleanPropertyValue* playing);
  ::Property::BooleanPropertyValue* unsafe_arena_release_playing();

  // float speedWhilePlaying = 4;
  void clear_speedwhileplaying();
  float speedwhileplaying() const;
  void set_speedwhileplaying(float value);
  private:
  float _internal_speedwhileplaying() const;
  void _internal_set_speedwhileplaying(float value);
  public:

  // @@protoc_insertion_point(class_scope:Property.ScalarPropertyPlayback)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Property::ScalarPropertyValue* tsrc_;
    ::Property::ScalarPropertyValue* starttime_;
    ::Property::BooleanPropertyValue* playing_;
    float speedwhileplaying_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class ScalarPropertyKeyframed_ScalarKeyframe final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.ScalarPropertyKeyframed.ScalarKeyframe) */ {
 public:
  inline ScalarPropertyKeyframed_ScalarKeyframe() : ScalarPropertyKeyframed_ScalarKeyframe(nullptr) {}
  ~ScalarPropertyKeyframed_ScalarKeyframe() override;
  explicit PROTOBUF_CONSTEXPR ScalarPropertyKeyframed_ScalarKeyframe(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScalarPropertyKeyframed_ScalarKeyframe(const ScalarPropertyKeyframed_ScalarKeyframe& from);
  ScalarPropertyKeyframed_ScalarKeyframe(ScalarPropertyKeyframed_ScalarKeyframe&& from) noexcept
    : ScalarPropertyKeyframed_ScalarKeyframe() {
    *this = ::std::move(from);
  }

  inline ScalarPropertyKeyframed_ScalarKeyframe& operator=(const ScalarPropertyKeyframed_ScalarKeyframe& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarPropertyKeyframed_ScalarKeyframe& operator=(ScalarPropertyKeyframed_ScalarKeyframe&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScalarPropertyKeyframed_ScalarKeyframe& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScalarPropertyKeyframed_ScalarKeyframe* internal_default_instance() {
    return reinterpret_cast<const ScalarPropertyKeyframed_ScalarKeyframe*>(
               &_ScalarPropertyKeyframed_ScalarKeyframe_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ScalarPropertyKeyframed_ScalarKeyframe& a, ScalarPropertyKeyframed_ScalarKeyframe& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarPropertyKeyframed_ScalarKeyframe* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScalarPropertyKeyframed_ScalarKeyframe* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScalarPropertyKeyframed_ScalarKeyframe* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScalarPropertyKeyframed_ScalarKeyframe>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ScalarPropertyKeyframed_ScalarKeyframe& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ScalarPropertyKeyframed_ScalarKeyframe& from) {
    ScalarPropertyKeyframed_ScalarKeyframe::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarPropertyKeyframed_ScalarKeyframe* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.ScalarPropertyKeyframed.ScalarKeyframe";
  }
  protected:
  explicit ScalarPropertyKeyframed_ScalarKeyframe(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValFieldNumber = 2,
    kTFieldNumber = 1,
    kTangentInFieldNumber = 3,
    kTangentOutFieldNumber = 4,
  };
  // .Property.ScalarPropertyValue val = 2;
  bool has_val() const;
  private:
  bool _internal_has_val() const;
  public:
  void clear_val();
  const ::Property::ScalarPropertyValue& val() const;
  PROTOBUF_NODISCARD ::Property::ScalarPropertyValue* release_val();
  ::Property::ScalarPropertyValue* mutable_val();
  void set_allocated_val(::Property::ScalarPropertyValue* val);
  private:
  const ::Property::ScalarPropertyValue& _internal_val() const;
  ::Property::ScalarPropertyValue* _internal_mutable_val();
  public:
  void unsafe_arena_set_allocated_val(
      ::Property::ScalarPropertyValue* val);
  ::Property::ScalarPropertyValue* unsafe_arena_release_val();

  // float t = 1;
  void clear_t();
  float t() const;
  void set_t(float value);
  private:
  float _internal_t() const;
  void _internal_set_t(float value);
  public:

  // optional float tangentIn = 3;
  bool has_tangentin() const;
  private:
  bool _internal_has_tangentin() const;
  public:
  void clear_tangentin();
  float tangentin() const;
  void set_tangentin(float value);
  private:
  float _internal_tangentin() const;
  void _internal_set_tangentin(float value);
  public:

  // optional float tangentOut = 4;
  bool has_tangentout() const;
  private:
  bool _internal_has_tangentout() const;
  public:
  void clear_tangentout();
  float tangentout() const;
  void set_tangentout(float value);
  private:
  float _internal_tangentout() const;
  void _internal_set_tangentout(float value);
  public:

  // @@protoc_insertion_point(class_scope:Property.ScalarPropertyKeyframed.ScalarKeyframe)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::Property::ScalarPropertyValue* val_;
    float t_;
    float tangentin_;
    float tangentout_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class ScalarPropertyKeyframed final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.ScalarPropertyKeyframed) */ {
 public:
  inline ScalarPropertyKeyframed() : ScalarPropertyKeyframed(nullptr) {}
  ~ScalarPropertyKeyframed() override;
  explicit PROTOBUF_CONSTEXPR ScalarPropertyKeyframed(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScalarPropertyKeyframed(const ScalarPropertyKeyframed& from);
  ScalarPropertyKeyframed(ScalarPropertyKeyframed&& from) noexcept
    : ScalarPropertyKeyframed() {
    *this = ::std::move(from);
  }

  inline ScalarPropertyKeyframed& operator=(const ScalarPropertyKeyframed& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarPropertyKeyframed& operator=(ScalarPropertyKeyframed&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScalarPropertyKeyframed& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScalarPropertyKeyframed* internal_default_instance() {
    return reinterpret_cast<const ScalarPropertyKeyframed*>(
               &_ScalarPropertyKeyframed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ScalarPropertyKeyframed& a, ScalarPropertyKeyframed& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarPropertyKeyframed* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScalarPropertyKeyframed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScalarPropertyKeyframed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScalarPropertyKeyframed>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ScalarPropertyKeyframed& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ScalarPropertyKeyframed& from) {
    ScalarPropertyKeyframed::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarPropertyKeyframed* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.ScalarPropertyKeyframed";
  }
  protected:
  explicit ScalarPropertyKeyframed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ScalarPropertyKeyframed_ScalarKeyframe ScalarKeyframe;

  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 10,
    kTSrcFieldNumber = 8,
    kLoopingFieldNumber = 11,
    kTangentGenFieldNumber = 12,
  };
  // repeated .Property.ScalarPropertyKeyframed.ScalarKeyframe keys = 10;
  int keys_size() const;
  private:
  int _internal_keys_size() const;
  public:
  void clear_keys();
  ::Property::ScalarPropertyKeyframed_ScalarKeyframe* mutable_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Property::ScalarPropertyKeyframed_ScalarKeyframe >*
      mutable_keys();
  private:
  const ::Property::ScalarPropertyKeyframed_ScalarKeyframe& _internal_keys(int index) const;
  ::Property::ScalarPropertyKeyframed_ScalarKeyframe* _internal_add_keys();
  public:
  const ::Property::ScalarPropertyKeyframed_ScalarKeyframe& keys(int index) const;
  ::Property::ScalarPropertyKeyframed_ScalarKeyframe* add_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Property::ScalarPropertyKeyframed_ScalarKeyframe >&
      keys() const;

  // optional .Property.ScalarPropertyValue tSrc = 8;
  bool has_tsrc() const;
  private:
  bool _internal_has_tsrc() const;
  public:
  void clear_tsrc();
  const ::Property::ScalarPropertyValue& tsrc() const;
  PROTOBUF_NODISCARD ::Property::ScalarPropertyValue* release_tsrc();
  ::Property::ScalarPropertyValue* mutable_tsrc();
  void set_allocated_tsrc(::Property::ScalarPropertyValue* tsrc);
  private:
  const ::Property::ScalarPropertyValue& _internal_tsrc() const;
  ::Property::ScalarPropertyValue* _internal_mutable_tsrc();
  public:
  void unsafe_arena_set_allocated_tsrc(
      ::Property::ScalarPropertyValue* tsrc);
  ::Property::ScalarPropertyValue* unsafe_arena_release_tsrc();

  // .Property.KeyframeLoopingEnum looping = 11;
  void clear_looping();
  ::Property::KeyframeLoopingEnum looping() const;
  void set_looping(::Property::KeyframeLoopingEnum value);
  private:
  ::Property::KeyframeLoopingEnum _internal_looping() const;
  void _internal_set_looping(::Property::KeyframeLoopingEnum value);
  public:

  // .Property.TangentsAutocomputeMethodEnum tangentGen = 12;
  void clear_tangentgen();
  ::Property::TangentsAutocomputeMethodEnum tangentgen() const;
  void set_tangentgen(::Property::TangentsAutocomputeMethodEnum value);
  private:
  ::Property::TangentsAutocomputeMethodEnum _internal_tangentgen() const;
  void _internal_set_tangentgen(::Property::TangentsAutocomputeMethodEnum value);
  public:

  // @@protoc_insertion_point(class_scope:Property.ScalarPropertyKeyframed)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Property::ScalarPropertyKeyframed_ScalarKeyframe > keys_;
    ::Property::ScalarPropertyValue* tsrc_;
    int looping_;
    int tangentgen_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class ScalarPropertyApproach final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.ScalarPropertyApproach) */ {
 public:
  inline ScalarPropertyApproach() : ScalarPropertyApproach(nullptr) {}
  ~ScalarPropertyApproach() override;
  explicit PROTOBUF_CONSTEXPR ScalarPropertyApproach(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScalarPropertyApproach(const ScalarPropertyApproach& from);
  ScalarPropertyApproach(ScalarPropertyApproach&& from) noexcept
    : ScalarPropertyApproach() {
    *this = ::std::move(from);
  }

  inline ScalarPropertyApproach& operator=(const ScalarPropertyApproach& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarPropertyApproach& operator=(ScalarPropertyApproach&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScalarPropertyApproach& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScalarPropertyApproach* internal_default_instance() {
    return reinterpret_cast<const ScalarPropertyApproach*>(
               &_ScalarPropertyApproach_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ScalarPropertyApproach& a, ScalarPropertyApproach& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarPropertyApproach* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScalarPropertyApproach* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScalarPropertyApproach* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScalarPropertyApproach>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ScalarPropertyApproach& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ScalarPropertyApproach& from) {
    ScalarPropertyApproach::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarPropertyApproach* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.ScalarPropertyApproach";
  }
  protected:
  explicit ScalarPropertyApproach(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTFieldNumber = 1,
    kToFieldNumber = 2,
    kTimeToHalfFieldNumber = 3,
    kStartFieldNumber = 4,
  };
  // .Property.ScalarPropertyValue t = 1;
  bool has_t() const;
  private:
  bool _internal_has_t() const;
  public:
  void clear_t();
  const ::Property::ScalarPropertyValue& t() const;
  PROTOBUF_NODISCARD ::Property::ScalarPropertyValue* release_t();
  ::Property::ScalarPropertyValue* mutable_t();
  void set_allocated_t(::Property::ScalarPropertyValue* t);
  private:
  const ::Property::ScalarPropertyValue& _internal_t() const;
  ::Property::ScalarPropertyValue* _internal_mutable_t();
  public:
  void unsafe_arena_set_allocated_t(
      ::Property::ScalarPropertyValue* t);
  ::Property::ScalarPropertyValue* unsafe_arena_release_t();

  // .Property.ScalarPropertyValue to = 2;
  bool has_to() const;
  private:
  bool _internal_has_to() const;
  public:
  void clear_to();
  const ::Property::ScalarPropertyValue& to() const;
  PROTOBUF_NODISCARD ::Property::ScalarPropertyValue* release_to();
  ::Property::ScalarPropertyValue* mutable_to();
  void set_allocated_to(::Property::ScalarPropertyValue* to);
  private:
  const ::Property::ScalarPropertyValue& _internal_to() const;
  ::Property::ScalarPropertyValue* _internal_mutable_to();
  public:
  void unsafe_arena_set_allocated_to(
      ::Property::ScalarPropertyValue* to);
  ::Property::ScalarPropertyValue* unsafe_arena_release_to();

  // .Property.ScalarPropertyValue timeToHalf = 3;
  bool has_timetohalf() const;
  private:
  bool _internal_has_timetohalf() const;
  public:
  void clear_timetohalf();
  const ::Property::ScalarPropertyValue& timetohalf() const;
  PROTOBUF_NODISCARD ::Property::ScalarPropertyValue* release_timetohalf();
  ::Property::ScalarPropertyValue* mutable_timetohalf();
  void set_allocated_timetohalf(::Property::ScalarPropertyValue* timetohalf);
  private:
  const ::Property::ScalarPropertyValue& _internal_timetohalf() const;
  ::Property::ScalarPropertyValue* _internal_mutable_timetohalf();
  public:
  void unsafe_arena_set_allocated_timetohalf(
      ::Property::ScalarPropertyValue* timetohalf);
  ::Property::ScalarPropertyValue* unsafe_arena_release_timetohalf();

  // .Property.ScalarPropertyValue start = 4;
  bool has_start() const;
  private:
  bool _internal_has_start() const;
  public:
  void clear_start();
  const ::Property::ScalarPropertyValue& start() const;
  PROTOBUF_NODISCARD ::Property::ScalarPropertyValue* release_start();
  ::Property::ScalarPropertyValue* mutable_start();
  void set_allocated_start(::Property::ScalarPropertyValue* start);
  private:
  const ::Property::ScalarPropertyValue& _internal_start() const;
  ::Property::ScalarPropertyValue* _internal_mutable_start();
  public:
  void unsafe_arena_set_allocated_start(
      ::Property::ScalarPropertyValue* start);
  ::Property::ScalarPropertyValue* unsafe_arena_release_start();

  // @@protoc_insertion_point(class_scope:Property.ScalarPropertyApproach)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Property::ScalarPropertyValue* t_;
    ::Property::ScalarPropertyValue* to_;
    ::Property::ScalarPropertyValue* timetohalf_;
    ::Property::ScalarPropertyValue* start_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class ScalarPropertyDeclaration final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.ScalarPropertyDeclaration) */ {
 public:
  inline ScalarPropertyDeclaration() : ScalarPropertyDeclaration(nullptr) {}
  ~ScalarPropertyDeclaration() override;
  explicit PROTOBUF_CONSTEXPR ScalarPropertyDeclaration(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScalarPropertyDeclaration(const ScalarPropertyDeclaration& from);
  ScalarPropertyDeclaration(ScalarPropertyDeclaration&& from) noexcept
    : ScalarPropertyDeclaration() {
    *this = ::std::move(from);
  }

  inline ScalarPropertyDeclaration& operator=(const ScalarPropertyDeclaration& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarPropertyDeclaration& operator=(ScalarPropertyDeclaration&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScalarPropertyDeclaration& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScalarPropertyDeclaration* internal_default_instance() {
    return reinterpret_cast<const ScalarPropertyDeclaration*>(
               &_ScalarPropertyDeclaration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ScalarPropertyDeclaration& a, ScalarPropertyDeclaration& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarPropertyDeclaration* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScalarPropertyDeclaration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScalarPropertyDeclaration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScalarPropertyDeclaration>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ScalarPropertyDeclaration& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ScalarPropertyDeclaration& from) {
    ScalarPropertyDeclaration::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarPropertyDeclaration* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.ScalarPropertyDeclaration";
  }
  protected:
  explicit ScalarPropertyDeclaration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaFieldNumber = 1,
    kDefaultFieldNumber = 2,
  };
  // .Property.ScalarPropertyMetadata meta = 1;
  bool has_meta() const;
  private:
  bool _internal_has_meta() const;
  public:
  void clear_meta();
  const ::Property::ScalarPropertyMetadata& meta() const;
  PROTOBUF_NODISCARD ::Property::ScalarPropertyMetadata* release_meta();
  ::Property::ScalarPropertyMetadata* mutable_meta();
  void set_allocated_meta(::Property::ScalarPropertyMetadata* meta);
  private:
  const ::Property::ScalarPropertyMetadata& _internal_meta() const;
  ::Property::ScalarPropertyMetadata* _internal_mutable_meta();
  public:
  void unsafe_arena_set_allocated_meta(
      ::Property::ScalarPropertyMetadata* meta);
  ::Property::ScalarPropertyMetadata* unsafe_arena_release_meta();

  // float default = 2;
  void clear_default_();
  float default_() const;
  void set_default_(float value);
  private:
  float _internal_default_() const;
  void _internal_set_default_(float value);
  public:

  // @@protoc_insertion_point(class_scope:Property.ScalarPropertyDeclaration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Property::ScalarPropertyMetadata* meta_;
    float default__;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class ScalarEditingMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.ScalarEditingMetadata) */ {
 public:
  inline ScalarEditingMetadata() : ScalarEditingMetadata(nullptr) {}
  ~ScalarEditingMetadata() override;
  explicit PROTOBUF_CONSTEXPR ScalarEditingMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScalarEditingMetadata(const ScalarEditingMetadata& from);
  ScalarEditingMetadata(ScalarEditingMetadata&& from) noexcept
    : ScalarEditingMetadata() {
    *this = ::std::move(from);
  }

  inline ScalarEditingMetadata& operator=(const ScalarEditingMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarEditingMetadata& operator=(ScalarEditingMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScalarEditingMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScalarEditingMetadata* internal_default_instance() {
    return reinterpret_cast<const ScalarEditingMetadata*>(
               &_ScalarEditingMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ScalarEditingMetadata& a, ScalarEditingMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarEditingMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScalarEditingMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScalarEditingMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScalarEditingMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ScalarEditingMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ScalarEditingMetadata& from) {
    ScalarEditingMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarEditingMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.ScalarEditingMetadata";
  }
  protected:
  explicit ScalarEditingMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ScalarEditingMetadata_ScalarInterpretationEnum ScalarInterpretationEnum;
  static constexpr ScalarInterpretationEnum Standard =
    ScalarEditingMetadata_ScalarInterpretationEnum_Standard;
  static constexpr ScalarInterpretationEnum Time =
    ScalarEditingMetadata_ScalarInterpretationEnum_Time;
  static constexpr ScalarInterpretationEnum Playback =
    ScalarEditingMetadata_ScalarInterpretationEnum_Playback;
  static constexpr ScalarInterpretationEnum Scaler =
    ScalarEditingMetadata_ScalarInterpretationEnum_Scaler;
  static inline bool ScalarInterpretationEnum_IsValid(int value) {
    return ScalarEditingMetadata_ScalarInterpretationEnum_IsValid(value);
  }
  static constexpr ScalarInterpretationEnum ScalarInterpretationEnum_MIN =
    ScalarEditingMetadata_ScalarInterpretationEnum_ScalarInterpretationEnum_MIN;
  static constexpr ScalarInterpretationEnum ScalarInterpretationEnum_MAX =
    ScalarEditingMetadata_ScalarInterpretationEnum_ScalarInterpretationEnum_MAX;
  static constexpr int ScalarInterpretationEnum_ARRAYSIZE =
    ScalarEditingMetadata_ScalarInterpretationEnum_ScalarInterpretationEnum_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ScalarInterpretationEnum_descriptor() {
    return ScalarEditingMetadata_ScalarInterpretationEnum_descriptor();
  }
  template<typename T>
  static inline const std::string& ScalarInterpretationEnum_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ScalarInterpretationEnum>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ScalarInterpretationEnum_Name.");
    return ScalarEditingMetadata_ScalarInterpretationEnum_Name(enum_t_value);
  }
  static inline bool ScalarInterpretationEnum_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ScalarInterpretationEnum* value) {
    return ScalarEditingMetadata_ScalarInterpretationEnum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPlaybackLengthRefFieldNumber = 5,
    kScalarTypeFieldNumber = 1,
    kUiIncrementFieldNumber = 2,
    kUiMinimumFieldNumber = 3,
    kUiMaximumFieldNumber = 4,
  };
  // optional string playbackLengthRef = 5;
  bool has_playbacklengthref() const;
  private:
  bool _internal_has_playbacklengthref() const;
  public:
  void clear_playbacklengthref();
  const std::string& playbacklengthref() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_playbacklengthref(ArgT0&& arg0, ArgT... args);
  std::string* mutable_playbacklengthref();
  PROTOBUF_NODISCARD std::string* release_playbacklengthref();
  void set_allocated_playbacklengthref(std::string* playbacklengthref);
  private:
  const std::string& _internal_playbacklengthref() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_playbacklengthref(const std::string& value);
  std::string* _internal_mutable_playbacklengthref();
  public:

  // optional .Property.ScalarEditingMetadata.ScalarInterpretationEnum scalarType = 1;
  bool has_scalartype() const;
  private:
  bool _internal_has_scalartype() const;
  public:
  void clear_scalartype();
  ::Property::ScalarEditingMetadata_ScalarInterpretationEnum scalartype() const;
  void set_scalartype(::Property::ScalarEditingMetadata_ScalarInterpretationEnum value);
  private:
  ::Property::ScalarEditingMetadata_ScalarInterpretationEnum _internal_scalartype() const;
  void _internal_set_scalartype(::Property::ScalarEditingMetadata_ScalarInterpretationEnum value);
  public:

  // optional float uiIncrement = 2;
  bool has_uiincrement() const;
  private:
  bool _internal_has_uiincrement() const;
  public:
  void clear_uiincrement();
  float uiincrement() const;
  void set_uiincrement(float value);
  private:
  float _internal_uiincrement() const;
  void _internal_set_uiincrement(float value);
  public:

  // optional float uiMinimum = 3;
  bool has_uiminimum() const;
  private:
  bool _internal_has_uiminimum() const;
  public:
  void clear_uiminimum();
  float uiminimum() const;
  void set_uiminimum(float value);
  private:
  float _internal_uiminimum() const;
  void _internal_set_uiminimum(float value);
  public:

  // optional float uiMaximum = 4;
  bool has_uimaximum() const;
  private:
  bool _internal_has_uimaximum() const;
  public:
  void clear_uimaximum();
  float uimaximum() const;
  void set_uimaximum(float value);
  private:
  float _internal_uimaximum() const;
  void _internal_set_uimaximum(float value);
  public:

  // @@protoc_insertion_point(class_scope:Property.ScalarEditingMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playbacklengthref_;
    int scalartype_;
    float uiincrement_;
    float uiminimum_;
    float uimaximum_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class ScalarGeneratorMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.ScalarGeneratorMetadata) */ {
 public:
  inline ScalarGeneratorMetadata() : ScalarGeneratorMetadata(nullptr) {}
  ~ScalarGeneratorMetadata() override;
  explicit PROTOBUF_CONSTEXPR ScalarGeneratorMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScalarGeneratorMetadata(const ScalarGeneratorMetadata& from);
  ScalarGeneratorMetadata(ScalarGeneratorMetadata&& from) noexcept
    : ScalarGeneratorMetadata() {
    *this = ::std::move(from);
  }

  inline ScalarGeneratorMetadata& operator=(const ScalarGeneratorMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarGeneratorMetadata& operator=(ScalarGeneratorMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScalarGeneratorMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScalarGeneratorMetadata* internal_default_instance() {
    return reinterpret_cast<const ScalarGeneratorMetadata*>(
               &_ScalarGeneratorMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ScalarGeneratorMetadata& a, ScalarGeneratorMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarGeneratorMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScalarGeneratorMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScalarGeneratorMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScalarGeneratorMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ScalarGeneratorMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ScalarGeneratorMetadata& from) {
    ScalarGeneratorMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarGeneratorMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.ScalarGeneratorMetadata";
  }
  protected:
  explicit ScalarGeneratorMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
    kEditFieldNumber = 2,
  };
  // .Property.GeneratorMetadata base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::Property::GeneratorMetadata& base() const;
  PROTOBUF_NODISCARD ::Property::GeneratorMetadata* release_base();
  ::Property::GeneratorMetadata* mutable_base();
  void set_allocated_base(::Property::GeneratorMetadata* base);
  private:
  const ::Property::GeneratorMetadata& _internal_base() const;
  ::Property::GeneratorMetadata* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::Property::GeneratorMetadata* base);
  ::Property::GeneratorMetadata* unsafe_arena_release_base();

  // .Property.ScalarEditingMetadata edit = 2;
  bool has_edit() const;
  private:
  bool _internal_has_edit() const;
  public:
  void clear_edit();
  const ::Property::ScalarEditingMetadata& edit() const;
  PROTOBUF_NODISCARD ::Property::ScalarEditingMetadata* release_edit();
  ::Property::ScalarEditingMetadata* mutable_edit();
  void set_allocated_edit(::Property::ScalarEditingMetadata* edit);
  private:
  const ::Property::ScalarEditingMetadata& _internal_edit() const;
  ::Property::ScalarEditingMetadata* _internal_mutable_edit();
  public:
  void unsafe_arena_set_allocated_edit(
      ::Property::ScalarEditingMetadata* edit);
  ::Property::ScalarEditingMetadata* unsafe_arena_release_edit();

  // @@protoc_insertion_point(class_scope:Property.ScalarGeneratorMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Property::GeneratorMetadata* base_;
    ::Property::ScalarEditingMetadata* edit_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class ScalarPropertyMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.ScalarPropertyMetadata) */ {
 public:
  inline ScalarPropertyMetadata() : ScalarPropertyMetadata(nullptr) {}
  ~ScalarPropertyMetadata() override;
  explicit PROTOBUF_CONSTEXPR ScalarPropertyMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScalarPropertyMetadata(const ScalarPropertyMetadata& from);
  ScalarPropertyMetadata(ScalarPropertyMetadata&& from) noexcept
    : ScalarPropertyMetadata() {
    *this = ::std::move(from);
  }

  inline ScalarPropertyMetadata& operator=(const ScalarPropertyMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarPropertyMetadata& operator=(ScalarPropertyMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScalarPropertyMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScalarPropertyMetadata* internal_default_instance() {
    return reinterpret_cast<const ScalarPropertyMetadata*>(
               &_ScalarPropertyMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ScalarPropertyMetadata& a, ScalarPropertyMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarPropertyMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScalarPropertyMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScalarPropertyMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScalarPropertyMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ScalarPropertyMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ScalarPropertyMetadata& from) {
    ScalarPropertyMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarPropertyMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.ScalarPropertyMetadata";
  }
  protected:
  explicit ScalarPropertyMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
    kEditFieldNumber = 5,
  };
  // .Property.PropertyMetadata base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::Property::PropertyMetadata& base() const;
  PROTOBUF_NODISCARD ::Property::PropertyMetadata* release_base();
  ::Property::PropertyMetadata* mutable_base();
  void set_allocated_base(::Property::PropertyMetadata* base);
  private:
  const ::Property::PropertyMetadata& _internal_base() const;
  ::Property::PropertyMetadata* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::Property::PropertyMetadata* base);
  ::Property::PropertyMetadata* unsafe_arena_release_base();

  // .Property.ScalarEditingMetadata edit = 5;
  bool has_edit() const;
  private:
  bool _internal_has_edit() const;
  public:
  void clear_edit();
  const ::Property::ScalarEditingMetadata& edit() const;
  PROTOBUF_NODISCARD ::Property::ScalarEditingMetadata* release_edit();
  ::Property::ScalarEditingMetadata* mutable_edit();
  void set_allocated_edit(::Property::ScalarEditingMetadata* edit);
  private:
  const ::Property::ScalarEditingMetadata& _internal_edit() const;
  ::Property::ScalarEditingMetadata* _internal_mutable_edit();
  public:
  void unsafe_arena_set_allocated_edit(
      ::Property::ScalarEditingMetadata* edit);
  ::Property::ScalarEditingMetadata* unsafe_arena_release_edit();

  // @@protoc_insertion_point(class_scope:Property.ScalarPropertyMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Property::PropertyMetadata* base_;
    ::Property::ScalarEditingMetadata* edit_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class StringPropertyAssignment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.StringPropertyAssignment) */ {
 public:
  inline StringPropertyAssignment() : StringPropertyAssignment(nullptr) {}
  ~StringPropertyAssignment() override;
  explicit PROTOBUF_CONSTEXPR StringPropertyAssignment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StringPropertyAssignment(const StringPropertyAssignment& from);
  StringPropertyAssignment(StringPropertyAssignment&& from) noexcept
    : StringPropertyAssignment() {
    *this = ::std::move(from);
  }

  inline StringPropertyAssignment& operator=(const StringPropertyAssignment& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringPropertyAssignment& operator=(StringPropertyAssignment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StringPropertyAssignment& default_instance() {
    return *internal_default_instance();
  }
  static inline const StringPropertyAssignment* internal_default_instance() {
    return reinterpret_cast<const StringPropertyAssignment*>(
               &_StringPropertyAssignment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(StringPropertyAssignment& a, StringPropertyAssignment& b) {
    a.Swap(&b);
  }
  inline void Swap(StringPropertyAssignment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StringPropertyAssignment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StringPropertyAssignment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StringPropertyAssignment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StringPropertyAssignment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StringPropertyAssignment& from) {
    StringPropertyAssignment::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringPropertyAssignment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.StringPropertyAssignment";
  }
  protected:
  explicit StringPropertyAssignment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssignmentIdFieldNumber = 4,
    kValueFieldNumber = 3,
    kPriorityFieldNumber = 2,
  };
  // string assignmentId = 4;
  void clear_assignmentid();
  const std::string& assignmentid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_assignmentid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_assignmentid();
  PROTOBUF_NODISCARD std::string* release_assignmentid();
  void set_allocated_assignmentid(std::string* assignmentid);
  private:
  const std::string& _internal_assignmentid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_assignmentid(const std::string& value);
  std::string* _internal_mutable_assignmentid();
  public:

  // .Property.StringPropertyValue value = 3;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::Property::StringPropertyValue& value() const;
  PROTOBUF_NODISCARD ::Property::StringPropertyValue* release_value();
  ::Property::StringPropertyValue* mutable_value();
  void set_allocated_value(::Property::StringPropertyValue* value);
  private:
  const ::Property::StringPropertyValue& _internal_value() const;
  ::Property::StringPropertyValue* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::Property::StringPropertyValue* value);
  ::Property::StringPropertyValue* unsafe_arena_release_value();

  // optional int32 priority = 2;
  bool has_priority() const;
  private:
  bool _internal_has_priority() const;
  public:
  void clear_priority();
  int32_t priority() const;
  void set_priority(int32_t value);
  private:
  int32_t _internal_priority() const;
  void _internal_set_priority(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Property.StringPropertyAssignment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr assignmentid_;
    ::Property::StringPropertyValue* value_;
    int32_t priority_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class StringPropertyValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.StringPropertyValue) */ {
 public:
  inline StringPropertyValue() : StringPropertyValue(nullptr) {}
  ~StringPropertyValue() override;
  explicit PROTOBUF_CONSTEXPR StringPropertyValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StringPropertyValue(const StringPropertyValue& from);
  StringPropertyValue(StringPropertyValue&& from) noexcept
    : StringPropertyValue() {
    *this = ::std::move(from);
  }

  inline StringPropertyValue& operator=(const StringPropertyValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringPropertyValue& operator=(StringPropertyValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StringPropertyValue& default_instance() {
    return *internal_default_instance();
  }
  enum ValueTypeCase {
    kConstant = 1,
    kFormatted = 2,
    kRef = 3,
    kExpr = 4,
    kUseDefault = 5,
    kCustom = 10,
    VALUETYPE_NOT_SET = 0,
  };

  static inline const StringPropertyValue* internal_default_instance() {
    return reinterpret_cast<const StringPropertyValue*>(
               &_StringPropertyValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(StringPropertyValue& a, StringPropertyValue& b) {
    a.Swap(&b);
  }
  inline void Swap(StringPropertyValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StringPropertyValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StringPropertyValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StringPropertyValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StringPropertyValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StringPropertyValue& from) {
    StringPropertyValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringPropertyValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.StringPropertyValue";
  }
  protected:
  explicit StringPropertyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConstantFieldNumber = 1,
    kFormattedFieldNumber = 2,
    kRefFieldNumber = 3,
    kExprFieldNumber = 4,
    kUseDefaultFieldNumber = 5,
    kCustomFieldNumber = 10,
  };
  // string constant = 1;
  bool has_constant() const;
  private:
  bool _internal_has_constant() const;
  public:
  void clear_constant();
  const std::string& constant() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_constant(ArgT0&& arg0, ArgT... args);
  std::string* mutable_constant();
  PROTOBUF_NODISCARD std::string* release_constant();
  void set_allocated_constant(std::string* constant);
  private:
  const std::string& _internal_constant() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_constant(const std::string& value);
  std::string* _internal_mutable_constant();
  public:

  // .Property.StringPropertyFormatted formatted = 2;
  bool has_formatted() const;
  private:
  bool _internal_has_formatted() const;
  public:
  void clear_formatted();
  const ::Property::StringPropertyFormatted& formatted() const;
  PROTOBUF_NODISCARD ::Property::StringPropertyFormatted* release_formatted();
  ::Property::StringPropertyFormatted* mutable_formatted();
  void set_allocated_formatted(::Property::StringPropertyFormatted* formatted);
  private:
  const ::Property::StringPropertyFormatted& _internal_formatted() const;
  ::Property::StringPropertyFormatted* _internal_mutable_formatted();
  public:
  void unsafe_arena_set_allocated_formatted(
      ::Property::StringPropertyFormatted* formatted);
  ::Property::StringPropertyFormatted* unsafe_arena_release_formatted();

  // .Property.PropertyIdentifier ref = 3;
  bool has_ref() const;
  private:
  bool _internal_has_ref() const;
  public:
  void clear_ref();
  const ::Property::PropertyIdentifier& ref() const;
  PROTOBUF_NODISCARD ::Property::PropertyIdentifier* release_ref();
  ::Property::PropertyIdentifier* mutable_ref();
  void set_allocated_ref(::Property::PropertyIdentifier* ref);
  private:
  const ::Property::PropertyIdentifier& _internal_ref() const;
  ::Property::PropertyIdentifier* _internal_mutable_ref();
  public:
  void unsafe_arena_set_allocated_ref(
      ::Property::PropertyIdentifier* ref);
  ::Property::PropertyIdentifier* unsafe_arena_release_ref();

  // string expr = 4;
  bool has_expr() const;
  private:
  bool _internal_has_expr() const;
  public:
  void clear_expr();
  const std::string& expr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_expr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_expr();
  PROTOBUF_NODISCARD std::string* release_expr();
  void set_allocated_expr(std::string* expr);
  private:
  const std::string& _internal_expr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_expr(const std::string& value);
  std::string* _internal_mutable_expr();
  public:

  // bool useDefault = 5;
  bool has_usedefault() const;
  private:
  bool _internal_has_usedefault() const;
  public:
  void clear_usedefault();
  bool usedefault() const;
  void set_usedefault(bool value);
  private:
  bool _internal_usedefault() const;
  void _internal_set_usedefault(bool value);
  public:

  // .Property.CustomGeneratorValue custom = 10;
  bool has_custom() const;
  private:
  bool _internal_has_custom() const;
  public:
  void clear_custom();
  const ::Property::CustomGeneratorValue& custom() const;
  PROTOBUF_NODISCARD ::Property::CustomGeneratorValue* release_custom();
  ::Property::CustomGeneratorValue* mutable_custom();
  void set_allocated_custom(::Property::CustomGeneratorValue* custom);
  private:
  const ::Property::CustomGeneratorValue& _internal_custom() const;
  ::Property::CustomGeneratorValue* _internal_mutable_custom();
  public:
  void unsafe_arena_set_allocated_custom(
      ::Property::CustomGeneratorValue* custom);
  ::Property::CustomGeneratorValue* unsafe_arena_release_custom();

  void clear_ValueType();
  ValueTypeCase ValueType_case() const;
  // @@protoc_insertion_point(class_scope:Property.StringPropertyValue)
 private:
  class _Internal;
  void set_has_constant();
  void set_has_formatted();
  void set_has_ref();
  void set_has_expr();
  void set_has_usedefault();
  void set_has_custom();

  inline bool has_ValueType() const;
  inline void clear_has_ValueType();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union ValueTypeUnion {
      constexpr ValueTypeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr constant_;
      ::Property::StringPropertyFormatted* formatted_;
      ::Property::PropertyIdentifier* ref_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr expr_;
      bool usedefault_;
      ::Property::CustomGeneratorValue* custom_;
    } ValueType_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class StringPropertyFormatted final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.StringPropertyFormatted) */ {
 public:
  inline StringPropertyFormatted() : StringPropertyFormatted(nullptr) {}
  ~StringPropertyFormatted() override;
  explicit PROTOBUF_CONSTEXPR StringPropertyFormatted(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StringPropertyFormatted(const StringPropertyFormatted& from);
  StringPropertyFormatted(StringPropertyFormatted&& from) noexcept
    : StringPropertyFormatted() {
    *this = ::std::move(from);
  }

  inline StringPropertyFormatted& operator=(const StringPropertyFormatted& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringPropertyFormatted& operator=(StringPropertyFormatted&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StringPropertyFormatted& default_instance() {
    return *internal_default_instance();
  }
  static inline const StringPropertyFormatted* internal_default_instance() {
    return reinterpret_cast<const StringPropertyFormatted*>(
               &_StringPropertyFormatted_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(StringPropertyFormatted& a, StringPropertyFormatted& b) {
    a.Swap(&b);
  }
  inline void Swap(StringPropertyFormatted* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StringPropertyFormatted* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StringPropertyFormatted* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StringPropertyFormatted>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StringPropertyFormatted& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StringPropertyFormatted& from) {
    StringPropertyFormatted::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringPropertyFormatted* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.StringPropertyFormatted";
  }
  protected:
  explicit StringPropertyFormatted(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgumentsFieldNumber = 2,
    kFormatStringFieldNumber = 1,
  };
  // repeated .Property.AnyPropertyValue Arguments = 2;
  int arguments_size() const;
  private:
  int _internal_arguments_size() const;
  public:
  void clear_arguments();
  ::Property::AnyPropertyValue* mutable_arguments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Property::AnyPropertyValue >*
      mutable_arguments();
  private:
  const ::Property::AnyPropertyValue& _internal_arguments(int index) const;
  ::Property::AnyPropertyValue* _internal_add_arguments();
  public:
  const ::Property::AnyPropertyValue& arguments(int index) const;
  ::Property::AnyPropertyValue* add_arguments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Property::AnyPropertyValue >&
      arguments() const;

  // string FormatString = 1;
  void clear_formatstring();
  const std::string& formatstring() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_formatstring(ArgT0&& arg0, ArgT... args);
  std::string* mutable_formatstring();
  PROTOBUF_NODISCARD std::string* release_formatstring();
  void set_allocated_formatstring(std::string* formatstring);
  private:
  const std::string& _internal_formatstring() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_formatstring(const std::string& value);
  std::string* _internal_mutable_formatstring();
  public:

  // @@protoc_insertion_point(class_scope:Property.StringPropertyFormatted)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Property::AnyPropertyValue > arguments_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr formatstring_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class StringPropertyDeclaration final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.StringPropertyDeclaration) */ {
 public:
  inline StringPropertyDeclaration() : StringPropertyDeclaration(nullptr) {}
  ~StringPropertyDeclaration() override;
  explicit PROTOBUF_CONSTEXPR StringPropertyDeclaration(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StringPropertyDeclaration(const StringPropertyDeclaration& from);
  StringPropertyDeclaration(StringPropertyDeclaration&& from) noexcept
    : StringPropertyDeclaration() {
    *this = ::std::move(from);
  }

  inline StringPropertyDeclaration& operator=(const StringPropertyDeclaration& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringPropertyDeclaration& operator=(StringPropertyDeclaration&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StringPropertyDeclaration& default_instance() {
    return *internal_default_instance();
  }
  static inline const StringPropertyDeclaration* internal_default_instance() {
    return reinterpret_cast<const StringPropertyDeclaration*>(
               &_StringPropertyDeclaration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(StringPropertyDeclaration& a, StringPropertyDeclaration& b) {
    a.Swap(&b);
  }
  inline void Swap(StringPropertyDeclaration* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StringPropertyDeclaration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StringPropertyDeclaration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StringPropertyDeclaration>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StringPropertyDeclaration& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StringPropertyDeclaration& from) {
    StringPropertyDeclaration::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringPropertyDeclaration* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.StringPropertyDeclaration";
  }
  protected:
  explicit StringPropertyDeclaration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDefaultFieldNumber = 2,
    kMetaFieldNumber = 1,
  };
  // string default = 2;
  void clear_default_();
  const std::string& default_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_default_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_default_();
  PROTOBUF_NODISCARD std::string* release_default_();
  void set_allocated_default_(std::string* default_);
  private:
  const std::string& _internal_default_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_default_(const std::string& value);
  std::string* _internal_mutable_default_();
  public:

  // .Property.StringPropertyMetadata meta = 1;
  bool has_meta() const;
  private:
  bool _internal_has_meta() const;
  public:
  void clear_meta();
  const ::Property::StringPropertyMetadata& meta() const;
  PROTOBUF_NODISCARD ::Property::StringPropertyMetadata* release_meta();
  ::Property::StringPropertyMetadata* mutable_meta();
  void set_allocated_meta(::Property::StringPropertyMetadata* meta);
  private:
  const ::Property::StringPropertyMetadata& _internal_meta() const;
  ::Property::StringPropertyMetadata* _internal_mutable_meta();
  public:
  void unsafe_arena_set_allocated_meta(
      ::Property::StringPropertyMetadata* meta);
  ::Property::StringPropertyMetadata* unsafe_arena_release_meta();

  // @@protoc_insertion_point(class_scope:Property.StringPropertyDeclaration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr default__;
    ::Property::StringPropertyMetadata* meta_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class StringValueEnumerationOption final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.StringValueEnumerationOption) */ {
 public:
  inline StringValueEnumerationOption() : StringValueEnumerationOption(nullptr) {}
  ~StringValueEnumerationOption() override;
  explicit PROTOBUF_CONSTEXPR StringValueEnumerationOption(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StringValueEnumerationOption(const StringValueEnumerationOption& from);
  StringValueEnumerationOption(StringValueEnumerationOption&& from) noexcept
    : StringValueEnumerationOption() {
    *this = ::std::move(from);
  }

  inline StringValueEnumerationOption& operator=(const StringValueEnumerationOption& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringValueEnumerationOption& operator=(StringValueEnumerationOption&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StringValueEnumerationOption& default_instance() {
    return *internal_default_instance();
  }
  static inline const StringValueEnumerationOption* internal_default_instance() {
    return reinterpret_cast<const StringValueEnumerationOption*>(
               &_StringValueEnumerationOption_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(StringValueEnumerationOption& a, StringValueEnumerationOption& b) {
    a.Swap(&b);
  }
  inline void Swap(StringValueEnumerationOption* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StringValueEnumerationOption* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StringValueEnumerationOption* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StringValueEnumerationOption>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StringValueEnumerationOption& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StringValueEnumerationOption& from) {
    StringValueEnumerationOption::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringValueEnumerationOption* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.StringValueEnumerationOption";
  }
  protected:
  explicit StringValueEnumerationOption(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnumValueFieldNumber = 1,
    kDisplayTextFieldNumber = 2,
  };
  // string enumValue = 1;
  void clear_enumvalue();
  const std::string& enumvalue() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_enumvalue(ArgT0&& arg0, ArgT... args);
  std::string* mutable_enumvalue();
  PROTOBUF_NODISCARD std::string* release_enumvalue();
  void set_allocated_enumvalue(std::string* enumvalue);
  private:
  const std::string& _internal_enumvalue() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_enumvalue(const std::string& value);
  std::string* _internal_mutable_enumvalue();
  public:

  // string displayText = 2;
  void clear_displaytext();
  const std::string& displaytext() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_displaytext(ArgT0&& arg0, ArgT... args);
  std::string* mutable_displaytext();
  PROTOBUF_NODISCARD std::string* release_displaytext();
  void set_allocated_displaytext(std::string* displaytext);
  private:
  const std::string& _internal_displaytext() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_displaytext(const std::string& value);
  std::string* _internal_mutable_displaytext();
  public:

  // @@protoc_insertion_point(class_scope:Property.StringValueEnumerationOption)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr enumvalue_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr displaytext_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class StringEditingMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.StringEditingMetadata) */ {
 public:
  inline StringEditingMetadata() : StringEditingMetadata(nullptr) {}
  ~StringEditingMetadata() override;
  explicit PROTOBUF_CONSTEXPR StringEditingMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StringEditingMetadata(const StringEditingMetadata& from);
  StringEditingMetadata(StringEditingMetadata&& from) noexcept
    : StringEditingMetadata() {
    *this = ::std::move(from);
  }

  inline StringEditingMetadata& operator=(const StringEditingMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringEditingMetadata& operator=(StringEditingMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StringEditingMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const StringEditingMetadata* internal_default_instance() {
    return reinterpret_cast<const StringEditingMetadata*>(
               &_StringEditingMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(StringEditingMetadata& a, StringEditingMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(StringEditingMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StringEditingMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StringEditingMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StringEditingMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StringEditingMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StringEditingMetadata& from) {
    StringEditingMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringEditingMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.StringEditingMetadata";
  }
  protected:
  explicit StringEditingMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnumerationOptionsFieldNumber = 2,
    kIsScriptFieldNumber = 4,
    kIsMultiLineFieldNumber = 5,
  };
  // repeated .Property.StringValueEnumerationOption enumerationOptions = 2;
  int enumerationoptions_size() const;
  private:
  int _internal_enumerationoptions_size() const;
  public:
  void clear_enumerationoptions();
  ::Property::StringValueEnumerationOption* mutable_enumerationoptions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Property::StringValueEnumerationOption >*
      mutable_enumerationoptions();
  private:
  const ::Property::StringValueEnumerationOption& _internal_enumerationoptions(int index) const;
  ::Property::StringValueEnumerationOption* _internal_add_enumerationoptions();
  public:
  const ::Property::StringValueEnumerationOption& enumerationoptions(int index) const;
  ::Property::StringValueEnumerationOption* add_enumerationoptions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Property::StringValueEnumerationOption >&
      enumerationoptions() const;

  // optional bool isScript = 4;
  bool has_isscript() const;
  private:
  bool _internal_has_isscript() const;
  public:
  void clear_isscript();
  bool isscript() const;
  void set_isscript(bool value);
  private:
  bool _internal_isscript() const;
  void _internal_set_isscript(bool value);
  public:

  // optional bool isMultiLine = 5;
  bool has_ismultiline() const;
  private:
  bool _internal_has_ismultiline() const;
  public:
  void clear_ismultiline();
  bool ismultiline() const;
  void set_ismultiline(bool value);
  private:
  bool _internal_ismultiline() const;
  void _internal_set_ismultiline(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Property.StringEditingMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Property::StringValueEnumerationOption > enumerationoptions_;
    bool isscript_;
    bool ismultiline_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class StringGeneratorMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.StringGeneratorMetadata) */ {
 public:
  inline StringGeneratorMetadata() : StringGeneratorMetadata(nullptr) {}
  ~StringGeneratorMetadata() override;
  explicit PROTOBUF_CONSTEXPR StringGeneratorMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StringGeneratorMetadata(const StringGeneratorMetadata& from);
  StringGeneratorMetadata(StringGeneratorMetadata&& from) noexcept
    : StringGeneratorMetadata() {
    *this = ::std::move(from);
  }

  inline StringGeneratorMetadata& operator=(const StringGeneratorMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringGeneratorMetadata& operator=(StringGeneratorMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StringGeneratorMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const StringGeneratorMetadata* internal_default_instance() {
    return reinterpret_cast<const StringGeneratorMetadata*>(
               &_StringGeneratorMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(StringGeneratorMetadata& a, StringGeneratorMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(StringGeneratorMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StringGeneratorMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StringGeneratorMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StringGeneratorMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StringGeneratorMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StringGeneratorMetadata& from) {
    StringGeneratorMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringGeneratorMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.StringGeneratorMetadata";
  }
  protected:
  explicit StringGeneratorMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
    kEditFieldNumber = 2,
  };
  // .Property.GeneratorMetadata base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::Property::GeneratorMetadata& base() const;
  PROTOBUF_NODISCARD ::Property::GeneratorMetadata* release_base();
  ::Property::GeneratorMetadata* mutable_base();
  void set_allocated_base(::Property::GeneratorMetadata* base);
  private:
  const ::Property::GeneratorMetadata& _internal_base() const;
  ::Property::GeneratorMetadata* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::Property::GeneratorMetadata* base);
  ::Property::GeneratorMetadata* unsafe_arena_release_base();

  // optional .Property.StringEditingMetadata edit = 2;
  bool has_edit() const;
  private:
  bool _internal_has_edit() const;
  public:
  void clear_edit();
  const ::Property::StringEditingMetadata& edit() const;
  PROTOBUF_NODISCARD ::Property::StringEditingMetadata* release_edit();
  ::Property::StringEditingMetadata* mutable_edit();
  void set_allocated_edit(::Property::StringEditingMetadata* edit);
  private:
  const ::Property::StringEditingMetadata& _internal_edit() const;
  ::Property::StringEditingMetadata* _internal_mutable_edit();
  public:
  void unsafe_arena_set_allocated_edit(
      ::Property::StringEditingMetadata* edit);
  ::Property::StringEditingMetadata* unsafe_arena_release_edit();

  // @@protoc_insertion_point(class_scope:Property.StringGeneratorMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::Property::GeneratorMetadata* base_;
    ::Property::StringEditingMetadata* edit_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class StringPropertyMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.StringPropertyMetadata) */ {
 public:
  inline StringPropertyMetadata() : StringPropertyMetadata(nullptr) {}
  ~StringPropertyMetadata() override;
  explicit PROTOBUF_CONSTEXPR StringPropertyMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StringPropertyMetadata(const StringPropertyMetadata& from);
  StringPropertyMetadata(StringPropertyMetadata&& from) noexcept
    : StringPropertyMetadata() {
    *this = ::std::move(from);
  }

  inline StringPropertyMetadata& operator=(const StringPropertyMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringPropertyMetadata& operator=(StringPropertyMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StringPropertyMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const StringPropertyMetadata* internal_default_instance() {
    return reinterpret_cast<const StringPropertyMetadata*>(
               &_StringPropertyMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(StringPropertyMetadata& a, StringPropertyMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(StringPropertyMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StringPropertyMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StringPropertyMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StringPropertyMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StringPropertyMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StringPropertyMetadata& from) {
    StringPropertyMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringPropertyMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.StringPropertyMetadata";
  }
  protected:
  explicit StringPropertyMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
    kEditFieldNumber = 3,
  };
  // .Property.PropertyMetadata base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::Property::PropertyMetadata& base() const;
  PROTOBUF_NODISCARD ::Property::PropertyMetadata* release_base();
  ::Property::PropertyMetadata* mutable_base();
  void set_allocated_base(::Property::PropertyMetadata* base);
  private:
  const ::Property::PropertyMetadata& _internal_base() const;
  ::Property::PropertyMetadata* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::Property::PropertyMetadata* base);
  ::Property::PropertyMetadata* unsafe_arena_release_base();

  // optional .Property.StringEditingMetadata edit = 3;
  bool has_edit() const;
  private:
  bool _internal_has_edit() const;
  public:
  void clear_edit();
  const ::Property::StringEditingMetadata& edit() const;
  PROTOBUF_NODISCARD ::Property::StringEditingMetadata* release_edit();
  ::Property::StringEditingMetadata* mutable_edit();
  void set_allocated_edit(::Property::StringEditingMetadata* edit);
  private:
  const ::Property::StringEditingMetadata& _internal_edit() const;
  ::Property::StringEditingMetadata* _internal_mutable_edit();
  public:
  void unsafe_arena_set_allocated_edit(
      ::Property::StringEditingMetadata* edit);
  ::Property::StringEditingMetadata* unsafe_arena_release_edit();

  // @@protoc_insertion_point(class_scope:Property.StringPropertyMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::Property::PropertyMetadata* base_;
    ::Property::StringEditingMetadata* edit_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class LinkPropertyAssignment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.LinkPropertyAssignment) */ {
 public:
  inline LinkPropertyAssignment() : LinkPropertyAssignment(nullptr) {}
  ~LinkPropertyAssignment() override;
  explicit PROTOBUF_CONSTEXPR LinkPropertyAssignment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LinkPropertyAssignment(const LinkPropertyAssignment& from);
  LinkPropertyAssignment(LinkPropertyAssignment&& from) noexcept
    : LinkPropertyAssignment() {
    *this = ::std::move(from);
  }

  inline LinkPropertyAssignment& operator=(const LinkPropertyAssignment& from) {
    CopyFrom(from);
    return *this;
  }
  inline LinkPropertyAssignment& operator=(LinkPropertyAssignment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LinkPropertyAssignment& default_instance() {
    return *internal_default_instance();
  }
  static inline const LinkPropertyAssignment* internal_default_instance() {
    return reinterpret_cast<const LinkPropertyAssignment*>(
               &_LinkPropertyAssignment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(LinkPropertyAssignment& a, LinkPropertyAssignment& b) {
    a.Swap(&b);
  }
  inline void Swap(LinkPropertyAssignment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LinkPropertyAssignment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LinkPropertyAssignment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LinkPropertyAssignment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LinkPropertyAssignment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LinkPropertyAssignment& from) {
    LinkPropertyAssignment::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LinkPropertyAssignment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.LinkPropertyAssignment";
  }
  protected:
  explicit LinkPropertyAssignment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssignmentIdFieldNumber = 4,
    kValueFieldNumber = 3,
    kPriorityFieldNumber = 2,
  };
  // string assignmentId = 4;
  void clear_assignmentid();
  const std::string& assignmentid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_assignmentid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_assignmentid();
  PROTOBUF_NODISCARD std::string* release_assignmentid();
  void set_allocated_assignmentid(std::string* assignmentid);
  private:
  const std::string& _internal_assignmentid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_assignmentid(const std::string& value);
  std::string* _internal_mutable_assignmentid();
  public:

  // .Property.LinkPropertyValue value = 3;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::Property::LinkPropertyValue& value() const;
  PROTOBUF_NODISCARD ::Property::LinkPropertyValue* release_value();
  ::Property::LinkPropertyValue* mutable_value();
  void set_allocated_value(::Property::LinkPropertyValue* value);
  private:
  const ::Property::LinkPropertyValue& _internal_value() const;
  ::Property::LinkPropertyValue* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::Property::LinkPropertyValue* value);
  ::Property::LinkPropertyValue* unsafe_arena_release_value();

  // optional int32 priority = 2;
  bool has_priority() const;
  private:
  bool _internal_has_priority() const;
  public:
  void clear_priority();
  int32_t priority() const;
  void set_priority(int32_t value);
  private:
  int32_t _internal_priority() const;
  void _internal_set_priority(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Property.LinkPropertyAssignment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr assignmentid_;
    ::Property::LinkPropertyValue* value_;
    int32_t priority_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class LinkPropertyValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.LinkPropertyValue) */ {
 public:
  inline LinkPropertyValue() : LinkPropertyValue(nullptr) {}
  ~LinkPropertyValue() override;
  explicit PROTOBUF_CONSTEXPR LinkPropertyValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LinkPropertyValue(const LinkPropertyValue& from);
  LinkPropertyValue(LinkPropertyValue&& from) noexcept
    : LinkPropertyValue() {
    *this = ::std::move(from);
  }

  inline LinkPropertyValue& operator=(const LinkPropertyValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline LinkPropertyValue& operator=(LinkPropertyValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LinkPropertyValue& default_instance() {
    return *internal_default_instance();
  }
  enum ValueTypeCase {
    kConstant = 1,
    kRef = 3,
    kExpr = 4,
    kUseDefault = 5,
    kCustom = 10,
    VALUETYPE_NOT_SET = 0,
  };

  static inline const LinkPropertyValue* internal_default_instance() {
    return reinterpret_cast<const LinkPropertyValue*>(
               &_LinkPropertyValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(LinkPropertyValue& a, LinkPropertyValue& b) {
    a.Swap(&b);
  }
  inline void Swap(LinkPropertyValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LinkPropertyValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LinkPropertyValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LinkPropertyValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LinkPropertyValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LinkPropertyValue& from) {
    LinkPropertyValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LinkPropertyValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.LinkPropertyValue";
  }
  protected:
  explicit LinkPropertyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConstantFieldNumber = 1,
    kRefFieldNumber = 3,
    kExprFieldNumber = 4,
    kUseDefaultFieldNumber = 5,
    kCustomFieldNumber = 10,
  };
  // .Property.PropertyIdentifier constant = 1;
  bool has_constant() const;
  private:
  bool _internal_has_constant() const;
  public:
  void clear_constant();
  const ::Property::PropertyIdentifier& constant() const;
  PROTOBUF_NODISCARD ::Property::PropertyIdentifier* release_constant();
  ::Property::PropertyIdentifier* mutable_constant();
  void set_allocated_constant(::Property::PropertyIdentifier* constant);
  private:
  const ::Property::PropertyIdentifier& _internal_constant() const;
  ::Property::PropertyIdentifier* _internal_mutable_constant();
  public:
  void unsafe_arena_set_allocated_constant(
      ::Property::PropertyIdentifier* constant);
  ::Property::PropertyIdentifier* unsafe_arena_release_constant();

  // .Property.PropertyIdentifier ref = 3;
  bool has_ref() const;
  private:
  bool _internal_has_ref() const;
  public:
  void clear_ref();
  const ::Property::PropertyIdentifier& ref() const;
  PROTOBUF_NODISCARD ::Property::PropertyIdentifier* release_ref();
  ::Property::PropertyIdentifier* mutable_ref();
  void set_allocated_ref(::Property::PropertyIdentifier* ref);
  private:
  const ::Property::PropertyIdentifier& _internal_ref() const;
  ::Property::PropertyIdentifier* _internal_mutable_ref();
  public:
  void unsafe_arena_set_allocated_ref(
      ::Property::PropertyIdentifier* ref);
  ::Property::PropertyIdentifier* unsafe_arena_release_ref();

  // string expr = 4;
  bool has_expr() const;
  private:
  bool _internal_has_expr() const;
  public:
  void clear_expr();
  const std::string& expr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_expr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_expr();
  PROTOBUF_NODISCARD std::string* release_expr();
  void set_allocated_expr(std::string* expr);
  private:
  const std::string& _internal_expr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_expr(const std::string& value);
  std::string* _internal_mutable_expr();
  public:

  // bool useDefault = 5;
  bool has_usedefault() const;
  private:
  bool _internal_has_usedefault() const;
  public:
  void clear_usedefault();
  bool usedefault() const;
  void set_usedefault(bool value);
  private:
  bool _internal_usedefault() const;
  void _internal_set_usedefault(bool value);
  public:

  // .Property.CustomGeneratorValue custom = 10;
  bool has_custom() const;
  private:
  bool _internal_has_custom() const;
  public:
  void clear_custom();
  const ::Property::CustomGeneratorValue& custom() const;
  PROTOBUF_NODISCARD ::Property::CustomGeneratorValue* release_custom();
  ::Property::CustomGeneratorValue* mutable_custom();
  void set_allocated_custom(::Property::CustomGeneratorValue* custom);
  private:
  const ::Property::CustomGeneratorValue& _internal_custom() const;
  ::Property::CustomGeneratorValue* _internal_mutable_custom();
  public:
  void unsafe_arena_set_allocated_custom(
      ::Property::CustomGeneratorValue* custom);
  ::Property::CustomGeneratorValue* unsafe_arena_release_custom();

  void clear_ValueType();
  ValueTypeCase ValueType_case() const;
  // @@protoc_insertion_point(class_scope:Property.LinkPropertyValue)
 private:
  class _Internal;
  void set_has_constant();
  void set_has_ref();
  void set_has_expr();
  void set_has_usedefault();
  void set_has_custom();

  inline bool has_ValueType() const;
  inline void clear_has_ValueType();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union ValueTypeUnion {
      constexpr ValueTypeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::Property::PropertyIdentifier* constant_;
      ::Property::PropertyIdentifier* ref_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr expr_;
      bool usedefault_;
      ::Property::CustomGeneratorValue* custom_;
    } ValueType_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class LinkPropertyDeclaration final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.LinkPropertyDeclaration) */ {
 public:
  inline LinkPropertyDeclaration() : LinkPropertyDeclaration(nullptr) {}
  ~LinkPropertyDeclaration() override;
  explicit PROTOBUF_CONSTEXPR LinkPropertyDeclaration(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LinkPropertyDeclaration(const LinkPropertyDeclaration& from);
  LinkPropertyDeclaration(LinkPropertyDeclaration&& from) noexcept
    : LinkPropertyDeclaration() {
    *this = ::std::move(from);
  }

  inline LinkPropertyDeclaration& operator=(const LinkPropertyDeclaration& from) {
    CopyFrom(from);
    return *this;
  }
  inline LinkPropertyDeclaration& operator=(LinkPropertyDeclaration&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LinkPropertyDeclaration& default_instance() {
    return *internal_default_instance();
  }
  static inline const LinkPropertyDeclaration* internal_default_instance() {
    return reinterpret_cast<const LinkPropertyDeclaration*>(
               &_LinkPropertyDeclaration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(LinkPropertyDeclaration& a, LinkPropertyDeclaration& b) {
    a.Swap(&b);
  }
  inline void Swap(LinkPropertyDeclaration* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LinkPropertyDeclaration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LinkPropertyDeclaration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LinkPropertyDeclaration>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LinkPropertyDeclaration& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LinkPropertyDeclaration& from) {
    LinkPropertyDeclaration::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LinkPropertyDeclaration* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.LinkPropertyDeclaration";
  }
  protected:
  explicit LinkPropertyDeclaration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDefaultFieldNumber = 2,
    kMetaFieldNumber = 1,
  };
  // string default = 2;
  void clear_default_();
  const std::string& default_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_default_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_default_();
  PROTOBUF_NODISCARD std::string* release_default_();
  void set_allocated_default_(std::string* default_);
  private:
  const std::string& _internal_default_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_default_(const std::string& value);
  std::string* _internal_mutable_default_();
  public:

  // .Property.LinkPropertyMetadata meta = 1;
  bool has_meta() const;
  private:
  bool _internal_has_meta() const;
  public:
  void clear_meta();
  const ::Property::LinkPropertyMetadata& meta() const;
  PROTOBUF_NODISCARD ::Property::LinkPropertyMetadata* release_meta();
  ::Property::LinkPropertyMetadata* mutable_meta();
  void set_allocated_meta(::Property::LinkPropertyMetadata* meta);
  private:
  const ::Property::LinkPropertyMetadata& _internal_meta() const;
  ::Property::LinkPropertyMetadata* _internal_mutable_meta();
  public:
  void unsafe_arena_set_allocated_meta(
      ::Property::LinkPropertyMetadata* meta);
  ::Property::LinkPropertyMetadata* unsafe_arena_release_meta();

  // @@protoc_insertion_point(class_scope:Property.LinkPropertyDeclaration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr default__;
    ::Property::LinkPropertyMetadata* meta_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class LinkPropertyMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.LinkPropertyMetadata) */ {
 public:
  inline LinkPropertyMetadata() : LinkPropertyMetadata(nullptr) {}
  ~LinkPropertyMetadata() override;
  explicit PROTOBUF_CONSTEXPR LinkPropertyMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LinkPropertyMetadata(const LinkPropertyMetadata& from);
  LinkPropertyMetadata(LinkPropertyMetadata&& from) noexcept
    : LinkPropertyMetadata() {
    *this = ::std::move(from);
  }

  inline LinkPropertyMetadata& operator=(const LinkPropertyMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline LinkPropertyMetadata& operator=(LinkPropertyMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LinkPropertyMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const LinkPropertyMetadata* internal_default_instance() {
    return reinterpret_cast<const LinkPropertyMetadata*>(
               &_LinkPropertyMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(LinkPropertyMetadata& a, LinkPropertyMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(LinkPropertyMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LinkPropertyMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LinkPropertyMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LinkPropertyMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LinkPropertyMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LinkPropertyMetadata& from) {
    LinkPropertyMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LinkPropertyMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.LinkPropertyMetadata";
  }
  protected:
  explicit LinkPropertyMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
    kEditFieldNumber = 2,
  };
  // .Property.PropertyMetadata base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::Property::PropertyMetadata& base() const;
  PROTOBUF_NODISCARD ::Property::PropertyMetadata* release_base();
  ::Property::PropertyMetadata* mutable_base();
  void set_allocated_base(::Property::PropertyMetadata* base);
  private:
  const ::Property::PropertyMetadata& _internal_base() const;
  ::Property::PropertyMetadata* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::Property::PropertyMetadata* base);
  ::Property::PropertyMetadata* unsafe_arena_release_base();

  // optional .Property.LinkEditingMetadata edit = 2;
  bool has_edit() const;
  private:
  bool _internal_has_edit() const;
  public:
  void clear_edit();
  const ::Property::LinkEditingMetadata& edit() const;
  PROTOBUF_NODISCARD ::Property::LinkEditingMetadata* release_edit();
  ::Property::LinkEditingMetadata* mutable_edit();
  void set_allocated_edit(::Property::LinkEditingMetadata* edit);
  private:
  const ::Property::LinkEditingMetadata& _internal_edit() const;
  ::Property::LinkEditingMetadata* _internal_mutable_edit();
  public:
  void unsafe_arena_set_allocated_edit(
      ::Property::LinkEditingMetadata* edit);
  ::Property::LinkEditingMetadata* unsafe_arena_release_edit();

  // @@protoc_insertion_point(class_scope:Property.LinkPropertyMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::Property::PropertyMetadata* base_;
    ::Property::LinkEditingMetadata* edit_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class LinkGeneratorMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.LinkGeneratorMetadata) */ {
 public:
  inline LinkGeneratorMetadata() : LinkGeneratorMetadata(nullptr) {}
  ~LinkGeneratorMetadata() override;
  explicit PROTOBUF_CONSTEXPR LinkGeneratorMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LinkGeneratorMetadata(const LinkGeneratorMetadata& from);
  LinkGeneratorMetadata(LinkGeneratorMetadata&& from) noexcept
    : LinkGeneratorMetadata() {
    *this = ::std::move(from);
  }

  inline LinkGeneratorMetadata& operator=(const LinkGeneratorMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline LinkGeneratorMetadata& operator=(LinkGeneratorMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LinkGeneratorMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const LinkGeneratorMetadata* internal_default_instance() {
    return reinterpret_cast<const LinkGeneratorMetadata*>(
               &_LinkGeneratorMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(LinkGeneratorMetadata& a, LinkGeneratorMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(LinkGeneratorMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LinkGeneratorMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LinkGeneratorMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LinkGeneratorMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LinkGeneratorMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LinkGeneratorMetadata& from) {
    LinkGeneratorMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LinkGeneratorMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.LinkGeneratorMetadata";
  }
  protected:
  explicit LinkGeneratorMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
    kEditFieldNumber = 2,
  };
  // .Property.GeneratorMetadata base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::Property::GeneratorMetadata& base() const;
  PROTOBUF_NODISCARD ::Property::GeneratorMetadata* release_base();
  ::Property::GeneratorMetadata* mutable_base();
  void set_allocated_base(::Property::GeneratorMetadata* base);
  private:
  const ::Property::GeneratorMetadata& _internal_base() const;
  ::Property::GeneratorMetadata* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::Property::GeneratorMetadata* base);
  ::Property::GeneratorMetadata* unsafe_arena_release_base();

  // optional .Property.LinkEditingMetadata edit = 2;
  bool has_edit() const;
  private:
  bool _internal_has_edit() const;
  public:
  void clear_edit();
  const ::Property::LinkEditingMetadata& edit() const;
  PROTOBUF_NODISCARD ::Property::LinkEditingMetadata* release_edit();
  ::Property::LinkEditingMetadata* mutable_edit();
  void set_allocated_edit(::Property::LinkEditingMetadata* edit);
  private:
  const ::Property::LinkEditingMetadata& _internal_edit() const;
  ::Property::LinkEditingMetadata* _internal_mutable_edit();
  public:
  void unsafe_arena_set_allocated_edit(
      ::Property::LinkEditingMetadata* edit);
  ::Property::LinkEditingMetadata* unsafe_arena_release_edit();

  // @@protoc_insertion_point(class_scope:Property.LinkGeneratorMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::Property::GeneratorMetadata* base_;
    ::Property::LinkEditingMetadata* edit_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class LinkEditingMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.LinkEditingMetadata) */ {
 public:
  inline LinkEditingMetadata() : LinkEditingMetadata(nullptr) {}
  ~LinkEditingMetadata() override;
  explicit PROTOBUF_CONSTEXPR LinkEditingMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LinkEditingMetadata(const LinkEditingMetadata& from);
  LinkEditingMetadata(LinkEditingMetadata&& from) noexcept
    : LinkEditingMetadata() {
    *this = ::std::move(from);
  }

  inline LinkEditingMetadata& operator=(const LinkEditingMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline LinkEditingMetadata& operator=(LinkEditingMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LinkEditingMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const LinkEditingMetadata* internal_default_instance() {
    return reinterpret_cast<const LinkEditingMetadata*>(
               &_LinkEditingMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(LinkEditingMetadata& a, LinkEditingMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(LinkEditingMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LinkEditingMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LinkEditingMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LinkEditingMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LinkEditingMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LinkEditingMetadata& from) {
    LinkEditingMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LinkEditingMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.LinkEditingMetadata";
  }
  protected:
  explicit LinkEditingMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentTypeFieldNumber = 1,
    kDirectToLibraryFieldNumber = 2,
  };
  // optional .Property.LinkContentTypeSpecifier contentType = 1;
  bool has_contenttype() const;
  private:
  bool _internal_has_contenttype() const;
  public:
  void clear_contenttype();
  const ::Property::LinkContentTypeSpecifier& contenttype() const;
  PROTOBUF_NODISCARD ::Property::LinkContentTypeSpecifier* release_contenttype();
  ::Property::LinkContentTypeSpecifier* mutable_contenttype();
  void set_allocated_contenttype(::Property::LinkContentTypeSpecifier* contenttype);
  private:
  const ::Property::LinkContentTypeSpecifier& _internal_contenttype() const;
  ::Property::LinkContentTypeSpecifier* _internal_mutable_contenttype();
  public:
  void unsafe_arena_set_allocated_contenttype(
      ::Property::LinkContentTypeSpecifier* contenttype);
  ::Property::LinkContentTypeSpecifier* unsafe_arena_release_contenttype();

  // optional bool directToLibrary = 2;
  bool has_directtolibrary() const;
  private:
  bool _internal_has_directtolibrary() const;
  public:
  void clear_directtolibrary();
  bool directtolibrary() const;
  void set_directtolibrary(bool value);
  private:
  bool _internal_directtolibrary() const;
  void _internal_set_directtolibrary(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Property.LinkEditingMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::Property::LinkContentTypeSpecifier* contenttype_;
    bool directtolibrary_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class LinkContentTypeSpecifier final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.LinkContentTypeSpecifier) */ {
 public:
  inline LinkContentTypeSpecifier() : LinkContentTypeSpecifier(nullptr) {}
  ~LinkContentTypeSpecifier() override;
  explicit PROTOBUF_CONSTEXPR LinkContentTypeSpecifier(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LinkContentTypeSpecifier(const LinkContentTypeSpecifier& from);
  LinkContentTypeSpecifier(LinkContentTypeSpecifier&& from) noexcept
    : LinkContentTypeSpecifier() {
    *this = ::std::move(from);
  }

  inline LinkContentTypeSpecifier& operator=(const LinkContentTypeSpecifier& from) {
    CopyFrom(from);
    return *this;
  }
  inline LinkContentTypeSpecifier& operator=(LinkContentTypeSpecifier&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LinkContentTypeSpecifier& default_instance() {
    return *internal_default_instance();
  }
  enum ContentTypeCase {
    kTexture = 1,
    kMaterial = 2,
    kGeometry = 3,
    CONTENTTYPE_NOT_SET = 0,
  };

  static inline const LinkContentTypeSpecifier* internal_default_instance() {
    return reinterpret_cast<const LinkContentTypeSpecifier*>(
               &_LinkContentTypeSpecifier_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(LinkContentTypeSpecifier& a, LinkContentTypeSpecifier& b) {
    a.Swap(&b);
  }
  inline void Swap(LinkContentTypeSpecifier* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LinkContentTypeSpecifier* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LinkContentTypeSpecifier* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LinkContentTypeSpecifier>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LinkContentTypeSpecifier& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LinkContentTypeSpecifier& from) {
    LinkContentTypeSpecifier::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LinkContentTypeSpecifier* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.LinkContentTypeSpecifier";
  }
  protected:
  explicit LinkContentTypeSpecifier(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LinkContentTypeSpecifier_TextureType TextureType;
  static constexpr TextureType AllTextures =
    LinkContentTypeSpecifier_TextureType_AllTextures;
  static constexpr TextureType ColorMaps =
    LinkContentTypeSpecifier_TextureType_ColorMaps;
  static constexpr TextureType NormalMaps =
    LinkContentTypeSpecifier_TextureType_NormalMaps;
  static constexpr TextureType Skyboxes =
    LinkContentTypeSpecifier_TextureType_Skyboxes;
  static constexpr TextureType ArTrackers =
    LinkContentTypeSpecifier_TextureType_ArTrackers;
  static constexpr TextureType Profiles =
    LinkContentTypeSpecifier_TextureType_Profiles;
  static inline bool TextureType_IsValid(int value) {
    return LinkContentTypeSpecifier_TextureType_IsValid(value);
  }
  static constexpr TextureType TextureType_MIN =
    LinkContentTypeSpecifier_TextureType_TextureType_MIN;
  static constexpr TextureType TextureType_MAX =
    LinkContentTypeSpecifier_TextureType_TextureType_MAX;
  static constexpr int TextureType_ARRAYSIZE =
    LinkContentTypeSpecifier_TextureType_TextureType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TextureType_descriptor() {
    return LinkContentTypeSpecifier_TextureType_descriptor();
  }
  template<typename T>
  static inline const std::string& TextureType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TextureType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TextureType_Name.");
    return LinkContentTypeSpecifier_TextureType_Name(enum_t_value);
  }
  static inline bool TextureType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TextureType* value) {
    return LinkContentTypeSpecifier_TextureType_Parse(name, value);
  }

  typedef LinkContentTypeSpecifier_MaterialType MaterialType;
  static constexpr MaterialType AllMaterials =
    LinkContentTypeSpecifier_MaterialType_AllMaterials;
  static inline bool MaterialType_IsValid(int value) {
    return LinkContentTypeSpecifier_MaterialType_IsValid(value);
  }
  static constexpr MaterialType MaterialType_MIN =
    LinkContentTypeSpecifier_MaterialType_MaterialType_MIN;
  static constexpr MaterialType MaterialType_MAX =
    LinkContentTypeSpecifier_MaterialType_MaterialType_MAX;
  static constexpr int MaterialType_ARRAYSIZE =
    LinkContentTypeSpecifier_MaterialType_MaterialType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MaterialType_descriptor() {
    return LinkContentTypeSpecifier_MaterialType_descriptor();
  }
  template<typename T>
  static inline const std::string& MaterialType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MaterialType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MaterialType_Name.");
    return LinkContentTypeSpecifier_MaterialType_Name(enum_t_value);
  }
  static inline bool MaterialType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MaterialType* value) {
    return LinkContentTypeSpecifier_MaterialType_Parse(name, value);
  }

  typedef LinkContentTypeSpecifier_GeometryType GeometryType;
  static constexpr GeometryType AnyGeometry =
    LinkContentTypeSpecifier_GeometryType_AnyGeometry;
  static inline bool GeometryType_IsValid(int value) {
    return LinkContentTypeSpecifier_GeometryType_IsValid(value);
  }
  static constexpr GeometryType GeometryType_MIN =
    LinkContentTypeSpecifier_GeometryType_GeometryType_MIN;
  static constexpr GeometryType GeometryType_MAX =
    LinkContentTypeSpecifier_GeometryType_GeometryType_MAX;
  static constexpr int GeometryType_ARRAYSIZE =
    LinkContentTypeSpecifier_GeometryType_GeometryType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  GeometryType_descriptor() {
    return LinkContentTypeSpecifier_GeometryType_descriptor();
  }
  template<typename T>
  static inline const std::string& GeometryType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, GeometryType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function GeometryType_Name.");
    return LinkContentTypeSpecifier_GeometryType_Name(enum_t_value);
  }
  static inline bool GeometryType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      GeometryType* value) {
    return LinkContentTypeSpecifier_GeometryType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTextureFieldNumber = 1,
    kMaterialFieldNumber = 2,
    kGeometryFieldNumber = 3,
  };
  // .Property.LinkContentTypeSpecifier.TextureType Texture = 1;
  bool has_texture() const;
  private:
  bool _internal_has_texture() const;
  public:
  void clear_texture();
  ::Property::LinkContentTypeSpecifier_TextureType texture() const;
  void set_texture(::Property::LinkContentTypeSpecifier_TextureType value);
  private:
  ::Property::LinkContentTypeSpecifier_TextureType _internal_texture() const;
  void _internal_set_texture(::Property::LinkContentTypeSpecifier_TextureType value);
  public:

  // .Property.LinkContentTypeSpecifier.MaterialType Material = 2;
  bool has_material() const;
  private:
  bool _internal_has_material() const;
  public:
  void clear_material();
  ::Property::LinkContentTypeSpecifier_MaterialType material() const;
  void set_material(::Property::LinkContentTypeSpecifier_MaterialType value);
  private:
  ::Property::LinkContentTypeSpecifier_MaterialType _internal_material() const;
  void _internal_set_material(::Property::LinkContentTypeSpecifier_MaterialType value);
  public:

  // .Property.LinkContentTypeSpecifier.GeometryType Geometry = 3;
  bool has_geometry() const;
  private:
  bool _internal_has_geometry() const;
  public:
  void clear_geometry();
  ::Property::LinkContentTypeSpecifier_GeometryType geometry() const;
  void set_geometry(::Property::LinkContentTypeSpecifier_GeometryType value);
  private:
  ::Property::LinkContentTypeSpecifier_GeometryType _internal_geometry() const;
  void _internal_set_geometry(::Property::LinkContentTypeSpecifier_GeometryType value);
  public:

  void clear_ContentType();
  ContentTypeCase ContentType_case() const;
  // @@protoc_insertion_point(class_scope:Property.LinkContentTypeSpecifier)
 private:
  class _Internal;
  void set_has_texture();
  void set_has_material();
  void set_has_geometry();

  inline bool has_ContentType() const;
  inline void clear_has_ContentType();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union ContentTypeUnion {
      constexpr ContentTypeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      int texture_;
      int material_;
      int geometry_;
    } ContentType_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class VectorPropertyAssignment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.VectorPropertyAssignment) */ {
 public:
  inline VectorPropertyAssignment() : VectorPropertyAssignment(nullptr) {}
  ~VectorPropertyAssignment() override;
  explicit PROTOBUF_CONSTEXPR VectorPropertyAssignment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VectorPropertyAssignment(const VectorPropertyAssignment& from);
  VectorPropertyAssignment(VectorPropertyAssignment&& from) noexcept
    : VectorPropertyAssignment() {
    *this = ::std::move(from);
  }

  inline VectorPropertyAssignment& operator=(const VectorPropertyAssignment& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorPropertyAssignment& operator=(VectorPropertyAssignment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VectorPropertyAssignment& default_instance() {
    return *internal_default_instance();
  }
  static inline const VectorPropertyAssignment* internal_default_instance() {
    return reinterpret_cast<const VectorPropertyAssignment*>(
               &_VectorPropertyAssignment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(VectorPropertyAssignment& a, VectorPropertyAssignment& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorPropertyAssignment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorPropertyAssignment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VectorPropertyAssignment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VectorPropertyAssignment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VectorPropertyAssignment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VectorPropertyAssignment& from) {
    VectorPropertyAssignment::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorPropertyAssignment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.VectorPropertyAssignment";
  }
  protected:
  explicit VectorPropertyAssignment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef VectorPropertyAssignment_VectorPropertyMethod VectorPropertyMethod;
  static constexpr VectorPropertyMethod Overriding =
    VectorPropertyAssignment_VectorPropertyMethod_Overriding;
  static constexpr VectorPropertyMethod Additive =
    VectorPropertyAssignment_VectorPropertyMethod_Additive;
  static inline bool VectorPropertyMethod_IsValid(int value) {
    return VectorPropertyAssignment_VectorPropertyMethod_IsValid(value);
  }
  static constexpr VectorPropertyMethod VectorPropertyMethod_MIN =
    VectorPropertyAssignment_VectorPropertyMethod_VectorPropertyMethod_MIN;
  static constexpr VectorPropertyMethod VectorPropertyMethod_MAX =
    VectorPropertyAssignment_VectorPropertyMethod_VectorPropertyMethod_MAX;
  static constexpr int VectorPropertyMethod_ARRAYSIZE =
    VectorPropertyAssignment_VectorPropertyMethod_VectorPropertyMethod_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  VectorPropertyMethod_descriptor() {
    return VectorPropertyAssignment_VectorPropertyMethod_descriptor();
  }
  template<typename T>
  static inline const std::string& VectorPropertyMethod_Name(T enum_t_value) {
    static_assert(::std::is_same<T, VectorPropertyMethod>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function VectorPropertyMethod_Name.");
    return VectorPropertyAssignment_VectorPropertyMethod_Name(enum_t_value);
  }
  static inline bool VectorPropertyMethod_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      VectorPropertyMethod* value) {
    return VectorPropertyAssignment_VectorPropertyMethod_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAssignmentIdFieldNumber = 4,
    kValueFieldNumber = 3,
    kMethodFieldNumber = 1,
    kPriorityFieldNumber = 2,
  };
  // string assignmentId = 4;
  void clear_assignmentid();
  const std::string& assignmentid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_assignmentid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_assignmentid();
  PROTOBUF_NODISCARD std::string* release_assignmentid();
  void set_allocated_assignmentid(std::string* assignmentid);
  private:
  const std::string& _internal_assignmentid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_assignmentid(const std::string& value);
  std::string* _internal_mutable_assignmentid();
  public:

  // .Property.VectorPropertyValue value = 3;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::Property::VectorPropertyValue& value() const;
  PROTOBUF_NODISCARD ::Property::VectorPropertyValue* release_value();
  ::Property::VectorPropertyValue* mutable_value();
  void set_allocated_value(::Property::VectorPropertyValue* value);
  private:
  const ::Property::VectorPropertyValue& _internal_value() const;
  ::Property::VectorPropertyValue* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::Property::VectorPropertyValue* value);
  ::Property::VectorPropertyValue* unsafe_arena_release_value();

  // optional .Property.VectorPropertyAssignment.VectorPropertyMethod method = 1;
  bool has_method() const;
  private:
  bool _internal_has_method() const;
  public:
  void clear_method();
  ::Property::VectorPropertyAssignment_VectorPropertyMethod method() const;
  void set_method(::Property::VectorPropertyAssignment_VectorPropertyMethod value);
  private:
  ::Property::VectorPropertyAssignment_VectorPropertyMethod _internal_method() const;
  void _internal_set_method(::Property::VectorPropertyAssignment_VectorPropertyMethod value);
  public:

  // optional int32 priority = 2;
  bool has_priority() const;
  private:
  bool _internal_has_priority() const;
  public:
  void clear_priority();
  int32_t priority() const;
  void set_priority(int32_t value);
  private:
  int32_t _internal_priority() const;
  void _internal_set_priority(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Property.VectorPropertyAssignment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr assignmentid_;
    ::Property::VectorPropertyValue* value_;
    int method_;
    int32_t priority_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class VectorPropertyValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.VectorPropertyValue) */ {
 public:
  inline VectorPropertyValue() : VectorPropertyValue(nullptr) {}
  ~VectorPropertyValue() override;
  explicit PROTOBUF_CONSTEXPR VectorPropertyValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VectorPropertyValue(const VectorPropertyValue& from);
  VectorPropertyValue(VectorPropertyValue&& from) noexcept
    : VectorPropertyValue() {
    *this = ::std::move(from);
  }

  inline VectorPropertyValue& operator=(const VectorPropertyValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorPropertyValue& operator=(VectorPropertyValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VectorPropertyValue& default_instance() {
    return *internal_default_instance();
  }
  enum ValueTypeCase {
    kConstant = 1,
    kRef = 2,
    kExpr = 3,
    kByChannel = 4,
    kKeyframes = 5,
    kUseDefault = 6,
    kInterp = 9,
    kCustom = 10,
    kQuadratic = 11,
    kUniform = 12,
    kApproach = 13,
    VALUETYPE_NOT_SET = 0,
  };

  static inline const VectorPropertyValue* internal_default_instance() {
    return reinterpret_cast<const VectorPropertyValue*>(
               &_VectorPropertyValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(VectorPropertyValue& a, VectorPropertyValue& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorPropertyValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorPropertyValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VectorPropertyValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VectorPropertyValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VectorPropertyValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VectorPropertyValue& from) {
    VectorPropertyValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorPropertyValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.VectorPropertyValue";
  }
  protected:
  explicit VectorPropertyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConstantFieldNumber = 1,
    kRefFieldNumber = 2,
    kExprFieldNumber = 3,
    kByChannelFieldNumber = 4,
    kKeyframesFieldNumber = 5,
    kUseDefaultFieldNumber = 6,
    kInterpFieldNumber = 9,
    kCustomFieldNumber = 10,
    kQuadraticFieldNumber = 11,
    kUniformFieldNumber = 12,
    kApproachFieldNumber = 13,
  };
  // .Common.Float4 constant = 1;
  bool has_constant() const;
  private:
  bool _internal_has_constant() const;
  public:
  void clear_constant();
  const ::Common::Float4& constant() const;
  PROTOBUF_NODISCARD ::Common::Float4* release_constant();
  ::Common::Float4* mutable_constant();
  void set_allocated_constant(::Common::Float4* constant);
  private:
  const ::Common::Float4& _internal_constant() const;
  ::Common::Float4* _internal_mutable_constant();
  public:
  void unsafe_arena_set_allocated_constant(
      ::Common::Float4* constant);
  ::Common::Float4* unsafe_arena_release_constant();

  // .Property.PropertyIdentifier ref = 2;
  bool has_ref() const;
  private:
  bool _internal_has_ref() const;
  public:
  void clear_ref();
  const ::Property::PropertyIdentifier& ref() const;
  PROTOBUF_NODISCARD ::Property::PropertyIdentifier* release_ref();
  ::Property::PropertyIdentifier* mutable_ref();
  void set_allocated_ref(::Property::PropertyIdentifier* ref);
  private:
  const ::Property::PropertyIdentifier& _internal_ref() const;
  ::Property::PropertyIdentifier* _internal_mutable_ref();
  public:
  void unsafe_arena_set_allocated_ref(
      ::Property::PropertyIdentifier* ref);
  ::Property::PropertyIdentifier* unsafe_arena_release_ref();

  // string expr = 3;
  bool has_expr() const;
  private:
  bool _internal_has_expr() const;
  public:
  void clear_expr();
  const std::string& expr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_expr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_expr();
  PROTOBUF_NODISCARD std::string* release_expr();
  void set_allocated_expr(std::string* expr);
  private:
  const std::string& _internal_expr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_expr(const std::string& value);
  std::string* _internal_mutable_expr();
  public:

  // .Property.VectorPerChannel byChannel = 4;
  bool has_bychannel() const;
  private:
  bool _internal_has_bychannel() const;
  public:
  void clear_bychannel();
  const ::Property::VectorPerChannel& bychannel() const;
  PROTOBUF_NODISCARD ::Property::VectorPerChannel* release_bychannel();
  ::Property::VectorPerChannel* mutable_bychannel();
  void set_allocated_bychannel(::Property::VectorPerChannel* bychannel);
  private:
  const ::Property::VectorPerChannel& _internal_bychannel() const;
  ::Property::VectorPerChannel* _internal_mutable_bychannel();
  public:
  void unsafe_arena_set_allocated_bychannel(
      ::Property::VectorPerChannel* bychannel);
  ::Property::VectorPerChannel* unsafe_arena_release_bychannel();

  // .Property.VectorPropertyKeyframed keyframes = 5;
  bool has_keyframes() const;
  private:
  bool _internal_has_keyframes() const;
  public:
  void clear_keyframes();
  const ::Property::VectorPropertyKeyframed& keyframes() const;
  PROTOBUF_NODISCARD ::Property::VectorPropertyKeyframed* release_keyframes();
  ::Property::VectorPropertyKeyframed* mutable_keyframes();
  void set_allocated_keyframes(::Property::VectorPropertyKeyframed* keyframes);
  private:
  const ::Property::VectorPropertyKeyframed& _internal_keyframes() const;
  ::Property::VectorPropertyKeyframed* _internal_mutable_keyframes();
  public:
  void unsafe_arena_set_allocated_keyframes(
      ::Property::VectorPropertyKeyframed* keyframes);
  ::Property::VectorPropertyKeyframed* unsafe_arena_release_keyframes();

  // bool useDefault = 6;
  bool has_usedefault() const;
  private:
  bool _internal_has_usedefault() const;
  public:
  void clear_usedefault();
  bool usedefault() const;
  void set_usedefault(bool value);
  private:
  bool _internal_usedefault() const;
  void _internal_set_usedefault(bool value);
  public:

  // .Property.VectorPropertyInterpolator interp = 9;
  bool has_interp() const;
  private:
  bool _internal_has_interp() const;
  public:
  void clear_interp();
  const ::Property::VectorPropertyInterpolator& interp() const;
  PROTOBUF_NODISCARD ::Property::VectorPropertyInterpolator* release_interp();
  ::Property::VectorPropertyInterpolator* mutable_interp();
  void set_allocated_interp(::Property::VectorPropertyInterpolator* interp);
  private:
  const ::Property::VectorPropertyInterpolator& _internal_interp() const;
  ::Property::VectorPropertyInterpolator* _internal_mutable_interp();
  public:
  void unsafe_arena_set_allocated_interp(
      ::Property::VectorPropertyInterpolator* interp);
  ::Property::VectorPropertyInterpolator* unsafe_arena_release_interp();

  // .Property.CustomGeneratorValue custom = 10;
  bool has_custom() const;
  private:
  bool _internal_has_custom() const;
  public:
  void clear_custom();
  const ::Property::CustomGeneratorValue& custom() const;
  PROTOBUF_NODISCARD ::Property::CustomGeneratorValue* release_custom();
  ::Property::CustomGeneratorValue* mutable_custom();
  void set_allocated_custom(::Property::CustomGeneratorValue* custom);
  private:
  const ::Property::CustomGeneratorValue& _internal_custom() const;
  ::Property::CustomGeneratorValue* _internal_mutable_custom();
  public:
  void unsafe_arena_set_allocated_custom(
      ::Property::CustomGeneratorValue* custom);
  ::Property::CustomGeneratorValue* unsafe_arena_release_custom();

  // .Property.VectorPropertyQuadratic quadratic = 11;
  bool has_quadratic() const;
  private:
  bool _internal_has_quadratic() const;
  public:
  void clear_quadratic();
  const ::Property::VectorPropertyQuadratic& quadratic() const;
  PROTOBUF_NODISCARD ::Property::VectorPropertyQuadratic* release_quadratic();
  ::Property::VectorPropertyQuadratic* mutable_quadratic();
  void set_allocated_quadratic(::Property::VectorPropertyQuadratic* quadratic);
  private:
  const ::Property::VectorPropertyQuadratic& _internal_quadratic() const;
  ::Property::VectorPropertyQuadratic* _internal_mutable_quadratic();
  public:
  void unsafe_arena_set_allocated_quadratic(
      ::Property::VectorPropertyQuadratic* quadratic);
  ::Property::VectorPropertyQuadratic* unsafe_arena_release_quadratic();

  // .Property.ScalarPropertyValue uniform = 12;
  bool has_uniform() const;
  private:
  bool _internal_has_uniform() const;
  public:
  void clear_uniform();
  const ::Property::ScalarPropertyValue& uniform() const;
  PROTOBUF_NODISCARD ::Property::ScalarPropertyValue* release_uniform();
  ::Property::ScalarPropertyValue* mutable_uniform();
  void set_allocated_uniform(::Property::ScalarPropertyValue* uniform);
  private:
  const ::Property::ScalarPropertyValue& _internal_uniform() const;
  ::Property::ScalarPropertyValue* _internal_mutable_uniform();
  public:
  void unsafe_arena_set_allocated_uniform(
      ::Property::ScalarPropertyValue* uniform);
  ::Property::ScalarPropertyValue* unsafe_arena_release_uniform();

  // .Property.VectorPropertyApproach approach = 13;
  bool has_approach() const;
  private:
  bool _internal_has_approach() const;
  public:
  void clear_approach();
  const ::Property::VectorPropertyApproach& approach() const;
  PROTOBUF_NODISCARD ::Property::VectorPropertyApproach* release_approach();
  ::Property::VectorPropertyApproach* mutable_approach();
  void set_allocated_approach(::Property::VectorPropertyApproach* approach);
  private:
  const ::Property::VectorPropertyApproach& _internal_approach() const;
  ::Property::VectorPropertyApproach* _internal_mutable_approach();
  public:
  void unsafe_arena_set_allocated_approach(
      ::Property::VectorPropertyApproach* approach);
  ::Property::VectorPropertyApproach* unsafe_arena_release_approach();

  void clear_ValueType();
  ValueTypeCase ValueType_case() const;
  // @@protoc_insertion_point(class_scope:Property.VectorPropertyValue)
 private:
  class _Internal;
  void set_has_constant();
  void set_has_ref();
  void set_has_expr();
  void set_has_bychannel();
  void set_has_keyframes();
  void set_has_usedefault();
  void set_has_interp();
  void set_has_custom();
  void set_has_quadratic();
  void set_has_uniform();
  void set_has_approach();

  inline bool has_ValueType() const;
  inline void clear_has_ValueType();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union ValueTypeUnion {
      constexpr ValueTypeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::Common::Float4* constant_;
      ::Property::PropertyIdentifier* ref_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr expr_;
      ::Property::VectorPerChannel* bychannel_;
      ::Property::VectorPropertyKeyframed* keyframes_;
      bool usedefault_;
      ::Property::VectorPropertyInterpolator* interp_;
      ::Property::CustomGeneratorValue* custom_;
      ::Property::VectorPropertyQuadratic* quadratic_;
      ::Property::ScalarPropertyValue* uniform_;
      ::Property::VectorPropertyApproach* approach_;
    } ValueType_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class VectorPropertyInterpolator final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.VectorPropertyInterpolator) */ {
 public:
  inline VectorPropertyInterpolator() : VectorPropertyInterpolator(nullptr) {}
  ~VectorPropertyInterpolator() override;
  explicit PROTOBUF_CONSTEXPR VectorPropertyInterpolator(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VectorPropertyInterpolator(const VectorPropertyInterpolator& from);
  VectorPropertyInterpolator(VectorPropertyInterpolator&& from) noexcept
    : VectorPropertyInterpolator() {
    *this = ::std::move(from);
  }

  inline VectorPropertyInterpolator& operator=(const VectorPropertyInterpolator& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorPropertyInterpolator& operator=(VectorPropertyInterpolator&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VectorPropertyInterpolator& default_instance() {
    return *internal_default_instance();
  }
  static inline const VectorPropertyInterpolator* internal_default_instance() {
    return reinterpret_cast<const VectorPropertyInterpolator*>(
               &_VectorPropertyInterpolator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(VectorPropertyInterpolator& a, VectorPropertyInterpolator& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorPropertyInterpolator* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorPropertyInterpolator* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VectorPropertyInterpolator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VectorPropertyInterpolator>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VectorPropertyInterpolator& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VectorPropertyInterpolator& from) {
    VectorPropertyInterpolator::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorPropertyInterpolator* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.VectorPropertyInterpolator";
  }
  protected:
  explicit VectorPropertyInterpolator(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kToFieldNumber = 2,
    kByFieldNumber = 3,
    kTFieldNumber = 4,
  };
  // .Property.VectorPropertyValue from = 1;
  bool has_from() const;
  private:
  bool _internal_has_from() const;
  public:
  void clear_from();
  const ::Property::VectorPropertyValue& from() const;
  PROTOBUF_NODISCARD ::Property::VectorPropertyValue* release_from();
  ::Property::VectorPropertyValue* mutable_from();
  void set_allocated_from(::Property::VectorPropertyValue* from);
  private:
  const ::Property::VectorPropertyValue& _internal_from() const;
  ::Property::VectorPropertyValue* _internal_mutable_from();
  public:
  void unsafe_arena_set_allocated_from(
      ::Property::VectorPropertyValue* from);
  ::Property::VectorPropertyValue* unsafe_arena_release_from();

  // .Property.VectorPropertyValue to = 2;
  bool has_to() const;
  private:
  bool _internal_has_to() const;
  public:
  void clear_to();
  const ::Property::VectorPropertyValue& to() const;
  PROTOBUF_NODISCARD ::Property::VectorPropertyValue* release_to();
  ::Property::VectorPropertyValue* mutable_to();
  void set_allocated_to(::Property::VectorPropertyValue* to);
  private:
  const ::Property::VectorPropertyValue& _internal_to() const;
  ::Property::VectorPropertyValue* _internal_mutable_to();
  public:
  void unsafe_arena_set_allocated_to(
      ::Property::VectorPropertyValue* to);
  ::Property::VectorPropertyValue* unsafe_arena_release_to();

  // .Property.Interpolation by = 3;
  bool has_by() const;
  private:
  bool _internal_has_by() const;
  public:
  void clear_by();
  const ::Property::Interpolation& by() const;
  PROTOBUF_NODISCARD ::Property::Interpolation* release_by();
  ::Property::Interpolation* mutable_by();
  void set_allocated_by(::Property::Interpolation* by);
  private:
  const ::Property::Interpolation& _internal_by() const;
  ::Property::Interpolation* _internal_mutable_by();
  public:
  void unsafe_arena_set_allocated_by(
      ::Property::Interpolation* by);
  ::Property::Interpolation* unsafe_arena_release_by();

  // .Property.ScalarPropertyValue t = 4;
  bool has_t() const;
  private:
  bool _internal_has_t() const;
  public:
  void clear_t();
  const ::Property::ScalarPropertyValue& t() const;
  PROTOBUF_NODISCARD ::Property::ScalarPropertyValue* release_t();
  ::Property::ScalarPropertyValue* mutable_t();
  void set_allocated_t(::Property::ScalarPropertyValue* t);
  private:
  const ::Property::ScalarPropertyValue& _internal_t() const;
  ::Property::ScalarPropertyValue* _internal_mutable_t();
  public:
  void unsafe_arena_set_allocated_t(
      ::Property::ScalarPropertyValue* t);
  ::Property::ScalarPropertyValue* unsafe_arena_release_t();

  // @@protoc_insertion_point(class_scope:Property.VectorPropertyInterpolator)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Property::VectorPropertyValue* from_;
    ::Property::VectorPropertyValue* to_;
    ::Property::Interpolation* by_;
    ::Property::ScalarPropertyValue* t_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class VectorPerChannel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.VectorPerChannel) */ {
 public:
  inline VectorPerChannel() : VectorPerChannel(nullptr) {}
  ~VectorPerChannel() override;
  explicit PROTOBUF_CONSTEXPR VectorPerChannel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VectorPerChannel(const VectorPerChannel& from);
  VectorPerChannel(VectorPerChannel&& from) noexcept
    : VectorPerChannel() {
    *this = ::std::move(from);
  }

  inline VectorPerChannel& operator=(const VectorPerChannel& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorPerChannel& operator=(VectorPerChannel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VectorPerChannel& default_instance() {
    return *internal_default_instance();
  }
  static inline const VectorPerChannel* internal_default_instance() {
    return reinterpret_cast<const VectorPerChannel*>(
               &_VectorPerChannel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(VectorPerChannel& a, VectorPerChannel& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorPerChannel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorPerChannel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VectorPerChannel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VectorPerChannel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VectorPerChannel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VectorPerChannel& from) {
    VectorPerChannel::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorPerChannel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.VectorPerChannel";
  }
  protected:
  explicit VectorPerChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kWFieldNumber = 4,
  };
  // .Property.ScalarPropertyValue x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  const ::Property::ScalarPropertyValue& x() const;
  PROTOBUF_NODISCARD ::Property::ScalarPropertyValue* release_x();
  ::Property::ScalarPropertyValue* mutable_x();
  void set_allocated_x(::Property::ScalarPropertyValue* x);
  private:
  const ::Property::ScalarPropertyValue& _internal_x() const;
  ::Property::ScalarPropertyValue* _internal_mutable_x();
  public:
  void unsafe_arena_set_allocated_x(
      ::Property::ScalarPropertyValue* x);
  ::Property::ScalarPropertyValue* unsafe_arena_release_x();

  // .Property.ScalarPropertyValue y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  const ::Property::ScalarPropertyValue& y() const;
  PROTOBUF_NODISCARD ::Property::ScalarPropertyValue* release_y();
  ::Property::ScalarPropertyValue* mutable_y();
  void set_allocated_y(::Property::ScalarPropertyValue* y);
  private:
  const ::Property::ScalarPropertyValue& _internal_y() const;
  ::Property::ScalarPropertyValue* _internal_mutable_y();
  public:
  void unsafe_arena_set_allocated_y(
      ::Property::ScalarPropertyValue* y);
  ::Property::ScalarPropertyValue* unsafe_arena_release_y();

  // .Property.ScalarPropertyValue z = 3;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  const ::Property::ScalarPropertyValue& z() const;
  PROTOBUF_NODISCARD ::Property::ScalarPropertyValue* release_z();
  ::Property::ScalarPropertyValue* mutable_z();
  void set_allocated_z(::Property::ScalarPropertyValue* z);
  private:
  const ::Property::ScalarPropertyValue& _internal_z() const;
  ::Property::ScalarPropertyValue* _internal_mutable_z();
  public:
  void unsafe_arena_set_allocated_z(
      ::Property::ScalarPropertyValue* z);
  ::Property::ScalarPropertyValue* unsafe_arena_release_z();

  // optional .Property.ScalarPropertyValue w = 4;
  bool has_w() const;
  private:
  bool _internal_has_w() const;
  public:
  void clear_w();
  const ::Property::ScalarPropertyValue& w() const;
  PROTOBUF_NODISCARD ::Property::ScalarPropertyValue* release_w();
  ::Property::ScalarPropertyValue* mutable_w();
  void set_allocated_w(::Property::ScalarPropertyValue* w);
  private:
  const ::Property::ScalarPropertyValue& _internal_w() const;
  ::Property::ScalarPropertyValue* _internal_mutable_w();
  public:
  void unsafe_arena_set_allocated_w(
      ::Property::ScalarPropertyValue* w);
  ::Property::ScalarPropertyValue* unsafe_arena_release_w();

  // @@protoc_insertion_point(class_scope:Property.VectorPerChannel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::Property::ScalarPropertyValue* x_;
    ::Property::ScalarPropertyValue* y_;
    ::Property::ScalarPropertyValue* z_;
    ::Property::ScalarPropertyValue* w_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class VectorPropertyQuadratic final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.VectorPropertyQuadratic) */ {
 public:
  inline VectorPropertyQuadratic() : VectorPropertyQuadratic(nullptr) {}
  ~VectorPropertyQuadratic() override;
  explicit PROTOBUF_CONSTEXPR VectorPropertyQuadratic(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VectorPropertyQuadratic(const VectorPropertyQuadratic& from);
  VectorPropertyQuadratic(VectorPropertyQuadratic&& from) noexcept
    : VectorPropertyQuadratic() {
    *this = ::std::move(from);
  }

  inline VectorPropertyQuadratic& operator=(const VectorPropertyQuadratic& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorPropertyQuadratic& operator=(VectorPropertyQuadratic&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VectorPropertyQuadratic& default_instance() {
    return *internal_default_instance();
  }
  static inline const VectorPropertyQuadratic* internal_default_instance() {
    return reinterpret_cast<const VectorPropertyQuadratic*>(
               &_VectorPropertyQuadratic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(VectorPropertyQuadratic& a, VectorPropertyQuadratic& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorPropertyQuadratic* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorPropertyQuadratic* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VectorPropertyQuadratic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VectorPropertyQuadratic>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VectorPropertyQuadratic& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VectorPropertyQuadratic& from) {
    VectorPropertyQuadratic::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorPropertyQuadratic* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.VectorPropertyQuadratic";
  }
  protected:
  explicit VectorPropertyQuadratic(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPFieldNumber = 1,
    kVFieldNumber = 2,
    kAFieldNumber = 3,
    kTFieldNumber = 4,
  };
  // .Property.VectorPropertyValue p = 1;
  bool has_p() const;
  private:
  bool _internal_has_p() const;
  public:
  void clear_p();
  const ::Property::VectorPropertyValue& p() const;
  PROTOBUF_NODISCARD ::Property::VectorPropertyValue* release_p();
  ::Property::VectorPropertyValue* mutable_p();
  void set_allocated_p(::Property::VectorPropertyValue* p);
  private:
  const ::Property::VectorPropertyValue& _internal_p() const;
  ::Property::VectorPropertyValue* _internal_mutable_p();
  public:
  void unsafe_arena_set_allocated_p(
      ::Property::VectorPropertyValue* p);
  ::Property::VectorPropertyValue* unsafe_arena_release_p();

  // .Property.VectorPropertyValue v = 2;
  bool has_v() const;
  private:
  bool _internal_has_v() const;
  public:
  void clear_v();
  const ::Property::VectorPropertyValue& v() const;
  PROTOBUF_NODISCARD ::Property::VectorPropertyValue* release_v();
  ::Property::VectorPropertyValue* mutable_v();
  void set_allocated_v(::Property::VectorPropertyValue* v);
  private:
  const ::Property::VectorPropertyValue& _internal_v() const;
  ::Property::VectorPropertyValue* _internal_mutable_v();
  public:
  void unsafe_arena_set_allocated_v(
      ::Property::VectorPropertyValue* v);
  ::Property::VectorPropertyValue* unsafe_arena_release_v();

  // optional .Property.VectorPropertyValue a = 3;
  bool has_a() const;
  private:
  bool _internal_has_a() const;
  public:
  void clear_a();
  const ::Property::VectorPropertyValue& a() const;
  PROTOBUF_NODISCARD ::Property::VectorPropertyValue* release_a();
  ::Property::VectorPropertyValue* mutable_a();
  void set_allocated_a(::Property::VectorPropertyValue* a);
  private:
  const ::Property::VectorPropertyValue& _internal_a() const;
  ::Property::VectorPropertyValue* _internal_mutable_a();
  public:
  void unsafe_arena_set_allocated_a(
      ::Property::VectorPropertyValue* a);
  ::Property::VectorPropertyValue* unsafe_arena_release_a();

  // optional .Property.ScalarPropertyValue t = 4;
  bool has_t() const;
  private:
  bool _internal_has_t() const;
  public:
  void clear_t();
  const ::Property::ScalarPropertyValue& t() const;
  PROTOBUF_NODISCARD ::Property::ScalarPropertyValue* release_t();
  ::Property::ScalarPropertyValue* mutable_t();
  void set_allocated_t(::Property::ScalarPropertyValue* t);
  private:
  const ::Property::ScalarPropertyValue& _internal_t() const;
  ::Property::ScalarPropertyValue* _internal_mutable_t();
  public:
  void unsafe_arena_set_allocated_t(
      ::Property::ScalarPropertyValue* t);
  ::Property::ScalarPropertyValue* unsafe_arena_release_t();

  // @@protoc_insertion_point(class_scope:Property.VectorPropertyQuadratic)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::Property::VectorPropertyValue* p_;
    ::Property::VectorPropertyValue* v_;
    ::Property::VectorPropertyValue* a_;
    ::Property::ScalarPropertyValue* t_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class VectorPropertyApproach final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.VectorPropertyApproach) */ {
 public:
  inline VectorPropertyApproach() : VectorPropertyApproach(nullptr) {}
  ~VectorPropertyApproach() override;
  explicit PROTOBUF_CONSTEXPR VectorPropertyApproach(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VectorPropertyApproach(const VectorPropertyApproach& from);
  VectorPropertyApproach(VectorPropertyApproach&& from) noexcept
    : VectorPropertyApproach() {
    *this = ::std::move(from);
  }

  inline VectorPropertyApproach& operator=(const VectorPropertyApproach& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorPropertyApproach& operator=(VectorPropertyApproach&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VectorPropertyApproach& default_instance() {
    return *internal_default_instance();
  }
  static inline const VectorPropertyApproach* internal_default_instance() {
    return reinterpret_cast<const VectorPropertyApproach*>(
               &_VectorPropertyApproach_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(VectorPropertyApproach& a, VectorPropertyApproach& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorPropertyApproach* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorPropertyApproach* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VectorPropertyApproach* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VectorPropertyApproach>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VectorPropertyApproach& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VectorPropertyApproach& from) {
    VectorPropertyApproach::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorPropertyApproach* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.VectorPropertyApproach";
  }
  protected:
  explicit VectorPropertyApproach(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTFieldNumber = 1,
    kToFieldNumber = 2,
    kTimeToHalfFieldNumber = 3,
    kStartFieldNumber = 4,
  };
  // .Property.ScalarPropertyValue t = 1;
  bool has_t() const;
  private:
  bool _internal_has_t() const;
  public:
  void clear_t();
  const ::Property::ScalarPropertyValue& t() const;
  PROTOBUF_NODISCARD ::Property::ScalarPropertyValue* release_t();
  ::Property::ScalarPropertyValue* mutable_t();
  void set_allocated_t(::Property::ScalarPropertyValue* t);
  private:
  const ::Property::ScalarPropertyValue& _internal_t() const;
  ::Property::ScalarPropertyValue* _internal_mutable_t();
  public:
  void unsafe_arena_set_allocated_t(
      ::Property::ScalarPropertyValue* t);
  ::Property::ScalarPropertyValue* unsafe_arena_release_t();

  // .Property.VectorPropertyValue to = 2;
  bool has_to() const;
  private:
  bool _internal_has_to() const;
  public:
  void clear_to();
  const ::Property::VectorPropertyValue& to() const;
  PROTOBUF_NODISCARD ::Property::VectorPropertyValue* release_to();
  ::Property::VectorPropertyValue* mutable_to();
  void set_allocated_to(::Property::VectorPropertyValue* to);
  private:
  const ::Property::VectorPropertyValue& _internal_to() const;
  ::Property::VectorPropertyValue* _internal_mutable_to();
  public:
  void unsafe_arena_set_allocated_to(
      ::Property::VectorPropertyValue* to);
  ::Property::VectorPropertyValue* unsafe_arena_release_to();

  // .Property.ScalarPropertyValue timeToHalf = 3;
  bool has_timetohalf() const;
  private:
  bool _internal_has_timetohalf() const;
  public:
  void clear_timetohalf();
  const ::Property::ScalarPropertyValue& timetohalf() const;
  PROTOBUF_NODISCARD ::Property::ScalarPropertyValue* release_timetohalf();
  ::Property::ScalarPropertyValue* mutable_timetohalf();
  void set_allocated_timetohalf(::Property::ScalarPropertyValue* timetohalf);
  private:
  const ::Property::ScalarPropertyValue& _internal_timetohalf() const;
  ::Property::ScalarPropertyValue* _internal_mutable_timetohalf();
  public:
  void unsafe_arena_set_allocated_timetohalf(
      ::Property::ScalarPropertyValue* timetohalf);
  ::Property::ScalarPropertyValue* unsafe_arena_release_timetohalf();

  // .Property.VectorPropertyValue start = 4;
  bool has_start() const;
  private:
  bool _internal_has_start() const;
  public:
  void clear_start();
  const ::Property::VectorPropertyValue& start() const;
  PROTOBUF_NODISCARD ::Property::VectorPropertyValue* release_start();
  ::Property::VectorPropertyValue* mutable_start();
  void set_allocated_start(::Property::VectorPropertyValue* start);
  private:
  const ::Property::VectorPropertyValue& _internal_start() const;
  ::Property::VectorPropertyValue* _internal_mutable_start();
  public:
  void unsafe_arena_set_allocated_start(
      ::Property::VectorPropertyValue* start);
  ::Property::VectorPropertyValue* unsafe_arena_release_start();

  // @@protoc_insertion_point(class_scope:Property.VectorPropertyApproach)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Property::ScalarPropertyValue* t_;
    ::Property::VectorPropertyValue* to_;
    ::Property::ScalarPropertyValue* timetohalf_;
    ::Property::VectorPropertyValue* start_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class VectorPropertyKeyframed_VectorKeyframe final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.VectorPropertyKeyframed.VectorKeyframe) */ {
 public:
  inline VectorPropertyKeyframed_VectorKeyframe() : VectorPropertyKeyframed_VectorKeyframe(nullptr) {}
  ~VectorPropertyKeyframed_VectorKeyframe() override;
  explicit PROTOBUF_CONSTEXPR VectorPropertyKeyframed_VectorKeyframe(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VectorPropertyKeyframed_VectorKeyframe(const VectorPropertyKeyframed_VectorKeyframe& from);
  VectorPropertyKeyframed_VectorKeyframe(VectorPropertyKeyframed_VectorKeyframe&& from) noexcept
    : VectorPropertyKeyframed_VectorKeyframe() {
    *this = ::std::move(from);
  }

  inline VectorPropertyKeyframed_VectorKeyframe& operator=(const VectorPropertyKeyframed_VectorKeyframe& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorPropertyKeyframed_VectorKeyframe& operator=(VectorPropertyKeyframed_VectorKeyframe&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VectorPropertyKeyframed_VectorKeyframe& default_instance() {
    return *internal_default_instance();
  }
  static inline const VectorPropertyKeyframed_VectorKeyframe* internal_default_instance() {
    return reinterpret_cast<const VectorPropertyKeyframed_VectorKeyframe*>(
               &_VectorPropertyKeyframed_VectorKeyframe_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(VectorPropertyKeyframed_VectorKeyframe& a, VectorPropertyKeyframed_VectorKeyframe& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorPropertyKeyframed_VectorKeyframe* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorPropertyKeyframed_VectorKeyframe* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VectorPropertyKeyframed_VectorKeyframe* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VectorPropertyKeyframed_VectorKeyframe>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VectorPropertyKeyframed_VectorKeyframe& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VectorPropertyKeyframed_VectorKeyframe& from) {
    VectorPropertyKeyframed_VectorKeyframe::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorPropertyKeyframed_VectorKeyframe* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.VectorPropertyKeyframed.VectorKeyframe";
  }
  protected:
  explicit VectorPropertyKeyframed_VectorKeyframe(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValFieldNumber = 2,
    kTangentInFieldNumber = 3,
    kTangentOutFieldNumber = 4,
    kTFieldNumber = 1,
  };
  // .Property.VectorPropertyValue val = 2;
  bool has_val() const;
  private:
  bool _internal_has_val() const;
  public:
  void clear_val();
  const ::Property::VectorPropertyValue& val() const;
  PROTOBUF_NODISCARD ::Property::VectorPropertyValue* release_val();
  ::Property::VectorPropertyValue* mutable_val();
  void set_allocated_val(::Property::VectorPropertyValue* val);
  private:
  const ::Property::VectorPropertyValue& _internal_val() const;
  ::Property::VectorPropertyValue* _internal_mutable_val();
  public:
  void unsafe_arena_set_allocated_val(
      ::Property::VectorPropertyValue* val);
  ::Property::VectorPropertyValue* unsafe_arena_release_val();

  // optional .Common.Float4 tangentIn = 3;
  bool has_tangentin() const;
  private:
  bool _internal_has_tangentin() const;
  public:
  void clear_tangentin();
  const ::Common::Float4& tangentin() const;
  PROTOBUF_NODISCARD ::Common::Float4* release_tangentin();
  ::Common::Float4* mutable_tangentin();
  void set_allocated_tangentin(::Common::Float4* tangentin);
  private:
  const ::Common::Float4& _internal_tangentin() const;
  ::Common::Float4* _internal_mutable_tangentin();
  public:
  void unsafe_arena_set_allocated_tangentin(
      ::Common::Float4* tangentin);
  ::Common::Float4* unsafe_arena_release_tangentin();

  // optional .Common.Float4 tangentOut = 4;
  bool has_tangentout() const;
  private:
  bool _internal_has_tangentout() const;
  public:
  void clear_tangentout();
  const ::Common::Float4& tangentout() const;
  PROTOBUF_NODISCARD ::Common::Float4* release_tangentout();
  ::Common::Float4* mutable_tangentout();
  void set_allocated_tangentout(::Common::Float4* tangentout);
  private:
  const ::Common::Float4& _internal_tangentout() const;
  ::Common::Float4* _internal_mutable_tangentout();
  public:
  void unsafe_arena_set_allocated_tangentout(
      ::Common::Float4* tangentout);
  ::Common::Float4* unsafe_arena_release_tangentout();

  // float t = 1;
  void clear_t();
  float t() const;
  void set_t(float value);
  private:
  float _internal_t() const;
  void _internal_set_t(float value);
  public:

  // @@protoc_insertion_point(class_scope:Property.VectorPropertyKeyframed.VectorKeyframe)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::Property::VectorPropertyValue* val_;
    ::Common::Float4* tangentin_;
    ::Common::Float4* tangentout_;
    float t_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class VectorPropertyKeyframed final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.VectorPropertyKeyframed) */ {
 public:
  inline VectorPropertyKeyframed() : VectorPropertyKeyframed(nullptr) {}
  ~VectorPropertyKeyframed() override;
  explicit PROTOBUF_CONSTEXPR VectorPropertyKeyframed(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VectorPropertyKeyframed(const VectorPropertyKeyframed& from);
  VectorPropertyKeyframed(VectorPropertyKeyframed&& from) noexcept
    : VectorPropertyKeyframed() {
    *this = ::std::move(from);
  }

  inline VectorPropertyKeyframed& operator=(const VectorPropertyKeyframed& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorPropertyKeyframed& operator=(VectorPropertyKeyframed&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VectorPropertyKeyframed& default_instance() {
    return *internal_default_instance();
  }
  static inline const VectorPropertyKeyframed* internal_default_instance() {
    return reinterpret_cast<const VectorPropertyKeyframed*>(
               &_VectorPropertyKeyframed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(VectorPropertyKeyframed& a, VectorPropertyKeyframed& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorPropertyKeyframed* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorPropertyKeyframed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VectorPropertyKeyframed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VectorPropertyKeyframed>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VectorPropertyKeyframed& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VectorPropertyKeyframed& from) {
    VectorPropertyKeyframed::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorPropertyKeyframed* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.VectorPropertyKeyframed";
  }
  protected:
  explicit VectorPropertyKeyframed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef VectorPropertyKeyframed_VectorKeyframe VectorKeyframe;

  typedef VectorPropertyKeyframed_VectorInterpolationMethod VectorInterpolationMethod;
  static constexpr VectorInterpolationMethod Cartesian =
    VectorPropertyKeyframed_VectorInterpolationMethod_Cartesian;
  static constexpr VectorInterpolationMethod Spherical =
    VectorPropertyKeyframed_VectorInterpolationMethod_Spherical;
  static constexpr VectorInterpolationMethod Quaternion =
    VectorPropertyKeyframed_VectorInterpolationMethod_Quaternion;
  static inline bool VectorInterpolationMethod_IsValid(int value) {
    return VectorPropertyKeyframed_VectorInterpolationMethod_IsValid(value);
  }
  static constexpr VectorInterpolationMethod VectorInterpolationMethod_MIN =
    VectorPropertyKeyframed_VectorInterpolationMethod_VectorInterpolationMethod_MIN;
  static constexpr VectorInterpolationMethod VectorInterpolationMethod_MAX =
    VectorPropertyKeyframed_VectorInterpolationMethod_VectorInterpolationMethod_MAX;
  static constexpr int VectorInterpolationMethod_ARRAYSIZE =
    VectorPropertyKeyframed_VectorInterpolationMethod_VectorInterpolationMethod_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  VectorInterpolationMethod_descriptor() {
    return VectorPropertyKeyframed_VectorInterpolationMethod_descriptor();
  }
  template<typename T>
  static inline const std::string& VectorInterpolationMethod_Name(T enum_t_value) {
    static_assert(::std::is_same<T, VectorInterpolationMethod>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function VectorInterpolationMethod_Name.");
    return VectorPropertyKeyframed_VectorInterpolationMethod_Name(enum_t_value);
  }
  static inline bool VectorInterpolationMethod_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      VectorInterpolationMethod* value) {
    return VectorPropertyKeyframed_VectorInterpolationMethod_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 10,
    kTSrcFieldNumber = 8,
    kLoopingFieldNumber = 11,
    kTangentGenFieldNumber = 12,
    kInterpolationMethodFieldNumber = 13,
  };
  // repeated .Property.VectorPropertyKeyframed.VectorKeyframe keys = 10;
  int keys_size() const;
  private:
  int _internal_keys_size() const;
  public:
  void clear_keys();
  ::Property::VectorPropertyKeyframed_VectorKeyframe* mutable_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Property::VectorPropertyKeyframed_VectorKeyframe >*
      mutable_keys();
  private:
  const ::Property::VectorPropertyKeyframed_VectorKeyframe& _internal_keys(int index) const;
  ::Property::VectorPropertyKeyframed_VectorKeyframe* _internal_add_keys();
  public:
  const ::Property::VectorPropertyKeyframed_VectorKeyframe& keys(int index) const;
  ::Property::VectorPropertyKeyframed_VectorKeyframe* add_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Property::VectorPropertyKeyframed_VectorKeyframe >&
      keys() const;

  // optional .Property.ScalarPropertyValue tSrc = 8;
  bool has_tsrc() const;
  private:
  bool _internal_has_tsrc() const;
  public:
  void clear_tsrc();
  const ::Property::ScalarPropertyValue& tsrc() const;
  PROTOBUF_NODISCARD ::Property::ScalarPropertyValue* release_tsrc();
  ::Property::ScalarPropertyValue* mutable_tsrc();
  void set_allocated_tsrc(::Property::ScalarPropertyValue* tsrc);
  private:
  const ::Property::ScalarPropertyValue& _internal_tsrc() const;
  ::Property::ScalarPropertyValue* _internal_mutable_tsrc();
  public:
  void unsafe_arena_set_allocated_tsrc(
      ::Property::ScalarPropertyValue* tsrc);
  ::Property::ScalarPropertyValue* unsafe_arena_release_tsrc();

  // .Property.KeyframeLoopingEnum looping = 11;
  void clear_looping();
  ::Property::KeyframeLoopingEnum looping() const;
  void set_looping(::Property::KeyframeLoopingEnum value);
  private:
  ::Property::KeyframeLoopingEnum _internal_looping() const;
  void _internal_set_looping(::Property::KeyframeLoopingEnum value);
  public:

  // .Property.TangentsAutocomputeMethodEnum tangentGen = 12;
  void clear_tangentgen();
  ::Property::TangentsAutocomputeMethodEnum tangentgen() const;
  void set_tangentgen(::Property::TangentsAutocomputeMethodEnum value);
  private:
  ::Property::TangentsAutocomputeMethodEnum _internal_tangentgen() const;
  void _internal_set_tangentgen(::Property::TangentsAutocomputeMethodEnum value);
  public:

  // .Property.VectorPropertyKeyframed.VectorInterpolationMethod interpolationMethod = 13;
  void clear_interpolationmethod();
  ::Property::VectorPropertyKeyframed_VectorInterpolationMethod interpolationmethod() const;
  void set_interpolationmethod(::Property::VectorPropertyKeyframed_VectorInterpolationMethod value);
  private:
  ::Property::VectorPropertyKeyframed_VectorInterpolationMethod _internal_interpolationmethod() const;
  void _internal_set_interpolationmethod(::Property::VectorPropertyKeyframed_VectorInterpolationMethod value);
  public:

  // @@protoc_insertion_point(class_scope:Property.VectorPropertyKeyframed)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Property::VectorPropertyKeyframed_VectorKeyframe > keys_;
    ::Property::ScalarPropertyValue* tsrc_;
    int looping_;
    int tangentgen_;
    int interpolationmethod_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class VectorPropertyDeclaration final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.VectorPropertyDeclaration) */ {
 public:
  inline VectorPropertyDeclaration() : VectorPropertyDeclaration(nullptr) {}
  ~VectorPropertyDeclaration() override;
  explicit PROTOBUF_CONSTEXPR VectorPropertyDeclaration(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VectorPropertyDeclaration(const VectorPropertyDeclaration& from);
  VectorPropertyDeclaration(VectorPropertyDeclaration&& from) noexcept
    : VectorPropertyDeclaration() {
    *this = ::std::move(from);
  }

  inline VectorPropertyDeclaration& operator=(const VectorPropertyDeclaration& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorPropertyDeclaration& operator=(VectorPropertyDeclaration&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VectorPropertyDeclaration& default_instance() {
    return *internal_default_instance();
  }
  static inline const VectorPropertyDeclaration* internal_default_instance() {
    return reinterpret_cast<const VectorPropertyDeclaration*>(
               &_VectorPropertyDeclaration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(VectorPropertyDeclaration& a, VectorPropertyDeclaration& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorPropertyDeclaration* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorPropertyDeclaration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VectorPropertyDeclaration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VectorPropertyDeclaration>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VectorPropertyDeclaration& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VectorPropertyDeclaration& from) {
    VectorPropertyDeclaration::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorPropertyDeclaration* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.VectorPropertyDeclaration";
  }
  protected:
  explicit VectorPropertyDeclaration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaFieldNumber = 1,
    kDefaultFieldNumber = 2,
  };
  // .Property.VectorPropertyMetadata meta = 1;
  bool has_meta() const;
  private:
  bool _internal_has_meta() const;
  public:
  void clear_meta();
  const ::Property::VectorPropertyMetadata& meta() const;
  PROTOBUF_NODISCARD ::Property::VectorPropertyMetadata* release_meta();
  ::Property::VectorPropertyMetadata* mutable_meta();
  void set_allocated_meta(::Property::VectorPropertyMetadata* meta);
  private:
  const ::Property::VectorPropertyMetadata& _internal_meta() const;
  ::Property::VectorPropertyMetadata* _internal_mutable_meta();
  public:
  void unsafe_arena_set_allocated_meta(
      ::Property::VectorPropertyMetadata* meta);
  ::Property::VectorPropertyMetadata* unsafe_arena_release_meta();

  // .Common.Float4 default = 2;
  bool has_default_() const;
  private:
  bool _internal_has_default_() const;
  public:
  void clear_default_();
  const ::Common::Float4& default_() const;
  PROTOBUF_NODISCARD ::Common::Float4* release_default_();
  ::Common::Float4* mutable_default_();
  void set_allocated_default_(::Common::Float4* default_);
  private:
  const ::Common::Float4& _internal_default_() const;
  ::Common::Float4* _internal_mutable_default_();
  public:
  void unsafe_arena_set_allocated_default_(
      ::Common::Float4* default_);
  ::Common::Float4* unsafe_arena_release_default_();

  // @@protoc_insertion_point(class_scope:Property.VectorPropertyDeclaration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Property::VectorPropertyMetadata* meta_;
    ::Common::Float4* default__;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class VectorEditingMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.VectorEditingMetadata) */ {
 public:
  inline VectorEditingMetadata() : VectorEditingMetadata(nullptr) {}
  ~VectorEditingMetadata() override;
  explicit PROTOBUF_CONSTEXPR VectorEditingMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VectorEditingMetadata(const VectorEditingMetadata& from);
  VectorEditingMetadata(VectorEditingMetadata&& from) noexcept
    : VectorEditingMetadata() {
    *this = ::std::move(from);
  }

  inline VectorEditingMetadata& operator=(const VectorEditingMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorEditingMetadata& operator=(VectorEditingMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VectorEditingMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const VectorEditingMetadata* internal_default_instance() {
    return reinterpret_cast<const VectorEditingMetadata*>(
               &_VectorEditingMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(VectorEditingMetadata& a, VectorEditingMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorEditingMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorEditingMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VectorEditingMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VectorEditingMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VectorEditingMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VectorEditingMetadata& from) {
    VectorEditingMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorEditingMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.VectorEditingMetadata";
  }
  protected:
  explicit VectorEditingMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef VectorEditingMetadata_VectorInterpretationEnum VectorInterpretationEnum;
  static constexpr VectorInterpretationEnum Point =
    VectorEditingMetadata_VectorInterpretationEnum_Point;
  static constexpr VectorInterpretationEnum Direction =
    VectorEditingMetadata_VectorInterpretationEnum_Direction;
  static constexpr VectorInterpretationEnum Eulers =
    VectorEditingMetadata_VectorInterpretationEnum_Eulers;
  static constexpr VectorInterpretationEnum Scale =
    VectorEditingMetadata_VectorInterpretationEnum_Scale;
  static constexpr VectorInterpretationEnum Quaternion =
    VectorEditingMetadata_VectorInterpretationEnum_Quaternion;
  static constexpr VectorInterpretationEnum Point2D =
    VectorEditingMetadata_VectorInterpretationEnum_Point2D;
  static constexpr VectorInterpretationEnum Direction2D =
    VectorEditingMetadata_VectorInterpretationEnum_Direction2D;
  static constexpr VectorInterpretationEnum Scale2D =
    VectorEditingMetadata_VectorInterpretationEnum_Scale2D;
  static constexpr VectorInterpretationEnum OffsetScale =
    VectorEditingMetadata_VectorInterpretationEnum_OffsetScale;
  static inline bool VectorInterpretationEnum_IsValid(int value) {
    return VectorEditingMetadata_VectorInterpretationEnum_IsValid(value);
  }
  static constexpr VectorInterpretationEnum VectorInterpretationEnum_MIN =
    VectorEditingMetadata_VectorInterpretationEnum_VectorInterpretationEnum_MIN;
  static constexpr VectorInterpretationEnum VectorInterpretationEnum_MAX =
    VectorEditingMetadata_VectorInterpretationEnum_VectorInterpretationEnum_MAX;
  static constexpr int VectorInterpretationEnum_ARRAYSIZE =
    VectorEditingMetadata_VectorInterpretationEnum_VectorInterpretationEnum_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  VectorInterpretationEnum_descriptor() {
    return VectorEditingMetadata_VectorInterpretationEnum_descriptor();
  }
  template<typename T>
  static inline const std::string& VectorInterpretationEnum_Name(T enum_t_value) {
    static_assert(::std::is_same<T, VectorInterpretationEnum>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function VectorInterpretationEnum_Name.");
    return VectorEditingMetadata_VectorInterpretationEnum_Name(enum_t_value);
  }
  static inline bool VectorInterpretationEnum_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      VectorInterpretationEnum* value) {
    return VectorEditingMetadata_VectorInterpretationEnum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUsageFieldNumber = 1,
  };
  // .Property.VectorEditingMetadata.VectorInterpretationEnum usage = 1;
  void clear_usage();
  ::Property::VectorEditingMetadata_VectorInterpretationEnum usage() const;
  void set_usage(::Property::VectorEditingMetadata_VectorInterpretationEnum value);
  private:
  ::Property::VectorEditingMetadata_VectorInterpretationEnum _internal_usage() const;
  void _internal_set_usage(::Property::VectorEditingMetadata_VectorInterpretationEnum value);
  public:

  // @@protoc_insertion_point(class_scope:Property.VectorEditingMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int usage_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class VectorGeneratorMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.VectorGeneratorMetadata) */ {
 public:
  inline VectorGeneratorMetadata() : VectorGeneratorMetadata(nullptr) {}
  ~VectorGeneratorMetadata() override;
  explicit PROTOBUF_CONSTEXPR VectorGeneratorMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VectorGeneratorMetadata(const VectorGeneratorMetadata& from);
  VectorGeneratorMetadata(VectorGeneratorMetadata&& from) noexcept
    : VectorGeneratorMetadata() {
    *this = ::std::move(from);
  }

  inline VectorGeneratorMetadata& operator=(const VectorGeneratorMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorGeneratorMetadata& operator=(VectorGeneratorMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VectorGeneratorMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const VectorGeneratorMetadata* internal_default_instance() {
    return reinterpret_cast<const VectorGeneratorMetadata*>(
               &_VectorGeneratorMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(VectorGeneratorMetadata& a, VectorGeneratorMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorGeneratorMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorGeneratorMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VectorGeneratorMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VectorGeneratorMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VectorGeneratorMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VectorGeneratorMetadata& from) {
    VectorGeneratorMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorGeneratorMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.VectorGeneratorMetadata";
  }
  protected:
  explicit VectorGeneratorMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
    kEditFieldNumber = 2,
  };
  // .Property.GeneratorMetadata base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::Property::GeneratorMetadata& base() const;
  PROTOBUF_NODISCARD ::Property::GeneratorMetadata* release_base();
  ::Property::GeneratorMetadata* mutable_base();
  void set_allocated_base(::Property::GeneratorMetadata* base);
  private:
  const ::Property::GeneratorMetadata& _internal_base() const;
  ::Property::GeneratorMetadata* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::Property::GeneratorMetadata* base);
  ::Property::GeneratorMetadata* unsafe_arena_release_base();

  // optional .Property.VectorEditingMetadata edit = 2;
  bool has_edit() const;
  private:
  bool _internal_has_edit() const;
  public:
  void clear_edit();
  const ::Property::VectorEditingMetadata& edit() const;
  PROTOBUF_NODISCARD ::Property::VectorEditingMetadata* release_edit();
  ::Property::VectorEditingMetadata* mutable_edit();
  void set_allocated_edit(::Property::VectorEditingMetadata* edit);
  private:
  const ::Property::VectorEditingMetadata& _internal_edit() const;
  ::Property::VectorEditingMetadata* _internal_mutable_edit();
  public:
  void unsafe_arena_set_allocated_edit(
      ::Property::VectorEditingMetadata* edit);
  ::Property::VectorEditingMetadata* unsafe_arena_release_edit();

  // @@protoc_insertion_point(class_scope:Property.VectorGeneratorMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::Property::GeneratorMetadata* base_;
    ::Property::VectorEditingMetadata* edit_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class VectorPropertyMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.VectorPropertyMetadata) */ {
 public:
  inline VectorPropertyMetadata() : VectorPropertyMetadata(nullptr) {}
  ~VectorPropertyMetadata() override;
  explicit PROTOBUF_CONSTEXPR VectorPropertyMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VectorPropertyMetadata(const VectorPropertyMetadata& from);
  VectorPropertyMetadata(VectorPropertyMetadata&& from) noexcept
    : VectorPropertyMetadata() {
    *this = ::std::move(from);
  }

  inline VectorPropertyMetadata& operator=(const VectorPropertyMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorPropertyMetadata& operator=(VectorPropertyMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VectorPropertyMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const VectorPropertyMetadata* internal_default_instance() {
    return reinterpret_cast<const VectorPropertyMetadata*>(
               &_VectorPropertyMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(VectorPropertyMetadata& a, VectorPropertyMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorPropertyMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorPropertyMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VectorPropertyMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VectorPropertyMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VectorPropertyMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VectorPropertyMetadata& from) {
    VectorPropertyMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorPropertyMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.VectorPropertyMetadata";
  }
  protected:
  explicit VectorPropertyMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
    kEditFieldNumber = 2,
  };
  // .Property.PropertyMetadata base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::Property::PropertyMetadata& base() const;
  PROTOBUF_NODISCARD ::Property::PropertyMetadata* release_base();
  ::Property::PropertyMetadata* mutable_base();
  void set_allocated_base(::Property::PropertyMetadata* base);
  private:
  const ::Property::PropertyMetadata& _internal_base() const;
  ::Property::PropertyMetadata* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::Property::PropertyMetadata* base);
  ::Property::PropertyMetadata* unsafe_arena_release_base();

  // optional .Property.VectorEditingMetadata edit = 2;
  bool has_edit() const;
  private:
  bool _internal_has_edit() const;
  public:
  void clear_edit();
  const ::Property::VectorEditingMetadata& edit() const;
  PROTOBUF_NODISCARD ::Property::VectorEditingMetadata* release_edit();
  ::Property::VectorEditingMetadata* mutable_edit();
  void set_allocated_edit(::Property::VectorEditingMetadata* edit);
  private:
  const ::Property::VectorEditingMetadata& _internal_edit() const;
  ::Property::VectorEditingMetadata* _internal_mutable_edit();
  public:
  void unsafe_arena_set_allocated_edit(
      ::Property::VectorEditingMetadata* edit);
  ::Property::VectorEditingMetadata* unsafe_arena_release_edit();

  // @@protoc_insertion_point(class_scope:Property.VectorPropertyMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::Property::PropertyMetadata* base_;
    ::Property::VectorEditingMetadata* edit_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class ColorPropertyAssignment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.ColorPropertyAssignment) */ {
 public:
  inline ColorPropertyAssignment() : ColorPropertyAssignment(nullptr) {}
  ~ColorPropertyAssignment() override;
  explicit PROTOBUF_CONSTEXPR ColorPropertyAssignment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ColorPropertyAssignment(const ColorPropertyAssignment& from);
  ColorPropertyAssignment(ColorPropertyAssignment&& from) noexcept
    : ColorPropertyAssignment() {
    *this = ::std::move(from);
  }

  inline ColorPropertyAssignment& operator=(const ColorPropertyAssignment& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColorPropertyAssignment& operator=(ColorPropertyAssignment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ColorPropertyAssignment& default_instance() {
    return *internal_default_instance();
  }
  static inline const ColorPropertyAssignment* internal_default_instance() {
    return reinterpret_cast<const ColorPropertyAssignment*>(
               &_ColorPropertyAssignment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(ColorPropertyAssignment& a, ColorPropertyAssignment& b) {
    a.Swap(&b);
  }
  inline void Swap(ColorPropertyAssignment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ColorPropertyAssignment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ColorPropertyAssignment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ColorPropertyAssignment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ColorPropertyAssignment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ColorPropertyAssignment& from) {
    ColorPropertyAssignment::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColorPropertyAssignment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.ColorPropertyAssignment";
  }
  protected:
  explicit ColorPropertyAssignment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ColorPropertyAssignment_ColorPropertyMethod ColorPropertyMethod;
  static constexpr ColorPropertyMethod Overriding =
    ColorPropertyAssignment_ColorPropertyMethod_Overriding;
  static constexpr ColorPropertyMethod Additive =
    ColorPropertyAssignment_ColorPropertyMethod_Additive;
  static inline bool ColorPropertyMethod_IsValid(int value) {
    return ColorPropertyAssignment_ColorPropertyMethod_IsValid(value);
  }
  static constexpr ColorPropertyMethod ColorPropertyMethod_MIN =
    ColorPropertyAssignment_ColorPropertyMethod_ColorPropertyMethod_MIN;
  static constexpr ColorPropertyMethod ColorPropertyMethod_MAX =
    ColorPropertyAssignment_ColorPropertyMethod_ColorPropertyMethod_MAX;
  static constexpr int ColorPropertyMethod_ARRAYSIZE =
    ColorPropertyAssignment_ColorPropertyMethod_ColorPropertyMethod_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ColorPropertyMethod_descriptor() {
    return ColorPropertyAssignment_ColorPropertyMethod_descriptor();
  }
  template<typename T>
  static inline const std::string& ColorPropertyMethod_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ColorPropertyMethod>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ColorPropertyMethod_Name.");
    return ColorPropertyAssignment_ColorPropertyMethod_Name(enum_t_value);
  }
  static inline bool ColorPropertyMethod_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ColorPropertyMethod* value) {
    return ColorPropertyAssignment_ColorPropertyMethod_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAssignmentIdFieldNumber = 4,
    kValueFieldNumber = 3,
    kMethodFieldNumber = 1,
    kPriorityFieldNumber = 2,
  };
  // string assignmentId = 4;
  void clear_assignmentid();
  const std::string& assignmentid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_assignmentid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_assignmentid();
  PROTOBUF_NODISCARD std::string* release_assignmentid();
  void set_allocated_assignmentid(std::string* assignmentid);
  private:
  const std::string& _internal_assignmentid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_assignmentid(const std::string& value);
  std::string* _internal_mutable_assignmentid();
  public:

  // .Property.ColorPropertyValue value = 3;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::Property::ColorPropertyValue& value() const;
  PROTOBUF_NODISCARD ::Property::ColorPropertyValue* release_value();
  ::Property::ColorPropertyValue* mutable_value();
  void set_allocated_value(::Property::ColorPropertyValue* value);
  private:
  const ::Property::ColorPropertyValue& _internal_value() const;
  ::Property::ColorPropertyValue* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::Property::ColorPropertyValue* value);
  ::Property::ColorPropertyValue* unsafe_arena_release_value();

  // optional .Property.ColorPropertyAssignment.ColorPropertyMethod method = 1;
  bool has_method() const;
  private:
  bool _internal_has_method() const;
  public:
  void clear_method();
  ::Property::ColorPropertyAssignment_ColorPropertyMethod method() const;
  void set_method(::Property::ColorPropertyAssignment_ColorPropertyMethod value);
  private:
  ::Property::ColorPropertyAssignment_ColorPropertyMethod _internal_method() const;
  void _internal_set_method(::Property::ColorPropertyAssignment_ColorPropertyMethod value);
  public:

  // optional int32 priority = 2;
  bool has_priority() const;
  private:
  bool _internal_has_priority() const;
  public:
  void clear_priority();
  int32_t priority() const;
  void set_priority(int32_t value);
  private:
  int32_t _internal_priority() const;
  void _internal_set_priority(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Property.ColorPropertyAssignment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr assignmentid_;
    ::Property::ColorPropertyValue* value_;
    int method_;
    int32_t priority_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class ColorPropertyValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.ColorPropertyValue) */ {
 public:
  inline ColorPropertyValue() : ColorPropertyValue(nullptr) {}
  ~ColorPropertyValue() override;
  explicit PROTOBUF_CONSTEXPR ColorPropertyValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ColorPropertyValue(const ColorPropertyValue& from);
  ColorPropertyValue(ColorPropertyValue&& from) noexcept
    : ColorPropertyValue() {
    *this = ::std::move(from);
  }

  inline ColorPropertyValue& operator=(const ColorPropertyValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColorPropertyValue& operator=(ColorPropertyValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ColorPropertyValue& default_instance() {
    return *internal_default_instance();
  }
  enum ValueTypeCase {
    kConstant = 1,
    kRef = 2,
    kByChannel = 4,
    kKeyframes = 5,
    kExpr = 6,
    kUseDefault = 7,
    kInterp = 9,
    kCustom = 10,
    kApproach = 12,
    VALUETYPE_NOT_SET = 0,
  };

  static inline const ColorPropertyValue* internal_default_instance() {
    return reinterpret_cast<const ColorPropertyValue*>(
               &_ColorPropertyValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(ColorPropertyValue& a, ColorPropertyValue& b) {
    a.Swap(&b);
  }
  inline void Swap(ColorPropertyValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ColorPropertyValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ColorPropertyValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ColorPropertyValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ColorPropertyValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ColorPropertyValue& from) {
    ColorPropertyValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColorPropertyValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.ColorPropertyValue";
  }
  protected:
  explicit ColorPropertyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConstantFieldNumber = 1,
    kRefFieldNumber = 2,
    kByChannelFieldNumber = 4,
    kKeyframesFieldNumber = 5,
    kExprFieldNumber = 6,
    kUseDefaultFieldNumber = 7,
    kInterpFieldNumber = 9,
    kCustomFieldNumber = 10,
    kApproachFieldNumber = 12,
  };
  // .Common.Color4 constant = 1;
  bool has_constant() const;
  private:
  bool _internal_has_constant() const;
  public:
  void clear_constant();
  const ::Common::Color4& constant() const;
  PROTOBUF_NODISCARD ::Common::Color4* release_constant();
  ::Common::Color4* mutable_constant();
  void set_allocated_constant(::Common::Color4* constant);
  private:
  const ::Common::Color4& _internal_constant() const;
  ::Common::Color4* _internal_mutable_constant();
  public:
  void unsafe_arena_set_allocated_constant(
      ::Common::Color4* constant);
  ::Common::Color4* unsafe_arena_release_constant();

  // .Property.PropertyIdentifier ref = 2;
  bool has_ref() const;
  private:
  bool _internal_has_ref() const;
  public:
  void clear_ref();
  const ::Property::PropertyIdentifier& ref() const;
  PROTOBUF_NODISCARD ::Property::PropertyIdentifier* release_ref();
  ::Property::PropertyIdentifier* mutable_ref();
  void set_allocated_ref(::Property::PropertyIdentifier* ref);
  private:
  const ::Property::PropertyIdentifier& _internal_ref() const;
  ::Property::PropertyIdentifier* _internal_mutable_ref();
  public:
  void unsafe_arena_set_allocated_ref(
      ::Property::PropertyIdentifier* ref);
  ::Property::PropertyIdentifier* unsafe_arena_release_ref();

  // .Property.ColorPerChannel byChannel = 4;
  bool has_bychannel() const;
  private:
  bool _internal_has_bychannel() const;
  public:
  void clear_bychannel();
  const ::Property::ColorPerChannel& bychannel() const;
  PROTOBUF_NODISCARD ::Property::ColorPerChannel* release_bychannel();
  ::Property::ColorPerChannel* mutable_bychannel();
  void set_allocated_bychannel(::Property::ColorPerChannel* bychannel);
  private:
  const ::Property::ColorPerChannel& _internal_bychannel() const;
  ::Property::ColorPerChannel* _internal_mutable_bychannel();
  public:
  void unsafe_arena_set_allocated_bychannel(
      ::Property::ColorPerChannel* bychannel);
  ::Property::ColorPerChannel* unsafe_arena_release_bychannel();

  // .Property.ColorPropertyKeyframed keyframes = 5;
  bool has_keyframes() const;
  private:
  bool _internal_has_keyframes() const;
  public:
  void clear_keyframes();
  const ::Property::ColorPropertyKeyframed& keyframes() const;
  PROTOBUF_NODISCARD ::Property::ColorPropertyKeyframed* release_keyframes();
  ::Property::ColorPropertyKeyframed* mutable_keyframes();
  void set_allocated_keyframes(::Property::ColorPropertyKeyframed* keyframes);
  private:
  const ::Property::ColorPropertyKeyframed& _internal_keyframes() const;
  ::Property::ColorPropertyKeyframed* _internal_mutable_keyframes();
  public:
  void unsafe_arena_set_allocated_keyframes(
      ::Property::ColorPropertyKeyframed* keyframes);
  ::Property::ColorPropertyKeyframed* unsafe_arena_release_keyframes();

  // string expr = 6;
  bool has_expr() const;
  private:
  bool _internal_has_expr() const;
  public:
  void clear_expr();
  const std::string& expr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_expr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_expr();
  PROTOBUF_NODISCARD std::string* release_expr();
  void set_allocated_expr(std::string* expr);
  private:
  const std::string& _internal_expr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_expr(const std::string& value);
  std::string* _internal_mutable_expr();
  public:

  // bool useDefault = 7;
  bool has_usedefault() const;
  private:
  bool _internal_has_usedefault() const;
  public:
  void clear_usedefault();
  bool usedefault() const;
  void set_usedefault(bool value);
  private:
  bool _internal_usedefault() const;
  void _internal_set_usedefault(bool value);
  public:

  // .Property.ColorPropertyInterpolator interp = 9;
  bool has_interp() const;
  private:
  bool _internal_has_interp() const;
  public:
  void clear_interp();
  const ::Property::ColorPropertyInterpolator& interp() const;
  PROTOBUF_NODISCARD ::Property::ColorPropertyInterpolator* release_interp();
  ::Property::ColorPropertyInterpolator* mutable_interp();
  void set_allocated_interp(::Property::ColorPropertyInterpolator* interp);
  private:
  const ::Property::ColorPropertyInterpolator& _internal_interp() const;
  ::Property::ColorPropertyInterpolator* _internal_mutable_interp();
  public:
  void unsafe_arena_set_allocated_interp(
      ::Property::ColorPropertyInterpolator* interp);
  ::Property::ColorPropertyInterpolator* unsafe_arena_release_interp();

  // .Property.CustomGeneratorValue custom = 10;
  bool has_custom() const;
  private:
  bool _internal_has_custom() const;
  public:
  void clear_custom();
  const ::Property::CustomGeneratorValue& custom() const;
  PROTOBUF_NODISCARD ::Property::CustomGeneratorValue* release_custom();
  ::Property::CustomGeneratorValue* mutable_custom();
  void set_allocated_custom(::Property::CustomGeneratorValue* custom);
  private:
  const ::Property::CustomGeneratorValue& _internal_custom() const;
  ::Property::CustomGeneratorValue* _internal_mutable_custom();
  public:
  void unsafe_arena_set_allocated_custom(
      ::Property::CustomGeneratorValue* custom);
  ::Property::CustomGeneratorValue* unsafe_arena_release_custom();

  // .Property.ColorPropertyApproach approach = 12;
  bool has_approach() const;
  private:
  bool _internal_has_approach() const;
  public:
  void clear_approach();
  const ::Property::ColorPropertyApproach& approach() const;
  PROTOBUF_NODISCARD ::Property::ColorPropertyApproach* release_approach();
  ::Property::ColorPropertyApproach* mutable_approach();
  void set_allocated_approach(::Property::ColorPropertyApproach* approach);
  private:
  const ::Property::ColorPropertyApproach& _internal_approach() const;
  ::Property::ColorPropertyApproach* _internal_mutable_approach();
  public:
  void unsafe_arena_set_allocated_approach(
      ::Property::ColorPropertyApproach* approach);
  ::Property::ColorPropertyApproach* unsafe_arena_release_approach();

  void clear_ValueType();
  ValueTypeCase ValueType_case() const;
  // @@protoc_insertion_point(class_scope:Property.ColorPropertyValue)
 private:
  class _Internal;
  void set_has_constant();
  void set_has_ref();
  void set_has_bychannel();
  void set_has_keyframes();
  void set_has_expr();
  void set_has_usedefault();
  void set_has_interp();
  void set_has_custom();
  void set_has_approach();

  inline bool has_ValueType() const;
  inline void clear_has_ValueType();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union ValueTypeUnion {
      constexpr ValueTypeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::Common::Color4* constant_;
      ::Property::PropertyIdentifier* ref_;
      ::Property::ColorPerChannel* bychannel_;
      ::Property::ColorPropertyKeyframed* keyframes_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr expr_;
      bool usedefault_;
      ::Property::ColorPropertyInterpolator* interp_;
      ::Property::CustomGeneratorValue* custom_;
      ::Property::ColorPropertyApproach* approach_;
    } ValueType_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class ColorPropertyInterpolator final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.ColorPropertyInterpolator) */ {
 public:
  inline ColorPropertyInterpolator() : ColorPropertyInterpolator(nullptr) {}
  ~ColorPropertyInterpolator() override;
  explicit PROTOBUF_CONSTEXPR ColorPropertyInterpolator(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ColorPropertyInterpolator(const ColorPropertyInterpolator& from);
  ColorPropertyInterpolator(ColorPropertyInterpolator&& from) noexcept
    : ColorPropertyInterpolator() {
    *this = ::std::move(from);
  }

  inline ColorPropertyInterpolator& operator=(const ColorPropertyInterpolator& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColorPropertyInterpolator& operator=(ColorPropertyInterpolator&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ColorPropertyInterpolator& default_instance() {
    return *internal_default_instance();
  }
  static inline const ColorPropertyInterpolator* internal_default_instance() {
    return reinterpret_cast<const ColorPropertyInterpolator*>(
               &_ColorPropertyInterpolator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(ColorPropertyInterpolator& a, ColorPropertyInterpolator& b) {
    a.Swap(&b);
  }
  inline void Swap(ColorPropertyInterpolator* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ColorPropertyInterpolator* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ColorPropertyInterpolator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ColorPropertyInterpolator>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ColorPropertyInterpolator& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ColorPropertyInterpolator& from) {
    ColorPropertyInterpolator::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColorPropertyInterpolator* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.ColorPropertyInterpolator";
  }
  protected:
  explicit ColorPropertyInterpolator(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kToFieldNumber = 2,
    kByFieldNumber = 3,
    kTFieldNumber = 4,
  };
  // .Property.ColorPropertyValue from = 1;
  bool has_from() const;
  private:
  bool _internal_has_from() const;
  public:
  void clear_from();
  const ::Property::ColorPropertyValue& from() const;
  PROTOBUF_NODISCARD ::Property::ColorPropertyValue* release_from();
  ::Property::ColorPropertyValue* mutable_from();
  void set_allocated_from(::Property::ColorPropertyValue* from);
  private:
  const ::Property::ColorPropertyValue& _internal_from() const;
  ::Property::ColorPropertyValue* _internal_mutable_from();
  public:
  void unsafe_arena_set_allocated_from(
      ::Property::ColorPropertyValue* from);
  ::Property::ColorPropertyValue* unsafe_arena_release_from();

  // .Property.ColorPropertyValue to = 2;
  bool has_to() const;
  private:
  bool _internal_has_to() const;
  public:
  void clear_to();
  const ::Property::ColorPropertyValue& to() const;
  PROTOBUF_NODISCARD ::Property::ColorPropertyValue* release_to();
  ::Property::ColorPropertyValue* mutable_to();
  void set_allocated_to(::Property::ColorPropertyValue* to);
  private:
  const ::Property::ColorPropertyValue& _internal_to() const;
  ::Property::ColorPropertyValue* _internal_mutable_to();
  public:
  void unsafe_arena_set_allocated_to(
      ::Property::ColorPropertyValue* to);
  ::Property::ColorPropertyValue* unsafe_arena_release_to();

  // .Property.Interpolation by = 3;
  bool has_by() const;
  private:
  bool _internal_has_by() const;
  public:
  void clear_by();
  const ::Property::Interpolation& by() const;
  PROTOBUF_NODISCARD ::Property::Interpolation* release_by();
  ::Property::Interpolation* mutable_by();
  void set_allocated_by(::Property::Interpolation* by);
  private:
  const ::Property::Interpolation& _internal_by() const;
  ::Property::Interpolation* _internal_mutable_by();
  public:
  void unsafe_arena_set_allocated_by(
      ::Property::Interpolation* by);
  ::Property::Interpolation* unsafe_arena_release_by();

  // .Property.ScalarPropertyValue t = 4;
  bool has_t() const;
  private:
  bool _internal_has_t() const;
  public:
  void clear_t();
  const ::Property::ScalarPropertyValue& t() const;
  PROTOBUF_NODISCARD ::Property::ScalarPropertyValue* release_t();
  ::Property::ScalarPropertyValue* mutable_t();
  void set_allocated_t(::Property::ScalarPropertyValue* t);
  private:
  const ::Property::ScalarPropertyValue& _internal_t() const;
  ::Property::ScalarPropertyValue* _internal_mutable_t();
  public:
  void unsafe_arena_set_allocated_t(
      ::Property::ScalarPropertyValue* t);
  ::Property::ScalarPropertyValue* unsafe_arena_release_t();

  // @@protoc_insertion_point(class_scope:Property.ColorPropertyInterpolator)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Property::ColorPropertyValue* from_;
    ::Property::ColorPropertyValue* to_;
    ::Property::Interpolation* by_;
    ::Property::ScalarPropertyValue* t_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class ColorPerChannel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.ColorPerChannel) */ {
 public:
  inline ColorPerChannel() : ColorPerChannel(nullptr) {}
  ~ColorPerChannel() override;
  explicit PROTOBUF_CONSTEXPR ColorPerChannel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ColorPerChannel(const ColorPerChannel& from);
  ColorPerChannel(ColorPerChannel&& from) noexcept
    : ColorPerChannel() {
    *this = ::std::move(from);
  }

  inline ColorPerChannel& operator=(const ColorPerChannel& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColorPerChannel& operator=(ColorPerChannel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ColorPerChannel& default_instance() {
    return *internal_default_instance();
  }
  static inline const ColorPerChannel* internal_default_instance() {
    return reinterpret_cast<const ColorPerChannel*>(
               &_ColorPerChannel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(ColorPerChannel& a, ColorPerChannel& b) {
    a.Swap(&b);
  }
  inline void Swap(ColorPerChannel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ColorPerChannel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ColorPerChannel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ColorPerChannel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ColorPerChannel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ColorPerChannel& from) {
    ColorPerChannel::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColorPerChannel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.ColorPerChannel";
  }
  protected:
  explicit ColorPerChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRFieldNumber = 1,
    kGFieldNumber = 2,
    kBFieldNumber = 3,
    kAFieldNumber = 4,
  };
  // .Property.ScalarPropertyValue r = 1;
  bool has_r() const;
  private:
  bool _internal_has_r() const;
  public:
  void clear_r();
  const ::Property::ScalarPropertyValue& r() const;
  PROTOBUF_NODISCARD ::Property::ScalarPropertyValue* release_r();
  ::Property::ScalarPropertyValue* mutable_r();
  void set_allocated_r(::Property::ScalarPropertyValue* r);
  private:
  const ::Property::ScalarPropertyValue& _internal_r() const;
  ::Property::ScalarPropertyValue* _internal_mutable_r();
  public:
  void unsafe_arena_set_allocated_r(
      ::Property::ScalarPropertyValue* r);
  ::Property::ScalarPropertyValue* unsafe_arena_release_r();

  // .Property.ScalarPropertyValue g = 2;
  bool has_g() const;
  private:
  bool _internal_has_g() const;
  public:
  void clear_g();
  const ::Property::ScalarPropertyValue& g() const;
  PROTOBUF_NODISCARD ::Property::ScalarPropertyValue* release_g();
  ::Property::ScalarPropertyValue* mutable_g();
  void set_allocated_g(::Property::ScalarPropertyValue* g);
  private:
  const ::Property::ScalarPropertyValue& _internal_g() const;
  ::Property::ScalarPropertyValue* _internal_mutable_g();
  public:
  void unsafe_arena_set_allocated_g(
      ::Property::ScalarPropertyValue* g);
  ::Property::ScalarPropertyValue* unsafe_arena_release_g();

  // .Property.ScalarPropertyValue b = 3;
  bool has_b() const;
  private:
  bool _internal_has_b() const;
  public:
  void clear_b();
  const ::Property::ScalarPropertyValue& b() const;
  PROTOBUF_NODISCARD ::Property::ScalarPropertyValue* release_b();
  ::Property::ScalarPropertyValue* mutable_b();
  void set_allocated_b(::Property::ScalarPropertyValue* b);
  private:
  const ::Property::ScalarPropertyValue& _internal_b() const;
  ::Property::ScalarPropertyValue* _internal_mutable_b();
  public:
  void unsafe_arena_set_allocated_b(
      ::Property::ScalarPropertyValue* b);
  ::Property::ScalarPropertyValue* unsafe_arena_release_b();

  // .Property.ScalarPropertyValue a = 4;
  bool has_a() const;
  private:
  bool _internal_has_a() const;
  public:
  void clear_a();
  const ::Property::ScalarPropertyValue& a() const;
  PROTOBUF_NODISCARD ::Property::ScalarPropertyValue* release_a();
  ::Property::ScalarPropertyValue* mutable_a();
  void set_allocated_a(::Property::ScalarPropertyValue* a);
  private:
  const ::Property::ScalarPropertyValue& _internal_a() const;
  ::Property::ScalarPropertyValue* _internal_mutable_a();
  public:
  void unsafe_arena_set_allocated_a(
      ::Property::ScalarPropertyValue* a);
  ::Property::ScalarPropertyValue* unsafe_arena_release_a();

  // @@protoc_insertion_point(class_scope:Property.ColorPerChannel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Property::ScalarPropertyValue* r_;
    ::Property::ScalarPropertyValue* g_;
    ::Property::ScalarPropertyValue* b_;
    ::Property::ScalarPropertyValue* a_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class ColorPropertyKeyframed_ColorKeyframe final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.ColorPropertyKeyframed.ColorKeyframe) */ {
 public:
  inline ColorPropertyKeyframed_ColorKeyframe() : ColorPropertyKeyframed_ColorKeyframe(nullptr) {}
  ~ColorPropertyKeyframed_ColorKeyframe() override;
  explicit PROTOBUF_CONSTEXPR ColorPropertyKeyframed_ColorKeyframe(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ColorPropertyKeyframed_ColorKeyframe(const ColorPropertyKeyframed_ColorKeyframe& from);
  ColorPropertyKeyframed_ColorKeyframe(ColorPropertyKeyframed_ColorKeyframe&& from) noexcept
    : ColorPropertyKeyframed_ColorKeyframe() {
    *this = ::std::move(from);
  }

  inline ColorPropertyKeyframed_ColorKeyframe& operator=(const ColorPropertyKeyframed_ColorKeyframe& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColorPropertyKeyframed_ColorKeyframe& operator=(ColorPropertyKeyframed_ColorKeyframe&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ColorPropertyKeyframed_ColorKeyframe& default_instance() {
    return *internal_default_instance();
  }
  static inline const ColorPropertyKeyframed_ColorKeyframe* internal_default_instance() {
    return reinterpret_cast<const ColorPropertyKeyframed_ColorKeyframe*>(
               &_ColorPropertyKeyframed_ColorKeyframe_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(ColorPropertyKeyframed_ColorKeyframe& a, ColorPropertyKeyframed_ColorKeyframe& b) {
    a.Swap(&b);
  }
  inline void Swap(ColorPropertyKeyframed_ColorKeyframe* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ColorPropertyKeyframed_ColorKeyframe* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ColorPropertyKeyframed_ColorKeyframe* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ColorPropertyKeyframed_ColorKeyframe>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ColorPropertyKeyframed_ColorKeyframe& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ColorPropertyKeyframed_ColorKeyframe& from) {
    ColorPropertyKeyframed_ColorKeyframe::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColorPropertyKeyframed_ColorKeyframe* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.ColorPropertyKeyframed.ColorKeyframe";
  }
  protected:
  explicit ColorPropertyKeyframed_ColorKeyframe(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValFieldNumber = 2,
    kTangentInFieldNumber = 3,
    kTangentOutFieldNumber = 4,
    kTFieldNumber = 1,
  };
  // .Property.ColorPropertyValue val = 2;
  bool has_val() const;
  private:
  bool _internal_has_val() const;
  public:
  void clear_val();
  const ::Property::ColorPropertyValue& val() const;
  PROTOBUF_NODISCARD ::Property::ColorPropertyValue* release_val();
  ::Property::ColorPropertyValue* mutable_val();
  void set_allocated_val(::Property::ColorPropertyValue* val);
  private:
  const ::Property::ColorPropertyValue& _internal_val() const;
  ::Property::ColorPropertyValue* _internal_mutable_val();
  public:
  void unsafe_arena_set_allocated_val(
      ::Property::ColorPropertyValue* val);
  ::Property::ColorPropertyValue* unsafe_arena_release_val();

  // optional .Common.Color4 tangentIn = 3;
  bool has_tangentin() const;
  private:
  bool _internal_has_tangentin() const;
  public:
  void clear_tangentin();
  const ::Common::Color4& tangentin() const;
  PROTOBUF_NODISCARD ::Common::Color4* release_tangentin();
  ::Common::Color4* mutable_tangentin();
  void set_allocated_tangentin(::Common::Color4* tangentin);
  private:
  const ::Common::Color4& _internal_tangentin() const;
  ::Common::Color4* _internal_mutable_tangentin();
  public:
  void unsafe_arena_set_allocated_tangentin(
      ::Common::Color4* tangentin);
  ::Common::Color4* unsafe_arena_release_tangentin();

  // optional .Common.Color4 tangentOut = 4;
  bool has_tangentout() const;
  private:
  bool _internal_has_tangentout() const;
  public:
  void clear_tangentout();
  const ::Common::Color4& tangentout() const;
  PROTOBUF_NODISCARD ::Common::Color4* release_tangentout();
  ::Common::Color4* mutable_tangentout();
  void set_allocated_tangentout(::Common::Color4* tangentout);
  private:
  const ::Common::Color4& _internal_tangentout() const;
  ::Common::Color4* _internal_mutable_tangentout();
  public:
  void unsafe_arena_set_allocated_tangentout(
      ::Common::Color4* tangentout);
  ::Common::Color4* unsafe_arena_release_tangentout();

  // float t = 1;
  void clear_t();
  float t() const;
  void set_t(float value);
  private:
  float _internal_t() const;
  void _internal_set_t(float value);
  public:

  // @@protoc_insertion_point(class_scope:Property.ColorPropertyKeyframed.ColorKeyframe)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::Property::ColorPropertyValue* val_;
    ::Common::Color4* tangentin_;
    ::Common::Color4* tangentout_;
    float t_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class ColorPropertyKeyframed final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.ColorPropertyKeyframed) */ {
 public:
  inline ColorPropertyKeyframed() : ColorPropertyKeyframed(nullptr) {}
  ~ColorPropertyKeyframed() override;
  explicit PROTOBUF_CONSTEXPR ColorPropertyKeyframed(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ColorPropertyKeyframed(const ColorPropertyKeyframed& from);
  ColorPropertyKeyframed(ColorPropertyKeyframed&& from) noexcept
    : ColorPropertyKeyframed() {
    *this = ::std::move(from);
  }

  inline ColorPropertyKeyframed& operator=(const ColorPropertyKeyframed& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColorPropertyKeyframed& operator=(ColorPropertyKeyframed&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ColorPropertyKeyframed& default_instance() {
    return *internal_default_instance();
  }
  static inline const ColorPropertyKeyframed* internal_default_instance() {
    return reinterpret_cast<const ColorPropertyKeyframed*>(
               &_ColorPropertyKeyframed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(ColorPropertyKeyframed& a, ColorPropertyKeyframed& b) {
    a.Swap(&b);
  }
  inline void Swap(ColorPropertyKeyframed* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ColorPropertyKeyframed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ColorPropertyKeyframed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ColorPropertyKeyframed>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ColorPropertyKeyframed& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ColorPropertyKeyframed& from) {
    ColorPropertyKeyframed::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColorPropertyKeyframed* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.ColorPropertyKeyframed";
  }
  protected:
  explicit ColorPropertyKeyframed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ColorPropertyKeyframed_ColorKeyframe ColorKeyframe;

  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 10,
    kTSrcFieldNumber = 8,
    kLoopingFieldNumber = 11,
    kTangentGenFieldNumber = 12,
  };
  // repeated .Property.ColorPropertyKeyframed.ColorKeyframe keys = 10;
  int keys_size() const;
  private:
  int _internal_keys_size() const;
  public:
  void clear_keys();
  ::Property::ColorPropertyKeyframed_ColorKeyframe* mutable_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Property::ColorPropertyKeyframed_ColorKeyframe >*
      mutable_keys();
  private:
  const ::Property::ColorPropertyKeyframed_ColorKeyframe& _internal_keys(int index) const;
  ::Property::ColorPropertyKeyframed_ColorKeyframe* _internal_add_keys();
  public:
  const ::Property::ColorPropertyKeyframed_ColorKeyframe& keys(int index) const;
  ::Property::ColorPropertyKeyframed_ColorKeyframe* add_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Property::ColorPropertyKeyframed_ColorKeyframe >&
      keys() const;

  // optional .Property.ScalarPropertyValue tSrc = 8;
  bool has_tsrc() const;
  private:
  bool _internal_has_tsrc() const;
  public:
  void clear_tsrc();
  const ::Property::ScalarPropertyValue& tsrc() const;
  PROTOBUF_NODISCARD ::Property::ScalarPropertyValue* release_tsrc();
  ::Property::ScalarPropertyValue* mutable_tsrc();
  void set_allocated_tsrc(::Property::ScalarPropertyValue* tsrc);
  private:
  const ::Property::ScalarPropertyValue& _internal_tsrc() const;
  ::Property::ScalarPropertyValue* _internal_mutable_tsrc();
  public:
  void unsafe_arena_set_allocated_tsrc(
      ::Property::ScalarPropertyValue* tsrc);
  ::Property::ScalarPropertyValue* unsafe_arena_release_tsrc();

  // .Property.KeyframeLoopingEnum looping = 11;
  void clear_looping();
  ::Property::KeyframeLoopingEnum looping() const;
  void set_looping(::Property::KeyframeLoopingEnum value);
  private:
  ::Property::KeyframeLoopingEnum _internal_looping() const;
  void _internal_set_looping(::Property::KeyframeLoopingEnum value);
  public:

  // .Property.TangentsAutocomputeMethodEnum tangentGen = 12;
  void clear_tangentgen();
  ::Property::TangentsAutocomputeMethodEnum tangentgen() const;
  void set_tangentgen(::Property::TangentsAutocomputeMethodEnum value);
  private:
  ::Property::TangentsAutocomputeMethodEnum _internal_tangentgen() const;
  void _internal_set_tangentgen(::Property::TangentsAutocomputeMethodEnum value);
  public:

  // @@protoc_insertion_point(class_scope:Property.ColorPropertyKeyframed)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Property::ColorPropertyKeyframed_ColorKeyframe > keys_;
    ::Property::ScalarPropertyValue* tsrc_;
    int looping_;
    int tangentgen_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class ColorPropertyApproach final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.ColorPropertyApproach) */ {
 public:
  inline ColorPropertyApproach() : ColorPropertyApproach(nullptr) {}
  ~ColorPropertyApproach() override;
  explicit PROTOBUF_CONSTEXPR ColorPropertyApproach(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ColorPropertyApproach(const ColorPropertyApproach& from);
  ColorPropertyApproach(ColorPropertyApproach&& from) noexcept
    : ColorPropertyApproach() {
    *this = ::std::move(from);
  }

  inline ColorPropertyApproach& operator=(const ColorPropertyApproach& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColorPropertyApproach& operator=(ColorPropertyApproach&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ColorPropertyApproach& default_instance() {
    return *internal_default_instance();
  }
  static inline const ColorPropertyApproach* internal_default_instance() {
    return reinterpret_cast<const ColorPropertyApproach*>(
               &_ColorPropertyApproach_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(ColorPropertyApproach& a, ColorPropertyApproach& b) {
    a.Swap(&b);
  }
  inline void Swap(ColorPropertyApproach* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ColorPropertyApproach* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ColorPropertyApproach* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ColorPropertyApproach>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ColorPropertyApproach& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ColorPropertyApproach& from) {
    ColorPropertyApproach::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColorPropertyApproach* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.ColorPropertyApproach";
  }
  protected:
  explicit ColorPropertyApproach(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTFieldNumber = 1,
    kToFieldNumber = 2,
    kTimeToHalfFieldNumber = 3,
    kStartFieldNumber = 4,
  };
  // .Property.ScalarPropertyValue t = 1;
  bool has_t() const;
  private:
  bool _internal_has_t() const;
  public:
  void clear_t();
  const ::Property::ScalarPropertyValue& t() const;
  PROTOBUF_NODISCARD ::Property::ScalarPropertyValue* release_t();
  ::Property::ScalarPropertyValue* mutable_t();
  void set_allocated_t(::Property::ScalarPropertyValue* t);
  private:
  const ::Property::ScalarPropertyValue& _internal_t() const;
  ::Property::ScalarPropertyValue* _internal_mutable_t();
  public:
  void unsafe_arena_set_allocated_t(
      ::Property::ScalarPropertyValue* t);
  ::Property::ScalarPropertyValue* unsafe_arena_release_t();

  // .Property.ColorPropertyValue to = 2;
  bool has_to() const;
  private:
  bool _internal_has_to() const;
  public:
  void clear_to();
  const ::Property::ColorPropertyValue& to() const;
  PROTOBUF_NODISCARD ::Property::ColorPropertyValue* release_to();
  ::Property::ColorPropertyValue* mutable_to();
  void set_allocated_to(::Property::ColorPropertyValue* to);
  private:
  const ::Property::ColorPropertyValue& _internal_to() const;
  ::Property::ColorPropertyValue* _internal_mutable_to();
  public:
  void unsafe_arena_set_allocated_to(
      ::Property::ColorPropertyValue* to);
  ::Property::ColorPropertyValue* unsafe_arena_release_to();

  // .Property.ScalarPropertyValue timeToHalf = 3;
  bool has_timetohalf() const;
  private:
  bool _internal_has_timetohalf() const;
  public:
  void clear_timetohalf();
  const ::Property::ScalarPropertyValue& timetohalf() const;
  PROTOBUF_NODISCARD ::Property::ScalarPropertyValue* release_timetohalf();
  ::Property::ScalarPropertyValue* mutable_timetohalf();
  void set_allocated_timetohalf(::Property::ScalarPropertyValue* timetohalf);
  private:
  const ::Property::ScalarPropertyValue& _internal_timetohalf() const;
  ::Property::ScalarPropertyValue* _internal_mutable_timetohalf();
  public:
  void unsafe_arena_set_allocated_timetohalf(
      ::Property::ScalarPropertyValue* timetohalf);
  ::Property::ScalarPropertyValue* unsafe_arena_release_timetohalf();

  // .Property.ColorPropertyValue start = 4;
  bool has_start() const;
  private:
  bool _internal_has_start() const;
  public:
  void clear_start();
  const ::Property::ColorPropertyValue& start() const;
  PROTOBUF_NODISCARD ::Property::ColorPropertyValue* release_start();
  ::Property::ColorPropertyValue* mutable_start();
  void set_allocated_start(::Property::ColorPropertyValue* start);
  private:
  const ::Property::ColorPropertyValue& _internal_start() const;
  ::Property::ColorPropertyValue* _internal_mutable_start();
  public:
  void unsafe_arena_set_allocated_start(
      ::Property::ColorPropertyValue* start);
  ::Property::ColorPropertyValue* unsafe_arena_release_start();

  // @@protoc_insertion_point(class_scope:Property.ColorPropertyApproach)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Property::ScalarPropertyValue* t_;
    ::Property::ColorPropertyValue* to_;
    ::Property::ScalarPropertyValue* timetohalf_;
    ::Property::ColorPropertyValue* start_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class ColorPropertyDeclaration final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.ColorPropertyDeclaration) */ {
 public:
  inline ColorPropertyDeclaration() : ColorPropertyDeclaration(nullptr) {}
  ~ColorPropertyDeclaration() override;
  explicit PROTOBUF_CONSTEXPR ColorPropertyDeclaration(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ColorPropertyDeclaration(const ColorPropertyDeclaration& from);
  ColorPropertyDeclaration(ColorPropertyDeclaration&& from) noexcept
    : ColorPropertyDeclaration() {
    *this = ::std::move(from);
  }

  inline ColorPropertyDeclaration& operator=(const ColorPropertyDeclaration& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColorPropertyDeclaration& operator=(ColorPropertyDeclaration&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ColorPropertyDeclaration& default_instance() {
    return *internal_default_instance();
  }
  static inline const ColorPropertyDeclaration* internal_default_instance() {
    return reinterpret_cast<const ColorPropertyDeclaration*>(
               &_ColorPropertyDeclaration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(ColorPropertyDeclaration& a, ColorPropertyDeclaration& b) {
    a.Swap(&b);
  }
  inline void Swap(ColorPropertyDeclaration* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ColorPropertyDeclaration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ColorPropertyDeclaration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ColorPropertyDeclaration>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ColorPropertyDeclaration& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ColorPropertyDeclaration& from) {
    ColorPropertyDeclaration::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColorPropertyDeclaration* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.ColorPropertyDeclaration";
  }
  protected:
  explicit ColorPropertyDeclaration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaFieldNumber = 1,
    kDefaultFieldNumber = 2,
  };
  // .Property.ColorPropertyMetadata meta = 1;
  bool has_meta() const;
  private:
  bool _internal_has_meta() const;
  public:
  void clear_meta();
  const ::Property::ColorPropertyMetadata& meta() const;
  PROTOBUF_NODISCARD ::Property::ColorPropertyMetadata* release_meta();
  ::Property::ColorPropertyMetadata* mutable_meta();
  void set_allocated_meta(::Property::ColorPropertyMetadata* meta);
  private:
  const ::Property::ColorPropertyMetadata& _internal_meta() const;
  ::Property::ColorPropertyMetadata* _internal_mutable_meta();
  public:
  void unsafe_arena_set_allocated_meta(
      ::Property::ColorPropertyMetadata* meta);
  ::Property::ColorPropertyMetadata* unsafe_arena_release_meta();

  // .Common.Color4 default = 2;
  bool has_default_() const;
  private:
  bool _internal_has_default_() const;
  public:
  void clear_default_();
  const ::Common::Color4& default_() const;
  PROTOBUF_NODISCARD ::Common::Color4* release_default_();
  ::Common::Color4* mutable_default_();
  void set_allocated_default_(::Common::Color4* default_);
  private:
  const ::Common::Color4& _internal_default_() const;
  ::Common::Color4* _internal_mutable_default_();
  public:
  void unsafe_arena_set_allocated_default_(
      ::Common::Color4* default_);
  ::Common::Color4* unsafe_arena_release_default_();

  // @@protoc_insertion_point(class_scope:Property.ColorPropertyDeclaration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Property::ColorPropertyMetadata* meta_;
    ::Common::Color4* default__;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class ColorEditingMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.ColorEditingMetadata) */ {
 public:
  inline ColorEditingMetadata() : ColorEditingMetadata(nullptr) {}
  ~ColorEditingMetadata() override;
  explicit PROTOBUF_CONSTEXPR ColorEditingMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ColorEditingMetadata(const ColorEditingMetadata& from);
  ColorEditingMetadata(ColorEditingMetadata&& from) noexcept
    : ColorEditingMetadata() {
    *this = ::std::move(from);
  }

  inline ColorEditingMetadata& operator=(const ColorEditingMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColorEditingMetadata& operator=(ColorEditingMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ColorEditingMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const ColorEditingMetadata* internal_default_instance() {
    return reinterpret_cast<const ColorEditingMetadata*>(
               &_ColorEditingMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(ColorEditingMetadata& a, ColorEditingMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(ColorEditingMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ColorEditingMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ColorEditingMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ColorEditingMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ColorEditingMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ColorEditingMetadata& from) {
    ColorEditingMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColorEditingMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.ColorEditingMetadata";
  }
  protected:
  explicit ColorEditingMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllowHdrFieldNumber = 2,
    kUsesAlphaFieldNumber = 3,
  };
  // optional bool allowHdr = 2;
  bool has_allowhdr() const;
  private:
  bool _internal_has_allowhdr() const;
  public:
  void clear_allowhdr();
  bool allowhdr() const;
  void set_allowhdr(bool value);
  private:
  bool _internal_allowhdr() const;
  void _internal_set_allowhdr(bool value);
  public:

  // optional bool usesAlpha = 3;
  bool has_usesalpha() const;
  private:
  bool _internal_has_usesalpha() const;
  public:
  void clear_usesalpha();
  bool usesalpha() const;
  void set_usesalpha(bool value);
  private:
  bool _internal_usesalpha() const;
  void _internal_set_usesalpha(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Property.ColorEditingMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool allowhdr_;
    bool usesalpha_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class ColorGeneratorMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.ColorGeneratorMetadata) */ {
 public:
  inline ColorGeneratorMetadata() : ColorGeneratorMetadata(nullptr) {}
  ~ColorGeneratorMetadata() override;
  explicit PROTOBUF_CONSTEXPR ColorGeneratorMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ColorGeneratorMetadata(const ColorGeneratorMetadata& from);
  ColorGeneratorMetadata(ColorGeneratorMetadata&& from) noexcept
    : ColorGeneratorMetadata() {
    *this = ::std::move(from);
  }

  inline ColorGeneratorMetadata& operator=(const ColorGeneratorMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColorGeneratorMetadata& operator=(ColorGeneratorMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ColorGeneratorMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const ColorGeneratorMetadata* internal_default_instance() {
    return reinterpret_cast<const ColorGeneratorMetadata*>(
               &_ColorGeneratorMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(ColorGeneratorMetadata& a, ColorGeneratorMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(ColorGeneratorMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ColorGeneratorMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ColorGeneratorMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ColorGeneratorMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ColorGeneratorMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ColorGeneratorMetadata& from) {
    ColorGeneratorMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColorGeneratorMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.ColorGeneratorMetadata";
  }
  protected:
  explicit ColorGeneratorMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
    kEditFieldNumber = 2,
  };
  // .Property.GeneratorMetadata base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::Property::GeneratorMetadata& base() const;
  PROTOBUF_NODISCARD ::Property::GeneratorMetadata* release_base();
  ::Property::GeneratorMetadata* mutable_base();
  void set_allocated_base(::Property::GeneratorMetadata* base);
  private:
  const ::Property::GeneratorMetadata& _internal_base() const;
  ::Property::GeneratorMetadata* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::Property::GeneratorMetadata* base);
  ::Property::GeneratorMetadata* unsafe_arena_release_base();

  // optional .Property.ColorEditingMetadata edit = 2;
  bool has_edit() const;
  private:
  bool _internal_has_edit() const;
  public:
  void clear_edit();
  const ::Property::ColorEditingMetadata& edit() const;
  PROTOBUF_NODISCARD ::Property::ColorEditingMetadata* release_edit();
  ::Property::ColorEditingMetadata* mutable_edit();
  void set_allocated_edit(::Property::ColorEditingMetadata* edit);
  private:
  const ::Property::ColorEditingMetadata& _internal_edit() const;
  ::Property::ColorEditingMetadata* _internal_mutable_edit();
  public:
  void unsafe_arena_set_allocated_edit(
      ::Property::ColorEditingMetadata* edit);
  ::Property::ColorEditingMetadata* unsafe_arena_release_edit();

  // @@protoc_insertion_point(class_scope:Property.ColorGeneratorMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::Property::GeneratorMetadata* base_;
    ::Property::ColorEditingMetadata* edit_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class ColorPropertyMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.ColorPropertyMetadata) */ {
 public:
  inline ColorPropertyMetadata() : ColorPropertyMetadata(nullptr) {}
  ~ColorPropertyMetadata() override;
  explicit PROTOBUF_CONSTEXPR ColorPropertyMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ColorPropertyMetadata(const ColorPropertyMetadata& from);
  ColorPropertyMetadata(ColorPropertyMetadata&& from) noexcept
    : ColorPropertyMetadata() {
    *this = ::std::move(from);
  }

  inline ColorPropertyMetadata& operator=(const ColorPropertyMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColorPropertyMetadata& operator=(ColorPropertyMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ColorPropertyMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const ColorPropertyMetadata* internal_default_instance() {
    return reinterpret_cast<const ColorPropertyMetadata*>(
               &_ColorPropertyMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(ColorPropertyMetadata& a, ColorPropertyMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(ColorPropertyMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ColorPropertyMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ColorPropertyMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ColorPropertyMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ColorPropertyMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ColorPropertyMetadata& from) {
    ColorPropertyMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColorPropertyMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.ColorPropertyMetadata";
  }
  protected:
  explicit ColorPropertyMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
    kEditFieldNumber = 4,
  };
  // .Property.PropertyMetadata base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::Property::PropertyMetadata& base() const;
  PROTOBUF_NODISCARD ::Property::PropertyMetadata* release_base();
  ::Property::PropertyMetadata* mutable_base();
  void set_allocated_base(::Property::PropertyMetadata* base);
  private:
  const ::Property::PropertyMetadata& _internal_base() const;
  ::Property::PropertyMetadata* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::Property::PropertyMetadata* base);
  ::Property::PropertyMetadata* unsafe_arena_release_base();

  // optional .Property.ColorEditingMetadata edit = 4;
  bool has_edit() const;
  private:
  bool _internal_has_edit() const;
  public:
  void clear_edit();
  const ::Property::ColorEditingMetadata& edit() const;
  PROTOBUF_NODISCARD ::Property::ColorEditingMetadata* release_edit();
  ::Property::ColorEditingMetadata* mutable_edit();
  void set_allocated_edit(::Property::ColorEditingMetadata* edit);
  private:
  const ::Property::ColorEditingMetadata& _internal_edit() const;
  ::Property::ColorEditingMetadata* _internal_mutable_edit();
  public:
  void unsafe_arena_set_allocated_edit(
      ::Property::ColorEditingMetadata* edit);
  ::Property::ColorEditingMetadata* unsafe_arena_release_edit();

  // @@protoc_insertion_point(class_scope:Property.ColorPropertyMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::Property::PropertyMetadata* base_;
    ::Property::ColorEditingMetadata* edit_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class BooleanPropertyAssignment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.BooleanPropertyAssignment) */ {
 public:
  inline BooleanPropertyAssignment() : BooleanPropertyAssignment(nullptr) {}
  ~BooleanPropertyAssignment() override;
  explicit PROTOBUF_CONSTEXPR BooleanPropertyAssignment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BooleanPropertyAssignment(const BooleanPropertyAssignment& from);
  BooleanPropertyAssignment(BooleanPropertyAssignment&& from) noexcept
    : BooleanPropertyAssignment() {
    *this = ::std::move(from);
  }

  inline BooleanPropertyAssignment& operator=(const BooleanPropertyAssignment& from) {
    CopyFrom(from);
    return *this;
  }
  inline BooleanPropertyAssignment& operator=(BooleanPropertyAssignment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BooleanPropertyAssignment& default_instance() {
    return *internal_default_instance();
  }
  static inline const BooleanPropertyAssignment* internal_default_instance() {
    return reinterpret_cast<const BooleanPropertyAssignment*>(
               &_BooleanPropertyAssignment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(BooleanPropertyAssignment& a, BooleanPropertyAssignment& b) {
    a.Swap(&b);
  }
  inline void Swap(BooleanPropertyAssignment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BooleanPropertyAssignment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BooleanPropertyAssignment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BooleanPropertyAssignment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BooleanPropertyAssignment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BooleanPropertyAssignment& from) {
    BooleanPropertyAssignment::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BooleanPropertyAssignment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.BooleanPropertyAssignment";
  }
  protected:
  explicit BooleanPropertyAssignment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssignmentIdFieldNumber = 4,
    kValueFieldNumber = 3,
    kPriorityFieldNumber = 2,
  };
  // string assignmentId = 4;
  void clear_assignmentid();
  const std::string& assignmentid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_assignmentid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_assignmentid();
  PROTOBUF_NODISCARD std::string* release_assignmentid();
  void set_allocated_assignmentid(std::string* assignmentid);
  private:
  const std::string& _internal_assignmentid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_assignmentid(const std::string& value);
  std::string* _internal_mutable_assignmentid();
  public:

  // .Property.BooleanPropertyValue value = 3;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::Property::BooleanPropertyValue& value() const;
  PROTOBUF_NODISCARD ::Property::BooleanPropertyValue* release_value();
  ::Property::BooleanPropertyValue* mutable_value();
  void set_allocated_value(::Property::BooleanPropertyValue* value);
  private:
  const ::Property::BooleanPropertyValue& _internal_value() const;
  ::Property::BooleanPropertyValue* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::Property::BooleanPropertyValue* value);
  ::Property::BooleanPropertyValue* unsafe_arena_release_value();

  // int32 priority = 2;
  void clear_priority();
  int32_t priority() const;
  void set_priority(int32_t value);
  private:
  int32_t _internal_priority() const;
  void _internal_set_priority(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Property.BooleanPropertyAssignment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr assignmentid_;
    ::Property::BooleanPropertyValue* value_;
    int32_t priority_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class BooleanPropertyValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.BooleanPropertyValue) */ {
 public:
  inline BooleanPropertyValue() : BooleanPropertyValue(nullptr) {}
  ~BooleanPropertyValue() override;
  explicit PROTOBUF_CONSTEXPR BooleanPropertyValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BooleanPropertyValue(const BooleanPropertyValue& from);
  BooleanPropertyValue(BooleanPropertyValue&& from) noexcept
    : BooleanPropertyValue() {
    *this = ::std::move(from);
  }

  inline BooleanPropertyValue& operator=(const BooleanPropertyValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline BooleanPropertyValue& operator=(BooleanPropertyValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BooleanPropertyValue& default_instance() {
    return *internal_default_instance();
  }
  enum ValueTypeCase {
    kConstant = 1,
    kRef = 2,
    kKeyframes = 5,
    kExpr = 6,
    kScalarCmp = 7,
    kUseDefault = 8,
    kCustom = 10,
    VALUETYPE_NOT_SET = 0,
  };

  static inline const BooleanPropertyValue* internal_default_instance() {
    return reinterpret_cast<const BooleanPropertyValue*>(
               &_BooleanPropertyValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(BooleanPropertyValue& a, BooleanPropertyValue& b) {
    a.Swap(&b);
  }
  inline void Swap(BooleanPropertyValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BooleanPropertyValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BooleanPropertyValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BooleanPropertyValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BooleanPropertyValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BooleanPropertyValue& from) {
    BooleanPropertyValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BooleanPropertyValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.BooleanPropertyValue";
  }
  protected:
  explicit BooleanPropertyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConstantFieldNumber = 1,
    kRefFieldNumber = 2,
    kKeyframesFieldNumber = 5,
    kExprFieldNumber = 6,
    kScalarCmpFieldNumber = 7,
    kUseDefaultFieldNumber = 8,
    kCustomFieldNumber = 10,
  };
  // bool constant = 1;
  bool has_constant() const;
  private:
  bool _internal_has_constant() const;
  public:
  void clear_constant();
  bool constant() const;
  void set_constant(bool value);
  private:
  bool _internal_constant() const;
  void _internal_set_constant(bool value);
  public:

  // .Property.PropertyIdentifier ref = 2;
  bool has_ref() const;
  private:
  bool _internal_has_ref() const;
  public:
  void clear_ref();
  const ::Property::PropertyIdentifier& ref() const;
  PROTOBUF_NODISCARD ::Property::PropertyIdentifier* release_ref();
  ::Property::PropertyIdentifier* mutable_ref();
  void set_allocated_ref(::Property::PropertyIdentifier* ref);
  private:
  const ::Property::PropertyIdentifier& _internal_ref() const;
  ::Property::PropertyIdentifier* _internal_mutable_ref();
  public:
  void unsafe_arena_set_allocated_ref(
      ::Property::PropertyIdentifier* ref);
  ::Property::PropertyIdentifier* unsafe_arena_release_ref();

  // .Property.BooleanPropertyKeyframed keyframes = 5;
  bool has_keyframes() const;
  private:
  bool _internal_has_keyframes() const;
  public:
  void clear_keyframes();
  const ::Property::BooleanPropertyKeyframed& keyframes() const;
  PROTOBUF_NODISCARD ::Property::BooleanPropertyKeyframed* release_keyframes();
  ::Property::BooleanPropertyKeyframed* mutable_keyframes();
  void set_allocated_keyframes(::Property::BooleanPropertyKeyframed* keyframes);
  private:
  const ::Property::BooleanPropertyKeyframed& _internal_keyframes() const;
  ::Property::BooleanPropertyKeyframed* _internal_mutable_keyframes();
  public:
  void unsafe_arena_set_allocated_keyframes(
      ::Property::BooleanPropertyKeyframed* keyframes);
  ::Property::BooleanPropertyKeyframed* unsafe_arena_release_keyframes();

  // string expr = 6;
  bool has_expr() const;
  private:
  bool _internal_has_expr() const;
  public:
  void clear_expr();
  const std::string& expr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_expr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_expr();
  PROTOBUF_NODISCARD std::string* release_expr();
  void set_allocated_expr(std::string* expr);
  private:
  const std::string& _internal_expr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_expr(const std::string& value);
  std::string* _internal_mutable_expr();
  public:

  // .Property.BooleanPropertyScalarComparison scalarCmp = 7;
  bool has_scalarcmp() const;
  private:
  bool _internal_has_scalarcmp() const;
  public:
  void clear_scalarcmp();
  const ::Property::BooleanPropertyScalarComparison& scalarcmp() const;
  PROTOBUF_NODISCARD ::Property::BooleanPropertyScalarComparison* release_scalarcmp();
  ::Property::BooleanPropertyScalarComparison* mutable_scalarcmp();
  void set_allocated_scalarcmp(::Property::BooleanPropertyScalarComparison* scalarcmp);
  private:
  const ::Property::BooleanPropertyScalarComparison& _internal_scalarcmp() const;
  ::Property::BooleanPropertyScalarComparison* _internal_mutable_scalarcmp();
  public:
  void unsafe_arena_set_allocated_scalarcmp(
      ::Property::BooleanPropertyScalarComparison* scalarcmp);
  ::Property::BooleanPropertyScalarComparison* unsafe_arena_release_scalarcmp();

  // bool useDefault = 8;
  bool has_usedefault() const;
  private:
  bool _internal_has_usedefault() const;
  public:
  void clear_usedefault();
  bool usedefault() const;
  void set_usedefault(bool value);
  private:
  bool _internal_usedefault() const;
  void _internal_set_usedefault(bool value);
  public:

  // .Property.CustomGeneratorValue custom = 10;
  bool has_custom() const;
  private:
  bool _internal_has_custom() const;
  public:
  void clear_custom();
  const ::Property::CustomGeneratorValue& custom() const;
  PROTOBUF_NODISCARD ::Property::CustomGeneratorValue* release_custom();
  ::Property::CustomGeneratorValue* mutable_custom();
  void set_allocated_custom(::Property::CustomGeneratorValue* custom);
  private:
  const ::Property::CustomGeneratorValue& _internal_custom() const;
  ::Property::CustomGeneratorValue* _internal_mutable_custom();
  public:
  void unsafe_arena_set_allocated_custom(
      ::Property::CustomGeneratorValue* custom);
  ::Property::CustomGeneratorValue* unsafe_arena_release_custom();

  void clear_ValueType();
  ValueTypeCase ValueType_case() const;
  // @@protoc_insertion_point(class_scope:Property.BooleanPropertyValue)
 private:
  class _Internal;
  void set_has_constant();
  void set_has_ref();
  void set_has_keyframes();
  void set_has_expr();
  void set_has_scalarcmp();
  void set_has_usedefault();
  void set_has_custom();

  inline bool has_ValueType() const;
  inline void clear_has_ValueType();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union ValueTypeUnion {
      constexpr ValueTypeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      bool constant_;
      ::Property::PropertyIdentifier* ref_;
      ::Property::BooleanPropertyKeyframed* keyframes_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr expr_;
      ::Property::BooleanPropertyScalarComparison* scalarcmp_;
      bool usedefault_;
      ::Property::CustomGeneratorValue* custom_;
    } ValueType_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class BooleanPropertyKeyframed_BooleanKeyframe final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.BooleanPropertyKeyframed.BooleanKeyframe) */ {
 public:
  inline BooleanPropertyKeyframed_BooleanKeyframe() : BooleanPropertyKeyframed_BooleanKeyframe(nullptr) {}
  ~BooleanPropertyKeyframed_BooleanKeyframe() override;
  explicit PROTOBUF_CONSTEXPR BooleanPropertyKeyframed_BooleanKeyframe(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BooleanPropertyKeyframed_BooleanKeyframe(const BooleanPropertyKeyframed_BooleanKeyframe& from);
  BooleanPropertyKeyframed_BooleanKeyframe(BooleanPropertyKeyframed_BooleanKeyframe&& from) noexcept
    : BooleanPropertyKeyframed_BooleanKeyframe() {
    *this = ::std::move(from);
  }

  inline BooleanPropertyKeyframed_BooleanKeyframe& operator=(const BooleanPropertyKeyframed_BooleanKeyframe& from) {
    CopyFrom(from);
    return *this;
  }
  inline BooleanPropertyKeyframed_BooleanKeyframe& operator=(BooleanPropertyKeyframed_BooleanKeyframe&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BooleanPropertyKeyframed_BooleanKeyframe& default_instance() {
    return *internal_default_instance();
  }
  static inline const BooleanPropertyKeyframed_BooleanKeyframe* internal_default_instance() {
    return reinterpret_cast<const BooleanPropertyKeyframed_BooleanKeyframe*>(
               &_BooleanPropertyKeyframed_BooleanKeyframe_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(BooleanPropertyKeyframed_BooleanKeyframe& a, BooleanPropertyKeyframed_BooleanKeyframe& b) {
    a.Swap(&b);
  }
  inline void Swap(BooleanPropertyKeyframed_BooleanKeyframe* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BooleanPropertyKeyframed_BooleanKeyframe* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BooleanPropertyKeyframed_BooleanKeyframe* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BooleanPropertyKeyframed_BooleanKeyframe>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BooleanPropertyKeyframed_BooleanKeyframe& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BooleanPropertyKeyframed_BooleanKeyframe& from) {
    BooleanPropertyKeyframed_BooleanKeyframe::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BooleanPropertyKeyframed_BooleanKeyframe* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.BooleanPropertyKeyframed.BooleanKeyframe";
  }
  protected:
  explicit BooleanPropertyKeyframed_BooleanKeyframe(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValFieldNumber = 2,
    kTFieldNumber = 1,
  };
  // .Property.BooleanPropertyValue val = 2;
  bool has_val() const;
  private:
  bool _internal_has_val() const;
  public:
  void clear_val();
  const ::Property::BooleanPropertyValue& val() const;
  PROTOBUF_NODISCARD ::Property::BooleanPropertyValue* release_val();
  ::Property::BooleanPropertyValue* mutable_val();
  void set_allocated_val(::Property::BooleanPropertyValue* val);
  private:
  const ::Property::BooleanPropertyValue& _internal_val() const;
  ::Property::BooleanPropertyValue* _internal_mutable_val();
  public:
  void unsafe_arena_set_allocated_val(
      ::Property::BooleanPropertyValue* val);
  ::Property::BooleanPropertyValue* unsafe_arena_release_val();

  // float t = 1;
  void clear_t();
  float t() const;
  void set_t(float value);
  private:
  float _internal_t() const;
  void _internal_set_t(float value);
  public:

  // @@protoc_insertion_point(class_scope:Property.BooleanPropertyKeyframed.BooleanKeyframe)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Property::BooleanPropertyValue* val_;
    float t_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class BooleanPropertyKeyframed final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.BooleanPropertyKeyframed) */ {
 public:
  inline BooleanPropertyKeyframed() : BooleanPropertyKeyframed(nullptr) {}
  ~BooleanPropertyKeyframed() override;
  explicit PROTOBUF_CONSTEXPR BooleanPropertyKeyframed(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BooleanPropertyKeyframed(const BooleanPropertyKeyframed& from);
  BooleanPropertyKeyframed(BooleanPropertyKeyframed&& from) noexcept
    : BooleanPropertyKeyframed() {
    *this = ::std::move(from);
  }

  inline BooleanPropertyKeyframed& operator=(const BooleanPropertyKeyframed& from) {
    CopyFrom(from);
    return *this;
  }
  inline BooleanPropertyKeyframed& operator=(BooleanPropertyKeyframed&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BooleanPropertyKeyframed& default_instance() {
    return *internal_default_instance();
  }
  static inline const BooleanPropertyKeyframed* internal_default_instance() {
    return reinterpret_cast<const BooleanPropertyKeyframed*>(
               &_BooleanPropertyKeyframed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(BooleanPropertyKeyframed& a, BooleanPropertyKeyframed& b) {
    a.Swap(&b);
  }
  inline void Swap(BooleanPropertyKeyframed* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BooleanPropertyKeyframed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BooleanPropertyKeyframed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BooleanPropertyKeyframed>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BooleanPropertyKeyframed& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BooleanPropertyKeyframed& from) {
    BooleanPropertyKeyframed::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BooleanPropertyKeyframed* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.BooleanPropertyKeyframed";
  }
  protected:
  explicit BooleanPropertyKeyframed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef BooleanPropertyKeyframed_BooleanKeyframe BooleanKeyframe;

  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 10,
    kTSrcFieldNumber = 8,
    kLoopingFieldNumber = 11,
  };
  // repeated .Property.BooleanPropertyKeyframed.BooleanKeyframe keys = 10;
  int keys_size() const;
  private:
  int _internal_keys_size() const;
  public:
  void clear_keys();
  ::Property::BooleanPropertyKeyframed_BooleanKeyframe* mutable_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Property::BooleanPropertyKeyframed_BooleanKeyframe >*
      mutable_keys();
  private:
  const ::Property::BooleanPropertyKeyframed_BooleanKeyframe& _internal_keys(int index) const;
  ::Property::BooleanPropertyKeyframed_BooleanKeyframe* _internal_add_keys();
  public:
  const ::Property::BooleanPropertyKeyframed_BooleanKeyframe& keys(int index) const;
  ::Property::BooleanPropertyKeyframed_BooleanKeyframe* add_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Property::BooleanPropertyKeyframed_BooleanKeyframe >&
      keys() const;

  // optional .Property.ScalarPropertyValue tSrc = 8;
  bool has_tsrc() const;
  private:
  bool _internal_has_tsrc() const;
  public:
  void clear_tsrc();
  const ::Property::ScalarPropertyValue& tsrc() const;
  PROTOBUF_NODISCARD ::Property::ScalarPropertyValue* release_tsrc();
  ::Property::ScalarPropertyValue* mutable_tsrc();
  void set_allocated_tsrc(::Property::ScalarPropertyValue* tsrc);
  private:
  const ::Property::ScalarPropertyValue& _internal_tsrc() const;
  ::Property::ScalarPropertyValue* _internal_mutable_tsrc();
  public:
  void unsafe_arena_set_allocated_tsrc(
      ::Property::ScalarPropertyValue* tsrc);
  ::Property::ScalarPropertyValue* unsafe_arena_release_tsrc();

  // .Property.KeyframeLoopingEnum looping = 11;
  void clear_looping();
  ::Property::KeyframeLoopingEnum looping() const;
  void set_looping(::Property::KeyframeLoopingEnum value);
  private:
  ::Property::KeyframeLoopingEnum _internal_looping() const;
  void _internal_set_looping(::Property::KeyframeLoopingEnum value);
  public:

  // @@protoc_insertion_point(class_scope:Property.BooleanPropertyKeyframed)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Property::BooleanPropertyKeyframed_BooleanKeyframe > keys_;
    ::Property::ScalarPropertyValue* tsrc_;
    int looping_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class BooleanPropertyScalarComparison final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.BooleanPropertyScalarComparison) */ {
 public:
  inline BooleanPropertyScalarComparison() : BooleanPropertyScalarComparison(nullptr) {}
  ~BooleanPropertyScalarComparison() override;
  explicit PROTOBUF_CONSTEXPR BooleanPropertyScalarComparison(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BooleanPropertyScalarComparison(const BooleanPropertyScalarComparison& from);
  BooleanPropertyScalarComparison(BooleanPropertyScalarComparison&& from) noexcept
    : BooleanPropertyScalarComparison() {
    *this = ::std::move(from);
  }

  inline BooleanPropertyScalarComparison& operator=(const BooleanPropertyScalarComparison& from) {
    CopyFrom(from);
    return *this;
  }
  inline BooleanPropertyScalarComparison& operator=(BooleanPropertyScalarComparison&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BooleanPropertyScalarComparison& default_instance() {
    return *internal_default_instance();
  }
  static inline const BooleanPropertyScalarComparison* internal_default_instance() {
    return reinterpret_cast<const BooleanPropertyScalarComparison*>(
               &_BooleanPropertyScalarComparison_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(BooleanPropertyScalarComparison& a, BooleanPropertyScalarComparison& b) {
    a.Swap(&b);
  }
  inline void Swap(BooleanPropertyScalarComparison* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BooleanPropertyScalarComparison* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BooleanPropertyScalarComparison* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BooleanPropertyScalarComparison>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BooleanPropertyScalarComparison& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BooleanPropertyScalarComparison& from) {
    BooleanPropertyScalarComparison::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BooleanPropertyScalarComparison* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.BooleanPropertyScalarComparison";
  }
  protected:
  explicit BooleanPropertyScalarComparison(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAFieldNumber = 2,
    kBFieldNumber = 3,
    kCmpFieldNumber = 1,
  };
  // .Property.ScalarPropertyValue a = 2;
  bool has_a() const;
  private:
  bool _internal_has_a() const;
  public:
  void clear_a();
  const ::Property::ScalarPropertyValue& a() const;
  PROTOBUF_NODISCARD ::Property::ScalarPropertyValue* release_a();
  ::Property::ScalarPropertyValue* mutable_a();
  void set_allocated_a(::Property::ScalarPropertyValue* a);
  private:
  const ::Property::ScalarPropertyValue& _internal_a() const;
  ::Property::ScalarPropertyValue* _internal_mutable_a();
  public:
  void unsafe_arena_set_allocated_a(
      ::Property::ScalarPropertyValue* a);
  ::Property::ScalarPropertyValue* unsafe_arena_release_a();

  // .Property.ScalarPropertyValue b = 3;
  bool has_b() const;
  private:
  bool _internal_has_b() const;
  public:
  void clear_b();
  const ::Property::ScalarPropertyValue& b() const;
  PROTOBUF_NODISCARD ::Property::ScalarPropertyValue* release_b();
  ::Property::ScalarPropertyValue* mutable_b();
  void set_allocated_b(::Property::ScalarPropertyValue* b);
  private:
  const ::Property::ScalarPropertyValue& _internal_b() const;
  ::Property::ScalarPropertyValue* _internal_mutable_b();
  public:
  void unsafe_arena_set_allocated_b(
      ::Property::ScalarPropertyValue* b);
  ::Property::ScalarPropertyValue* unsafe_arena_release_b();

  // .Common.ComparisonMethod cmp = 1;
  void clear_cmp();
  ::Common::ComparisonMethod cmp() const;
  void set_cmp(::Common::ComparisonMethod value);
  private:
  ::Common::ComparisonMethod _internal_cmp() const;
  void _internal_set_cmp(::Common::ComparisonMethod value);
  public:

  // @@protoc_insertion_point(class_scope:Property.BooleanPropertyScalarComparison)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Property::ScalarPropertyValue* a_;
    ::Property::ScalarPropertyValue* b_;
    int cmp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class BooleanPropertyDeclaration final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.BooleanPropertyDeclaration) */ {
 public:
  inline BooleanPropertyDeclaration() : BooleanPropertyDeclaration(nullptr) {}
  ~BooleanPropertyDeclaration() override;
  explicit PROTOBUF_CONSTEXPR BooleanPropertyDeclaration(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BooleanPropertyDeclaration(const BooleanPropertyDeclaration& from);
  BooleanPropertyDeclaration(BooleanPropertyDeclaration&& from) noexcept
    : BooleanPropertyDeclaration() {
    *this = ::std::move(from);
  }

  inline BooleanPropertyDeclaration& operator=(const BooleanPropertyDeclaration& from) {
    CopyFrom(from);
    return *this;
  }
  inline BooleanPropertyDeclaration& operator=(BooleanPropertyDeclaration&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BooleanPropertyDeclaration& default_instance() {
    return *internal_default_instance();
  }
  static inline const BooleanPropertyDeclaration* internal_default_instance() {
    return reinterpret_cast<const BooleanPropertyDeclaration*>(
               &_BooleanPropertyDeclaration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(BooleanPropertyDeclaration& a, BooleanPropertyDeclaration& b) {
    a.Swap(&b);
  }
  inline void Swap(BooleanPropertyDeclaration* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BooleanPropertyDeclaration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BooleanPropertyDeclaration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BooleanPropertyDeclaration>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BooleanPropertyDeclaration& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BooleanPropertyDeclaration& from) {
    BooleanPropertyDeclaration::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BooleanPropertyDeclaration* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.BooleanPropertyDeclaration";
  }
  protected:
  explicit BooleanPropertyDeclaration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaFieldNumber = 1,
    kDefaultFieldNumber = 2,
  };
  // .Property.BooleanPropertyMetadata meta = 1;
  bool has_meta() const;
  private:
  bool _internal_has_meta() const;
  public:
  void clear_meta();
  const ::Property::BooleanPropertyMetadata& meta() const;
  PROTOBUF_NODISCARD ::Property::BooleanPropertyMetadata* release_meta();
  ::Property::BooleanPropertyMetadata* mutable_meta();
  void set_allocated_meta(::Property::BooleanPropertyMetadata* meta);
  private:
  const ::Property::BooleanPropertyMetadata& _internal_meta() const;
  ::Property::BooleanPropertyMetadata* _internal_mutable_meta();
  public:
  void unsafe_arena_set_allocated_meta(
      ::Property::BooleanPropertyMetadata* meta);
  ::Property::BooleanPropertyMetadata* unsafe_arena_release_meta();

  // bool default = 2;
  void clear_default_();
  bool default_() const;
  void set_default_(bool value);
  private:
  bool _internal_default_() const;
  void _internal_set_default_(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Property.BooleanPropertyDeclaration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Property::BooleanPropertyMetadata* meta_;
    bool default__;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class BooleanEditingMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Property.BooleanEditingMetadata) */ {
 public:
  inline BooleanEditingMetadata() : BooleanEditingMetadata(nullptr) {}
  explicit PROTOBUF_CONSTEXPR BooleanEditingMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BooleanEditingMetadata(const BooleanEditingMetadata& from);
  BooleanEditingMetadata(BooleanEditingMetadata&& from) noexcept
    : BooleanEditingMetadata() {
    *this = ::std::move(from);
  }

  inline BooleanEditingMetadata& operator=(const BooleanEditingMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline BooleanEditingMetadata& operator=(BooleanEditingMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BooleanEditingMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const BooleanEditingMetadata* internal_default_instance() {
    return reinterpret_cast<const BooleanEditingMetadata*>(
               &_BooleanEditingMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(BooleanEditingMetadata& a, BooleanEditingMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(BooleanEditingMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BooleanEditingMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BooleanEditingMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BooleanEditingMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const BooleanEditingMetadata& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const BooleanEditingMetadata& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.BooleanEditingMetadata";
  }
  protected:
  explicit BooleanEditingMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Property.BooleanEditingMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class BooleanGeneratorMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.BooleanGeneratorMetadata) */ {
 public:
  inline BooleanGeneratorMetadata() : BooleanGeneratorMetadata(nullptr) {}
  ~BooleanGeneratorMetadata() override;
  explicit PROTOBUF_CONSTEXPR BooleanGeneratorMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BooleanGeneratorMetadata(const BooleanGeneratorMetadata& from);
  BooleanGeneratorMetadata(BooleanGeneratorMetadata&& from) noexcept
    : BooleanGeneratorMetadata() {
    *this = ::std::move(from);
  }

  inline BooleanGeneratorMetadata& operator=(const BooleanGeneratorMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline BooleanGeneratorMetadata& operator=(BooleanGeneratorMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BooleanGeneratorMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const BooleanGeneratorMetadata* internal_default_instance() {
    return reinterpret_cast<const BooleanGeneratorMetadata*>(
               &_BooleanGeneratorMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(BooleanGeneratorMetadata& a, BooleanGeneratorMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(BooleanGeneratorMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BooleanGeneratorMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BooleanGeneratorMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BooleanGeneratorMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BooleanGeneratorMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BooleanGeneratorMetadata& from) {
    BooleanGeneratorMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BooleanGeneratorMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.BooleanGeneratorMetadata";
  }
  protected:
  explicit BooleanGeneratorMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
    kEditFieldNumber = 2,
  };
  // .Property.GeneratorMetadata base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::Property::GeneratorMetadata& base() const;
  PROTOBUF_NODISCARD ::Property::GeneratorMetadata* release_base();
  ::Property::GeneratorMetadata* mutable_base();
  void set_allocated_base(::Property::GeneratorMetadata* base);
  private:
  const ::Property::GeneratorMetadata& _internal_base() const;
  ::Property::GeneratorMetadata* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::Property::GeneratorMetadata* base);
  ::Property::GeneratorMetadata* unsafe_arena_release_base();

  // optional .Property.BooleanEditingMetadata edit = 2;
  bool has_edit() const;
  private:
  bool _internal_has_edit() const;
  public:
  void clear_edit();
  const ::Property::BooleanEditingMetadata& edit() const;
  PROTOBUF_NODISCARD ::Property::BooleanEditingMetadata* release_edit();
  ::Property::BooleanEditingMetadata* mutable_edit();
  void set_allocated_edit(::Property::BooleanEditingMetadata* edit);
  private:
  const ::Property::BooleanEditingMetadata& _internal_edit() const;
  ::Property::BooleanEditingMetadata* _internal_mutable_edit();
  public:
  void unsafe_arena_set_allocated_edit(
      ::Property::BooleanEditingMetadata* edit);
  ::Property::BooleanEditingMetadata* unsafe_arena_release_edit();

  // @@protoc_insertion_point(class_scope:Property.BooleanGeneratorMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::Property::GeneratorMetadata* base_;
    ::Property::BooleanEditingMetadata* edit_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class BooleanPropertyMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.BooleanPropertyMetadata) */ {
 public:
  inline BooleanPropertyMetadata() : BooleanPropertyMetadata(nullptr) {}
  ~BooleanPropertyMetadata() override;
  explicit PROTOBUF_CONSTEXPR BooleanPropertyMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BooleanPropertyMetadata(const BooleanPropertyMetadata& from);
  BooleanPropertyMetadata(BooleanPropertyMetadata&& from) noexcept
    : BooleanPropertyMetadata() {
    *this = ::std::move(from);
  }

  inline BooleanPropertyMetadata& operator=(const BooleanPropertyMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline BooleanPropertyMetadata& operator=(BooleanPropertyMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BooleanPropertyMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const BooleanPropertyMetadata* internal_default_instance() {
    return reinterpret_cast<const BooleanPropertyMetadata*>(
               &_BooleanPropertyMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(BooleanPropertyMetadata& a, BooleanPropertyMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(BooleanPropertyMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BooleanPropertyMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BooleanPropertyMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BooleanPropertyMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BooleanPropertyMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BooleanPropertyMetadata& from) {
    BooleanPropertyMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BooleanPropertyMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.BooleanPropertyMetadata";
  }
  protected:
  explicit BooleanPropertyMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
    kEditFieldNumber = 2,
  };
  // .Property.PropertyMetadata base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::Property::PropertyMetadata& base() const;
  PROTOBUF_NODISCARD ::Property::PropertyMetadata* release_base();
  ::Property::PropertyMetadata* mutable_base();
  void set_allocated_base(::Property::PropertyMetadata* base);
  private:
  const ::Property::PropertyMetadata& _internal_base() const;
  ::Property::PropertyMetadata* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::Property::PropertyMetadata* base);
  ::Property::PropertyMetadata* unsafe_arena_release_base();

  // optional .Property.BooleanEditingMetadata edit = 2;
  bool has_edit() const;
  private:
  bool _internal_has_edit() const;
  public:
  void clear_edit();
  const ::Property::BooleanEditingMetadata& edit() const;
  PROTOBUF_NODISCARD ::Property::BooleanEditingMetadata* release_edit();
  ::Property::BooleanEditingMetadata* mutable_edit();
  void set_allocated_edit(::Property::BooleanEditingMetadata* edit);
  private:
  const ::Property::BooleanEditingMetadata& _internal_edit() const;
  ::Property::BooleanEditingMetadata* _internal_mutable_edit();
  public:
  void unsafe_arena_set_allocated_edit(
      ::Property::BooleanEditingMetadata* edit);
  ::Property::BooleanEditingMetadata* unsafe_arena_release_edit();

  // @@protoc_insertion_point(class_scope:Property.BooleanPropertyMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::Property::PropertyMetadata* base_;
    ::Property::BooleanEditingMetadata* edit_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class JsonPropertyAssignment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.JsonPropertyAssignment) */ {
 public:
  inline JsonPropertyAssignment() : JsonPropertyAssignment(nullptr) {}
  ~JsonPropertyAssignment() override;
  explicit PROTOBUF_CONSTEXPR JsonPropertyAssignment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JsonPropertyAssignment(const JsonPropertyAssignment& from);
  JsonPropertyAssignment(JsonPropertyAssignment&& from) noexcept
    : JsonPropertyAssignment() {
    *this = ::std::move(from);
  }

  inline JsonPropertyAssignment& operator=(const JsonPropertyAssignment& from) {
    CopyFrom(from);
    return *this;
  }
  inline JsonPropertyAssignment& operator=(JsonPropertyAssignment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JsonPropertyAssignment& default_instance() {
    return *internal_default_instance();
  }
  static inline const JsonPropertyAssignment* internal_default_instance() {
    return reinterpret_cast<const JsonPropertyAssignment*>(
               &_JsonPropertyAssignment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(JsonPropertyAssignment& a, JsonPropertyAssignment& b) {
    a.Swap(&b);
  }
  inline void Swap(JsonPropertyAssignment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JsonPropertyAssignment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JsonPropertyAssignment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JsonPropertyAssignment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JsonPropertyAssignment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const JsonPropertyAssignment& from) {
    JsonPropertyAssignment::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JsonPropertyAssignment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.JsonPropertyAssignment";
  }
  protected:
  explicit JsonPropertyAssignment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssignmentIdFieldNumber = 4,
    kValueFieldNumber = 3,
    kPriorityFieldNumber = 2,
  };
  // string assignmentId = 4;
  void clear_assignmentid();
  const std::string& assignmentid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_assignmentid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_assignmentid();
  PROTOBUF_NODISCARD std::string* release_assignmentid();
  void set_allocated_assignmentid(std::string* assignmentid);
  private:
  const std::string& _internal_assignmentid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_assignmentid(const std::string& value);
  std::string* _internal_mutable_assignmentid();
  public:

  // .Property.JsonPropertyValue value = 3;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::Property::JsonPropertyValue& value() const;
  PROTOBUF_NODISCARD ::Property::JsonPropertyValue* release_value();
  ::Property::JsonPropertyValue* mutable_value();
  void set_allocated_value(::Property::JsonPropertyValue* value);
  private:
  const ::Property::JsonPropertyValue& _internal_value() const;
  ::Property::JsonPropertyValue* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::Property::JsonPropertyValue* value);
  ::Property::JsonPropertyValue* unsafe_arena_release_value();

  // int32 priority = 2;
  void clear_priority();
  int32_t priority() const;
  void set_priority(int32_t value);
  private:
  int32_t _internal_priority() const;
  void _internal_set_priority(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Property.JsonPropertyAssignment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr assignmentid_;
    ::Property::JsonPropertyValue* value_;
    int32_t priority_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class JsonPropertyValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.JsonPropertyValue) */ {
 public:
  inline JsonPropertyValue() : JsonPropertyValue(nullptr) {}
  ~JsonPropertyValue() override;
  explicit PROTOBUF_CONSTEXPR JsonPropertyValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JsonPropertyValue(const JsonPropertyValue& from);
  JsonPropertyValue(JsonPropertyValue&& from) noexcept
    : JsonPropertyValue() {
    *this = ::std::move(from);
  }

  inline JsonPropertyValue& operator=(const JsonPropertyValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline JsonPropertyValue& operator=(JsonPropertyValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JsonPropertyValue& default_instance() {
    return *internal_default_instance();
  }
  enum ValueTypeCase {
    kConstantJson = 1,
    kRef = 2,
    kExpr = 3,
    kUseDefault = 4,
    kCustom = 10,
    VALUETYPE_NOT_SET = 0,
  };

  static inline const JsonPropertyValue* internal_default_instance() {
    return reinterpret_cast<const JsonPropertyValue*>(
               &_JsonPropertyValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(JsonPropertyValue& a, JsonPropertyValue& b) {
    a.Swap(&b);
  }
  inline void Swap(JsonPropertyValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JsonPropertyValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JsonPropertyValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JsonPropertyValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JsonPropertyValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const JsonPropertyValue& from) {
    JsonPropertyValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JsonPropertyValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.JsonPropertyValue";
  }
  protected:
  explicit JsonPropertyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConstantJsonFieldNumber = 1,
    kRefFieldNumber = 2,
    kExprFieldNumber = 3,
    kUseDefaultFieldNumber = 4,
    kCustomFieldNumber = 10,
  };
  // string constantJson = 1;
  bool has_constantjson() const;
  private:
  bool _internal_has_constantjson() const;
  public:
  void clear_constantjson();
  const std::string& constantjson() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_constantjson(ArgT0&& arg0, ArgT... args);
  std::string* mutable_constantjson();
  PROTOBUF_NODISCARD std::string* release_constantjson();
  void set_allocated_constantjson(std::string* constantjson);
  private:
  const std::string& _internal_constantjson() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_constantjson(const std::string& value);
  std::string* _internal_mutable_constantjson();
  public:

  // .Property.PropertyIdentifier ref = 2;
  bool has_ref() const;
  private:
  bool _internal_has_ref() const;
  public:
  void clear_ref();
  const ::Property::PropertyIdentifier& ref() const;
  PROTOBUF_NODISCARD ::Property::PropertyIdentifier* release_ref();
  ::Property::PropertyIdentifier* mutable_ref();
  void set_allocated_ref(::Property::PropertyIdentifier* ref);
  private:
  const ::Property::PropertyIdentifier& _internal_ref() const;
  ::Property::PropertyIdentifier* _internal_mutable_ref();
  public:
  void unsafe_arena_set_allocated_ref(
      ::Property::PropertyIdentifier* ref);
  ::Property::PropertyIdentifier* unsafe_arena_release_ref();

  // string expr = 3;
  bool has_expr() const;
  private:
  bool _internal_has_expr() const;
  public:
  void clear_expr();
  const std::string& expr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_expr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_expr();
  PROTOBUF_NODISCARD std::string* release_expr();
  void set_allocated_expr(std::string* expr);
  private:
  const std::string& _internal_expr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_expr(const std::string& value);
  std::string* _internal_mutable_expr();
  public:

  // bool useDefault = 4;
  bool has_usedefault() const;
  private:
  bool _internal_has_usedefault() const;
  public:
  void clear_usedefault();
  bool usedefault() const;
  void set_usedefault(bool value);
  private:
  bool _internal_usedefault() const;
  void _internal_set_usedefault(bool value);
  public:

  // .Property.CustomGeneratorValue custom = 10;
  bool has_custom() const;
  private:
  bool _internal_has_custom() const;
  public:
  void clear_custom();
  const ::Property::CustomGeneratorValue& custom() const;
  PROTOBUF_NODISCARD ::Property::CustomGeneratorValue* release_custom();
  ::Property::CustomGeneratorValue* mutable_custom();
  void set_allocated_custom(::Property::CustomGeneratorValue* custom);
  private:
  const ::Property::CustomGeneratorValue& _internal_custom() const;
  ::Property::CustomGeneratorValue* _internal_mutable_custom();
  public:
  void unsafe_arena_set_allocated_custom(
      ::Property::CustomGeneratorValue* custom);
  ::Property::CustomGeneratorValue* unsafe_arena_release_custom();

  void clear_ValueType();
  ValueTypeCase ValueType_case() const;
  // @@protoc_insertion_point(class_scope:Property.JsonPropertyValue)
 private:
  class _Internal;
  void set_has_constantjson();
  void set_has_ref();
  void set_has_expr();
  void set_has_usedefault();
  void set_has_custom();

  inline bool has_ValueType() const;
  inline void clear_has_ValueType();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union ValueTypeUnion {
      constexpr ValueTypeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr constantjson_;
      ::Property::PropertyIdentifier* ref_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr expr_;
      bool usedefault_;
      ::Property::CustomGeneratorValue* custom_;
    } ValueType_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class JsonPropertyDeclaration final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.JsonPropertyDeclaration) */ {
 public:
  inline JsonPropertyDeclaration() : JsonPropertyDeclaration(nullptr) {}
  ~JsonPropertyDeclaration() override;
  explicit PROTOBUF_CONSTEXPR JsonPropertyDeclaration(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JsonPropertyDeclaration(const JsonPropertyDeclaration& from);
  JsonPropertyDeclaration(JsonPropertyDeclaration&& from) noexcept
    : JsonPropertyDeclaration() {
    *this = ::std::move(from);
  }

  inline JsonPropertyDeclaration& operator=(const JsonPropertyDeclaration& from) {
    CopyFrom(from);
    return *this;
  }
  inline JsonPropertyDeclaration& operator=(JsonPropertyDeclaration&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JsonPropertyDeclaration& default_instance() {
    return *internal_default_instance();
  }
  static inline const JsonPropertyDeclaration* internal_default_instance() {
    return reinterpret_cast<const JsonPropertyDeclaration*>(
               &_JsonPropertyDeclaration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(JsonPropertyDeclaration& a, JsonPropertyDeclaration& b) {
    a.Swap(&b);
  }
  inline void Swap(JsonPropertyDeclaration* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JsonPropertyDeclaration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JsonPropertyDeclaration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JsonPropertyDeclaration>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JsonPropertyDeclaration& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const JsonPropertyDeclaration& from) {
    JsonPropertyDeclaration::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JsonPropertyDeclaration* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.JsonPropertyDeclaration";
  }
  protected:
  explicit JsonPropertyDeclaration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDefaultJsonFieldNumber = 2,
    kMetaFieldNumber = 1,
  };
  // string defaultJson = 2;
  void clear_defaultjson();
  const std::string& defaultjson() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_defaultjson(ArgT0&& arg0, ArgT... args);
  std::string* mutable_defaultjson();
  PROTOBUF_NODISCARD std::string* release_defaultjson();
  void set_allocated_defaultjson(std::string* defaultjson);
  private:
  const std::string& _internal_defaultjson() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_defaultjson(const std::string& value);
  std::string* _internal_mutable_defaultjson();
  public:

  // .Property.JsonPropertyMetadata meta = 1;
  bool has_meta() const;
  private:
  bool _internal_has_meta() const;
  public:
  void clear_meta();
  const ::Property::JsonPropertyMetadata& meta() const;
  PROTOBUF_NODISCARD ::Property::JsonPropertyMetadata* release_meta();
  ::Property::JsonPropertyMetadata* mutable_meta();
  void set_allocated_meta(::Property::JsonPropertyMetadata* meta);
  private:
  const ::Property::JsonPropertyMetadata& _internal_meta() const;
  ::Property::JsonPropertyMetadata* _internal_mutable_meta();
  public:
  void unsafe_arena_set_allocated_meta(
      ::Property::JsonPropertyMetadata* meta);
  ::Property::JsonPropertyMetadata* unsafe_arena_release_meta();

  // @@protoc_insertion_point(class_scope:Property.JsonPropertyDeclaration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr defaultjson_;
    ::Property::JsonPropertyMetadata* meta_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class JsonEditingMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Property.JsonEditingMetadata) */ {
 public:
  inline JsonEditingMetadata() : JsonEditingMetadata(nullptr) {}
  explicit PROTOBUF_CONSTEXPR JsonEditingMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JsonEditingMetadata(const JsonEditingMetadata& from);
  JsonEditingMetadata(JsonEditingMetadata&& from) noexcept
    : JsonEditingMetadata() {
    *this = ::std::move(from);
  }

  inline JsonEditingMetadata& operator=(const JsonEditingMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline JsonEditingMetadata& operator=(JsonEditingMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JsonEditingMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const JsonEditingMetadata* internal_default_instance() {
    return reinterpret_cast<const JsonEditingMetadata*>(
               &_JsonEditingMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(JsonEditingMetadata& a, JsonEditingMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(JsonEditingMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JsonEditingMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JsonEditingMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JsonEditingMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const JsonEditingMetadata& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const JsonEditingMetadata& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.JsonEditingMetadata";
  }
  protected:
  explicit JsonEditingMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Property.JsonEditingMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class JsonGeneratorMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.JsonGeneratorMetadata) */ {
 public:
  inline JsonGeneratorMetadata() : JsonGeneratorMetadata(nullptr) {}
  ~JsonGeneratorMetadata() override;
  explicit PROTOBUF_CONSTEXPR JsonGeneratorMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JsonGeneratorMetadata(const JsonGeneratorMetadata& from);
  JsonGeneratorMetadata(JsonGeneratorMetadata&& from) noexcept
    : JsonGeneratorMetadata() {
    *this = ::std::move(from);
  }

  inline JsonGeneratorMetadata& operator=(const JsonGeneratorMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline JsonGeneratorMetadata& operator=(JsonGeneratorMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JsonGeneratorMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const JsonGeneratorMetadata* internal_default_instance() {
    return reinterpret_cast<const JsonGeneratorMetadata*>(
               &_JsonGeneratorMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(JsonGeneratorMetadata& a, JsonGeneratorMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(JsonGeneratorMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JsonGeneratorMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JsonGeneratorMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JsonGeneratorMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JsonGeneratorMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const JsonGeneratorMetadata& from) {
    JsonGeneratorMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JsonGeneratorMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.JsonGeneratorMetadata";
  }
  protected:
  explicit JsonGeneratorMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
    kEditFieldNumber = 2,
  };
  // .Property.GeneratorMetadata base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::Property::GeneratorMetadata& base() const;
  PROTOBUF_NODISCARD ::Property::GeneratorMetadata* release_base();
  ::Property::GeneratorMetadata* mutable_base();
  void set_allocated_base(::Property::GeneratorMetadata* base);
  private:
  const ::Property::GeneratorMetadata& _internal_base() const;
  ::Property::GeneratorMetadata* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::Property::GeneratorMetadata* base);
  ::Property::GeneratorMetadata* unsafe_arena_release_base();

  // optional .Property.JsonEditingMetadata edit = 2;
  bool has_edit() const;
  private:
  bool _internal_has_edit() const;
  public:
  void clear_edit();
  const ::Property::JsonEditingMetadata& edit() const;
  PROTOBUF_NODISCARD ::Property::JsonEditingMetadata* release_edit();
  ::Property::JsonEditingMetadata* mutable_edit();
  void set_allocated_edit(::Property::JsonEditingMetadata* edit);
  private:
  const ::Property::JsonEditingMetadata& _internal_edit() const;
  ::Property::JsonEditingMetadata* _internal_mutable_edit();
  public:
  void unsafe_arena_set_allocated_edit(
      ::Property::JsonEditingMetadata* edit);
  ::Property::JsonEditingMetadata* unsafe_arena_release_edit();

  // @@protoc_insertion_point(class_scope:Property.JsonGeneratorMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::Property::GeneratorMetadata* base_;
    ::Property::JsonEditingMetadata* edit_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class JsonPropertyMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.JsonPropertyMetadata) */ {
 public:
  inline JsonPropertyMetadata() : JsonPropertyMetadata(nullptr) {}
  ~JsonPropertyMetadata() override;
  explicit PROTOBUF_CONSTEXPR JsonPropertyMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JsonPropertyMetadata(const JsonPropertyMetadata& from);
  JsonPropertyMetadata(JsonPropertyMetadata&& from) noexcept
    : JsonPropertyMetadata() {
    *this = ::std::move(from);
  }

  inline JsonPropertyMetadata& operator=(const JsonPropertyMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline JsonPropertyMetadata& operator=(JsonPropertyMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JsonPropertyMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const JsonPropertyMetadata* internal_default_instance() {
    return reinterpret_cast<const JsonPropertyMetadata*>(
               &_JsonPropertyMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(JsonPropertyMetadata& a, JsonPropertyMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(JsonPropertyMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JsonPropertyMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JsonPropertyMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JsonPropertyMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JsonPropertyMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const JsonPropertyMetadata& from) {
    JsonPropertyMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JsonPropertyMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.JsonPropertyMetadata";
  }
  protected:
  explicit JsonPropertyMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
    kEditFieldNumber = 2,
  };
  // .Property.PropertyMetadata base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::Property::PropertyMetadata& base() const;
  PROTOBUF_NODISCARD ::Property::PropertyMetadata* release_base();
  ::Property::PropertyMetadata* mutable_base();
  void set_allocated_base(::Property::PropertyMetadata* base);
  private:
  const ::Property::PropertyMetadata& _internal_base() const;
  ::Property::PropertyMetadata* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::Property::PropertyMetadata* base);
  ::Property::PropertyMetadata* unsafe_arena_release_base();

  // optional .Property.JsonEditingMetadata edit = 2;
  bool has_edit() const;
  private:
  bool _internal_has_edit() const;
  public:
  void clear_edit();
  const ::Property::JsonEditingMetadata& edit() const;
  PROTOBUF_NODISCARD ::Property::JsonEditingMetadata* release_edit();
  ::Property::JsonEditingMetadata* mutable_edit();
  void set_allocated_edit(::Property::JsonEditingMetadata* edit);
  private:
  const ::Property::JsonEditingMetadata& _internal_edit() const;
  ::Property::JsonEditingMetadata* _internal_mutable_edit();
  public:
  void unsafe_arena_set_allocated_edit(
      ::Property::JsonEditingMetadata* edit);
  ::Property::JsonEditingMetadata* unsafe_arena_release_edit();

  // @@protoc_insertion_point(class_scope:Property.JsonPropertyMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::Property::PropertyMetadata* base_;
    ::Property::JsonEditingMetadata* edit_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class TransformSet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.TransformSet) */ {
 public:
  inline TransformSet() : TransformSet(nullptr) {}
  ~TransformSet() override;
  explicit PROTOBUF_CONSTEXPR TransformSet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransformSet(const TransformSet& from);
  TransformSet(TransformSet&& from) noexcept
    : TransformSet() {
    *this = ::std::move(from);
  }

  inline TransformSet& operator=(const TransformSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransformSet& operator=(TransformSet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransformSet& default_instance() {
    return *internal_default_instance();
  }
  enum SetTypeCase {
    kSrt = 1,
    kSqt = 2,
    kLook = 3,
    kRef = 5,
    kExpr = 6,
    kUseDefault = 7,
    kUseSource = 8,
    kInterpSrt = 9,
    kInterpSqt = 10,
    kInterpLook = 11,
    kCustom = 12,
    kConditional = 13,
    kApproach = 14,
    SETTYPE_NOT_SET = 0,
  };

  static inline const TransformSet* internal_default_instance() {
    return reinterpret_cast<const TransformSet*>(
               &_TransformSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(TransformSet& a, TransformSet& b) {
    a.Swap(&b);
  }
  inline void Swap(TransformSet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransformSet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransformSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransformSet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransformSet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransformSet& from) {
    TransformSet::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransformSet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.TransformSet";
  }
  protected:
  explicit TransformSet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrtFieldNumber = 1,
    kSqtFieldNumber = 2,
    kLookFieldNumber = 3,
    kRefFieldNumber = 5,
    kExprFieldNumber = 6,
    kUseDefaultFieldNumber = 7,
    kUseSourceFieldNumber = 8,
    kInterpSrtFieldNumber = 9,
    kInterpSqtFieldNumber = 10,
    kInterpLookFieldNumber = 11,
    kCustomFieldNumber = 12,
    kConditionalFieldNumber = 13,
    kApproachFieldNumber = 14,
  };
  // .Property.TransformSetSRT srt = 1;
  bool has_srt() const;
  private:
  bool _internal_has_srt() const;
  public:
  void clear_srt();
  const ::Property::TransformSetSRT& srt() const;
  PROTOBUF_NODISCARD ::Property::TransformSetSRT* release_srt();
  ::Property::TransformSetSRT* mutable_srt();
  void set_allocated_srt(::Property::TransformSetSRT* srt);
  private:
  const ::Property::TransformSetSRT& _internal_srt() const;
  ::Property::TransformSetSRT* _internal_mutable_srt();
  public:
  void unsafe_arena_set_allocated_srt(
      ::Property::TransformSetSRT* srt);
  ::Property::TransformSetSRT* unsafe_arena_release_srt();

  // .Property.TransformSetSQT sqt = 2;
  bool has_sqt() const;
  private:
  bool _internal_has_sqt() const;
  public:
  void clear_sqt();
  const ::Property::TransformSetSQT& sqt() const;
  PROTOBUF_NODISCARD ::Property::TransformSetSQT* release_sqt();
  ::Property::TransformSetSQT* mutable_sqt();
  void set_allocated_sqt(::Property::TransformSetSQT* sqt);
  private:
  const ::Property::TransformSetSQT& _internal_sqt() const;
  ::Property::TransformSetSQT* _internal_mutable_sqt();
  public:
  void unsafe_arena_set_allocated_sqt(
      ::Property::TransformSetSQT* sqt);
  ::Property::TransformSetSQT* unsafe_arena_release_sqt();

  // .Property.TransformSetLookAt look = 3;
  bool has_look() const;
  private:
  bool _internal_has_look() const;
  public:
  void clear_look();
  const ::Property::TransformSetLookAt& look() const;
  PROTOBUF_NODISCARD ::Property::TransformSetLookAt* release_look();
  ::Property::TransformSetLookAt* mutable_look();
  void set_allocated_look(::Property::TransformSetLookAt* look);
  private:
  const ::Property::TransformSetLookAt& _internal_look() const;
  ::Property::TransformSetLookAt* _internal_mutable_look();
  public:
  void unsafe_arena_set_allocated_look(
      ::Property::TransformSetLookAt* look);
  ::Property::TransformSetLookAt* unsafe_arena_release_look();

  // .Property.PropertyIdentifier ref = 5;
  bool has_ref() const;
  private:
  bool _internal_has_ref() const;
  public:
  void clear_ref();
  const ::Property::PropertyIdentifier& ref() const;
  PROTOBUF_NODISCARD ::Property::PropertyIdentifier* release_ref();
  ::Property::PropertyIdentifier* mutable_ref();
  void set_allocated_ref(::Property::PropertyIdentifier* ref);
  private:
  const ::Property::PropertyIdentifier& _internal_ref() const;
  ::Property::PropertyIdentifier* _internal_mutable_ref();
  public:
  void unsafe_arena_set_allocated_ref(
      ::Property::PropertyIdentifier* ref);
  ::Property::PropertyIdentifier* unsafe_arena_release_ref();

  // string expr = 6;
  bool has_expr() const;
  private:
  bool _internal_has_expr() const;
  public:
  void clear_expr();
  const std::string& expr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_expr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_expr();
  PROTOBUF_NODISCARD std::string* release_expr();
  void set_allocated_expr(std::string* expr);
  private:
  const std::string& _internal_expr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_expr(const std::string& value);
  std::string* _internal_mutable_expr();
  public:

  // bool useDefault = 7;
  bool has_usedefault() const;
  private:
  bool _internal_has_usedefault() const;
  public:
  void clear_usedefault();
  bool usedefault() const;
  void set_usedefault(bool value);
  private:
  bool _internal_usedefault() const;
  void _internal_set_usedefault(bool value);
  public:

  // bool useSource = 8;
  bool has_usesource() const;
  private:
  bool _internal_has_usesource() const;
  public:
  void clear_usesource();
  bool usesource() const;
  void set_usesource(bool value);
  private:
  bool _internal_usesource() const;
  void _internal_set_usesource(bool value);
  public:

  // .Property.TransformSetInterpolatorSRT interpSrt = 9;
  bool has_interpsrt() const;
  private:
  bool _internal_has_interpsrt() const;
  public:
  void clear_interpsrt();
  const ::Property::TransformSetInterpolatorSRT& interpsrt() const;
  PROTOBUF_NODISCARD ::Property::TransformSetInterpolatorSRT* release_interpsrt();
  ::Property::TransformSetInterpolatorSRT* mutable_interpsrt();
  void set_allocated_interpsrt(::Property::TransformSetInterpolatorSRT* interpsrt);
  private:
  const ::Property::TransformSetInterpolatorSRT& _internal_interpsrt() const;
  ::Property::TransformSetInterpolatorSRT* _internal_mutable_interpsrt();
  public:
  void unsafe_arena_set_allocated_interpsrt(
      ::Property::TransformSetInterpolatorSRT* interpsrt);
  ::Property::TransformSetInterpolatorSRT* unsafe_arena_release_interpsrt();

  // .Property.TransformSetInterpolatorSQT interpSqt = 10;
  bool has_interpsqt() const;
  private:
  bool _internal_has_interpsqt() const;
  public:
  void clear_interpsqt();
  const ::Property::TransformSetInterpolatorSQT& interpsqt() const;
  PROTOBUF_NODISCARD ::Property::TransformSetInterpolatorSQT* release_interpsqt();
  ::Property::TransformSetInterpolatorSQT* mutable_interpsqt();
  void set_allocated_interpsqt(::Property::TransformSetInterpolatorSQT* interpsqt);
  private:
  const ::Property::TransformSetInterpolatorSQT& _internal_interpsqt() const;
  ::Property::TransformSetInterpolatorSQT* _internal_mutable_interpsqt();
  public:
  void unsafe_arena_set_allocated_interpsqt(
      ::Property::TransformSetInterpolatorSQT* interpsqt);
  ::Property::TransformSetInterpolatorSQT* unsafe_arena_release_interpsqt();

  // .Property.TransformSetInterpolatorLookAt interpLook = 11;
  bool has_interplook() const;
  private:
  bool _internal_has_interplook() const;
  public:
  void clear_interplook();
  const ::Property::TransformSetInterpolatorLookAt& interplook() const;
  PROTOBUF_NODISCARD ::Property::TransformSetInterpolatorLookAt* release_interplook();
  ::Property::TransformSetInterpolatorLookAt* mutable_interplook();
  void set_allocated_interplook(::Property::TransformSetInterpolatorLookAt* interplook);
  private:
  const ::Property::TransformSetInterpolatorLookAt& _internal_interplook() const;
  ::Property::TransformSetInterpolatorLookAt* _internal_mutable_interplook();
  public:
  void unsafe_arena_set_allocated_interplook(
      ::Property::TransformSetInterpolatorLookAt* interplook);
  ::Property::TransformSetInterpolatorLookAt* unsafe_arena_release_interplook();

  // .Property.CustomGeneratorValue custom = 12;
  bool has_custom() const;
  private:
  bool _internal_has_custom() const;
  public:
  void clear_custom();
  const ::Property::CustomGeneratorValue& custom() const;
  PROTOBUF_NODISCARD ::Property::CustomGeneratorValue* release_custom();
  ::Property::CustomGeneratorValue* mutable_custom();
  void set_allocated_custom(::Property::CustomGeneratorValue* custom);
  private:
  const ::Property::CustomGeneratorValue& _internal_custom() const;
  ::Property::CustomGeneratorValue* _internal_mutable_custom();
  public:
  void unsafe_arena_set_allocated_custom(
      ::Property::CustomGeneratorValue* custom);
  ::Property::CustomGeneratorValue* unsafe_arena_release_custom();

  // .Property.TransformSetConditional conditional = 13;
  bool has_conditional() const;
  private:
  bool _internal_has_conditional() const;
  public:
  void clear_conditional();
  const ::Property::TransformSetConditional& conditional() const;
  PROTOBUF_NODISCARD ::Property::TransformSetConditional* release_conditional();
  ::Property::TransformSetConditional* mutable_conditional();
  void set_allocated_conditional(::Property::TransformSetConditional* conditional);
  private:
  const ::Property::TransformSetConditional& _internal_conditional() const;
  ::Property::TransformSetConditional* _internal_mutable_conditional();
  public:
  void unsafe_arena_set_allocated_conditional(
      ::Property::TransformSetConditional* conditional);
  ::Property::TransformSetConditional* unsafe_arena_release_conditional();

  // .Property.TransformSetApproach approach = 14;
  bool has_approach() const;
  private:
  bool _internal_has_approach() const;
  public:
  void clear_approach();
  const ::Property::TransformSetApproach& approach() const;
  PROTOBUF_NODISCARD ::Property::TransformSetApproach* release_approach();
  ::Property::TransformSetApproach* mutable_approach();
  void set_allocated_approach(::Property::TransformSetApproach* approach);
  private:
  const ::Property::TransformSetApproach& _internal_approach() const;
  ::Property::TransformSetApproach* _internal_mutable_approach();
  public:
  void unsafe_arena_set_allocated_approach(
      ::Property::TransformSetApproach* approach);
  ::Property::TransformSetApproach* unsafe_arena_release_approach();

  void clear_SetType();
  SetTypeCase SetType_case() const;
  // @@protoc_insertion_point(class_scope:Property.TransformSet)
 private:
  class _Internal;
  void set_has_srt();
  void set_has_sqt();
  void set_has_look();
  void set_has_ref();
  void set_has_expr();
  void set_has_usedefault();
  void set_has_usesource();
  void set_has_interpsrt();
  void set_has_interpsqt();
  void set_has_interplook();
  void set_has_custom();
  void set_has_conditional();
  void set_has_approach();

  inline bool has_SetType() const;
  inline void clear_has_SetType();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union SetTypeUnion {
      constexpr SetTypeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::Property::TransformSetSRT* srt_;
      ::Property::TransformSetSQT* sqt_;
      ::Property::TransformSetLookAt* look_;
      ::Property::PropertyIdentifier* ref_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr expr_;
      bool usedefault_;
      bool usesource_;
      ::Property::TransformSetInterpolatorSRT* interpsrt_;
      ::Property::TransformSetInterpolatorSQT* interpsqt_;
      ::Property::TransformSetInterpolatorLookAt* interplook_;
      ::Property::CustomGeneratorValue* custom_;
      ::Property::TransformSetConditional* conditional_;
      ::Property::TransformSetApproach* approach_;
    } SetType_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class TransformSetSRT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.TransformSetSRT) */ {
 public:
  inline TransformSetSRT() : TransformSetSRT(nullptr) {}
  ~TransformSetSRT() override;
  explicit PROTOBUF_CONSTEXPR TransformSetSRT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransformSetSRT(const TransformSetSRT& from);
  TransformSetSRT(TransformSetSRT&& from) noexcept
    : TransformSetSRT() {
    *this = ::std::move(from);
  }

  inline TransformSetSRT& operator=(const TransformSetSRT& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransformSetSRT& operator=(TransformSetSRT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransformSetSRT& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransformSetSRT* internal_default_instance() {
    return reinterpret_cast<const TransformSetSRT*>(
               &_TransformSetSRT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(TransformSetSRT& a, TransformSetSRT& b) {
    a.Swap(&b);
  }
  inline void Swap(TransformSetSRT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransformSetSRT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransformSetSRT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransformSetSRT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransformSetSRT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransformSetSRT& from) {
    TransformSetSRT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransformSetSRT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.TransformSetSRT";
  }
  protected:
  explicit TransformSetSRT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScaleFieldNumber = 1,
    kRotationEulerFieldNumber = 2,
    kTransformPosFieldNumber = 3,
  };
  // .Property.VectorPropertyValue scale = 1;
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  const ::Property::VectorPropertyValue& scale() const;
  PROTOBUF_NODISCARD ::Property::VectorPropertyValue* release_scale();
  ::Property::VectorPropertyValue* mutable_scale();
  void set_allocated_scale(::Property::VectorPropertyValue* scale);
  private:
  const ::Property::VectorPropertyValue& _internal_scale() const;
  ::Property::VectorPropertyValue* _internal_mutable_scale();
  public:
  void unsafe_arena_set_allocated_scale(
      ::Property::VectorPropertyValue* scale);
  ::Property::VectorPropertyValue* unsafe_arena_release_scale();

  // .Property.VectorPropertyValue rotationEuler = 2;
  bool has_rotationeuler() const;
  private:
  bool _internal_has_rotationeuler() const;
  public:
  void clear_rotationeuler();
  const ::Property::VectorPropertyValue& rotationeuler() const;
  PROTOBUF_NODISCARD ::Property::VectorPropertyValue* release_rotationeuler();
  ::Property::VectorPropertyValue* mutable_rotationeuler();
  void set_allocated_rotationeuler(::Property::VectorPropertyValue* rotationeuler);
  private:
  const ::Property::VectorPropertyValue& _internal_rotationeuler() const;
  ::Property::VectorPropertyValue* _internal_mutable_rotationeuler();
  public:
  void unsafe_arena_set_allocated_rotationeuler(
      ::Property::VectorPropertyValue* rotationeuler);
  ::Property::VectorPropertyValue* unsafe_arena_release_rotationeuler();

  // .Property.VectorPropertyValue transformPos = 3;
  bool has_transformpos() const;
  private:
  bool _internal_has_transformpos() const;
  public:
  void clear_transformpos();
  const ::Property::VectorPropertyValue& transformpos() const;
  PROTOBUF_NODISCARD ::Property::VectorPropertyValue* release_transformpos();
  ::Property::VectorPropertyValue* mutable_transformpos();
  void set_allocated_transformpos(::Property::VectorPropertyValue* transformpos);
  private:
  const ::Property::VectorPropertyValue& _internal_transformpos() const;
  ::Property::VectorPropertyValue* _internal_mutable_transformpos();
  public:
  void unsafe_arena_set_allocated_transformpos(
      ::Property::VectorPropertyValue* transformpos);
  ::Property::VectorPropertyValue* unsafe_arena_release_transformpos();

  // @@protoc_insertion_point(class_scope:Property.TransformSetSRT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Property::VectorPropertyValue* scale_;
    ::Property::VectorPropertyValue* rotationeuler_;
    ::Property::VectorPropertyValue* transformpos_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class TransformSetSQT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.TransformSetSQT) */ {
 public:
  inline TransformSetSQT() : TransformSetSQT(nullptr) {}
  ~TransformSetSQT() override;
  explicit PROTOBUF_CONSTEXPR TransformSetSQT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransformSetSQT(const TransformSetSQT& from);
  TransformSetSQT(TransformSetSQT&& from) noexcept
    : TransformSetSQT() {
    *this = ::std::move(from);
  }

  inline TransformSetSQT& operator=(const TransformSetSQT& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransformSetSQT& operator=(TransformSetSQT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransformSetSQT& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransformSetSQT* internal_default_instance() {
    return reinterpret_cast<const TransformSetSQT*>(
               &_TransformSetSQT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(TransformSetSQT& a, TransformSetSQT& b) {
    a.Swap(&b);
  }
  inline void Swap(TransformSetSQT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransformSetSQT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransformSetSQT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransformSetSQT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransformSetSQT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransformSetSQT& from) {
    TransformSetSQT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransformSetSQT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.TransformSetSQT";
  }
  protected:
  explicit TransformSetSQT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScaleFieldNumber = 1,
    kRotationQuatFieldNumber = 2,
    kTransformPosFieldNumber = 3,
  };
  // .Property.VectorPropertyValue scale = 1;
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  const ::Property::VectorPropertyValue& scale() const;
  PROTOBUF_NODISCARD ::Property::VectorPropertyValue* release_scale();
  ::Property::VectorPropertyValue* mutable_scale();
  void set_allocated_scale(::Property::VectorPropertyValue* scale);
  private:
  const ::Property::VectorPropertyValue& _internal_scale() const;
  ::Property::VectorPropertyValue* _internal_mutable_scale();
  public:
  void unsafe_arena_set_allocated_scale(
      ::Property::VectorPropertyValue* scale);
  ::Property::VectorPropertyValue* unsafe_arena_release_scale();

  // .Property.VectorPropertyValue rotationQuat = 2;
  bool has_rotationquat() const;
  private:
  bool _internal_has_rotationquat() const;
  public:
  void clear_rotationquat();
  const ::Property::VectorPropertyValue& rotationquat() const;
  PROTOBUF_NODISCARD ::Property::VectorPropertyValue* release_rotationquat();
  ::Property::VectorPropertyValue* mutable_rotationquat();
  void set_allocated_rotationquat(::Property::VectorPropertyValue* rotationquat);
  private:
  const ::Property::VectorPropertyValue& _internal_rotationquat() const;
  ::Property::VectorPropertyValue* _internal_mutable_rotationquat();
  public:
  void unsafe_arena_set_allocated_rotationquat(
      ::Property::VectorPropertyValue* rotationquat);
  ::Property::VectorPropertyValue* unsafe_arena_release_rotationquat();

  // .Property.VectorPropertyValue transformPos = 3;
  bool has_transformpos() const;
  private:
  bool _internal_has_transformpos() const;
  public:
  void clear_transformpos();
  const ::Property::VectorPropertyValue& transformpos() const;
  PROTOBUF_NODISCARD ::Property::VectorPropertyValue* release_transformpos();
  ::Property::VectorPropertyValue* mutable_transformpos();
  void set_allocated_transformpos(::Property::VectorPropertyValue* transformpos);
  private:
  const ::Property::VectorPropertyValue& _internal_transformpos() const;
  ::Property::VectorPropertyValue* _internal_mutable_transformpos();
  public:
  void unsafe_arena_set_allocated_transformpos(
      ::Property::VectorPropertyValue* transformpos);
  ::Property::VectorPropertyValue* unsafe_arena_release_transformpos();

  // @@protoc_insertion_point(class_scope:Property.TransformSetSQT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Property::VectorPropertyValue* scale_;
    ::Property::VectorPropertyValue* rotationquat_;
    ::Property::VectorPropertyValue* transformpos_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class TransformSetLookAt final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.TransformSetLookAt) */ {
 public:
  inline TransformSetLookAt() : TransformSetLookAt(nullptr) {}
  ~TransformSetLookAt() override;
  explicit PROTOBUF_CONSTEXPR TransformSetLookAt(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransformSetLookAt(const TransformSetLookAt& from);
  TransformSetLookAt(TransformSetLookAt&& from) noexcept
    : TransformSetLookAt() {
    *this = ::std::move(from);
  }

  inline TransformSetLookAt& operator=(const TransformSetLookAt& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransformSetLookAt& operator=(TransformSetLookAt&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransformSetLookAt& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransformSetLookAt* internal_default_instance() {
    return reinterpret_cast<const TransformSetLookAt*>(
               &_TransformSetLookAt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(TransformSetLookAt& a, TransformSetLookAt& b) {
    a.Swap(&b);
  }
  inline void Swap(TransformSetLookAt* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransformSetLookAt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransformSetLookAt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransformSetLookAt>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransformSetLookAt& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransformSetLookAt& from) {
    TransformSetLookAt::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransformSetLookAt* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.TransformSetLookAt";
  }
  protected:
  explicit TransformSetLookAt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEyeFieldNumber = 1,
    kLookAtFieldNumber = 2,
    kUpFieldNumber = 3,
  };
  // .Property.VectorPropertyValue eye = 1;
  bool has_eye() const;
  private:
  bool _internal_has_eye() const;
  public:
  void clear_eye();
  const ::Property::VectorPropertyValue& eye() const;
  PROTOBUF_NODISCARD ::Property::VectorPropertyValue* release_eye();
  ::Property::VectorPropertyValue* mutable_eye();
  void set_allocated_eye(::Property::VectorPropertyValue* eye);
  private:
  const ::Property::VectorPropertyValue& _internal_eye() const;
  ::Property::VectorPropertyValue* _internal_mutable_eye();
  public:
  void unsafe_arena_set_allocated_eye(
      ::Property::VectorPropertyValue* eye);
  ::Property::VectorPropertyValue* unsafe_arena_release_eye();

  // .Property.VectorPropertyValue lookAt = 2;
  bool has_lookat() const;
  private:
  bool _internal_has_lookat() const;
  public:
  void clear_lookat();
  const ::Property::VectorPropertyValue& lookat() const;
  PROTOBUF_NODISCARD ::Property::VectorPropertyValue* release_lookat();
  ::Property::VectorPropertyValue* mutable_lookat();
  void set_allocated_lookat(::Property::VectorPropertyValue* lookat);
  private:
  const ::Property::VectorPropertyValue& _internal_lookat() const;
  ::Property::VectorPropertyValue* _internal_mutable_lookat();
  public:
  void unsafe_arena_set_allocated_lookat(
      ::Property::VectorPropertyValue* lookat);
  ::Property::VectorPropertyValue* unsafe_arena_release_lookat();

  // optional .Property.VectorPropertyValue up = 3;
  bool has_up() const;
  private:
  bool _internal_has_up() const;
  public:
  void clear_up();
  const ::Property::VectorPropertyValue& up() const;
  PROTOBUF_NODISCARD ::Property::VectorPropertyValue* release_up();
  ::Property::VectorPropertyValue* mutable_up();
  void set_allocated_up(::Property::VectorPropertyValue* up);
  private:
  const ::Property::VectorPropertyValue& _internal_up() const;
  ::Property::VectorPropertyValue* _internal_mutable_up();
  public:
  void unsafe_arena_set_allocated_up(
      ::Property::VectorPropertyValue* up);
  ::Property::VectorPropertyValue* unsafe_arena_release_up();

  // @@protoc_insertion_point(class_scope:Property.TransformSetLookAt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::Property::VectorPropertyValue* eye_;
    ::Property::VectorPropertyValue* lookat_;
    ::Property::VectorPropertyValue* up_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class TransformSetInterpolatorSRT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.TransformSetInterpolatorSRT) */ {
 public:
  inline TransformSetInterpolatorSRT() : TransformSetInterpolatorSRT(nullptr) {}
  ~TransformSetInterpolatorSRT() override;
  explicit PROTOBUF_CONSTEXPR TransformSetInterpolatorSRT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransformSetInterpolatorSRT(const TransformSetInterpolatorSRT& from);
  TransformSetInterpolatorSRT(TransformSetInterpolatorSRT&& from) noexcept
    : TransformSetInterpolatorSRT() {
    *this = ::std::move(from);
  }

  inline TransformSetInterpolatorSRT& operator=(const TransformSetInterpolatorSRT& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransformSetInterpolatorSRT& operator=(TransformSetInterpolatorSRT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransformSetInterpolatorSRT& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransformSetInterpolatorSRT* internal_default_instance() {
    return reinterpret_cast<const TransformSetInterpolatorSRT*>(
               &_TransformSetInterpolatorSRT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(TransformSetInterpolatorSRT& a, TransformSetInterpolatorSRT& b) {
    a.Swap(&b);
  }
  inline void Swap(TransformSetInterpolatorSRT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransformSetInterpolatorSRT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransformSetInterpolatorSRT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransformSetInterpolatorSRT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransformSetInterpolatorSRT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransformSetInterpolatorSRT& from) {
    TransformSetInterpolatorSRT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransformSetInterpolatorSRT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.TransformSetInterpolatorSRT";
  }
  protected:
  explicit TransformSetInterpolatorSRT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kToFieldNumber = 2,
    kByFieldNumber = 3,
    kTFieldNumber = 4,
  };
  // .Property.TransformSetSRT from = 1;
  bool has_from() const;
  private:
  bool _internal_has_from() const;
  public:
  void clear_from();
  const ::Property::TransformSetSRT& from() const;
  PROTOBUF_NODISCARD ::Property::TransformSetSRT* release_from();
  ::Property::TransformSetSRT* mutable_from();
  void set_allocated_from(::Property::TransformSetSRT* from);
  private:
  const ::Property::TransformSetSRT& _internal_from() const;
  ::Property::TransformSetSRT* _internal_mutable_from();
  public:
  void unsafe_arena_set_allocated_from(
      ::Property::TransformSetSRT* from);
  ::Property::TransformSetSRT* unsafe_arena_release_from();

  // .Property.TransformSetSRT to = 2;
  bool has_to() const;
  private:
  bool _internal_has_to() const;
  public:
  void clear_to();
  const ::Property::TransformSetSRT& to() const;
  PROTOBUF_NODISCARD ::Property::TransformSetSRT* release_to();
  ::Property::TransformSetSRT* mutable_to();
  void set_allocated_to(::Property::TransformSetSRT* to);
  private:
  const ::Property::TransformSetSRT& _internal_to() const;
  ::Property::TransformSetSRT* _internal_mutable_to();
  public:
  void unsafe_arena_set_allocated_to(
      ::Property::TransformSetSRT* to);
  ::Property::TransformSetSRT* unsafe_arena_release_to();

  // .Property.Interpolation by = 3;
  bool has_by() const;
  private:
  bool _internal_has_by() const;
  public:
  void clear_by();
  const ::Property::Interpolation& by() const;
  PROTOBUF_NODISCARD ::Property::Interpolation* release_by();
  ::Property::Interpolation* mutable_by();
  void set_allocated_by(::Property::Interpolation* by);
  private:
  const ::Property::Interpolation& _internal_by() const;
  ::Property::Interpolation* _internal_mutable_by();
  public:
  void unsafe_arena_set_allocated_by(
      ::Property::Interpolation* by);
  ::Property::Interpolation* unsafe_arena_release_by();

  // .Property.ScalarPropertyValue t = 4;
  bool has_t() const;
  private:
  bool _internal_has_t() const;
  public:
  void clear_t();
  const ::Property::ScalarPropertyValue& t() const;
  PROTOBUF_NODISCARD ::Property::ScalarPropertyValue* release_t();
  ::Property::ScalarPropertyValue* mutable_t();
  void set_allocated_t(::Property::ScalarPropertyValue* t);
  private:
  const ::Property::ScalarPropertyValue& _internal_t() const;
  ::Property::ScalarPropertyValue* _internal_mutable_t();
  public:
  void unsafe_arena_set_allocated_t(
      ::Property::ScalarPropertyValue* t);
  ::Property::ScalarPropertyValue* unsafe_arena_release_t();

  // @@protoc_insertion_point(class_scope:Property.TransformSetInterpolatorSRT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Property::TransformSetSRT* from_;
    ::Property::TransformSetSRT* to_;
    ::Property::Interpolation* by_;
    ::Property::ScalarPropertyValue* t_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class TransformSetInterpolatorSQT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.TransformSetInterpolatorSQT) */ {
 public:
  inline TransformSetInterpolatorSQT() : TransformSetInterpolatorSQT(nullptr) {}
  ~TransformSetInterpolatorSQT() override;
  explicit PROTOBUF_CONSTEXPR TransformSetInterpolatorSQT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransformSetInterpolatorSQT(const TransformSetInterpolatorSQT& from);
  TransformSetInterpolatorSQT(TransformSetInterpolatorSQT&& from) noexcept
    : TransformSetInterpolatorSQT() {
    *this = ::std::move(from);
  }

  inline TransformSetInterpolatorSQT& operator=(const TransformSetInterpolatorSQT& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransformSetInterpolatorSQT& operator=(TransformSetInterpolatorSQT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransformSetInterpolatorSQT& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransformSetInterpolatorSQT* internal_default_instance() {
    return reinterpret_cast<const TransformSetInterpolatorSQT*>(
               &_TransformSetInterpolatorSQT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(TransformSetInterpolatorSQT& a, TransformSetInterpolatorSQT& b) {
    a.Swap(&b);
  }
  inline void Swap(TransformSetInterpolatorSQT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransformSetInterpolatorSQT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransformSetInterpolatorSQT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransformSetInterpolatorSQT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransformSetInterpolatorSQT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransformSetInterpolatorSQT& from) {
    TransformSetInterpolatorSQT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransformSetInterpolatorSQT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.TransformSetInterpolatorSQT";
  }
  protected:
  explicit TransformSetInterpolatorSQT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kToFieldNumber = 2,
    kByFieldNumber = 3,
    kTFieldNumber = 4,
  };
  // .Property.TransformSetSQT from = 1;
  bool has_from() const;
  private:
  bool _internal_has_from() const;
  public:
  void clear_from();
  const ::Property::TransformSetSQT& from() const;
  PROTOBUF_NODISCARD ::Property::TransformSetSQT* release_from();
  ::Property::TransformSetSQT* mutable_from();
  void set_allocated_from(::Property::TransformSetSQT* from);
  private:
  const ::Property::TransformSetSQT& _internal_from() const;
  ::Property::TransformSetSQT* _internal_mutable_from();
  public:
  void unsafe_arena_set_allocated_from(
      ::Property::TransformSetSQT* from);
  ::Property::TransformSetSQT* unsafe_arena_release_from();

  // .Property.TransformSetSQT to = 2;
  bool has_to() const;
  private:
  bool _internal_has_to() const;
  public:
  void clear_to();
  const ::Property::TransformSetSQT& to() const;
  PROTOBUF_NODISCARD ::Property::TransformSetSQT* release_to();
  ::Property::TransformSetSQT* mutable_to();
  void set_allocated_to(::Property::TransformSetSQT* to);
  private:
  const ::Property::TransformSetSQT& _internal_to() const;
  ::Property::TransformSetSQT* _internal_mutable_to();
  public:
  void unsafe_arena_set_allocated_to(
      ::Property::TransformSetSQT* to);
  ::Property::TransformSetSQT* unsafe_arena_release_to();

  // .Property.Interpolation by = 3;
  bool has_by() const;
  private:
  bool _internal_has_by() const;
  public:
  void clear_by();
  const ::Property::Interpolation& by() const;
  PROTOBUF_NODISCARD ::Property::Interpolation* release_by();
  ::Property::Interpolation* mutable_by();
  void set_allocated_by(::Property::Interpolation* by);
  private:
  const ::Property::Interpolation& _internal_by() const;
  ::Property::Interpolation* _internal_mutable_by();
  public:
  void unsafe_arena_set_allocated_by(
      ::Property::Interpolation* by);
  ::Property::Interpolation* unsafe_arena_release_by();

  // .Property.ScalarPropertyValue t = 4;
  bool has_t() const;
  private:
  bool _internal_has_t() const;
  public:
  void clear_t();
  const ::Property::ScalarPropertyValue& t() const;
  PROTOBUF_NODISCARD ::Property::ScalarPropertyValue* release_t();
  ::Property::ScalarPropertyValue* mutable_t();
  void set_allocated_t(::Property::ScalarPropertyValue* t);
  private:
  const ::Property::ScalarPropertyValue& _internal_t() const;
  ::Property::ScalarPropertyValue* _internal_mutable_t();
  public:
  void unsafe_arena_set_allocated_t(
      ::Property::ScalarPropertyValue* t);
  ::Property::ScalarPropertyValue* unsafe_arena_release_t();

  // @@protoc_insertion_point(class_scope:Property.TransformSetInterpolatorSQT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Property::TransformSetSQT* from_;
    ::Property::TransformSetSQT* to_;
    ::Property::Interpolation* by_;
    ::Property::ScalarPropertyValue* t_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class TransformSetInterpolatorLookAt final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.TransformSetInterpolatorLookAt) */ {
 public:
  inline TransformSetInterpolatorLookAt() : TransformSetInterpolatorLookAt(nullptr) {}
  ~TransformSetInterpolatorLookAt() override;
  explicit PROTOBUF_CONSTEXPR TransformSetInterpolatorLookAt(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransformSetInterpolatorLookAt(const TransformSetInterpolatorLookAt& from);
  TransformSetInterpolatorLookAt(TransformSetInterpolatorLookAt&& from) noexcept
    : TransformSetInterpolatorLookAt() {
    *this = ::std::move(from);
  }

  inline TransformSetInterpolatorLookAt& operator=(const TransformSetInterpolatorLookAt& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransformSetInterpolatorLookAt& operator=(TransformSetInterpolatorLookAt&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransformSetInterpolatorLookAt& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransformSetInterpolatorLookAt* internal_default_instance() {
    return reinterpret_cast<const TransformSetInterpolatorLookAt*>(
               &_TransformSetInterpolatorLookAt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(TransformSetInterpolatorLookAt& a, TransformSetInterpolatorLookAt& b) {
    a.Swap(&b);
  }
  inline void Swap(TransformSetInterpolatorLookAt* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransformSetInterpolatorLookAt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransformSetInterpolatorLookAt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransformSetInterpolatorLookAt>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransformSetInterpolatorLookAt& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransformSetInterpolatorLookAt& from) {
    TransformSetInterpolatorLookAt::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransformSetInterpolatorLookAt* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.TransformSetInterpolatorLookAt";
  }
  protected:
  explicit TransformSetInterpolatorLookAt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kToFieldNumber = 2,
    kByFieldNumber = 3,
    kTFieldNumber = 4,
  };
  // .Property.TransformSetLookAt from = 1;
  bool has_from() const;
  private:
  bool _internal_has_from() const;
  public:
  void clear_from();
  const ::Property::TransformSetLookAt& from() const;
  PROTOBUF_NODISCARD ::Property::TransformSetLookAt* release_from();
  ::Property::TransformSetLookAt* mutable_from();
  void set_allocated_from(::Property::TransformSetLookAt* from);
  private:
  const ::Property::TransformSetLookAt& _internal_from() const;
  ::Property::TransformSetLookAt* _internal_mutable_from();
  public:
  void unsafe_arena_set_allocated_from(
      ::Property::TransformSetLookAt* from);
  ::Property::TransformSetLookAt* unsafe_arena_release_from();

  // .Property.TransformSetLookAt to = 2;
  bool has_to() const;
  private:
  bool _internal_has_to() const;
  public:
  void clear_to();
  const ::Property::TransformSetLookAt& to() const;
  PROTOBUF_NODISCARD ::Property::TransformSetLookAt* release_to();
  ::Property::TransformSetLookAt* mutable_to();
  void set_allocated_to(::Property::TransformSetLookAt* to);
  private:
  const ::Property::TransformSetLookAt& _internal_to() const;
  ::Property::TransformSetLookAt* _internal_mutable_to();
  public:
  void unsafe_arena_set_allocated_to(
      ::Property::TransformSetLookAt* to);
  ::Property::TransformSetLookAt* unsafe_arena_release_to();

  // .Property.Interpolation by = 3;
  bool has_by() const;
  private:
  bool _internal_has_by() const;
  public:
  void clear_by();
  const ::Property::Interpolation& by() const;
  PROTOBUF_NODISCARD ::Property::Interpolation* release_by();
  ::Property::Interpolation* mutable_by();
  void set_allocated_by(::Property::Interpolation* by);
  private:
  const ::Property::Interpolation& _internal_by() const;
  ::Property::Interpolation* _internal_mutable_by();
  public:
  void unsafe_arena_set_allocated_by(
      ::Property::Interpolation* by);
  ::Property::Interpolation* unsafe_arena_release_by();

  // .Property.ScalarPropertyValue t = 4;
  bool has_t() const;
  private:
  bool _internal_has_t() const;
  public:
  void clear_t();
  const ::Property::ScalarPropertyValue& t() const;
  PROTOBUF_NODISCARD ::Property::ScalarPropertyValue* release_t();
  ::Property::ScalarPropertyValue* mutable_t();
  void set_allocated_t(::Property::ScalarPropertyValue* t);
  private:
  const ::Property::ScalarPropertyValue& _internal_t() const;
  ::Property::ScalarPropertyValue* _internal_mutable_t();
  public:
  void unsafe_arena_set_allocated_t(
      ::Property::ScalarPropertyValue* t);
  ::Property::ScalarPropertyValue* unsafe_arena_release_t();

  // @@protoc_insertion_point(class_scope:Property.TransformSetInterpolatorLookAt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Property::TransformSetLookAt* from_;
    ::Property::TransformSetLookAt* to_;
    ::Property::Interpolation* by_;
    ::Property::ScalarPropertyValue* t_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class TransformSetApproach final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.TransformSetApproach) */ {
 public:
  inline TransformSetApproach() : TransformSetApproach(nullptr) {}
  ~TransformSetApproach() override;
  explicit PROTOBUF_CONSTEXPR TransformSetApproach(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransformSetApproach(const TransformSetApproach& from);
  TransformSetApproach(TransformSetApproach&& from) noexcept
    : TransformSetApproach() {
    *this = ::std::move(from);
  }

  inline TransformSetApproach& operator=(const TransformSetApproach& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransformSetApproach& operator=(TransformSetApproach&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransformSetApproach& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransformSetApproach* internal_default_instance() {
    return reinterpret_cast<const TransformSetApproach*>(
               &_TransformSetApproach_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(TransformSetApproach& a, TransformSetApproach& b) {
    a.Swap(&b);
  }
  inline void Swap(TransformSetApproach* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransformSetApproach* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransformSetApproach* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransformSetApproach>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransformSetApproach& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransformSetApproach& from) {
    TransformSetApproach::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransformSetApproach* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.TransformSetApproach";
  }
  protected:
  explicit TransformSetApproach(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTFieldNumber = 1,
    kToFieldNumber = 2,
    kTimeToHalfFieldNumber = 3,
    kStartFieldNumber = 4,
  };
  // .Property.ScalarPropertyValue t = 1;
  bool has_t() const;
  private:
  bool _internal_has_t() const;
  public:
  void clear_t();
  const ::Property::ScalarPropertyValue& t() const;
  PROTOBUF_NODISCARD ::Property::ScalarPropertyValue* release_t();
  ::Property::ScalarPropertyValue* mutable_t();
  void set_allocated_t(::Property::ScalarPropertyValue* t);
  private:
  const ::Property::ScalarPropertyValue& _internal_t() const;
  ::Property::ScalarPropertyValue* _internal_mutable_t();
  public:
  void unsafe_arena_set_allocated_t(
      ::Property::ScalarPropertyValue* t);
  ::Property::ScalarPropertyValue* unsafe_arena_release_t();

  // .Property.TransformSet to = 2;
  bool has_to() const;
  private:
  bool _internal_has_to() const;
  public:
  void clear_to();
  const ::Property::TransformSet& to() const;
  PROTOBUF_NODISCARD ::Property::TransformSet* release_to();
  ::Property::TransformSet* mutable_to();
  void set_allocated_to(::Property::TransformSet* to);
  private:
  const ::Property::TransformSet& _internal_to() const;
  ::Property::TransformSet* _internal_mutable_to();
  public:
  void unsafe_arena_set_allocated_to(
      ::Property::TransformSet* to);
  ::Property::TransformSet* unsafe_arena_release_to();

  // .Property.ScalarPropertyValue timeToHalf = 3;
  bool has_timetohalf() const;
  private:
  bool _internal_has_timetohalf() const;
  public:
  void clear_timetohalf();
  const ::Property::ScalarPropertyValue& timetohalf() const;
  PROTOBUF_NODISCARD ::Property::ScalarPropertyValue* release_timetohalf();
  ::Property::ScalarPropertyValue* mutable_timetohalf();
  void set_allocated_timetohalf(::Property::ScalarPropertyValue* timetohalf);
  private:
  const ::Property::ScalarPropertyValue& _internal_timetohalf() const;
  ::Property::ScalarPropertyValue* _internal_mutable_timetohalf();
  public:
  void unsafe_arena_set_allocated_timetohalf(
      ::Property::ScalarPropertyValue* timetohalf);
  ::Property::ScalarPropertyValue* unsafe_arena_release_timetohalf();

  // .Property.TransformSet start = 4;
  bool has_start() const;
  private:
  bool _internal_has_start() const;
  public:
  void clear_start();
  const ::Property::TransformSet& start() const;
  PROTOBUF_NODISCARD ::Property::TransformSet* release_start();
  ::Property::TransformSet* mutable_start();
  void set_allocated_start(::Property::TransformSet* start);
  private:
  const ::Property::TransformSet& _internal_start() const;
  ::Property::TransformSet* _internal_mutable_start();
  public:
  void unsafe_arena_set_allocated_start(
      ::Property::TransformSet* start);
  ::Property::TransformSet* unsafe_arena_release_start();

  // @@protoc_insertion_point(class_scope:Property.TransformSetApproach)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Property::ScalarPropertyValue* t_;
    ::Property::TransformSet* to_;
    ::Property::ScalarPropertyValue* timetohalf_;
    ::Property::TransformSet* start_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class TransformSetConditional final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.TransformSetConditional) */ {
 public:
  inline TransformSetConditional() : TransformSetConditional(nullptr) {}
  ~TransformSetConditional() override;
  explicit PROTOBUF_CONSTEXPR TransformSetConditional(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransformSetConditional(const TransformSetConditional& from);
  TransformSetConditional(TransformSetConditional&& from) noexcept
    : TransformSetConditional() {
    *this = ::std::move(from);
  }

  inline TransformSetConditional& operator=(const TransformSetConditional& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransformSetConditional& operator=(TransformSetConditional&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransformSetConditional& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransformSetConditional* internal_default_instance() {
    return reinterpret_cast<const TransformSetConditional*>(
               &_TransformSetConditional_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(TransformSetConditional& a, TransformSetConditional& b) {
    a.Swap(&b);
  }
  inline void Swap(TransformSetConditional* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransformSetConditional* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransformSetConditional* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransformSetConditional>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransformSetConditional& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransformSetConditional& from) {
    TransformSetConditional::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransformSetConditional* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.TransformSetConditional";
  }
  protected:
  explicit TransformSetConditional(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConditionFieldNumber = 1,
    kTrueValueFieldNumber = 2,
    kFalseValueFieldNumber = 3,
  };
  // .Property.BooleanPropertyValue condition = 1;
  bool has_condition() const;
  private:
  bool _internal_has_condition() const;
  public:
  void clear_condition();
  const ::Property::BooleanPropertyValue& condition() const;
  PROTOBUF_NODISCARD ::Property::BooleanPropertyValue* release_condition();
  ::Property::BooleanPropertyValue* mutable_condition();
  void set_allocated_condition(::Property::BooleanPropertyValue* condition);
  private:
  const ::Property::BooleanPropertyValue& _internal_condition() const;
  ::Property::BooleanPropertyValue* _internal_mutable_condition();
  public:
  void unsafe_arena_set_allocated_condition(
      ::Property::BooleanPropertyValue* condition);
  ::Property::BooleanPropertyValue* unsafe_arena_release_condition();

  // optional .Property.TransformSet trueValue = 2;
  bool has_truevalue() const;
  private:
  bool _internal_has_truevalue() const;
  public:
  void clear_truevalue();
  const ::Property::TransformSet& truevalue() const;
  PROTOBUF_NODISCARD ::Property::TransformSet* release_truevalue();
  ::Property::TransformSet* mutable_truevalue();
  void set_allocated_truevalue(::Property::TransformSet* truevalue);
  private:
  const ::Property::TransformSet& _internal_truevalue() const;
  ::Property::TransformSet* _internal_mutable_truevalue();
  public:
  void unsafe_arena_set_allocated_truevalue(
      ::Property::TransformSet* truevalue);
  ::Property::TransformSet* unsafe_arena_release_truevalue();

  // optional .Property.TransformSet falseValue = 3;
  bool has_falsevalue() const;
  private:
  bool _internal_has_falsevalue() const;
  public:
  void clear_falsevalue();
  const ::Property::TransformSet& falsevalue() const;
  PROTOBUF_NODISCARD ::Property::TransformSet* release_falsevalue();
  ::Property::TransformSet* mutable_falsevalue();
  void set_allocated_falsevalue(::Property::TransformSet* falsevalue);
  private:
  const ::Property::TransformSet& _internal_falsevalue() const;
  ::Property::TransformSet* _internal_mutable_falsevalue();
  public:
  void unsafe_arena_set_allocated_falsevalue(
      ::Property::TransformSet* falsevalue);
  ::Property::TransformSet* unsafe_arena_release_falsevalue();

  // @@protoc_insertion_point(class_scope:Property.TransformSetConditional)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::Property::BooleanPropertyValue* condition_;
    ::Property::TransformSet* truevalue_;
    ::Property::TransformSet* falsevalue_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class TransformUpdate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.TransformUpdate) */ {
 public:
  inline TransformUpdate() : TransformUpdate(nullptr) {}
  ~TransformUpdate() override;
  explicit PROTOBUF_CONSTEXPR TransformUpdate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransformUpdate(const TransformUpdate& from);
  TransformUpdate(TransformUpdate&& from) noexcept
    : TransformUpdate() {
    *this = ::std::move(from);
  }

  inline TransformUpdate& operator=(const TransformUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransformUpdate& operator=(TransformUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransformUpdate& default_instance() {
    return *internal_default_instance();
  }
  enum UpdateTypeCase {
    kAddTranslation = 1,
    kAddEulerRotation = 2,
    kAddQuatRotation = 3,
    kUniformScale = 4,
    kNonuniformScale = 5,
    kFacePos = 6,
    kToEuler = 7,
    kToQuat = 8,
    kExpr = 9,
    UPDATETYPE_NOT_SET = 0,
  };

  static inline const TransformUpdate* internal_default_instance() {
    return reinterpret_cast<const TransformUpdate*>(
               &_TransformUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(TransformUpdate& a, TransformUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(TransformUpdate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransformUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransformUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransformUpdate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransformUpdate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransformUpdate& from) {
    TransformUpdate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransformUpdate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.TransformUpdate";
  }
  protected:
  explicit TransformUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddTranslationFieldNumber = 1,
    kAddEulerRotationFieldNumber = 2,
    kAddQuatRotationFieldNumber = 3,
    kUniformScaleFieldNumber = 4,
    kNonuniformScaleFieldNumber = 5,
    kFacePosFieldNumber = 6,
    kToEulerFieldNumber = 7,
    kToQuatFieldNumber = 8,
    kExprFieldNumber = 9,
  };
  // .Property.TransformUpdateAddT addTranslation = 1;
  bool has_addtranslation() const;
  private:
  bool _internal_has_addtranslation() const;
  public:
  void clear_addtranslation();
  const ::Property::TransformUpdateAddT& addtranslation() const;
  PROTOBUF_NODISCARD ::Property::TransformUpdateAddT* release_addtranslation();
  ::Property::TransformUpdateAddT* mutable_addtranslation();
  void set_allocated_addtranslation(::Property::TransformUpdateAddT* addtranslation);
  private:
  const ::Property::TransformUpdateAddT& _internal_addtranslation() const;
  ::Property::TransformUpdateAddT* _internal_mutable_addtranslation();
  public:
  void unsafe_arena_set_allocated_addtranslation(
      ::Property::TransformUpdateAddT* addtranslation);
  ::Property::TransformUpdateAddT* unsafe_arena_release_addtranslation();

  // .Property.TransformUpdateAddR addEulerRotation = 2;
  bool has_addeulerrotation() const;
  private:
  bool _internal_has_addeulerrotation() const;
  public:
  void clear_addeulerrotation();
  const ::Property::TransformUpdateAddR& addeulerrotation() const;
  PROTOBUF_NODISCARD ::Property::TransformUpdateAddR* release_addeulerrotation();
  ::Property::TransformUpdateAddR* mutable_addeulerrotation();
  void set_allocated_addeulerrotation(::Property::TransformUpdateAddR* addeulerrotation);
  private:
  const ::Property::TransformUpdateAddR& _internal_addeulerrotation() const;
  ::Property::TransformUpdateAddR* _internal_mutable_addeulerrotation();
  public:
  void unsafe_arena_set_allocated_addeulerrotation(
      ::Property::TransformUpdateAddR* addeulerrotation);
  ::Property::TransformUpdateAddR* unsafe_arena_release_addeulerrotation();

  // .Property.TransformUpdateAddQ addQuatRotation = 3;
  bool has_addquatrotation() const;
  private:
  bool _internal_has_addquatrotation() const;
  public:
  void clear_addquatrotation();
  const ::Property::TransformUpdateAddQ& addquatrotation() const;
  PROTOBUF_NODISCARD ::Property::TransformUpdateAddQ* release_addquatrotation();
  ::Property::TransformUpdateAddQ* mutable_addquatrotation();
  void set_allocated_addquatrotation(::Property::TransformUpdateAddQ* addquatrotation);
  private:
  const ::Property::TransformUpdateAddQ& _internal_addquatrotation() const;
  ::Property::TransformUpdateAddQ* _internal_mutable_addquatrotation();
  public:
  void unsafe_arena_set_allocated_addquatrotation(
      ::Property::TransformUpdateAddQ* addquatrotation);
  ::Property::TransformUpdateAddQ* unsafe_arena_release_addquatrotation();

  // .Property.TransformUpdateScaleUniform uniformScale = 4;
  bool has_uniformscale() const;
  private:
  bool _internal_has_uniformscale() const;
  public:
  void clear_uniformscale();
  const ::Property::TransformUpdateScaleUniform& uniformscale() const;
  PROTOBUF_NODISCARD ::Property::TransformUpdateScaleUniform* release_uniformscale();
  ::Property::TransformUpdateScaleUniform* mutable_uniformscale();
  void set_allocated_uniformscale(::Property::TransformUpdateScaleUniform* uniformscale);
  private:
  const ::Property::TransformUpdateScaleUniform& _internal_uniformscale() const;
  ::Property::TransformUpdateScaleUniform* _internal_mutable_uniformscale();
  public:
  void unsafe_arena_set_allocated_uniformscale(
      ::Property::TransformUpdateScaleUniform* uniformscale);
  ::Property::TransformUpdateScaleUniform* unsafe_arena_release_uniformscale();

  // .Property.TransformUpdateScaleNonuniform nonuniformScale = 5;
  bool has_nonuniformscale() const;
  private:
  bool _internal_has_nonuniformscale() const;
  public:
  void clear_nonuniformscale();
  const ::Property::TransformUpdateScaleNonuniform& nonuniformscale() const;
  PROTOBUF_NODISCARD ::Property::TransformUpdateScaleNonuniform* release_nonuniformscale();
  ::Property::TransformUpdateScaleNonuniform* mutable_nonuniformscale();
  void set_allocated_nonuniformscale(::Property::TransformUpdateScaleNonuniform* nonuniformscale);
  private:
  const ::Property::TransformUpdateScaleNonuniform& _internal_nonuniformscale() const;
  ::Property::TransformUpdateScaleNonuniform* _internal_mutable_nonuniformscale();
  public:
  void unsafe_arena_set_allocated_nonuniformscale(
      ::Property::TransformUpdateScaleNonuniform* nonuniformscale);
  ::Property::TransformUpdateScaleNonuniform* unsafe_arena_release_nonuniformscale();

  // .Property.TransformUpdateLookAt facePos = 6;
  bool has_facepos() const;
  private:
  bool _internal_has_facepos() const;
  public:
  void clear_facepos();
  const ::Property::TransformUpdateLookAt& facepos() const;
  PROTOBUF_NODISCARD ::Property::TransformUpdateLookAt* release_facepos();
  ::Property::TransformUpdateLookAt* mutable_facepos();
  void set_allocated_facepos(::Property::TransformUpdateLookAt* facepos);
  private:
  const ::Property::TransformUpdateLookAt& _internal_facepos() const;
  ::Property::TransformUpdateLookAt* _internal_mutable_facepos();
  public:
  void unsafe_arena_set_allocated_facepos(
      ::Property::TransformUpdateLookAt* facepos);
  ::Property::TransformUpdateLookAt* unsafe_arena_release_facepos();

  // .Property.TransformUpdateRotateToEuler toEuler = 7;
  bool has_toeuler() const;
  private:
  bool _internal_has_toeuler() const;
  public:
  void clear_toeuler();
  const ::Property::TransformUpdateRotateToEuler& toeuler() const;
  PROTOBUF_NODISCARD ::Property::TransformUpdateRotateToEuler* release_toeuler();
  ::Property::TransformUpdateRotateToEuler* mutable_toeuler();
  void set_allocated_toeuler(::Property::TransformUpdateRotateToEuler* toeuler);
  private:
  const ::Property::TransformUpdateRotateToEuler& _internal_toeuler() const;
  ::Property::TransformUpdateRotateToEuler* _internal_mutable_toeuler();
  public:
  void unsafe_arena_set_allocated_toeuler(
      ::Property::TransformUpdateRotateToEuler* toeuler);
  ::Property::TransformUpdateRotateToEuler* unsafe_arena_release_toeuler();

  // .Property.TransformUpdateRotateToQuat toQuat = 8;
  bool has_toquat() const;
  private:
  bool _internal_has_toquat() const;
  public:
  void clear_toquat();
  const ::Property::TransformUpdateRotateToQuat& toquat() const;
  PROTOBUF_NODISCARD ::Property::TransformUpdateRotateToQuat* release_toquat();
  ::Property::TransformUpdateRotateToQuat* mutable_toquat();
  void set_allocated_toquat(::Property::TransformUpdateRotateToQuat* toquat);
  private:
  const ::Property::TransformUpdateRotateToQuat& _internal_toquat() const;
  ::Property::TransformUpdateRotateToQuat* _internal_mutable_toquat();
  public:
  void unsafe_arena_set_allocated_toquat(
      ::Property::TransformUpdateRotateToQuat* toquat);
  ::Property::TransformUpdateRotateToQuat* unsafe_arena_release_toquat();

  // string expr = 9;
  bool has_expr() const;
  private:
  bool _internal_has_expr() const;
  public:
  void clear_expr();
  const std::string& expr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_expr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_expr();
  PROTOBUF_NODISCARD std::string* release_expr();
  void set_allocated_expr(std::string* expr);
  private:
  const std::string& _internal_expr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_expr(const std::string& value);
  std::string* _internal_mutable_expr();
  public:

  void clear_UpdateType();
  UpdateTypeCase UpdateType_case() const;
  // @@protoc_insertion_point(class_scope:Property.TransformUpdate)
 private:
  class _Internal;
  void set_has_addtranslation();
  void set_has_addeulerrotation();
  void set_has_addquatrotation();
  void set_has_uniformscale();
  void set_has_nonuniformscale();
  void set_has_facepos();
  void set_has_toeuler();
  void set_has_toquat();
  void set_has_expr();

  inline bool has_UpdateType() const;
  inline void clear_has_UpdateType();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union UpdateTypeUnion {
      constexpr UpdateTypeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::Property::TransformUpdateAddT* addtranslation_;
      ::Property::TransformUpdateAddR* addeulerrotation_;
      ::Property::TransformUpdateAddQ* addquatrotation_;
      ::Property::TransformUpdateScaleUniform* uniformscale_;
      ::Property::TransformUpdateScaleNonuniform* nonuniformscale_;
      ::Property::TransformUpdateLookAt* facepos_;
      ::Property::TransformUpdateRotateToEuler* toeuler_;
      ::Property::TransformUpdateRotateToQuat* toquat_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr expr_;
    } UpdateType_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class TransformUpdateAddT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.TransformUpdateAddT) */ {
 public:
  inline TransformUpdateAddT() : TransformUpdateAddT(nullptr) {}
  ~TransformUpdateAddT() override;
  explicit PROTOBUF_CONSTEXPR TransformUpdateAddT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransformUpdateAddT(const TransformUpdateAddT& from);
  TransformUpdateAddT(TransformUpdateAddT&& from) noexcept
    : TransformUpdateAddT() {
    *this = ::std::move(from);
  }

  inline TransformUpdateAddT& operator=(const TransformUpdateAddT& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransformUpdateAddT& operator=(TransformUpdateAddT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransformUpdateAddT& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransformUpdateAddT* internal_default_instance() {
    return reinterpret_cast<const TransformUpdateAddT*>(
               &_TransformUpdateAddT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(TransformUpdateAddT& a, TransformUpdateAddT& b) {
    a.Swap(&b);
  }
  inline void Swap(TransformUpdateAddT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransformUpdateAddT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransformUpdateAddT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransformUpdateAddT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransformUpdateAddT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransformUpdateAddT& from) {
    TransformUpdateAddT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransformUpdateAddT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.TransformUpdateAddT";
  }
  protected:
  explicit TransformUpdateAddT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffsetPositionFieldNumber = 1,
  };
  // .Property.VectorPropertyValue offsetPosition = 1;
  bool has_offsetposition() const;
  private:
  bool _internal_has_offsetposition() const;
  public:
  void clear_offsetposition();
  const ::Property::VectorPropertyValue& offsetposition() const;
  PROTOBUF_NODISCARD ::Property::VectorPropertyValue* release_offsetposition();
  ::Property::VectorPropertyValue* mutable_offsetposition();
  void set_allocated_offsetposition(::Property::VectorPropertyValue* offsetposition);
  private:
  const ::Property::VectorPropertyValue& _internal_offsetposition() const;
  ::Property::VectorPropertyValue* _internal_mutable_offsetposition();
  public:
  void unsafe_arena_set_allocated_offsetposition(
      ::Property::VectorPropertyValue* offsetposition);
  ::Property::VectorPropertyValue* unsafe_arena_release_offsetposition();

  // @@protoc_insertion_point(class_scope:Property.TransformUpdateAddT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Property::VectorPropertyValue* offsetposition_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class TransformUpdateAddR final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.TransformUpdateAddR) */ {
 public:
  inline TransformUpdateAddR() : TransformUpdateAddR(nullptr) {}
  ~TransformUpdateAddR() override;
  explicit PROTOBUF_CONSTEXPR TransformUpdateAddR(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransformUpdateAddR(const TransformUpdateAddR& from);
  TransformUpdateAddR(TransformUpdateAddR&& from) noexcept
    : TransformUpdateAddR() {
    *this = ::std::move(from);
  }

  inline TransformUpdateAddR& operator=(const TransformUpdateAddR& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransformUpdateAddR& operator=(TransformUpdateAddR&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransformUpdateAddR& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransformUpdateAddR* internal_default_instance() {
    return reinterpret_cast<const TransformUpdateAddR*>(
               &_TransformUpdateAddR_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(TransformUpdateAddR& a, TransformUpdateAddR& b) {
    a.Swap(&b);
  }
  inline void Swap(TransformUpdateAddR* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransformUpdateAddR* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransformUpdateAddR* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransformUpdateAddR>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransformUpdateAddR& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransformUpdateAddR& from) {
    TransformUpdateAddR::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransformUpdateAddR* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.TransformUpdateAddR";
  }
  protected:
  explicit TransformUpdateAddR(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffsetRotationEulerFieldNumber = 1,
  };
  // .Property.VectorPropertyValue offsetRotationEuler = 1;
  bool has_offsetrotationeuler() const;
  private:
  bool _internal_has_offsetrotationeuler() const;
  public:
  void clear_offsetrotationeuler();
  const ::Property::VectorPropertyValue& offsetrotationeuler() const;
  PROTOBUF_NODISCARD ::Property::VectorPropertyValue* release_offsetrotationeuler();
  ::Property::VectorPropertyValue* mutable_offsetrotationeuler();
  void set_allocated_offsetrotationeuler(::Property::VectorPropertyValue* offsetrotationeuler);
  private:
  const ::Property::VectorPropertyValue& _internal_offsetrotationeuler() const;
  ::Property::VectorPropertyValue* _internal_mutable_offsetrotationeuler();
  public:
  void unsafe_arena_set_allocated_offsetrotationeuler(
      ::Property::VectorPropertyValue* offsetrotationeuler);
  ::Property::VectorPropertyValue* unsafe_arena_release_offsetrotationeuler();

  // @@protoc_insertion_point(class_scope:Property.TransformUpdateAddR)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Property::VectorPropertyValue* offsetrotationeuler_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class TransformUpdateAddQ final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.TransformUpdateAddQ) */ {
 public:
  inline TransformUpdateAddQ() : TransformUpdateAddQ(nullptr) {}
  ~TransformUpdateAddQ() override;
  explicit PROTOBUF_CONSTEXPR TransformUpdateAddQ(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransformUpdateAddQ(const TransformUpdateAddQ& from);
  TransformUpdateAddQ(TransformUpdateAddQ&& from) noexcept
    : TransformUpdateAddQ() {
    *this = ::std::move(from);
  }

  inline TransformUpdateAddQ& operator=(const TransformUpdateAddQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransformUpdateAddQ& operator=(TransformUpdateAddQ&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransformUpdateAddQ& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransformUpdateAddQ* internal_default_instance() {
    return reinterpret_cast<const TransformUpdateAddQ*>(
               &_TransformUpdateAddQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(TransformUpdateAddQ& a, TransformUpdateAddQ& b) {
    a.Swap(&b);
  }
  inline void Swap(TransformUpdateAddQ* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransformUpdateAddQ* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransformUpdateAddQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransformUpdateAddQ>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransformUpdateAddQ& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransformUpdateAddQ& from) {
    TransformUpdateAddQ::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransformUpdateAddQ* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.TransformUpdateAddQ";
  }
  protected:
  explicit TransformUpdateAddQ(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffsetRotationQuatFieldNumber = 1,
  };
  // .Property.VectorPropertyValue offsetRotationQuat = 1;
  bool has_offsetrotationquat() const;
  private:
  bool _internal_has_offsetrotationquat() const;
  public:
  void clear_offsetrotationquat();
  const ::Property::VectorPropertyValue& offsetrotationquat() const;
  PROTOBUF_NODISCARD ::Property::VectorPropertyValue* release_offsetrotationquat();
  ::Property::VectorPropertyValue* mutable_offsetrotationquat();
  void set_allocated_offsetrotationquat(::Property::VectorPropertyValue* offsetrotationquat);
  private:
  const ::Property::VectorPropertyValue& _internal_offsetrotationquat() const;
  ::Property::VectorPropertyValue* _internal_mutable_offsetrotationquat();
  public:
  void unsafe_arena_set_allocated_offsetrotationquat(
      ::Property::VectorPropertyValue* offsetrotationquat);
  ::Property::VectorPropertyValue* unsafe_arena_release_offsetrotationquat();

  // @@protoc_insertion_point(class_scope:Property.TransformUpdateAddQ)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Property::VectorPropertyValue* offsetrotationquat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class TransformUpdateScaleUniform final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.TransformUpdateScaleUniform) */ {
 public:
  inline TransformUpdateScaleUniform() : TransformUpdateScaleUniform(nullptr) {}
  ~TransformUpdateScaleUniform() override;
  explicit PROTOBUF_CONSTEXPR TransformUpdateScaleUniform(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransformUpdateScaleUniform(const TransformUpdateScaleUniform& from);
  TransformUpdateScaleUniform(TransformUpdateScaleUniform&& from) noexcept
    : TransformUpdateScaleUniform() {
    *this = ::std::move(from);
  }

  inline TransformUpdateScaleUniform& operator=(const TransformUpdateScaleUniform& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransformUpdateScaleUniform& operator=(TransformUpdateScaleUniform&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransformUpdateScaleUniform& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransformUpdateScaleUniform* internal_default_instance() {
    return reinterpret_cast<const TransformUpdateScaleUniform*>(
               &_TransformUpdateScaleUniform_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(TransformUpdateScaleUniform& a, TransformUpdateScaleUniform& b) {
    a.Swap(&b);
  }
  inline void Swap(TransformUpdateScaleUniform* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransformUpdateScaleUniform* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransformUpdateScaleUniform* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransformUpdateScaleUniform>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransformUpdateScaleUniform& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransformUpdateScaleUniform& from) {
    TransformUpdateScaleUniform::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransformUpdateScaleUniform* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.TransformUpdateScaleUniform";
  }
  protected:
  explicit TransformUpdateScaleUniform(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUniformScaleMultiplierFieldNumber = 1,
  };
  // .Property.ScalarPropertyValue uniformScaleMultiplier = 1;
  bool has_uniformscalemultiplier() const;
  private:
  bool _internal_has_uniformscalemultiplier() const;
  public:
  void clear_uniformscalemultiplier();
  const ::Property::ScalarPropertyValue& uniformscalemultiplier() const;
  PROTOBUF_NODISCARD ::Property::ScalarPropertyValue* release_uniformscalemultiplier();
  ::Property::ScalarPropertyValue* mutable_uniformscalemultiplier();
  void set_allocated_uniformscalemultiplier(::Property::ScalarPropertyValue* uniformscalemultiplier);
  private:
  const ::Property::ScalarPropertyValue& _internal_uniformscalemultiplier() const;
  ::Property::ScalarPropertyValue* _internal_mutable_uniformscalemultiplier();
  public:
  void unsafe_arena_set_allocated_uniformscalemultiplier(
      ::Property::ScalarPropertyValue* uniformscalemultiplier);
  ::Property::ScalarPropertyValue* unsafe_arena_release_uniformscalemultiplier();

  // @@protoc_insertion_point(class_scope:Property.TransformUpdateScaleUniform)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Property::ScalarPropertyValue* uniformscalemultiplier_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class TransformUpdateScaleNonuniform final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.TransformUpdateScaleNonuniform) */ {
 public:
  inline TransformUpdateScaleNonuniform() : TransformUpdateScaleNonuniform(nullptr) {}
  ~TransformUpdateScaleNonuniform() override;
  explicit PROTOBUF_CONSTEXPR TransformUpdateScaleNonuniform(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransformUpdateScaleNonuniform(const TransformUpdateScaleNonuniform& from);
  TransformUpdateScaleNonuniform(TransformUpdateScaleNonuniform&& from) noexcept
    : TransformUpdateScaleNonuniform() {
    *this = ::std::move(from);
  }

  inline TransformUpdateScaleNonuniform& operator=(const TransformUpdateScaleNonuniform& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransformUpdateScaleNonuniform& operator=(TransformUpdateScaleNonuniform&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransformUpdateScaleNonuniform& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransformUpdateScaleNonuniform* internal_default_instance() {
    return reinterpret_cast<const TransformUpdateScaleNonuniform*>(
               &_TransformUpdateScaleNonuniform_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(TransformUpdateScaleNonuniform& a, TransformUpdateScaleNonuniform& b) {
    a.Swap(&b);
  }
  inline void Swap(TransformUpdateScaleNonuniform* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransformUpdateScaleNonuniform* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransformUpdateScaleNonuniform* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransformUpdateScaleNonuniform>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransformUpdateScaleNonuniform& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransformUpdateScaleNonuniform& from) {
    TransformUpdateScaleNonuniform::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransformUpdateScaleNonuniform* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.TransformUpdateScaleNonuniform";
  }
  protected:
  explicit TransformUpdateScaleNonuniform(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNonuniformScaleMultiplierFieldNumber = 2,
  };
  // .Property.VectorPropertyValue nonuniformScaleMultiplier = 2;
  bool has_nonuniformscalemultiplier() const;
  private:
  bool _internal_has_nonuniformscalemultiplier() const;
  public:
  void clear_nonuniformscalemultiplier();
  const ::Property::VectorPropertyValue& nonuniformscalemultiplier() const;
  PROTOBUF_NODISCARD ::Property::VectorPropertyValue* release_nonuniformscalemultiplier();
  ::Property::VectorPropertyValue* mutable_nonuniformscalemultiplier();
  void set_allocated_nonuniformscalemultiplier(::Property::VectorPropertyValue* nonuniformscalemultiplier);
  private:
  const ::Property::VectorPropertyValue& _internal_nonuniformscalemultiplier() const;
  ::Property::VectorPropertyValue* _internal_mutable_nonuniformscalemultiplier();
  public:
  void unsafe_arena_set_allocated_nonuniformscalemultiplier(
      ::Property::VectorPropertyValue* nonuniformscalemultiplier);
  ::Property::VectorPropertyValue* unsafe_arena_release_nonuniformscalemultiplier();

  // @@protoc_insertion_point(class_scope:Property.TransformUpdateScaleNonuniform)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Property::VectorPropertyValue* nonuniformscalemultiplier_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class TransformUpdateLookAt final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.TransformUpdateLookAt) */ {
 public:
  inline TransformUpdateLookAt() : TransformUpdateLookAt(nullptr) {}
  ~TransformUpdateLookAt() override;
  explicit PROTOBUF_CONSTEXPR TransformUpdateLookAt(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransformUpdateLookAt(const TransformUpdateLookAt& from);
  TransformUpdateLookAt(TransformUpdateLookAt&& from) noexcept
    : TransformUpdateLookAt() {
    *this = ::std::move(from);
  }

  inline TransformUpdateLookAt& operator=(const TransformUpdateLookAt& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransformUpdateLookAt& operator=(TransformUpdateLookAt&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransformUpdateLookAt& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransformUpdateLookAt* internal_default_instance() {
    return reinterpret_cast<const TransformUpdateLookAt*>(
               &_TransformUpdateLookAt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(TransformUpdateLookAt& a, TransformUpdateLookAt& b) {
    a.Swap(&b);
  }
  inline void Swap(TransformUpdateLookAt* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransformUpdateLookAt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransformUpdateLookAt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransformUpdateLookAt>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransformUpdateLookAt& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransformUpdateLookAt& from) {
    TransformUpdateLookAt::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransformUpdateLookAt* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.TransformUpdateLookAt";
  }
  protected:
  explicit TransformUpdateLookAt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPercentToMoveFieldNumber = 1,
    kLookAtFieldNumber = 2,
  };
  // .Property.ScalarPropertyValue percentToMove = 1;
  bool has_percenttomove() const;
  private:
  bool _internal_has_percenttomove() const;
  public:
  void clear_percenttomove();
  const ::Property::ScalarPropertyValue& percenttomove() const;
  PROTOBUF_NODISCARD ::Property::ScalarPropertyValue* release_percenttomove();
  ::Property::ScalarPropertyValue* mutable_percenttomove();
  void set_allocated_percenttomove(::Property::ScalarPropertyValue* percenttomove);
  private:
  const ::Property::ScalarPropertyValue& _internal_percenttomove() const;
  ::Property::ScalarPropertyValue* _internal_mutable_percenttomove();
  public:
  void unsafe_arena_set_allocated_percenttomove(
      ::Property::ScalarPropertyValue* percenttomove);
  ::Property::ScalarPropertyValue* unsafe_arena_release_percenttomove();

  // .Property.VectorPropertyValue lookAt = 2;
  bool has_lookat() const;
  private:
  bool _internal_has_lookat() const;
  public:
  void clear_lookat();
  const ::Property::VectorPropertyValue& lookat() const;
  PROTOBUF_NODISCARD ::Property::VectorPropertyValue* release_lookat();
  ::Property::VectorPropertyValue* mutable_lookat();
  void set_allocated_lookat(::Property::VectorPropertyValue* lookat);
  private:
  const ::Property::VectorPropertyValue& _internal_lookat() const;
  ::Property::VectorPropertyValue* _internal_mutable_lookat();
  public:
  void unsafe_arena_set_allocated_lookat(
      ::Property::VectorPropertyValue* lookat);
  ::Property::VectorPropertyValue* unsafe_arena_release_lookat();

  // @@protoc_insertion_point(class_scope:Property.TransformUpdateLookAt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Property::ScalarPropertyValue* percenttomove_;
    ::Property::VectorPropertyValue* lookat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class TransformUpdateRotateToEuler final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.TransformUpdateRotateToEuler) */ {
 public:
  inline TransformUpdateRotateToEuler() : TransformUpdateRotateToEuler(nullptr) {}
  ~TransformUpdateRotateToEuler() override;
  explicit PROTOBUF_CONSTEXPR TransformUpdateRotateToEuler(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransformUpdateRotateToEuler(const TransformUpdateRotateToEuler& from);
  TransformUpdateRotateToEuler(TransformUpdateRotateToEuler&& from) noexcept
    : TransformUpdateRotateToEuler() {
    *this = ::std::move(from);
  }

  inline TransformUpdateRotateToEuler& operator=(const TransformUpdateRotateToEuler& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransformUpdateRotateToEuler& operator=(TransformUpdateRotateToEuler&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransformUpdateRotateToEuler& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransformUpdateRotateToEuler* internal_default_instance() {
    return reinterpret_cast<const TransformUpdateRotateToEuler*>(
               &_TransformUpdateRotateToEuler_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(TransformUpdateRotateToEuler& a, TransformUpdateRotateToEuler& b) {
    a.Swap(&b);
  }
  inline void Swap(TransformUpdateRotateToEuler* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransformUpdateRotateToEuler* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransformUpdateRotateToEuler* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransformUpdateRotateToEuler>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransformUpdateRotateToEuler& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransformUpdateRotateToEuler& from) {
    TransformUpdateRotateToEuler::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransformUpdateRotateToEuler* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.TransformUpdateRotateToEuler";
  }
  protected:
  explicit TransformUpdateRotateToEuler(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPercentToMoveFieldNumber = 1,
    kToEulerFieldNumber = 2,
  };
  // .Property.ScalarPropertyValue percentToMove = 1;
  bool has_percenttomove() const;
  private:
  bool _internal_has_percenttomove() const;
  public:
  void clear_percenttomove();
  const ::Property::ScalarPropertyValue& percenttomove() const;
  PROTOBUF_NODISCARD ::Property::ScalarPropertyValue* release_percenttomove();
  ::Property::ScalarPropertyValue* mutable_percenttomove();
  void set_allocated_percenttomove(::Property::ScalarPropertyValue* percenttomove);
  private:
  const ::Property::ScalarPropertyValue& _internal_percenttomove() const;
  ::Property::ScalarPropertyValue* _internal_mutable_percenttomove();
  public:
  void unsafe_arena_set_allocated_percenttomove(
      ::Property::ScalarPropertyValue* percenttomove);
  ::Property::ScalarPropertyValue* unsafe_arena_release_percenttomove();

  // .Property.VectorPropertyValue toEuler = 2;
  bool has_toeuler() const;
  private:
  bool _internal_has_toeuler() const;
  public:
  void clear_toeuler();
  const ::Property::VectorPropertyValue& toeuler() const;
  PROTOBUF_NODISCARD ::Property::VectorPropertyValue* release_toeuler();
  ::Property::VectorPropertyValue* mutable_toeuler();
  void set_allocated_toeuler(::Property::VectorPropertyValue* toeuler);
  private:
  const ::Property::VectorPropertyValue& _internal_toeuler() const;
  ::Property::VectorPropertyValue* _internal_mutable_toeuler();
  public:
  void unsafe_arena_set_allocated_toeuler(
      ::Property::VectorPropertyValue* toeuler);
  ::Property::VectorPropertyValue* unsafe_arena_release_toeuler();

  // @@protoc_insertion_point(class_scope:Property.TransformUpdateRotateToEuler)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Property::ScalarPropertyValue* percenttomove_;
    ::Property::VectorPropertyValue* toeuler_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class TransformUpdateRotateToQuat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.TransformUpdateRotateToQuat) */ {
 public:
  inline TransformUpdateRotateToQuat() : TransformUpdateRotateToQuat(nullptr) {}
  ~TransformUpdateRotateToQuat() override;
  explicit PROTOBUF_CONSTEXPR TransformUpdateRotateToQuat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransformUpdateRotateToQuat(const TransformUpdateRotateToQuat& from);
  TransformUpdateRotateToQuat(TransformUpdateRotateToQuat&& from) noexcept
    : TransformUpdateRotateToQuat() {
    *this = ::std::move(from);
  }

  inline TransformUpdateRotateToQuat& operator=(const TransformUpdateRotateToQuat& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransformUpdateRotateToQuat& operator=(TransformUpdateRotateToQuat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransformUpdateRotateToQuat& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransformUpdateRotateToQuat* internal_default_instance() {
    return reinterpret_cast<const TransformUpdateRotateToQuat*>(
               &_TransformUpdateRotateToQuat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(TransformUpdateRotateToQuat& a, TransformUpdateRotateToQuat& b) {
    a.Swap(&b);
  }
  inline void Swap(TransformUpdateRotateToQuat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransformUpdateRotateToQuat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransformUpdateRotateToQuat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransformUpdateRotateToQuat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransformUpdateRotateToQuat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransformUpdateRotateToQuat& from) {
    TransformUpdateRotateToQuat::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransformUpdateRotateToQuat* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.TransformUpdateRotateToQuat";
  }
  protected:
  explicit TransformUpdateRotateToQuat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPercentToMoveFieldNumber = 1,
    kToQuatFieldNumber = 2,
  };
  // .Property.ScalarPropertyValue percentToMove = 1;
  bool has_percenttomove() const;
  private:
  bool _internal_has_percenttomove() const;
  public:
  void clear_percenttomove();
  const ::Property::ScalarPropertyValue& percenttomove() const;
  PROTOBUF_NODISCARD ::Property::ScalarPropertyValue* release_percenttomove();
  ::Property::ScalarPropertyValue* mutable_percenttomove();
  void set_allocated_percenttomove(::Property::ScalarPropertyValue* percenttomove);
  private:
  const ::Property::ScalarPropertyValue& _internal_percenttomove() const;
  ::Property::ScalarPropertyValue* _internal_mutable_percenttomove();
  public:
  void unsafe_arena_set_allocated_percenttomove(
      ::Property::ScalarPropertyValue* percenttomove);
  ::Property::ScalarPropertyValue* unsafe_arena_release_percenttomove();

  // .Property.VectorPropertyValue toQuat = 2;
  bool has_toquat() const;
  private:
  bool _internal_has_toquat() const;
  public:
  void clear_toquat();
  const ::Property::VectorPropertyValue& toquat() const;
  PROTOBUF_NODISCARD ::Property::VectorPropertyValue* release_toquat();
  ::Property::VectorPropertyValue* mutable_toquat();
  void set_allocated_toquat(::Property::VectorPropertyValue* toquat);
  private:
  const ::Property::VectorPropertyValue& _internal_toquat() const;
  ::Property::VectorPropertyValue* _internal_mutable_toquat();
  public:
  void unsafe_arena_set_allocated_toquat(
      ::Property::VectorPropertyValue* toquat);
  ::Property::VectorPropertyValue* unsafe_arena_release_toquat();

  // @@protoc_insertion_point(class_scope:Property.TransformUpdateRotateToQuat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Property::ScalarPropertyValue* percenttomove_;
    ::Property::VectorPropertyValue* toquat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class TransformPropertyAssignment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.TransformPropertyAssignment) */ {
 public:
  inline TransformPropertyAssignment() : TransformPropertyAssignment(nullptr) {}
  ~TransformPropertyAssignment() override;
  explicit PROTOBUF_CONSTEXPR TransformPropertyAssignment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransformPropertyAssignment(const TransformPropertyAssignment& from);
  TransformPropertyAssignment(TransformPropertyAssignment&& from) noexcept
    : TransformPropertyAssignment() {
    *this = ::std::move(from);
  }

  inline TransformPropertyAssignment& operator=(const TransformPropertyAssignment& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransformPropertyAssignment& operator=(TransformPropertyAssignment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransformPropertyAssignment& default_instance() {
    return *internal_default_instance();
  }
  enum AssignmentTypeCase {
    kSetValue = 6,
    kModifyValue = 7,
    ASSIGNMENTTYPE_NOT_SET = 0,
  };

  static inline const TransformPropertyAssignment* internal_default_instance() {
    return reinterpret_cast<const TransformPropertyAssignment*>(
               &_TransformPropertyAssignment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(TransformPropertyAssignment& a, TransformPropertyAssignment& b) {
    a.Swap(&b);
  }
  inline void Swap(TransformPropertyAssignment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransformPropertyAssignment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransformPropertyAssignment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransformPropertyAssignment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransformPropertyAssignment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransformPropertyAssignment& from) {
    TransformPropertyAssignment::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransformPropertyAssignment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.TransformPropertyAssignment";
  }
  protected:
  explicit TransformPropertyAssignment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssignmentIdFieldNumber = 1,
    kSetPriorityFieldNumber = 2,
    kModifyOrderFieldNumber = 3,
    kSetValueFieldNumber = 6,
    kModifyValueFieldNumber = 7,
  };
  // string assignmentId = 1;
  void clear_assignmentid();
  const std::string& assignmentid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_assignmentid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_assignmentid();
  PROTOBUF_NODISCARD std::string* release_assignmentid();
  void set_allocated_assignmentid(std::string* assignmentid);
  private:
  const std::string& _internal_assignmentid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_assignmentid(const std::string& value);
  std::string* _internal_mutable_assignmentid();
  public:

  // optional int32 setPriority = 2;
  bool has_setpriority() const;
  private:
  bool _internal_has_setpriority() const;
  public:
  void clear_setpriority();
  int32_t setpriority() const;
  void set_setpriority(int32_t value);
  private:
  int32_t _internal_setpriority() const;
  void _internal_set_setpriority(int32_t value);
  public:

  // optional int32 modifyOrder = 3;
  bool has_modifyorder() const;
  private:
  bool _internal_has_modifyorder() const;
  public:
  void clear_modifyorder();
  int32_t modifyorder() const;
  void set_modifyorder(int32_t value);
  private:
  int32_t _internal_modifyorder() const;
  void _internal_set_modifyorder(int32_t value);
  public:

  // .Property.TransformSet setValue = 6;
  bool has_setvalue() const;
  private:
  bool _internal_has_setvalue() const;
  public:
  void clear_setvalue();
  const ::Property::TransformSet& setvalue() const;
  PROTOBUF_NODISCARD ::Property::TransformSet* release_setvalue();
  ::Property::TransformSet* mutable_setvalue();
  void set_allocated_setvalue(::Property::TransformSet* setvalue);
  private:
  const ::Property::TransformSet& _internal_setvalue() const;
  ::Property::TransformSet* _internal_mutable_setvalue();
  public:
  void unsafe_arena_set_allocated_setvalue(
      ::Property::TransformSet* setvalue);
  ::Property::TransformSet* unsafe_arena_release_setvalue();

  // .Property.TransformUpdate modifyValue = 7;
  bool has_modifyvalue() const;
  private:
  bool _internal_has_modifyvalue() const;
  public:
  void clear_modifyvalue();
  const ::Property::TransformUpdate& modifyvalue() const;
  PROTOBUF_NODISCARD ::Property::TransformUpdate* release_modifyvalue();
  ::Property::TransformUpdate* mutable_modifyvalue();
  void set_allocated_modifyvalue(::Property::TransformUpdate* modifyvalue);
  private:
  const ::Property::TransformUpdate& _internal_modifyvalue() const;
  ::Property::TransformUpdate* _internal_mutable_modifyvalue();
  public:
  void unsafe_arena_set_allocated_modifyvalue(
      ::Property::TransformUpdate* modifyvalue);
  ::Property::TransformUpdate* unsafe_arena_release_modifyvalue();

  void clear_AssignmentType();
  AssignmentTypeCase AssignmentType_case() const;
  // @@protoc_insertion_point(class_scope:Property.TransformPropertyAssignment)
 private:
  class _Internal;
  void set_has_setvalue();
  void set_has_modifyvalue();

  inline bool has_AssignmentType() const;
  inline void clear_has_AssignmentType();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr assignmentid_;
    int32_t setpriority_;
    int32_t modifyorder_;
    union AssignmentTypeUnion {
      constexpr AssignmentTypeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::Property::TransformSet* setvalue_;
      ::Property::TransformUpdate* modifyvalue_;
    } AssignmentType_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class TransformPropertyDeclaration final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.TransformPropertyDeclaration) */ {
 public:
  inline TransformPropertyDeclaration() : TransformPropertyDeclaration(nullptr) {}
  ~TransformPropertyDeclaration() override;
  explicit PROTOBUF_CONSTEXPR TransformPropertyDeclaration(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransformPropertyDeclaration(const TransformPropertyDeclaration& from);
  TransformPropertyDeclaration(TransformPropertyDeclaration&& from) noexcept
    : TransformPropertyDeclaration() {
    *this = ::std::move(from);
  }

  inline TransformPropertyDeclaration& operator=(const TransformPropertyDeclaration& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransformPropertyDeclaration& operator=(TransformPropertyDeclaration&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransformPropertyDeclaration& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransformPropertyDeclaration* internal_default_instance() {
    return reinterpret_cast<const TransformPropertyDeclaration*>(
               &_TransformPropertyDeclaration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(TransformPropertyDeclaration& a, TransformPropertyDeclaration& b) {
    a.Swap(&b);
  }
  inline void Swap(TransformPropertyDeclaration* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransformPropertyDeclaration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransformPropertyDeclaration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransformPropertyDeclaration>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransformPropertyDeclaration& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransformPropertyDeclaration& from) {
    TransformPropertyDeclaration::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransformPropertyDeclaration* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.TransformPropertyDeclaration";
  }
  protected:
  explicit TransformPropertyDeclaration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaFieldNumber = 1,
    kDefaultFieldNumber = 2,
  };
  // .Property.TransformPropertyMetadata meta = 1;
  bool has_meta() const;
  private:
  bool _internal_has_meta() const;
  public:
  void clear_meta();
  const ::Property::TransformPropertyMetadata& meta() const;
  PROTOBUF_NODISCARD ::Property::TransformPropertyMetadata* release_meta();
  ::Property::TransformPropertyMetadata* mutable_meta();
  void set_allocated_meta(::Property::TransformPropertyMetadata* meta);
  private:
  const ::Property::TransformPropertyMetadata& _internal_meta() const;
  ::Property::TransformPropertyMetadata* _internal_mutable_meta();
  public:
  void unsafe_arena_set_allocated_meta(
      ::Property::TransformPropertyMetadata* meta);
  ::Property::TransformPropertyMetadata* unsafe_arena_release_meta();

  // .Property.TransformSet default = 2;
  bool has_default_() const;
  private:
  bool _internal_has_default_() const;
  public:
  void clear_default_();
  const ::Property::TransformSet& default_() const;
  PROTOBUF_NODISCARD ::Property::TransformSet* release_default_();
  ::Property::TransformSet* mutable_default_();
  void set_allocated_default_(::Property::TransformSet* default_);
  private:
  const ::Property::TransformSet& _internal_default_() const;
  ::Property::TransformSet* _internal_mutable_default_();
  public:
  void unsafe_arena_set_allocated_default_(
      ::Property::TransformSet* default_);
  ::Property::TransformSet* unsafe_arena_release_default_();

  // @@protoc_insertion_point(class_scope:Property.TransformPropertyDeclaration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Property::TransformPropertyMetadata* meta_;
    ::Property::TransformSet* default__;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class TransformEditingMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.TransformEditingMetadata) */ {
 public:
  inline TransformEditingMetadata() : TransformEditingMetadata(nullptr) {}
  ~TransformEditingMetadata() override;
  explicit PROTOBUF_CONSTEXPR TransformEditingMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransformEditingMetadata(const TransformEditingMetadata& from);
  TransformEditingMetadata(TransformEditingMetadata&& from) noexcept
    : TransformEditingMetadata() {
    *this = ::std::move(from);
  }

  inline TransformEditingMetadata& operator=(const TransformEditingMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransformEditingMetadata& operator=(TransformEditingMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransformEditingMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransformEditingMetadata* internal_default_instance() {
    return reinterpret_cast<const TransformEditingMetadata*>(
               &_TransformEditingMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(TransformEditingMetadata& a, TransformEditingMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(TransformEditingMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransformEditingMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransformEditingMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransformEditingMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransformEditingMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransformEditingMetadata& from) {
    TransformEditingMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransformEditingMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.TransformEditingMetadata";
  }
  protected:
  explicit TransformEditingMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllowSetFromUserTransformFieldNumber = 1,
    kAllowUnsetFieldNumber = 2,
  };
  // optional bool allowSetFromUserTransform = 1;
  bool has_allowsetfromusertransform() const;
  private:
  bool _internal_has_allowsetfromusertransform() const;
  public:
  void clear_allowsetfromusertransform();
  bool allowsetfromusertransform() const;
  void set_allowsetfromusertransform(bool value);
  private:
  bool _internal_allowsetfromusertransform() const;
  void _internal_set_allowsetfromusertransform(bool value);
  public:

  // optional bool allowUnset = 2;
  bool has_allowunset() const;
  private:
  bool _internal_has_allowunset() const;
  public:
  void clear_allowunset();
  bool allowunset() const;
  void set_allowunset(bool value);
  private:
  bool _internal_allowunset() const;
  void _internal_set_allowunset(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Property.TransformEditingMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool allowsetfromusertransform_;
    bool allowunset_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class TransformGeneratorMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.TransformGeneratorMetadata) */ {
 public:
  inline TransformGeneratorMetadata() : TransformGeneratorMetadata(nullptr) {}
  ~TransformGeneratorMetadata() override;
  explicit PROTOBUF_CONSTEXPR TransformGeneratorMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransformGeneratorMetadata(const TransformGeneratorMetadata& from);
  TransformGeneratorMetadata(TransformGeneratorMetadata&& from) noexcept
    : TransformGeneratorMetadata() {
    *this = ::std::move(from);
  }

  inline TransformGeneratorMetadata& operator=(const TransformGeneratorMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransformGeneratorMetadata& operator=(TransformGeneratorMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransformGeneratorMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransformGeneratorMetadata* internal_default_instance() {
    return reinterpret_cast<const TransformGeneratorMetadata*>(
               &_TransformGeneratorMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(TransformGeneratorMetadata& a, TransformGeneratorMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(TransformGeneratorMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransformGeneratorMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransformGeneratorMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransformGeneratorMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransformGeneratorMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransformGeneratorMetadata& from) {
    TransformGeneratorMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransformGeneratorMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.TransformGeneratorMetadata";
  }
  protected:
  explicit TransformGeneratorMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
    kEditFieldNumber = 2,
  };
  // .Property.GeneratorMetadata base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::Property::GeneratorMetadata& base() const;
  PROTOBUF_NODISCARD ::Property::GeneratorMetadata* release_base();
  ::Property::GeneratorMetadata* mutable_base();
  void set_allocated_base(::Property::GeneratorMetadata* base);
  private:
  const ::Property::GeneratorMetadata& _internal_base() const;
  ::Property::GeneratorMetadata* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::Property::GeneratorMetadata* base);
  ::Property::GeneratorMetadata* unsafe_arena_release_base();

  // optional .Property.TransformEditingMetadata edit = 2;
  bool has_edit() const;
  private:
  bool _internal_has_edit() const;
  public:
  void clear_edit();
  const ::Property::TransformEditingMetadata& edit() const;
  PROTOBUF_NODISCARD ::Property::TransformEditingMetadata* release_edit();
  ::Property::TransformEditingMetadata* mutable_edit();
  void set_allocated_edit(::Property::TransformEditingMetadata* edit);
  private:
  const ::Property::TransformEditingMetadata& _internal_edit() const;
  ::Property::TransformEditingMetadata* _internal_mutable_edit();
  public:
  void unsafe_arena_set_allocated_edit(
      ::Property::TransformEditingMetadata* edit);
  ::Property::TransformEditingMetadata* unsafe_arena_release_edit();

  // @@protoc_insertion_point(class_scope:Property.TransformGeneratorMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::Property::GeneratorMetadata* base_;
    ::Property::TransformEditingMetadata* edit_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class TransformPropertyMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.TransformPropertyMetadata) */ {
 public:
  inline TransformPropertyMetadata() : TransformPropertyMetadata(nullptr) {}
  ~TransformPropertyMetadata() override;
  explicit PROTOBUF_CONSTEXPR TransformPropertyMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransformPropertyMetadata(const TransformPropertyMetadata& from);
  TransformPropertyMetadata(TransformPropertyMetadata&& from) noexcept
    : TransformPropertyMetadata() {
    *this = ::std::move(from);
  }

  inline TransformPropertyMetadata& operator=(const TransformPropertyMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransformPropertyMetadata& operator=(TransformPropertyMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransformPropertyMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransformPropertyMetadata* internal_default_instance() {
    return reinterpret_cast<const TransformPropertyMetadata*>(
               &_TransformPropertyMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(TransformPropertyMetadata& a, TransformPropertyMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(TransformPropertyMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransformPropertyMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransformPropertyMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransformPropertyMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransformPropertyMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransformPropertyMetadata& from) {
    TransformPropertyMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransformPropertyMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.TransformPropertyMetadata";
  }
  protected:
  explicit TransformPropertyMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
    kEditFieldNumber = 2,
  };
  // .Property.PropertyMetadata base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::Property::PropertyMetadata& base() const;
  PROTOBUF_NODISCARD ::Property::PropertyMetadata* release_base();
  ::Property::PropertyMetadata* mutable_base();
  void set_allocated_base(::Property::PropertyMetadata* base);
  private:
  const ::Property::PropertyMetadata& _internal_base() const;
  ::Property::PropertyMetadata* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::Property::PropertyMetadata* base);
  ::Property::PropertyMetadata* unsafe_arena_release_base();

  // optional .Property.TransformEditingMetadata edit = 2;
  bool has_edit() const;
  private:
  bool _internal_has_edit() const;
  public:
  void clear_edit();
  const ::Property::TransformEditingMetadata& edit() const;
  PROTOBUF_NODISCARD ::Property::TransformEditingMetadata* release_edit();
  ::Property::TransformEditingMetadata* mutable_edit();
  void set_allocated_edit(::Property::TransformEditingMetadata* edit);
  private:
  const ::Property::TransformEditingMetadata& _internal_edit() const;
  ::Property::TransformEditingMetadata* _internal_mutable_edit();
  public:
  void unsafe_arena_set_allocated_edit(
      ::Property::TransformEditingMetadata* edit);
  ::Property::TransformEditingMetadata* unsafe_arena_release_edit();

  // @@protoc_insertion_point(class_scope:Property.TransformPropertyMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::Property::PropertyMetadata* base_;
    ::Property::TransformEditingMetadata* edit_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class CustomGeneratorSubGenScalar final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.CustomGeneratorSubGenScalar) */ {
 public:
  inline CustomGeneratorSubGenScalar() : CustomGeneratorSubGenScalar(nullptr) {}
  ~CustomGeneratorSubGenScalar() override;
  explicit PROTOBUF_CONSTEXPR CustomGeneratorSubGenScalar(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CustomGeneratorSubGenScalar(const CustomGeneratorSubGenScalar& from);
  CustomGeneratorSubGenScalar(CustomGeneratorSubGenScalar&& from) noexcept
    : CustomGeneratorSubGenScalar() {
    *this = ::std::move(from);
  }

  inline CustomGeneratorSubGenScalar& operator=(const CustomGeneratorSubGenScalar& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomGeneratorSubGenScalar& operator=(CustomGeneratorSubGenScalar&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CustomGeneratorSubGenScalar& default_instance() {
    return *internal_default_instance();
  }
  static inline const CustomGeneratorSubGenScalar* internal_default_instance() {
    return reinterpret_cast<const CustomGeneratorSubGenScalar*>(
               &_CustomGeneratorSubGenScalar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  friend void swap(CustomGeneratorSubGenScalar& a, CustomGeneratorSubGenScalar& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomGeneratorSubGenScalar* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustomGeneratorSubGenScalar* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CustomGeneratorSubGenScalar* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CustomGeneratorSubGenScalar>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CustomGeneratorSubGenScalar& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CustomGeneratorSubGenScalar& from) {
    CustomGeneratorSubGenScalar::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomGeneratorSubGenScalar* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.CustomGeneratorSubGenScalar";
  }
  protected:
  explicit CustomGeneratorSubGenScalar(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGeneratorFieldNumber = 1,
    kMetaFieldNumber = 2,
  };
  // optional .Property.ScalarPropertyValue generator = 1;
  bool has_generator() const;
  private:
  bool _internal_has_generator() const;
  public:
  void clear_generator();
  const ::Property::ScalarPropertyValue& generator() const;
  PROTOBUF_NODISCARD ::Property::ScalarPropertyValue* release_generator();
  ::Property::ScalarPropertyValue* mutable_generator();
  void set_allocated_generator(::Property::ScalarPropertyValue* generator);
  private:
  const ::Property::ScalarPropertyValue& _internal_generator() const;
  ::Property::ScalarPropertyValue* _internal_mutable_generator();
  public:
  void unsafe_arena_set_allocated_generator(
      ::Property::ScalarPropertyValue* generator);
  ::Property::ScalarPropertyValue* unsafe_arena_release_generator();

  // optional .Property.ScalarGeneratorMetadata meta = 2;
  bool has_meta() const;
  private:
  bool _internal_has_meta() const;
  public:
  void clear_meta();
  const ::Property::ScalarGeneratorMetadata& meta() const;
  PROTOBUF_NODISCARD ::Property::ScalarGeneratorMetadata* release_meta();
  ::Property::ScalarGeneratorMetadata* mutable_meta();
  void set_allocated_meta(::Property::ScalarGeneratorMetadata* meta);
  private:
  const ::Property::ScalarGeneratorMetadata& _internal_meta() const;
  ::Property::ScalarGeneratorMetadata* _internal_mutable_meta();
  public:
  void unsafe_arena_set_allocated_meta(
      ::Property::ScalarGeneratorMetadata* meta);
  ::Property::ScalarGeneratorMetadata* unsafe_arena_release_meta();

  // @@protoc_insertion_point(class_scope:Property.CustomGeneratorSubGenScalar)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::Property::ScalarPropertyValue* generator_;
    ::Property::ScalarGeneratorMetadata* meta_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class CustomGeneratorSubGenString final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.CustomGeneratorSubGenString) */ {
 public:
  inline CustomGeneratorSubGenString() : CustomGeneratorSubGenString(nullptr) {}
  ~CustomGeneratorSubGenString() override;
  explicit PROTOBUF_CONSTEXPR CustomGeneratorSubGenString(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CustomGeneratorSubGenString(const CustomGeneratorSubGenString& from);
  CustomGeneratorSubGenString(CustomGeneratorSubGenString&& from) noexcept
    : CustomGeneratorSubGenString() {
    *this = ::std::move(from);
  }

  inline CustomGeneratorSubGenString& operator=(const CustomGeneratorSubGenString& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomGeneratorSubGenString& operator=(CustomGeneratorSubGenString&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CustomGeneratorSubGenString& default_instance() {
    return *internal_default_instance();
  }
  static inline const CustomGeneratorSubGenString* internal_default_instance() {
    return reinterpret_cast<const CustomGeneratorSubGenString*>(
               &_CustomGeneratorSubGenString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  friend void swap(CustomGeneratorSubGenString& a, CustomGeneratorSubGenString& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomGeneratorSubGenString* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustomGeneratorSubGenString* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CustomGeneratorSubGenString* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CustomGeneratorSubGenString>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CustomGeneratorSubGenString& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CustomGeneratorSubGenString& from) {
    CustomGeneratorSubGenString::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomGeneratorSubGenString* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.CustomGeneratorSubGenString";
  }
  protected:
  explicit CustomGeneratorSubGenString(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGeneratorFieldNumber = 1,
    kMetaFieldNumber = 2,
  };
  // optional .Property.StringPropertyValue generator = 1;
  bool has_generator() const;
  private:
  bool _internal_has_generator() const;
  public:
  void clear_generator();
  const ::Property::StringPropertyValue& generator() const;
  PROTOBUF_NODISCARD ::Property::StringPropertyValue* release_generator();
  ::Property::StringPropertyValue* mutable_generator();
  void set_allocated_generator(::Property::StringPropertyValue* generator);
  private:
  const ::Property::StringPropertyValue& _internal_generator() const;
  ::Property::StringPropertyValue* _internal_mutable_generator();
  public:
  void unsafe_arena_set_allocated_generator(
      ::Property::StringPropertyValue* generator);
  ::Property::StringPropertyValue* unsafe_arena_release_generator();

  // optional .Property.StringGeneratorMetadata meta = 2;
  bool has_meta() const;
  private:
  bool _internal_has_meta() const;
  public:
  void clear_meta();
  const ::Property::StringGeneratorMetadata& meta() const;
  PROTOBUF_NODISCARD ::Property::StringGeneratorMetadata* release_meta();
  ::Property::StringGeneratorMetadata* mutable_meta();
  void set_allocated_meta(::Property::StringGeneratorMetadata* meta);
  private:
  const ::Property::StringGeneratorMetadata& _internal_meta() const;
  ::Property::StringGeneratorMetadata* _internal_mutable_meta();
  public:
  void unsafe_arena_set_allocated_meta(
      ::Property::StringGeneratorMetadata* meta);
  ::Property::StringGeneratorMetadata* unsafe_arena_release_meta();

  // @@protoc_insertion_point(class_scope:Property.CustomGeneratorSubGenString)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::Property::StringPropertyValue* generator_;
    ::Property::StringGeneratorMetadata* meta_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class CustomGeneratorSubGenLink final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.CustomGeneratorSubGenLink) */ {
 public:
  inline CustomGeneratorSubGenLink() : CustomGeneratorSubGenLink(nullptr) {}
  ~CustomGeneratorSubGenLink() override;
  explicit PROTOBUF_CONSTEXPR CustomGeneratorSubGenLink(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CustomGeneratorSubGenLink(const CustomGeneratorSubGenLink& from);
  CustomGeneratorSubGenLink(CustomGeneratorSubGenLink&& from) noexcept
    : CustomGeneratorSubGenLink() {
    *this = ::std::move(from);
  }

  inline CustomGeneratorSubGenLink& operator=(const CustomGeneratorSubGenLink& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomGeneratorSubGenLink& operator=(CustomGeneratorSubGenLink&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CustomGeneratorSubGenLink& default_instance() {
    return *internal_default_instance();
  }
  static inline const CustomGeneratorSubGenLink* internal_default_instance() {
    return reinterpret_cast<const CustomGeneratorSubGenLink*>(
               &_CustomGeneratorSubGenLink_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  friend void swap(CustomGeneratorSubGenLink& a, CustomGeneratorSubGenLink& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomGeneratorSubGenLink* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustomGeneratorSubGenLink* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CustomGeneratorSubGenLink* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CustomGeneratorSubGenLink>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CustomGeneratorSubGenLink& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CustomGeneratorSubGenLink& from) {
    CustomGeneratorSubGenLink::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomGeneratorSubGenLink* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.CustomGeneratorSubGenLink";
  }
  protected:
  explicit CustomGeneratorSubGenLink(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGeneratorFieldNumber = 1,
    kMetaFieldNumber = 2,
  };
  // optional .Property.LinkPropertyValue generator = 1;
  bool has_generator() const;
  private:
  bool _internal_has_generator() const;
  public:
  void clear_generator();
  const ::Property::LinkPropertyValue& generator() const;
  PROTOBUF_NODISCARD ::Property::LinkPropertyValue* release_generator();
  ::Property::LinkPropertyValue* mutable_generator();
  void set_allocated_generator(::Property::LinkPropertyValue* generator);
  private:
  const ::Property::LinkPropertyValue& _internal_generator() const;
  ::Property::LinkPropertyValue* _internal_mutable_generator();
  public:
  void unsafe_arena_set_allocated_generator(
      ::Property::LinkPropertyValue* generator);
  ::Property::LinkPropertyValue* unsafe_arena_release_generator();

  // optional .Property.LinkGeneratorMetadata meta = 2;
  bool has_meta() const;
  private:
  bool _internal_has_meta() const;
  public:
  void clear_meta();
  const ::Property::LinkGeneratorMetadata& meta() const;
  PROTOBUF_NODISCARD ::Property::LinkGeneratorMetadata* release_meta();
  ::Property::LinkGeneratorMetadata* mutable_meta();
  void set_allocated_meta(::Property::LinkGeneratorMetadata* meta);
  private:
  const ::Property::LinkGeneratorMetadata& _internal_meta() const;
  ::Property::LinkGeneratorMetadata* _internal_mutable_meta();
  public:
  void unsafe_arena_set_allocated_meta(
      ::Property::LinkGeneratorMetadata* meta);
  ::Property::LinkGeneratorMetadata* unsafe_arena_release_meta();

  // @@protoc_insertion_point(class_scope:Property.CustomGeneratorSubGenLink)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::Property::LinkPropertyValue* generator_;
    ::Property::LinkGeneratorMetadata* meta_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class CustomGeneratorSubGenVector final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.CustomGeneratorSubGenVector) */ {
 public:
  inline CustomGeneratorSubGenVector() : CustomGeneratorSubGenVector(nullptr) {}
  ~CustomGeneratorSubGenVector() override;
  explicit PROTOBUF_CONSTEXPR CustomGeneratorSubGenVector(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CustomGeneratorSubGenVector(const CustomGeneratorSubGenVector& from);
  CustomGeneratorSubGenVector(CustomGeneratorSubGenVector&& from) noexcept
    : CustomGeneratorSubGenVector() {
    *this = ::std::move(from);
  }

  inline CustomGeneratorSubGenVector& operator=(const CustomGeneratorSubGenVector& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomGeneratorSubGenVector& operator=(CustomGeneratorSubGenVector&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CustomGeneratorSubGenVector& default_instance() {
    return *internal_default_instance();
  }
  static inline const CustomGeneratorSubGenVector* internal_default_instance() {
    return reinterpret_cast<const CustomGeneratorSubGenVector*>(
               &_CustomGeneratorSubGenVector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  friend void swap(CustomGeneratorSubGenVector& a, CustomGeneratorSubGenVector& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomGeneratorSubGenVector* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustomGeneratorSubGenVector* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CustomGeneratorSubGenVector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CustomGeneratorSubGenVector>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CustomGeneratorSubGenVector& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CustomGeneratorSubGenVector& from) {
    CustomGeneratorSubGenVector::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomGeneratorSubGenVector* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.CustomGeneratorSubGenVector";
  }
  protected:
  explicit CustomGeneratorSubGenVector(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGeneratorFieldNumber = 1,
    kMetaFieldNumber = 2,
  };
  // optional .Property.VectorPropertyValue generator = 1;
  bool has_generator() const;
  private:
  bool _internal_has_generator() const;
  public:
  void clear_generator();
  const ::Property::VectorPropertyValue& generator() const;
  PROTOBUF_NODISCARD ::Property::VectorPropertyValue* release_generator();
  ::Property::VectorPropertyValue* mutable_generator();
  void set_allocated_generator(::Property::VectorPropertyValue* generator);
  private:
  const ::Property::VectorPropertyValue& _internal_generator() const;
  ::Property::VectorPropertyValue* _internal_mutable_generator();
  public:
  void unsafe_arena_set_allocated_generator(
      ::Property::VectorPropertyValue* generator);
  ::Property::VectorPropertyValue* unsafe_arena_release_generator();

  // optional .Property.VectorGeneratorMetadata meta = 2;
  bool has_meta() const;
  private:
  bool _internal_has_meta() const;
  public:
  void clear_meta();
  const ::Property::VectorGeneratorMetadata& meta() const;
  PROTOBUF_NODISCARD ::Property::VectorGeneratorMetadata* release_meta();
  ::Property::VectorGeneratorMetadata* mutable_meta();
  void set_allocated_meta(::Property::VectorGeneratorMetadata* meta);
  private:
  const ::Property::VectorGeneratorMetadata& _internal_meta() const;
  ::Property::VectorGeneratorMetadata* _internal_mutable_meta();
  public:
  void unsafe_arena_set_allocated_meta(
      ::Property::VectorGeneratorMetadata* meta);
  ::Property::VectorGeneratorMetadata* unsafe_arena_release_meta();

  // @@protoc_insertion_point(class_scope:Property.CustomGeneratorSubGenVector)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::Property::VectorPropertyValue* generator_;
    ::Property::VectorGeneratorMetadata* meta_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class CustomGeneratorSubGenColor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.CustomGeneratorSubGenColor) */ {
 public:
  inline CustomGeneratorSubGenColor() : CustomGeneratorSubGenColor(nullptr) {}
  ~CustomGeneratorSubGenColor() override;
  explicit PROTOBUF_CONSTEXPR CustomGeneratorSubGenColor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CustomGeneratorSubGenColor(const CustomGeneratorSubGenColor& from);
  CustomGeneratorSubGenColor(CustomGeneratorSubGenColor&& from) noexcept
    : CustomGeneratorSubGenColor() {
    *this = ::std::move(from);
  }

  inline CustomGeneratorSubGenColor& operator=(const CustomGeneratorSubGenColor& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomGeneratorSubGenColor& operator=(CustomGeneratorSubGenColor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CustomGeneratorSubGenColor& default_instance() {
    return *internal_default_instance();
  }
  static inline const CustomGeneratorSubGenColor* internal_default_instance() {
    return reinterpret_cast<const CustomGeneratorSubGenColor*>(
               &_CustomGeneratorSubGenColor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  friend void swap(CustomGeneratorSubGenColor& a, CustomGeneratorSubGenColor& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomGeneratorSubGenColor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustomGeneratorSubGenColor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CustomGeneratorSubGenColor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CustomGeneratorSubGenColor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CustomGeneratorSubGenColor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CustomGeneratorSubGenColor& from) {
    CustomGeneratorSubGenColor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomGeneratorSubGenColor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.CustomGeneratorSubGenColor";
  }
  protected:
  explicit CustomGeneratorSubGenColor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGeneratorFieldNumber = 1,
    kMetaFieldNumber = 2,
  };
  // optional .Property.ColorPropertyValue generator = 1;
  bool has_generator() const;
  private:
  bool _internal_has_generator() const;
  public:
  void clear_generator();
  const ::Property::ColorPropertyValue& generator() const;
  PROTOBUF_NODISCARD ::Property::ColorPropertyValue* release_generator();
  ::Property::ColorPropertyValue* mutable_generator();
  void set_allocated_generator(::Property::ColorPropertyValue* generator);
  private:
  const ::Property::ColorPropertyValue& _internal_generator() const;
  ::Property::ColorPropertyValue* _internal_mutable_generator();
  public:
  void unsafe_arena_set_allocated_generator(
      ::Property::ColorPropertyValue* generator);
  ::Property::ColorPropertyValue* unsafe_arena_release_generator();

  // optional .Property.ColorGeneratorMetadata meta = 2;
  bool has_meta() const;
  private:
  bool _internal_has_meta() const;
  public:
  void clear_meta();
  const ::Property::ColorGeneratorMetadata& meta() const;
  PROTOBUF_NODISCARD ::Property::ColorGeneratorMetadata* release_meta();
  ::Property::ColorGeneratorMetadata* mutable_meta();
  void set_allocated_meta(::Property::ColorGeneratorMetadata* meta);
  private:
  const ::Property::ColorGeneratorMetadata& _internal_meta() const;
  ::Property::ColorGeneratorMetadata* _internal_mutable_meta();
  public:
  void unsafe_arena_set_allocated_meta(
      ::Property::ColorGeneratorMetadata* meta);
  ::Property::ColorGeneratorMetadata* unsafe_arena_release_meta();

  // @@protoc_insertion_point(class_scope:Property.CustomGeneratorSubGenColor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::Property::ColorPropertyValue* generator_;
    ::Property::ColorGeneratorMetadata* meta_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class CustomGeneratorSubGenBoolean final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.CustomGeneratorSubGenBoolean) */ {
 public:
  inline CustomGeneratorSubGenBoolean() : CustomGeneratorSubGenBoolean(nullptr) {}
  ~CustomGeneratorSubGenBoolean() override;
  explicit PROTOBUF_CONSTEXPR CustomGeneratorSubGenBoolean(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CustomGeneratorSubGenBoolean(const CustomGeneratorSubGenBoolean& from);
  CustomGeneratorSubGenBoolean(CustomGeneratorSubGenBoolean&& from) noexcept
    : CustomGeneratorSubGenBoolean() {
    *this = ::std::move(from);
  }

  inline CustomGeneratorSubGenBoolean& operator=(const CustomGeneratorSubGenBoolean& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomGeneratorSubGenBoolean& operator=(CustomGeneratorSubGenBoolean&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CustomGeneratorSubGenBoolean& default_instance() {
    return *internal_default_instance();
  }
  static inline const CustomGeneratorSubGenBoolean* internal_default_instance() {
    return reinterpret_cast<const CustomGeneratorSubGenBoolean*>(
               &_CustomGeneratorSubGenBoolean_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  friend void swap(CustomGeneratorSubGenBoolean& a, CustomGeneratorSubGenBoolean& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomGeneratorSubGenBoolean* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustomGeneratorSubGenBoolean* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CustomGeneratorSubGenBoolean* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CustomGeneratorSubGenBoolean>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CustomGeneratorSubGenBoolean& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CustomGeneratorSubGenBoolean& from) {
    CustomGeneratorSubGenBoolean::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomGeneratorSubGenBoolean* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.CustomGeneratorSubGenBoolean";
  }
  protected:
  explicit CustomGeneratorSubGenBoolean(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGeneratorFieldNumber = 1,
    kMetaFieldNumber = 2,
  };
  // optional .Property.BooleanPropertyValue generator = 1;
  bool has_generator() const;
  private:
  bool _internal_has_generator() const;
  public:
  void clear_generator();
  const ::Property::BooleanPropertyValue& generator() const;
  PROTOBUF_NODISCARD ::Property::BooleanPropertyValue* release_generator();
  ::Property::BooleanPropertyValue* mutable_generator();
  void set_allocated_generator(::Property::BooleanPropertyValue* generator);
  private:
  const ::Property::BooleanPropertyValue& _internal_generator() const;
  ::Property::BooleanPropertyValue* _internal_mutable_generator();
  public:
  void unsafe_arena_set_allocated_generator(
      ::Property::BooleanPropertyValue* generator);
  ::Property::BooleanPropertyValue* unsafe_arena_release_generator();

  // optional .Property.BooleanGeneratorMetadata meta = 2;
  bool has_meta() const;
  private:
  bool _internal_has_meta() const;
  public:
  void clear_meta();
  const ::Property::BooleanGeneratorMetadata& meta() const;
  PROTOBUF_NODISCARD ::Property::BooleanGeneratorMetadata* release_meta();
  ::Property::BooleanGeneratorMetadata* mutable_meta();
  void set_allocated_meta(::Property::BooleanGeneratorMetadata* meta);
  private:
  const ::Property::BooleanGeneratorMetadata& _internal_meta() const;
  ::Property::BooleanGeneratorMetadata* _internal_mutable_meta();
  public:
  void unsafe_arena_set_allocated_meta(
      ::Property::BooleanGeneratorMetadata* meta);
  ::Property::BooleanGeneratorMetadata* unsafe_arena_release_meta();

  // @@protoc_insertion_point(class_scope:Property.CustomGeneratorSubGenBoolean)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::Property::BooleanPropertyValue* generator_;
    ::Property::BooleanGeneratorMetadata* meta_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class CustomGeneratorSubGenJson final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.CustomGeneratorSubGenJson) */ {
 public:
  inline CustomGeneratorSubGenJson() : CustomGeneratorSubGenJson(nullptr) {}
  ~CustomGeneratorSubGenJson() override;
  explicit PROTOBUF_CONSTEXPR CustomGeneratorSubGenJson(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CustomGeneratorSubGenJson(const CustomGeneratorSubGenJson& from);
  CustomGeneratorSubGenJson(CustomGeneratorSubGenJson&& from) noexcept
    : CustomGeneratorSubGenJson() {
    *this = ::std::move(from);
  }

  inline CustomGeneratorSubGenJson& operator=(const CustomGeneratorSubGenJson& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomGeneratorSubGenJson& operator=(CustomGeneratorSubGenJson&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CustomGeneratorSubGenJson& default_instance() {
    return *internal_default_instance();
  }
  static inline const CustomGeneratorSubGenJson* internal_default_instance() {
    return reinterpret_cast<const CustomGeneratorSubGenJson*>(
               &_CustomGeneratorSubGenJson_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  friend void swap(CustomGeneratorSubGenJson& a, CustomGeneratorSubGenJson& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomGeneratorSubGenJson* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustomGeneratorSubGenJson* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CustomGeneratorSubGenJson* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CustomGeneratorSubGenJson>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CustomGeneratorSubGenJson& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CustomGeneratorSubGenJson& from) {
    CustomGeneratorSubGenJson::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomGeneratorSubGenJson* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.CustomGeneratorSubGenJson";
  }
  protected:
  explicit CustomGeneratorSubGenJson(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGeneratorFieldNumber = 1,
    kMetaFieldNumber = 2,
  };
  // optional .Property.JsonPropertyValue generator = 1;
  bool has_generator() const;
  private:
  bool _internal_has_generator() const;
  public:
  void clear_generator();
  const ::Property::JsonPropertyValue& generator() const;
  PROTOBUF_NODISCARD ::Property::JsonPropertyValue* release_generator();
  ::Property::JsonPropertyValue* mutable_generator();
  void set_allocated_generator(::Property::JsonPropertyValue* generator);
  private:
  const ::Property::JsonPropertyValue& _internal_generator() const;
  ::Property::JsonPropertyValue* _internal_mutable_generator();
  public:
  void unsafe_arena_set_allocated_generator(
      ::Property::JsonPropertyValue* generator);
  ::Property::JsonPropertyValue* unsafe_arena_release_generator();

  // optional .Property.JsonGeneratorMetadata meta = 2;
  bool has_meta() const;
  private:
  bool _internal_has_meta() const;
  public:
  void clear_meta();
  const ::Property::JsonGeneratorMetadata& meta() const;
  PROTOBUF_NODISCARD ::Property::JsonGeneratorMetadata* release_meta();
  ::Property::JsonGeneratorMetadata* mutable_meta();
  void set_allocated_meta(::Property::JsonGeneratorMetadata* meta);
  private:
  const ::Property::JsonGeneratorMetadata& _internal_meta() const;
  ::Property::JsonGeneratorMetadata* _internal_mutable_meta();
  public:
  void unsafe_arena_set_allocated_meta(
      ::Property::JsonGeneratorMetadata* meta);
  ::Property::JsonGeneratorMetadata* unsafe_arena_release_meta();

  // @@protoc_insertion_point(class_scope:Property.CustomGeneratorSubGenJson)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::Property::JsonPropertyValue* generator_;
    ::Property::JsonGeneratorMetadata* meta_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class CustomGeneratorSubGenTransform final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.CustomGeneratorSubGenTransform) */ {
 public:
  inline CustomGeneratorSubGenTransform() : CustomGeneratorSubGenTransform(nullptr) {}
  ~CustomGeneratorSubGenTransform() override;
  explicit PROTOBUF_CONSTEXPR CustomGeneratorSubGenTransform(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CustomGeneratorSubGenTransform(const CustomGeneratorSubGenTransform& from);
  CustomGeneratorSubGenTransform(CustomGeneratorSubGenTransform&& from) noexcept
    : CustomGeneratorSubGenTransform() {
    *this = ::std::move(from);
  }

  inline CustomGeneratorSubGenTransform& operator=(const CustomGeneratorSubGenTransform& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomGeneratorSubGenTransform& operator=(CustomGeneratorSubGenTransform&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CustomGeneratorSubGenTransform& default_instance() {
    return *internal_default_instance();
  }
  static inline const CustomGeneratorSubGenTransform* internal_default_instance() {
    return reinterpret_cast<const CustomGeneratorSubGenTransform*>(
               &_CustomGeneratorSubGenTransform_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    102;

  friend void swap(CustomGeneratorSubGenTransform& a, CustomGeneratorSubGenTransform& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomGeneratorSubGenTransform* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustomGeneratorSubGenTransform* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CustomGeneratorSubGenTransform* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CustomGeneratorSubGenTransform>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CustomGeneratorSubGenTransform& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CustomGeneratorSubGenTransform& from) {
    CustomGeneratorSubGenTransform::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomGeneratorSubGenTransform* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.CustomGeneratorSubGenTransform";
  }
  protected:
  explicit CustomGeneratorSubGenTransform(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGeneratorFieldNumber = 1,
    kMetaFieldNumber = 2,
  };
  // optional .Property.TransformSet generator = 1;
  bool has_generator() const;
  private:
  bool _internal_has_generator() const;
  public:
  void clear_generator();
  const ::Property::TransformSet& generator() const;
  PROTOBUF_NODISCARD ::Property::TransformSet* release_generator();
  ::Property::TransformSet* mutable_generator();
  void set_allocated_generator(::Property::TransformSet* generator);
  private:
  const ::Property::TransformSet& _internal_generator() const;
  ::Property::TransformSet* _internal_mutable_generator();
  public:
  void unsafe_arena_set_allocated_generator(
      ::Property::TransformSet* generator);
  ::Property::TransformSet* unsafe_arena_release_generator();

  // optional .Property.TransformGeneratorMetadata meta = 2;
  bool has_meta() const;
  private:
  bool _internal_has_meta() const;
  public:
  void clear_meta();
  const ::Property::TransformGeneratorMetadata& meta() const;
  PROTOBUF_NODISCARD ::Property::TransformGeneratorMetadata* release_meta();
  ::Property::TransformGeneratorMetadata* mutable_meta();
  void set_allocated_meta(::Property::TransformGeneratorMetadata* meta);
  private:
  const ::Property::TransformGeneratorMetadata& _internal_meta() const;
  ::Property::TransformGeneratorMetadata* _internal_mutable_meta();
  public:
  void unsafe_arena_set_allocated_meta(
      ::Property::TransformGeneratorMetadata* meta);
  ::Property::TransformGeneratorMetadata* unsafe_arena_release_meta();

  // @@protoc_insertion_point(class_scope:Property.CustomGeneratorSubGenTransform)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::Property::TransformSet* generator_;
    ::Property::TransformGeneratorMetadata* meta_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class CustomGeneratorSubGen final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.CustomGeneratorSubGen) */ {
 public:
  inline CustomGeneratorSubGen() : CustomGeneratorSubGen(nullptr) {}
  ~CustomGeneratorSubGen() override;
  explicit PROTOBUF_CONSTEXPR CustomGeneratorSubGen(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CustomGeneratorSubGen(const CustomGeneratorSubGen& from);
  CustomGeneratorSubGen(CustomGeneratorSubGen&& from) noexcept
    : CustomGeneratorSubGen() {
    *this = ::std::move(from);
  }

  inline CustomGeneratorSubGen& operator=(const CustomGeneratorSubGen& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomGeneratorSubGen& operator=(CustomGeneratorSubGen&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CustomGeneratorSubGen& default_instance() {
    return *internal_default_instance();
  }
  enum SubGenTypeCase {
    kScalar = 2,
    kString = 3,
    kLink = 9,
    kVector = 4,
    kColor = 5,
    kBoolean = 6,
    kJson = 7,
    kTransform = 8,
    SUBGENTYPE_NOT_SET = 0,
  };

  static inline const CustomGeneratorSubGen* internal_default_instance() {
    return reinterpret_cast<const CustomGeneratorSubGen*>(
               &_CustomGeneratorSubGen_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    103;

  friend void swap(CustomGeneratorSubGen& a, CustomGeneratorSubGen& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomGeneratorSubGen* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustomGeneratorSubGen* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CustomGeneratorSubGen* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CustomGeneratorSubGen>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CustomGeneratorSubGen& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CustomGeneratorSubGen& from) {
    CustomGeneratorSubGen::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomGeneratorSubGen* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.CustomGeneratorSubGen";
  }
  protected:
  explicit CustomGeneratorSubGen(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScalarFieldNumber = 2,
    kStringFieldNumber = 3,
    kLinkFieldNumber = 9,
    kVectorFieldNumber = 4,
    kColorFieldNumber = 5,
    kBooleanFieldNumber = 6,
    kJsonFieldNumber = 7,
    kTransformFieldNumber = 8,
  };
  // .Property.CustomGeneratorSubGenScalar scalar = 2;
  bool has_scalar() const;
  private:
  bool _internal_has_scalar() const;
  public:
  void clear_scalar();
  const ::Property::CustomGeneratorSubGenScalar& scalar() const;
  PROTOBUF_NODISCARD ::Property::CustomGeneratorSubGenScalar* release_scalar();
  ::Property::CustomGeneratorSubGenScalar* mutable_scalar();
  void set_allocated_scalar(::Property::CustomGeneratorSubGenScalar* scalar);
  private:
  const ::Property::CustomGeneratorSubGenScalar& _internal_scalar() const;
  ::Property::CustomGeneratorSubGenScalar* _internal_mutable_scalar();
  public:
  void unsafe_arena_set_allocated_scalar(
      ::Property::CustomGeneratorSubGenScalar* scalar);
  ::Property::CustomGeneratorSubGenScalar* unsafe_arena_release_scalar();

  // .Property.CustomGeneratorSubGenString string = 3;
  bool has_string() const;
  private:
  bool _internal_has_string() const;
  public:
  void clear_string();
  const ::Property::CustomGeneratorSubGenString& string() const;
  PROTOBUF_NODISCARD ::Property::CustomGeneratorSubGenString* release_string();
  ::Property::CustomGeneratorSubGenString* mutable_string();
  void set_allocated_string(::Property::CustomGeneratorSubGenString* string);
  private:
  const ::Property::CustomGeneratorSubGenString& _internal_string() const;
  ::Property::CustomGeneratorSubGenString* _internal_mutable_string();
  public:
  void unsafe_arena_set_allocated_string(
      ::Property::CustomGeneratorSubGenString* string);
  ::Property::CustomGeneratorSubGenString* unsafe_arena_release_string();

  // .Property.CustomGeneratorSubGenLink link = 9;
  bool has_link() const;
  private:
  bool _internal_has_link() const;
  public:
  void clear_link();
  const ::Property::CustomGeneratorSubGenLink& link() const;
  PROTOBUF_NODISCARD ::Property::CustomGeneratorSubGenLink* release_link();
  ::Property::CustomGeneratorSubGenLink* mutable_link();
  void set_allocated_link(::Property::CustomGeneratorSubGenLink* link);
  private:
  const ::Property::CustomGeneratorSubGenLink& _internal_link() const;
  ::Property::CustomGeneratorSubGenLink* _internal_mutable_link();
  public:
  void unsafe_arena_set_allocated_link(
      ::Property::CustomGeneratorSubGenLink* link);
  ::Property::CustomGeneratorSubGenLink* unsafe_arena_release_link();

  // .Property.CustomGeneratorSubGenVector vector = 4;
  bool has_vector() const;
  private:
  bool _internal_has_vector() const;
  public:
  void clear_vector();
  const ::Property::CustomGeneratorSubGenVector& vector() const;
  PROTOBUF_NODISCARD ::Property::CustomGeneratorSubGenVector* release_vector();
  ::Property::CustomGeneratorSubGenVector* mutable_vector();
  void set_allocated_vector(::Property::CustomGeneratorSubGenVector* vector);
  private:
  const ::Property::CustomGeneratorSubGenVector& _internal_vector() const;
  ::Property::CustomGeneratorSubGenVector* _internal_mutable_vector();
  public:
  void unsafe_arena_set_allocated_vector(
      ::Property::CustomGeneratorSubGenVector* vector);
  ::Property::CustomGeneratorSubGenVector* unsafe_arena_release_vector();

  // .Property.CustomGeneratorSubGenColor color = 5;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const ::Property::CustomGeneratorSubGenColor& color() const;
  PROTOBUF_NODISCARD ::Property::CustomGeneratorSubGenColor* release_color();
  ::Property::CustomGeneratorSubGenColor* mutable_color();
  void set_allocated_color(::Property::CustomGeneratorSubGenColor* color);
  private:
  const ::Property::CustomGeneratorSubGenColor& _internal_color() const;
  ::Property::CustomGeneratorSubGenColor* _internal_mutable_color();
  public:
  void unsafe_arena_set_allocated_color(
      ::Property::CustomGeneratorSubGenColor* color);
  ::Property::CustomGeneratorSubGenColor* unsafe_arena_release_color();

  // .Property.CustomGeneratorSubGenBoolean boolean = 6;
  bool has_boolean() const;
  private:
  bool _internal_has_boolean() const;
  public:
  void clear_boolean();
  const ::Property::CustomGeneratorSubGenBoolean& boolean() const;
  PROTOBUF_NODISCARD ::Property::CustomGeneratorSubGenBoolean* release_boolean();
  ::Property::CustomGeneratorSubGenBoolean* mutable_boolean();
  void set_allocated_boolean(::Property::CustomGeneratorSubGenBoolean* boolean);
  private:
  const ::Property::CustomGeneratorSubGenBoolean& _internal_boolean() const;
  ::Property::CustomGeneratorSubGenBoolean* _internal_mutable_boolean();
  public:
  void unsafe_arena_set_allocated_boolean(
      ::Property::CustomGeneratorSubGenBoolean* boolean);
  ::Property::CustomGeneratorSubGenBoolean* unsafe_arena_release_boolean();

  // .Property.CustomGeneratorSubGenJson json = 7;
  bool has_json() const;
  private:
  bool _internal_has_json() const;
  public:
  void clear_json();
  const ::Property::CustomGeneratorSubGenJson& json() const;
  PROTOBUF_NODISCARD ::Property::CustomGeneratorSubGenJson* release_json();
  ::Property::CustomGeneratorSubGenJson* mutable_json();
  void set_allocated_json(::Property::CustomGeneratorSubGenJson* json);
  private:
  const ::Property::CustomGeneratorSubGenJson& _internal_json() const;
  ::Property::CustomGeneratorSubGenJson* _internal_mutable_json();
  public:
  void unsafe_arena_set_allocated_json(
      ::Property::CustomGeneratorSubGenJson* json);
  ::Property::CustomGeneratorSubGenJson* unsafe_arena_release_json();

  // .Property.CustomGeneratorSubGenTransform transform = 8;
  bool has_transform() const;
  private:
  bool _internal_has_transform() const;
  public:
  void clear_transform();
  const ::Property::CustomGeneratorSubGenTransform& transform() const;
  PROTOBUF_NODISCARD ::Property::CustomGeneratorSubGenTransform* release_transform();
  ::Property::CustomGeneratorSubGenTransform* mutable_transform();
  void set_allocated_transform(::Property::CustomGeneratorSubGenTransform* transform);
  private:
  const ::Property::CustomGeneratorSubGenTransform& _internal_transform() const;
  ::Property::CustomGeneratorSubGenTransform* _internal_mutable_transform();
  public:
  void unsafe_arena_set_allocated_transform(
      ::Property::CustomGeneratorSubGenTransform* transform);
  ::Property::CustomGeneratorSubGenTransform* unsafe_arena_release_transform();

  void clear_SubGenType();
  SubGenTypeCase SubGenType_case() const;
  // @@protoc_insertion_point(class_scope:Property.CustomGeneratorSubGen)
 private:
  class _Internal;
  void set_has_scalar();
  void set_has_string();
  void set_has_link();
  void set_has_vector();
  void set_has_color();
  void set_has_boolean();
  void set_has_json();
  void set_has_transform();

  inline bool has_SubGenType() const;
  inline void clear_has_SubGenType();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union SubGenTypeUnion {
      constexpr SubGenTypeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::Property::CustomGeneratorSubGenScalar* scalar_;
      ::Property::CustomGeneratorSubGenString* string_;
      ::Property::CustomGeneratorSubGenLink* link_;
      ::Property::CustomGeneratorSubGenVector* vector_;
      ::Property::CustomGeneratorSubGenColor* color_;
      ::Property::CustomGeneratorSubGenBoolean* boolean_;
      ::Property::CustomGeneratorSubGenJson* json_;
      ::Property::CustomGeneratorSubGenTransform* transform_;
    } SubGenType_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// -------------------------------------------------------------------

class CustomGeneratorValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Property.CustomGeneratorValue) */ {
 public:
  inline CustomGeneratorValue() : CustomGeneratorValue(nullptr) {}
  ~CustomGeneratorValue() override;
  explicit PROTOBUF_CONSTEXPR CustomGeneratorValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CustomGeneratorValue(const CustomGeneratorValue& from);
  CustomGeneratorValue(CustomGeneratorValue&& from) noexcept
    : CustomGeneratorValue() {
    *this = ::std::move(from);
  }

  inline CustomGeneratorValue& operator=(const CustomGeneratorValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomGeneratorValue& operator=(CustomGeneratorValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CustomGeneratorValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const CustomGeneratorValue* internal_default_instance() {
    return reinterpret_cast<const CustomGeneratorValue*>(
               &_CustomGeneratorValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    104;

  friend void swap(CustomGeneratorValue& a, CustomGeneratorValue& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomGeneratorValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustomGeneratorValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CustomGeneratorValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CustomGeneratorValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CustomGeneratorValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CustomGeneratorValue& from) {
    CustomGeneratorValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomGeneratorValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Property.CustomGeneratorValue";
  }
  protected:
  explicit CustomGeneratorValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubGensFieldNumber = 2,
    kCustomIdFieldNumber = 1,
  };
  // repeated .Property.CustomGeneratorSubGen subGens = 2;
  int subgens_size() const;
  private:
  int _internal_subgens_size() const;
  public:
  void clear_subgens();
  ::Property::CustomGeneratorSubGen* mutable_subgens(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Property::CustomGeneratorSubGen >*
      mutable_subgens();
  private:
  const ::Property::CustomGeneratorSubGen& _internal_subgens(int index) const;
  ::Property::CustomGeneratorSubGen* _internal_add_subgens();
  public:
  const ::Property::CustomGeneratorSubGen& subgens(int index) const;
  ::Property::CustomGeneratorSubGen* add_subgens();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Property::CustomGeneratorSubGen >&
      subgens() const;

  // string customId = 1;
  void clear_customid();
  const std::string& customid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_customid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_customid();
  PROTOBUF_NODISCARD std::string* release_customid();
  void set_allocated_customid(std::string* customid);
  private:
  const std::string& _internal_customid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_customid(const std::string& value);
  std::string* _internal_mutable_customid();
  public:

  // @@protoc_insertion_point(class_scope:Property.CustomGeneratorValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Property::CustomGeneratorSubGen > subgens_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_properties_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PropertyIdentifier

// string id = 1;
inline void PropertyIdentifier::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& PropertyIdentifier::id() const {
  // @@protoc_insertion_point(field_get:Property.PropertyIdentifier.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PropertyIdentifier::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Property.PropertyIdentifier.id)
}
inline std::string* PropertyIdentifier::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:Property.PropertyIdentifier.id)
  return _s;
}
inline const std::string& PropertyIdentifier::_internal_id() const {
  return _impl_.id_.Get();
}
inline void PropertyIdentifier::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* PropertyIdentifier::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* PropertyIdentifier::release_id() {
  // @@protoc_insertion_point(field_release:Property.PropertyIdentifier.id)
  return _impl_.id_.Release();
}
inline void PropertyIdentifier::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Property.PropertyIdentifier.id)
}

// -------------------------------------------------------------------

// AnyPropertyValue

// .Property.ScalarPropertyValue scalar = 1;
inline bool AnyPropertyValue::_internal_has_scalar() const {
  return PropertyType_case() == kScalar;
}
inline bool AnyPropertyValue::has_scalar() const {
  return _internal_has_scalar();
}
inline void AnyPropertyValue::set_has_scalar() {
  _impl_._oneof_case_[0] = kScalar;
}
inline void AnyPropertyValue::clear_scalar() {
  if (_internal_has_scalar()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.PropertyType_.scalar_;
    }
    clear_has_PropertyType();
  }
}
inline ::Property::ScalarPropertyValue* AnyPropertyValue::release_scalar() {
  // @@protoc_insertion_point(field_release:Property.AnyPropertyValue.scalar)
  if (_internal_has_scalar()) {
    clear_has_PropertyType();
    ::Property::ScalarPropertyValue* temp = _impl_.PropertyType_.scalar_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.PropertyType_.scalar_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::ScalarPropertyValue& AnyPropertyValue::_internal_scalar() const {
  return _internal_has_scalar()
      ? *_impl_.PropertyType_.scalar_
      : reinterpret_cast< ::Property::ScalarPropertyValue&>(::Property::_ScalarPropertyValue_default_instance_);
}
inline const ::Property::ScalarPropertyValue& AnyPropertyValue::scalar() const {
  // @@protoc_insertion_point(field_get:Property.AnyPropertyValue.scalar)
  return _internal_scalar();
}
inline ::Property::ScalarPropertyValue* AnyPropertyValue::unsafe_arena_release_scalar() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.AnyPropertyValue.scalar)
  if (_internal_has_scalar()) {
    clear_has_PropertyType();
    ::Property::ScalarPropertyValue* temp = _impl_.PropertyType_.scalar_;
    _impl_.PropertyType_.scalar_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyPropertyValue::unsafe_arena_set_allocated_scalar(::Property::ScalarPropertyValue* scalar) {
  clear_PropertyType();
  if (scalar) {
    set_has_scalar();
    _impl_.PropertyType_.scalar_ = scalar;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.AnyPropertyValue.scalar)
}
inline ::Property::ScalarPropertyValue* AnyPropertyValue::_internal_mutable_scalar() {
  if (!_internal_has_scalar()) {
    clear_PropertyType();
    set_has_scalar();
    _impl_.PropertyType_.scalar_ = CreateMaybeMessage< ::Property::ScalarPropertyValue >(GetArenaForAllocation());
  }
  return _impl_.PropertyType_.scalar_;
}
inline ::Property::ScalarPropertyValue* AnyPropertyValue::mutable_scalar() {
  ::Property::ScalarPropertyValue* _msg = _internal_mutable_scalar();
  // @@protoc_insertion_point(field_mutable:Property.AnyPropertyValue.scalar)
  return _msg;
}

// .Property.StringPropertyValue string = 2;
inline bool AnyPropertyValue::_internal_has_string() const {
  return PropertyType_case() == kString;
}
inline bool AnyPropertyValue::has_string() const {
  return _internal_has_string();
}
inline void AnyPropertyValue::set_has_string() {
  _impl_._oneof_case_[0] = kString;
}
inline void AnyPropertyValue::clear_string() {
  if (_internal_has_string()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.PropertyType_.string_;
    }
    clear_has_PropertyType();
  }
}
inline ::Property::StringPropertyValue* AnyPropertyValue::release_string() {
  // @@protoc_insertion_point(field_release:Property.AnyPropertyValue.string)
  if (_internal_has_string()) {
    clear_has_PropertyType();
    ::Property::StringPropertyValue* temp = _impl_.PropertyType_.string_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.PropertyType_.string_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::StringPropertyValue& AnyPropertyValue::_internal_string() const {
  return _internal_has_string()
      ? *_impl_.PropertyType_.string_
      : reinterpret_cast< ::Property::StringPropertyValue&>(::Property::_StringPropertyValue_default_instance_);
}
inline const ::Property::StringPropertyValue& AnyPropertyValue::string() const {
  // @@protoc_insertion_point(field_get:Property.AnyPropertyValue.string)
  return _internal_string();
}
inline ::Property::StringPropertyValue* AnyPropertyValue::unsafe_arena_release_string() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.AnyPropertyValue.string)
  if (_internal_has_string()) {
    clear_has_PropertyType();
    ::Property::StringPropertyValue* temp = _impl_.PropertyType_.string_;
    _impl_.PropertyType_.string_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyPropertyValue::unsafe_arena_set_allocated_string(::Property::StringPropertyValue* string) {
  clear_PropertyType();
  if (string) {
    set_has_string();
    _impl_.PropertyType_.string_ = string;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.AnyPropertyValue.string)
}
inline ::Property::StringPropertyValue* AnyPropertyValue::_internal_mutable_string() {
  if (!_internal_has_string()) {
    clear_PropertyType();
    set_has_string();
    _impl_.PropertyType_.string_ = CreateMaybeMessage< ::Property::StringPropertyValue >(GetArenaForAllocation());
  }
  return _impl_.PropertyType_.string_;
}
inline ::Property::StringPropertyValue* AnyPropertyValue::mutable_string() {
  ::Property::StringPropertyValue* _msg = _internal_mutable_string();
  // @@protoc_insertion_point(field_mutable:Property.AnyPropertyValue.string)
  return _msg;
}

// .Property.VectorPropertyValue vector = 3;
inline bool AnyPropertyValue::_internal_has_vector() const {
  return PropertyType_case() == kVector;
}
inline bool AnyPropertyValue::has_vector() const {
  return _internal_has_vector();
}
inline void AnyPropertyValue::set_has_vector() {
  _impl_._oneof_case_[0] = kVector;
}
inline void AnyPropertyValue::clear_vector() {
  if (_internal_has_vector()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.PropertyType_.vector_;
    }
    clear_has_PropertyType();
  }
}
inline ::Property::VectorPropertyValue* AnyPropertyValue::release_vector() {
  // @@protoc_insertion_point(field_release:Property.AnyPropertyValue.vector)
  if (_internal_has_vector()) {
    clear_has_PropertyType();
    ::Property::VectorPropertyValue* temp = _impl_.PropertyType_.vector_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.PropertyType_.vector_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::VectorPropertyValue& AnyPropertyValue::_internal_vector() const {
  return _internal_has_vector()
      ? *_impl_.PropertyType_.vector_
      : reinterpret_cast< ::Property::VectorPropertyValue&>(::Property::_VectorPropertyValue_default_instance_);
}
inline const ::Property::VectorPropertyValue& AnyPropertyValue::vector() const {
  // @@protoc_insertion_point(field_get:Property.AnyPropertyValue.vector)
  return _internal_vector();
}
inline ::Property::VectorPropertyValue* AnyPropertyValue::unsafe_arena_release_vector() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.AnyPropertyValue.vector)
  if (_internal_has_vector()) {
    clear_has_PropertyType();
    ::Property::VectorPropertyValue* temp = _impl_.PropertyType_.vector_;
    _impl_.PropertyType_.vector_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyPropertyValue::unsafe_arena_set_allocated_vector(::Property::VectorPropertyValue* vector) {
  clear_PropertyType();
  if (vector) {
    set_has_vector();
    _impl_.PropertyType_.vector_ = vector;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.AnyPropertyValue.vector)
}
inline ::Property::VectorPropertyValue* AnyPropertyValue::_internal_mutable_vector() {
  if (!_internal_has_vector()) {
    clear_PropertyType();
    set_has_vector();
    _impl_.PropertyType_.vector_ = CreateMaybeMessage< ::Property::VectorPropertyValue >(GetArenaForAllocation());
  }
  return _impl_.PropertyType_.vector_;
}
inline ::Property::VectorPropertyValue* AnyPropertyValue::mutable_vector() {
  ::Property::VectorPropertyValue* _msg = _internal_mutable_vector();
  // @@protoc_insertion_point(field_mutable:Property.AnyPropertyValue.vector)
  return _msg;
}

// .Property.ColorPropertyValue color = 4;
inline bool AnyPropertyValue::_internal_has_color() const {
  return PropertyType_case() == kColor;
}
inline bool AnyPropertyValue::has_color() const {
  return _internal_has_color();
}
inline void AnyPropertyValue::set_has_color() {
  _impl_._oneof_case_[0] = kColor;
}
inline void AnyPropertyValue::clear_color() {
  if (_internal_has_color()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.PropertyType_.color_;
    }
    clear_has_PropertyType();
  }
}
inline ::Property::ColorPropertyValue* AnyPropertyValue::release_color() {
  // @@protoc_insertion_point(field_release:Property.AnyPropertyValue.color)
  if (_internal_has_color()) {
    clear_has_PropertyType();
    ::Property::ColorPropertyValue* temp = _impl_.PropertyType_.color_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.PropertyType_.color_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::ColorPropertyValue& AnyPropertyValue::_internal_color() const {
  return _internal_has_color()
      ? *_impl_.PropertyType_.color_
      : reinterpret_cast< ::Property::ColorPropertyValue&>(::Property::_ColorPropertyValue_default_instance_);
}
inline const ::Property::ColorPropertyValue& AnyPropertyValue::color() const {
  // @@protoc_insertion_point(field_get:Property.AnyPropertyValue.color)
  return _internal_color();
}
inline ::Property::ColorPropertyValue* AnyPropertyValue::unsafe_arena_release_color() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.AnyPropertyValue.color)
  if (_internal_has_color()) {
    clear_has_PropertyType();
    ::Property::ColorPropertyValue* temp = _impl_.PropertyType_.color_;
    _impl_.PropertyType_.color_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyPropertyValue::unsafe_arena_set_allocated_color(::Property::ColorPropertyValue* color) {
  clear_PropertyType();
  if (color) {
    set_has_color();
    _impl_.PropertyType_.color_ = color;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.AnyPropertyValue.color)
}
inline ::Property::ColorPropertyValue* AnyPropertyValue::_internal_mutable_color() {
  if (!_internal_has_color()) {
    clear_PropertyType();
    set_has_color();
    _impl_.PropertyType_.color_ = CreateMaybeMessage< ::Property::ColorPropertyValue >(GetArenaForAllocation());
  }
  return _impl_.PropertyType_.color_;
}
inline ::Property::ColorPropertyValue* AnyPropertyValue::mutable_color() {
  ::Property::ColorPropertyValue* _msg = _internal_mutable_color();
  // @@protoc_insertion_point(field_mutable:Property.AnyPropertyValue.color)
  return _msg;
}

// .Property.TransformSet transform = 5;
inline bool AnyPropertyValue::_internal_has_transform() const {
  return PropertyType_case() == kTransform;
}
inline bool AnyPropertyValue::has_transform() const {
  return _internal_has_transform();
}
inline void AnyPropertyValue::set_has_transform() {
  _impl_._oneof_case_[0] = kTransform;
}
inline void AnyPropertyValue::clear_transform() {
  if (_internal_has_transform()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.PropertyType_.transform_;
    }
    clear_has_PropertyType();
  }
}
inline ::Property::TransformSet* AnyPropertyValue::release_transform() {
  // @@protoc_insertion_point(field_release:Property.AnyPropertyValue.transform)
  if (_internal_has_transform()) {
    clear_has_PropertyType();
    ::Property::TransformSet* temp = _impl_.PropertyType_.transform_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.PropertyType_.transform_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::TransformSet& AnyPropertyValue::_internal_transform() const {
  return _internal_has_transform()
      ? *_impl_.PropertyType_.transform_
      : reinterpret_cast< ::Property::TransformSet&>(::Property::_TransformSet_default_instance_);
}
inline const ::Property::TransformSet& AnyPropertyValue::transform() const {
  // @@protoc_insertion_point(field_get:Property.AnyPropertyValue.transform)
  return _internal_transform();
}
inline ::Property::TransformSet* AnyPropertyValue::unsafe_arena_release_transform() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.AnyPropertyValue.transform)
  if (_internal_has_transform()) {
    clear_has_PropertyType();
    ::Property::TransformSet* temp = _impl_.PropertyType_.transform_;
    _impl_.PropertyType_.transform_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyPropertyValue::unsafe_arena_set_allocated_transform(::Property::TransformSet* transform) {
  clear_PropertyType();
  if (transform) {
    set_has_transform();
    _impl_.PropertyType_.transform_ = transform;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.AnyPropertyValue.transform)
}
inline ::Property::TransformSet* AnyPropertyValue::_internal_mutable_transform() {
  if (!_internal_has_transform()) {
    clear_PropertyType();
    set_has_transform();
    _impl_.PropertyType_.transform_ = CreateMaybeMessage< ::Property::TransformSet >(GetArenaForAllocation());
  }
  return _impl_.PropertyType_.transform_;
}
inline ::Property::TransformSet* AnyPropertyValue::mutable_transform() {
  ::Property::TransformSet* _msg = _internal_mutable_transform();
  // @@protoc_insertion_point(field_mutable:Property.AnyPropertyValue.transform)
  return _msg;
}

// .Property.TransformUpdate transUpdate = 6;
inline bool AnyPropertyValue::_internal_has_transupdate() const {
  return PropertyType_case() == kTransUpdate;
}
inline bool AnyPropertyValue::has_transupdate() const {
  return _internal_has_transupdate();
}
inline void AnyPropertyValue::set_has_transupdate() {
  _impl_._oneof_case_[0] = kTransUpdate;
}
inline void AnyPropertyValue::clear_transupdate() {
  if (_internal_has_transupdate()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.PropertyType_.transupdate_;
    }
    clear_has_PropertyType();
  }
}
inline ::Property::TransformUpdate* AnyPropertyValue::release_transupdate() {
  // @@protoc_insertion_point(field_release:Property.AnyPropertyValue.transUpdate)
  if (_internal_has_transupdate()) {
    clear_has_PropertyType();
    ::Property::TransformUpdate* temp = _impl_.PropertyType_.transupdate_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.PropertyType_.transupdate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::TransformUpdate& AnyPropertyValue::_internal_transupdate() const {
  return _internal_has_transupdate()
      ? *_impl_.PropertyType_.transupdate_
      : reinterpret_cast< ::Property::TransformUpdate&>(::Property::_TransformUpdate_default_instance_);
}
inline const ::Property::TransformUpdate& AnyPropertyValue::transupdate() const {
  // @@protoc_insertion_point(field_get:Property.AnyPropertyValue.transUpdate)
  return _internal_transupdate();
}
inline ::Property::TransformUpdate* AnyPropertyValue::unsafe_arena_release_transupdate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.AnyPropertyValue.transUpdate)
  if (_internal_has_transupdate()) {
    clear_has_PropertyType();
    ::Property::TransformUpdate* temp = _impl_.PropertyType_.transupdate_;
    _impl_.PropertyType_.transupdate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyPropertyValue::unsafe_arena_set_allocated_transupdate(::Property::TransformUpdate* transupdate) {
  clear_PropertyType();
  if (transupdate) {
    set_has_transupdate();
    _impl_.PropertyType_.transupdate_ = transupdate;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.AnyPropertyValue.transUpdate)
}
inline ::Property::TransformUpdate* AnyPropertyValue::_internal_mutable_transupdate() {
  if (!_internal_has_transupdate()) {
    clear_PropertyType();
    set_has_transupdate();
    _impl_.PropertyType_.transupdate_ = CreateMaybeMessage< ::Property::TransformUpdate >(GetArenaForAllocation());
  }
  return _impl_.PropertyType_.transupdate_;
}
inline ::Property::TransformUpdate* AnyPropertyValue::mutable_transupdate() {
  ::Property::TransformUpdate* _msg = _internal_mutable_transupdate();
  // @@protoc_insertion_point(field_mutable:Property.AnyPropertyValue.transUpdate)
  return _msg;
}

// .Property.BooleanPropertyValue bool = 7;
inline bool AnyPropertyValue::_internal_has_bool_() const {
  return PropertyType_case() == kBool;
}
inline bool AnyPropertyValue::has_bool_() const {
  return _internal_has_bool_();
}
inline void AnyPropertyValue::set_has_bool_() {
  _impl_._oneof_case_[0] = kBool;
}
inline void AnyPropertyValue::clear_bool_() {
  if (_internal_has_bool_()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.PropertyType_.bool__;
    }
    clear_has_PropertyType();
  }
}
inline ::Property::BooleanPropertyValue* AnyPropertyValue::release_bool_() {
  // @@protoc_insertion_point(field_release:Property.AnyPropertyValue.bool)
  if (_internal_has_bool_()) {
    clear_has_PropertyType();
    ::Property::BooleanPropertyValue* temp = _impl_.PropertyType_.bool__;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.PropertyType_.bool__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::BooleanPropertyValue& AnyPropertyValue::_internal_bool_() const {
  return _internal_has_bool_()
      ? *_impl_.PropertyType_.bool__
      : reinterpret_cast< ::Property::BooleanPropertyValue&>(::Property::_BooleanPropertyValue_default_instance_);
}
inline const ::Property::BooleanPropertyValue& AnyPropertyValue::bool_() const {
  // @@protoc_insertion_point(field_get:Property.AnyPropertyValue.bool)
  return _internal_bool_();
}
inline ::Property::BooleanPropertyValue* AnyPropertyValue::unsafe_arena_release_bool_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.AnyPropertyValue.bool)
  if (_internal_has_bool_()) {
    clear_has_PropertyType();
    ::Property::BooleanPropertyValue* temp = _impl_.PropertyType_.bool__;
    _impl_.PropertyType_.bool__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyPropertyValue::unsafe_arena_set_allocated_bool_(::Property::BooleanPropertyValue* bool_) {
  clear_PropertyType();
  if (bool_) {
    set_has_bool_();
    _impl_.PropertyType_.bool__ = bool_;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.AnyPropertyValue.bool)
}
inline ::Property::BooleanPropertyValue* AnyPropertyValue::_internal_mutable_bool_() {
  if (!_internal_has_bool_()) {
    clear_PropertyType();
    set_has_bool_();
    _impl_.PropertyType_.bool__ = CreateMaybeMessage< ::Property::BooleanPropertyValue >(GetArenaForAllocation());
  }
  return _impl_.PropertyType_.bool__;
}
inline ::Property::BooleanPropertyValue* AnyPropertyValue::mutable_bool_() {
  ::Property::BooleanPropertyValue* _msg = _internal_mutable_bool_();
  // @@protoc_insertion_point(field_mutable:Property.AnyPropertyValue.bool)
  return _msg;
}

// .Property.JsonPropertyValue json = 9;
inline bool AnyPropertyValue::_internal_has_json() const {
  return PropertyType_case() == kJson;
}
inline bool AnyPropertyValue::has_json() const {
  return _internal_has_json();
}
inline void AnyPropertyValue::set_has_json() {
  _impl_._oneof_case_[0] = kJson;
}
inline void AnyPropertyValue::clear_json() {
  if (_internal_has_json()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.PropertyType_.json_;
    }
    clear_has_PropertyType();
  }
}
inline ::Property::JsonPropertyValue* AnyPropertyValue::release_json() {
  // @@protoc_insertion_point(field_release:Property.AnyPropertyValue.json)
  if (_internal_has_json()) {
    clear_has_PropertyType();
    ::Property::JsonPropertyValue* temp = _impl_.PropertyType_.json_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.PropertyType_.json_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::JsonPropertyValue& AnyPropertyValue::_internal_json() const {
  return _internal_has_json()
      ? *_impl_.PropertyType_.json_
      : reinterpret_cast< ::Property::JsonPropertyValue&>(::Property::_JsonPropertyValue_default_instance_);
}
inline const ::Property::JsonPropertyValue& AnyPropertyValue::json() const {
  // @@protoc_insertion_point(field_get:Property.AnyPropertyValue.json)
  return _internal_json();
}
inline ::Property::JsonPropertyValue* AnyPropertyValue::unsafe_arena_release_json() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.AnyPropertyValue.json)
  if (_internal_has_json()) {
    clear_has_PropertyType();
    ::Property::JsonPropertyValue* temp = _impl_.PropertyType_.json_;
    _impl_.PropertyType_.json_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyPropertyValue::unsafe_arena_set_allocated_json(::Property::JsonPropertyValue* json) {
  clear_PropertyType();
  if (json) {
    set_has_json();
    _impl_.PropertyType_.json_ = json;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.AnyPropertyValue.json)
}
inline ::Property::JsonPropertyValue* AnyPropertyValue::_internal_mutable_json() {
  if (!_internal_has_json()) {
    clear_PropertyType();
    set_has_json();
    _impl_.PropertyType_.json_ = CreateMaybeMessage< ::Property::JsonPropertyValue >(GetArenaForAllocation());
  }
  return _impl_.PropertyType_.json_;
}
inline ::Property::JsonPropertyValue* AnyPropertyValue::mutable_json() {
  ::Property::JsonPropertyValue* _msg = _internal_mutable_json();
  // @@protoc_insertion_point(field_mutable:Property.AnyPropertyValue.json)
  return _msg;
}

// .Property.LinkPropertyValue link = 10;
inline bool AnyPropertyValue::_internal_has_link() const {
  return PropertyType_case() == kLink;
}
inline bool AnyPropertyValue::has_link() const {
  return _internal_has_link();
}
inline void AnyPropertyValue::set_has_link() {
  _impl_._oneof_case_[0] = kLink;
}
inline void AnyPropertyValue::clear_link() {
  if (_internal_has_link()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.PropertyType_.link_;
    }
    clear_has_PropertyType();
  }
}
inline ::Property::LinkPropertyValue* AnyPropertyValue::release_link() {
  // @@protoc_insertion_point(field_release:Property.AnyPropertyValue.link)
  if (_internal_has_link()) {
    clear_has_PropertyType();
    ::Property::LinkPropertyValue* temp = _impl_.PropertyType_.link_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.PropertyType_.link_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::LinkPropertyValue& AnyPropertyValue::_internal_link() const {
  return _internal_has_link()
      ? *_impl_.PropertyType_.link_
      : reinterpret_cast< ::Property::LinkPropertyValue&>(::Property::_LinkPropertyValue_default_instance_);
}
inline const ::Property::LinkPropertyValue& AnyPropertyValue::link() const {
  // @@protoc_insertion_point(field_get:Property.AnyPropertyValue.link)
  return _internal_link();
}
inline ::Property::LinkPropertyValue* AnyPropertyValue::unsafe_arena_release_link() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.AnyPropertyValue.link)
  if (_internal_has_link()) {
    clear_has_PropertyType();
    ::Property::LinkPropertyValue* temp = _impl_.PropertyType_.link_;
    _impl_.PropertyType_.link_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyPropertyValue::unsafe_arena_set_allocated_link(::Property::LinkPropertyValue* link) {
  clear_PropertyType();
  if (link) {
    set_has_link();
    _impl_.PropertyType_.link_ = link;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.AnyPropertyValue.link)
}
inline ::Property::LinkPropertyValue* AnyPropertyValue::_internal_mutable_link() {
  if (!_internal_has_link()) {
    clear_PropertyType();
    set_has_link();
    _impl_.PropertyType_.link_ = CreateMaybeMessage< ::Property::LinkPropertyValue >(GetArenaForAllocation());
  }
  return _impl_.PropertyType_.link_;
}
inline ::Property::LinkPropertyValue* AnyPropertyValue::mutable_link() {
  ::Property::LinkPropertyValue* _msg = _internal_mutable_link();
  // @@protoc_insertion_point(field_mutable:Property.AnyPropertyValue.link)
  return _msg;
}

inline bool AnyPropertyValue::has_PropertyType() const {
  return PropertyType_case() != PROPERTYTYPE_NOT_SET;
}
inline void AnyPropertyValue::clear_has_PropertyType() {
  _impl_._oneof_case_[0] = PROPERTYTYPE_NOT_SET;
}
inline AnyPropertyValue::PropertyTypeCase AnyPropertyValue::PropertyType_case() const {
  return AnyPropertyValue::PropertyTypeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// GeneratorMetadata

// string name = 1;
inline void GeneratorMetadata::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GeneratorMetadata::name() const {
  // @@protoc_insertion_point(field_get:Property.GeneratorMetadata.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GeneratorMetadata::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Property.GeneratorMetadata.name)
}
inline std::string* GeneratorMetadata::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Property.GeneratorMetadata.name)
  return _s;
}
inline const std::string& GeneratorMetadata::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GeneratorMetadata::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GeneratorMetadata::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GeneratorMetadata::release_name() {
  // @@protoc_insertion_point(field_release:Property.GeneratorMetadata.name)
  return _impl_.name_.Release();
}
inline void GeneratorMetadata::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Property.GeneratorMetadata.name)
}

// optional string description = 2;
inline bool GeneratorMetadata::_internal_has_description() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GeneratorMetadata::has_description() const {
  return _internal_has_description();
}
inline void GeneratorMetadata::clear_description() {
  _impl_.description_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GeneratorMetadata::description() const {
  // @@protoc_insertion_point(field_get:Property.GeneratorMetadata.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GeneratorMetadata::set_description(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Property.GeneratorMetadata.description)
}
inline std::string* GeneratorMetadata::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:Property.GeneratorMetadata.description)
  return _s;
}
inline const std::string& GeneratorMetadata::_internal_description() const {
  return _impl_.description_.Get();
}
inline void GeneratorMetadata::_internal_set_description(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* GeneratorMetadata::_internal_mutable_description() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* GeneratorMetadata::release_description() {
  // @@protoc_insertion_point(field_release:Property.GeneratorMetadata.description)
  if (!_internal_has_description()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.description_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GeneratorMetadata::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Property.GeneratorMetadata.description)
}

// optional bool hidden = 3;
inline bool GeneratorMetadata::_internal_has_hidden() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GeneratorMetadata::has_hidden() const {
  return _internal_has_hidden();
}
inline void GeneratorMetadata::clear_hidden() {
  _impl_.hidden_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool GeneratorMetadata::_internal_hidden() const {
  return _impl_.hidden_;
}
inline bool GeneratorMetadata::hidden() const {
  // @@protoc_insertion_point(field_get:Property.GeneratorMetadata.hidden)
  return _internal_hidden();
}
inline void GeneratorMetadata::_internal_set_hidden(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.hidden_ = value;
}
inline void GeneratorMetadata::set_hidden(bool value) {
  _internal_set_hidden(value);
  // @@protoc_insertion_point(field_set:Property.GeneratorMetadata.hidden)
}

// -------------------------------------------------------------------

// PropertyMetadata

// string name = 1;
inline void PropertyMetadata::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& PropertyMetadata::name() const {
  // @@protoc_insertion_point(field_get:Property.PropertyMetadata.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PropertyMetadata::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Property.PropertyMetadata.name)
}
inline std::string* PropertyMetadata::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Property.PropertyMetadata.name)
  return _s;
}
inline const std::string& PropertyMetadata::_internal_name() const {
  return _impl_.name_.Get();
}
inline void PropertyMetadata::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* PropertyMetadata::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* PropertyMetadata::release_name() {
  // @@protoc_insertion_point(field_release:Property.PropertyMetadata.name)
  return _impl_.name_.Release();
}
inline void PropertyMetadata::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Property.PropertyMetadata.name)
}

// optional string category = 2;
inline bool PropertyMetadata::_internal_has_category() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PropertyMetadata::has_category() const {
  return _internal_has_category();
}
inline void PropertyMetadata::clear_category() {
  _impl_.category_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PropertyMetadata::category() const {
  // @@protoc_insertion_point(field_get:Property.PropertyMetadata.category)
  return _internal_category();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PropertyMetadata::set_category(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.category_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Property.PropertyMetadata.category)
}
inline std::string* PropertyMetadata::mutable_category() {
  std::string* _s = _internal_mutable_category();
  // @@protoc_insertion_point(field_mutable:Property.PropertyMetadata.category)
  return _s;
}
inline const std::string& PropertyMetadata::_internal_category() const {
  return _impl_.category_.Get();
}
inline void PropertyMetadata::_internal_set_category(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.category_.Set(value, GetArenaForAllocation());
}
inline std::string* PropertyMetadata::_internal_mutable_category() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.category_.Mutable(GetArenaForAllocation());
}
inline std::string* PropertyMetadata::release_category() {
  // @@protoc_insertion_point(field_release:Property.PropertyMetadata.category)
  if (!_internal_has_category()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.category_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.category_.IsDefault()) {
    _impl_.category_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PropertyMetadata::set_allocated_category(std::string* category) {
  if (category != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.category_.SetAllocated(category, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.category_.IsDefault()) {
    _impl_.category_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Property.PropertyMetadata.category)
}

// optional float categoryOrder = 6;
inline bool PropertyMetadata::_internal_has_categoryorder() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PropertyMetadata::has_categoryorder() const {
  return _internal_has_categoryorder();
}
inline void PropertyMetadata::clear_categoryorder() {
  _impl_.categoryorder_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float PropertyMetadata::_internal_categoryorder() const {
  return _impl_.categoryorder_;
}
inline float PropertyMetadata::categoryorder() const {
  // @@protoc_insertion_point(field_get:Property.PropertyMetadata.categoryOrder)
  return _internal_categoryorder();
}
inline void PropertyMetadata::_internal_set_categoryorder(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.categoryorder_ = value;
}
inline void PropertyMetadata::set_categoryorder(float value) {
  _internal_set_categoryorder(value);
  // @@protoc_insertion_point(field_set:Property.PropertyMetadata.categoryOrder)
}

// string description = 3;
inline void PropertyMetadata::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& PropertyMetadata::description() const {
  // @@protoc_insertion_point(field_get:Property.PropertyMetadata.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PropertyMetadata::set_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Property.PropertyMetadata.description)
}
inline std::string* PropertyMetadata::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:Property.PropertyMetadata.description)
  return _s;
}
inline const std::string& PropertyMetadata::_internal_description() const {
  return _impl_.description_.Get();
}
inline void PropertyMetadata::_internal_set_description(const std::string& value) {
  
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* PropertyMetadata::_internal_mutable_description() {
  
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* PropertyMetadata::release_description() {
  // @@protoc_insertion_point(field_release:Property.PropertyMetadata.description)
  return _impl_.description_.Release();
}
inline void PropertyMetadata::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Property.PropertyMetadata.description)
}

// optional bool isReadonly = 5;
inline bool PropertyMetadata::_internal_has_isreadonly() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PropertyMetadata::has_isreadonly() const {
  return _internal_has_isreadonly();
}
inline void PropertyMetadata::clear_isreadonly() {
  _impl_.isreadonly_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool PropertyMetadata::_internal_isreadonly() const {
  return _impl_.isreadonly_;
}
inline bool PropertyMetadata::isreadonly() const {
  // @@protoc_insertion_point(field_get:Property.PropertyMetadata.isReadonly)
  return _internal_isreadonly();
}
inline void PropertyMetadata::_internal_set_isreadonly(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.isreadonly_ = value;
}
inline void PropertyMetadata::set_isreadonly(bool value) {
  _internal_set_isreadonly(value);
  // @@protoc_insertion_point(field_set:Property.PropertyMetadata.isReadonly)
}

// optional float internalOrder = 7;
inline bool PropertyMetadata::_internal_has_internalorder() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PropertyMetadata::has_internalorder() const {
  return _internal_has_internalorder();
}
inline void PropertyMetadata::clear_internalorder() {
  _impl_.internalorder_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float PropertyMetadata::_internal_internalorder() const {
  return _impl_.internalorder_;
}
inline float PropertyMetadata::internalorder() const {
  // @@protoc_insertion_point(field_get:Property.PropertyMetadata.internalOrder)
  return _internal_internalorder();
}
inline void PropertyMetadata::_internal_set_internalorder(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.internalorder_ = value;
}
inline void PropertyMetadata::set_internalorder(float value) {
  _internal_set_internalorder(value);
  // @@protoc_insertion_point(field_set:Property.PropertyMetadata.internalOrder)
}

// optional .Property.PropertyMetadata.PropertySync syncMethod = 8;
inline bool PropertyMetadata::_internal_has_syncmethod() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PropertyMetadata::has_syncmethod() const {
  return _internal_has_syncmethod();
}
inline void PropertyMetadata::clear_syncmethod() {
  _impl_.syncmethod_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::Property::PropertyMetadata_PropertySync PropertyMetadata::_internal_syncmethod() const {
  return static_cast< ::Property::PropertyMetadata_PropertySync >(_impl_.syncmethod_);
}
inline ::Property::PropertyMetadata_PropertySync PropertyMetadata::syncmethod() const {
  // @@protoc_insertion_point(field_get:Property.PropertyMetadata.syncMethod)
  return _internal_syncmethod();
}
inline void PropertyMetadata::_internal_set_syncmethod(::Property::PropertyMetadata_PropertySync value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.syncmethod_ = value;
}
inline void PropertyMetadata::set_syncmethod(::Property::PropertyMetadata_PropertySync value) {
  _internal_set_syncmethod(value);
  // @@protoc_insertion_point(field_set:Property.PropertyMetadata.syncMethod)
}

// optional bool isAdvanced = 9;
inline bool PropertyMetadata::_internal_has_isadvanced() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PropertyMetadata::has_isadvanced() const {
  return _internal_has_isadvanced();
}
inline void PropertyMetadata::clear_isadvanced() {
  _impl_.isadvanced_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool PropertyMetadata::_internal_isadvanced() const {
  return _impl_.isadvanced_;
}
inline bool PropertyMetadata::isadvanced() const {
  // @@protoc_insertion_point(field_get:Property.PropertyMetadata.isAdvanced)
  return _internal_isadvanced();
}
inline void PropertyMetadata::_internal_set_isadvanced(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.isadvanced_ = value;
}
inline void PropertyMetadata::set_isadvanced(bool value) {
  _internal_set_isadvanced(value);
  // @@protoc_insertion_point(field_set:Property.PropertyMetadata.isAdvanced)
}

// optional .Property.BooleanPropertyValue uiVisibility = 10;
inline bool PropertyMetadata::_internal_has_uivisibility() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.uivisibility_ != nullptr);
  return value;
}
inline bool PropertyMetadata::has_uivisibility() const {
  return _internal_has_uivisibility();
}
inline void PropertyMetadata::clear_uivisibility() {
  if (_impl_.uivisibility_ != nullptr) _impl_.uivisibility_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::Property::BooleanPropertyValue& PropertyMetadata::_internal_uivisibility() const {
  const ::Property::BooleanPropertyValue* p = _impl_.uivisibility_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::BooleanPropertyValue&>(
      ::Property::_BooleanPropertyValue_default_instance_);
}
inline const ::Property::BooleanPropertyValue& PropertyMetadata::uivisibility() const {
  // @@protoc_insertion_point(field_get:Property.PropertyMetadata.uiVisibility)
  return _internal_uivisibility();
}
inline void PropertyMetadata::unsafe_arena_set_allocated_uivisibility(
    ::Property::BooleanPropertyValue* uivisibility) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.uivisibility_);
  }
  _impl_.uivisibility_ = uivisibility;
  if (uivisibility) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.PropertyMetadata.uiVisibility)
}
inline ::Property::BooleanPropertyValue* PropertyMetadata::release_uivisibility() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Property::BooleanPropertyValue* temp = _impl_.uivisibility_;
  _impl_.uivisibility_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::BooleanPropertyValue* PropertyMetadata::unsafe_arena_release_uivisibility() {
  // @@protoc_insertion_point(field_release:Property.PropertyMetadata.uiVisibility)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Property::BooleanPropertyValue* temp = _impl_.uivisibility_;
  _impl_.uivisibility_ = nullptr;
  return temp;
}
inline ::Property::BooleanPropertyValue* PropertyMetadata::_internal_mutable_uivisibility() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.uivisibility_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::BooleanPropertyValue>(GetArenaForAllocation());
    _impl_.uivisibility_ = p;
  }
  return _impl_.uivisibility_;
}
inline ::Property::BooleanPropertyValue* PropertyMetadata::mutable_uivisibility() {
  ::Property::BooleanPropertyValue* _msg = _internal_mutable_uivisibility();
  // @@protoc_insertion_point(field_mutable:Property.PropertyMetadata.uiVisibility)
  return _msg;
}
inline void PropertyMetadata::set_allocated_uivisibility(::Property::BooleanPropertyValue* uivisibility) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.uivisibility_;
  }
  if (uivisibility) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(uivisibility);
    if (message_arena != submessage_arena) {
      uivisibility = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uivisibility, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.uivisibility_ = uivisibility;
  // @@protoc_insertion_point(field_set_allocated:Property.PropertyMetadata.uiVisibility)
}

// -------------------------------------------------------------------

// AnyPropertyDeclaration

// .Property.ScalarPropertyDeclaration scalar = 2;
inline bool AnyPropertyDeclaration::_internal_has_scalar() const {
  return ValueType_case() == kScalar;
}
inline bool AnyPropertyDeclaration::has_scalar() const {
  return _internal_has_scalar();
}
inline void AnyPropertyDeclaration::set_has_scalar() {
  _impl_._oneof_case_[0] = kScalar;
}
inline void AnyPropertyDeclaration::clear_scalar() {
  if (_internal_has_scalar()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.ValueType_.scalar_;
    }
    clear_has_ValueType();
  }
}
inline ::Property::ScalarPropertyDeclaration* AnyPropertyDeclaration::release_scalar() {
  // @@protoc_insertion_point(field_release:Property.AnyPropertyDeclaration.scalar)
  if (_internal_has_scalar()) {
    clear_has_ValueType();
    ::Property::ScalarPropertyDeclaration* temp = _impl_.ValueType_.scalar_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.ValueType_.scalar_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::ScalarPropertyDeclaration& AnyPropertyDeclaration::_internal_scalar() const {
  return _internal_has_scalar()
      ? *_impl_.ValueType_.scalar_
      : reinterpret_cast< ::Property::ScalarPropertyDeclaration&>(::Property::_ScalarPropertyDeclaration_default_instance_);
}
inline const ::Property::ScalarPropertyDeclaration& AnyPropertyDeclaration::scalar() const {
  // @@protoc_insertion_point(field_get:Property.AnyPropertyDeclaration.scalar)
  return _internal_scalar();
}
inline ::Property::ScalarPropertyDeclaration* AnyPropertyDeclaration::unsafe_arena_release_scalar() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.AnyPropertyDeclaration.scalar)
  if (_internal_has_scalar()) {
    clear_has_ValueType();
    ::Property::ScalarPropertyDeclaration* temp = _impl_.ValueType_.scalar_;
    _impl_.ValueType_.scalar_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyPropertyDeclaration::unsafe_arena_set_allocated_scalar(::Property::ScalarPropertyDeclaration* scalar) {
  clear_ValueType();
  if (scalar) {
    set_has_scalar();
    _impl_.ValueType_.scalar_ = scalar;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.AnyPropertyDeclaration.scalar)
}
inline ::Property::ScalarPropertyDeclaration* AnyPropertyDeclaration::_internal_mutable_scalar() {
  if (!_internal_has_scalar()) {
    clear_ValueType();
    set_has_scalar();
    _impl_.ValueType_.scalar_ = CreateMaybeMessage< ::Property::ScalarPropertyDeclaration >(GetArenaForAllocation());
  }
  return _impl_.ValueType_.scalar_;
}
inline ::Property::ScalarPropertyDeclaration* AnyPropertyDeclaration::mutable_scalar() {
  ::Property::ScalarPropertyDeclaration* _msg = _internal_mutable_scalar();
  // @@protoc_insertion_point(field_mutable:Property.AnyPropertyDeclaration.scalar)
  return _msg;
}

// .Property.StringPropertyDeclaration string = 3;
inline bool AnyPropertyDeclaration::_internal_has_string() const {
  return ValueType_case() == kString;
}
inline bool AnyPropertyDeclaration::has_string() const {
  return _internal_has_string();
}
inline void AnyPropertyDeclaration::set_has_string() {
  _impl_._oneof_case_[0] = kString;
}
inline void AnyPropertyDeclaration::clear_string() {
  if (_internal_has_string()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.ValueType_.string_;
    }
    clear_has_ValueType();
  }
}
inline ::Property::StringPropertyDeclaration* AnyPropertyDeclaration::release_string() {
  // @@protoc_insertion_point(field_release:Property.AnyPropertyDeclaration.string)
  if (_internal_has_string()) {
    clear_has_ValueType();
    ::Property::StringPropertyDeclaration* temp = _impl_.ValueType_.string_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.ValueType_.string_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::StringPropertyDeclaration& AnyPropertyDeclaration::_internal_string() const {
  return _internal_has_string()
      ? *_impl_.ValueType_.string_
      : reinterpret_cast< ::Property::StringPropertyDeclaration&>(::Property::_StringPropertyDeclaration_default_instance_);
}
inline const ::Property::StringPropertyDeclaration& AnyPropertyDeclaration::string() const {
  // @@protoc_insertion_point(field_get:Property.AnyPropertyDeclaration.string)
  return _internal_string();
}
inline ::Property::StringPropertyDeclaration* AnyPropertyDeclaration::unsafe_arena_release_string() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.AnyPropertyDeclaration.string)
  if (_internal_has_string()) {
    clear_has_ValueType();
    ::Property::StringPropertyDeclaration* temp = _impl_.ValueType_.string_;
    _impl_.ValueType_.string_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyPropertyDeclaration::unsafe_arena_set_allocated_string(::Property::StringPropertyDeclaration* string) {
  clear_ValueType();
  if (string) {
    set_has_string();
    _impl_.ValueType_.string_ = string;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.AnyPropertyDeclaration.string)
}
inline ::Property::StringPropertyDeclaration* AnyPropertyDeclaration::_internal_mutable_string() {
  if (!_internal_has_string()) {
    clear_ValueType();
    set_has_string();
    _impl_.ValueType_.string_ = CreateMaybeMessage< ::Property::StringPropertyDeclaration >(GetArenaForAllocation());
  }
  return _impl_.ValueType_.string_;
}
inline ::Property::StringPropertyDeclaration* AnyPropertyDeclaration::mutable_string() {
  ::Property::StringPropertyDeclaration* _msg = _internal_mutable_string();
  // @@protoc_insertion_point(field_mutable:Property.AnyPropertyDeclaration.string)
  return _msg;
}

// .Property.VectorPropertyDeclaration vector = 4;
inline bool AnyPropertyDeclaration::_internal_has_vector() const {
  return ValueType_case() == kVector;
}
inline bool AnyPropertyDeclaration::has_vector() const {
  return _internal_has_vector();
}
inline void AnyPropertyDeclaration::set_has_vector() {
  _impl_._oneof_case_[0] = kVector;
}
inline void AnyPropertyDeclaration::clear_vector() {
  if (_internal_has_vector()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.ValueType_.vector_;
    }
    clear_has_ValueType();
  }
}
inline ::Property::VectorPropertyDeclaration* AnyPropertyDeclaration::release_vector() {
  // @@protoc_insertion_point(field_release:Property.AnyPropertyDeclaration.vector)
  if (_internal_has_vector()) {
    clear_has_ValueType();
    ::Property::VectorPropertyDeclaration* temp = _impl_.ValueType_.vector_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.ValueType_.vector_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::VectorPropertyDeclaration& AnyPropertyDeclaration::_internal_vector() const {
  return _internal_has_vector()
      ? *_impl_.ValueType_.vector_
      : reinterpret_cast< ::Property::VectorPropertyDeclaration&>(::Property::_VectorPropertyDeclaration_default_instance_);
}
inline const ::Property::VectorPropertyDeclaration& AnyPropertyDeclaration::vector() const {
  // @@protoc_insertion_point(field_get:Property.AnyPropertyDeclaration.vector)
  return _internal_vector();
}
inline ::Property::VectorPropertyDeclaration* AnyPropertyDeclaration::unsafe_arena_release_vector() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.AnyPropertyDeclaration.vector)
  if (_internal_has_vector()) {
    clear_has_ValueType();
    ::Property::VectorPropertyDeclaration* temp = _impl_.ValueType_.vector_;
    _impl_.ValueType_.vector_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyPropertyDeclaration::unsafe_arena_set_allocated_vector(::Property::VectorPropertyDeclaration* vector) {
  clear_ValueType();
  if (vector) {
    set_has_vector();
    _impl_.ValueType_.vector_ = vector;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.AnyPropertyDeclaration.vector)
}
inline ::Property::VectorPropertyDeclaration* AnyPropertyDeclaration::_internal_mutable_vector() {
  if (!_internal_has_vector()) {
    clear_ValueType();
    set_has_vector();
    _impl_.ValueType_.vector_ = CreateMaybeMessage< ::Property::VectorPropertyDeclaration >(GetArenaForAllocation());
  }
  return _impl_.ValueType_.vector_;
}
inline ::Property::VectorPropertyDeclaration* AnyPropertyDeclaration::mutable_vector() {
  ::Property::VectorPropertyDeclaration* _msg = _internal_mutable_vector();
  // @@protoc_insertion_point(field_mutable:Property.AnyPropertyDeclaration.vector)
  return _msg;
}

// .Property.ColorPropertyDeclaration color = 5;
inline bool AnyPropertyDeclaration::_internal_has_color() const {
  return ValueType_case() == kColor;
}
inline bool AnyPropertyDeclaration::has_color() const {
  return _internal_has_color();
}
inline void AnyPropertyDeclaration::set_has_color() {
  _impl_._oneof_case_[0] = kColor;
}
inline void AnyPropertyDeclaration::clear_color() {
  if (_internal_has_color()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.ValueType_.color_;
    }
    clear_has_ValueType();
  }
}
inline ::Property::ColorPropertyDeclaration* AnyPropertyDeclaration::release_color() {
  // @@protoc_insertion_point(field_release:Property.AnyPropertyDeclaration.color)
  if (_internal_has_color()) {
    clear_has_ValueType();
    ::Property::ColorPropertyDeclaration* temp = _impl_.ValueType_.color_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.ValueType_.color_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::ColorPropertyDeclaration& AnyPropertyDeclaration::_internal_color() const {
  return _internal_has_color()
      ? *_impl_.ValueType_.color_
      : reinterpret_cast< ::Property::ColorPropertyDeclaration&>(::Property::_ColorPropertyDeclaration_default_instance_);
}
inline const ::Property::ColorPropertyDeclaration& AnyPropertyDeclaration::color() const {
  // @@protoc_insertion_point(field_get:Property.AnyPropertyDeclaration.color)
  return _internal_color();
}
inline ::Property::ColorPropertyDeclaration* AnyPropertyDeclaration::unsafe_arena_release_color() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.AnyPropertyDeclaration.color)
  if (_internal_has_color()) {
    clear_has_ValueType();
    ::Property::ColorPropertyDeclaration* temp = _impl_.ValueType_.color_;
    _impl_.ValueType_.color_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyPropertyDeclaration::unsafe_arena_set_allocated_color(::Property::ColorPropertyDeclaration* color) {
  clear_ValueType();
  if (color) {
    set_has_color();
    _impl_.ValueType_.color_ = color;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.AnyPropertyDeclaration.color)
}
inline ::Property::ColorPropertyDeclaration* AnyPropertyDeclaration::_internal_mutable_color() {
  if (!_internal_has_color()) {
    clear_ValueType();
    set_has_color();
    _impl_.ValueType_.color_ = CreateMaybeMessage< ::Property::ColorPropertyDeclaration >(GetArenaForAllocation());
  }
  return _impl_.ValueType_.color_;
}
inline ::Property::ColorPropertyDeclaration* AnyPropertyDeclaration::mutable_color() {
  ::Property::ColorPropertyDeclaration* _msg = _internal_mutable_color();
  // @@protoc_insertion_point(field_mutable:Property.AnyPropertyDeclaration.color)
  return _msg;
}

// .Property.TransformPropertyDeclaration transform = 6;
inline bool AnyPropertyDeclaration::_internal_has_transform() const {
  return ValueType_case() == kTransform;
}
inline bool AnyPropertyDeclaration::has_transform() const {
  return _internal_has_transform();
}
inline void AnyPropertyDeclaration::set_has_transform() {
  _impl_._oneof_case_[0] = kTransform;
}
inline void AnyPropertyDeclaration::clear_transform() {
  if (_internal_has_transform()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.ValueType_.transform_;
    }
    clear_has_ValueType();
  }
}
inline ::Property::TransformPropertyDeclaration* AnyPropertyDeclaration::release_transform() {
  // @@protoc_insertion_point(field_release:Property.AnyPropertyDeclaration.transform)
  if (_internal_has_transform()) {
    clear_has_ValueType();
    ::Property::TransformPropertyDeclaration* temp = _impl_.ValueType_.transform_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.ValueType_.transform_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::TransformPropertyDeclaration& AnyPropertyDeclaration::_internal_transform() const {
  return _internal_has_transform()
      ? *_impl_.ValueType_.transform_
      : reinterpret_cast< ::Property::TransformPropertyDeclaration&>(::Property::_TransformPropertyDeclaration_default_instance_);
}
inline const ::Property::TransformPropertyDeclaration& AnyPropertyDeclaration::transform() const {
  // @@protoc_insertion_point(field_get:Property.AnyPropertyDeclaration.transform)
  return _internal_transform();
}
inline ::Property::TransformPropertyDeclaration* AnyPropertyDeclaration::unsafe_arena_release_transform() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.AnyPropertyDeclaration.transform)
  if (_internal_has_transform()) {
    clear_has_ValueType();
    ::Property::TransformPropertyDeclaration* temp = _impl_.ValueType_.transform_;
    _impl_.ValueType_.transform_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyPropertyDeclaration::unsafe_arena_set_allocated_transform(::Property::TransformPropertyDeclaration* transform) {
  clear_ValueType();
  if (transform) {
    set_has_transform();
    _impl_.ValueType_.transform_ = transform;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.AnyPropertyDeclaration.transform)
}
inline ::Property::TransformPropertyDeclaration* AnyPropertyDeclaration::_internal_mutable_transform() {
  if (!_internal_has_transform()) {
    clear_ValueType();
    set_has_transform();
    _impl_.ValueType_.transform_ = CreateMaybeMessage< ::Property::TransformPropertyDeclaration >(GetArenaForAllocation());
  }
  return _impl_.ValueType_.transform_;
}
inline ::Property::TransformPropertyDeclaration* AnyPropertyDeclaration::mutable_transform() {
  ::Property::TransformPropertyDeclaration* _msg = _internal_mutable_transform();
  // @@protoc_insertion_point(field_mutable:Property.AnyPropertyDeclaration.transform)
  return _msg;
}

// .Property.BooleanPropertyDeclaration boolean = 7;
inline bool AnyPropertyDeclaration::_internal_has_boolean() const {
  return ValueType_case() == kBoolean;
}
inline bool AnyPropertyDeclaration::has_boolean() const {
  return _internal_has_boolean();
}
inline void AnyPropertyDeclaration::set_has_boolean() {
  _impl_._oneof_case_[0] = kBoolean;
}
inline void AnyPropertyDeclaration::clear_boolean() {
  if (_internal_has_boolean()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.ValueType_.boolean_;
    }
    clear_has_ValueType();
  }
}
inline ::Property::BooleanPropertyDeclaration* AnyPropertyDeclaration::release_boolean() {
  // @@protoc_insertion_point(field_release:Property.AnyPropertyDeclaration.boolean)
  if (_internal_has_boolean()) {
    clear_has_ValueType();
    ::Property::BooleanPropertyDeclaration* temp = _impl_.ValueType_.boolean_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.ValueType_.boolean_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::BooleanPropertyDeclaration& AnyPropertyDeclaration::_internal_boolean() const {
  return _internal_has_boolean()
      ? *_impl_.ValueType_.boolean_
      : reinterpret_cast< ::Property::BooleanPropertyDeclaration&>(::Property::_BooleanPropertyDeclaration_default_instance_);
}
inline const ::Property::BooleanPropertyDeclaration& AnyPropertyDeclaration::boolean() const {
  // @@protoc_insertion_point(field_get:Property.AnyPropertyDeclaration.boolean)
  return _internal_boolean();
}
inline ::Property::BooleanPropertyDeclaration* AnyPropertyDeclaration::unsafe_arena_release_boolean() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.AnyPropertyDeclaration.boolean)
  if (_internal_has_boolean()) {
    clear_has_ValueType();
    ::Property::BooleanPropertyDeclaration* temp = _impl_.ValueType_.boolean_;
    _impl_.ValueType_.boolean_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyPropertyDeclaration::unsafe_arena_set_allocated_boolean(::Property::BooleanPropertyDeclaration* boolean) {
  clear_ValueType();
  if (boolean) {
    set_has_boolean();
    _impl_.ValueType_.boolean_ = boolean;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.AnyPropertyDeclaration.boolean)
}
inline ::Property::BooleanPropertyDeclaration* AnyPropertyDeclaration::_internal_mutable_boolean() {
  if (!_internal_has_boolean()) {
    clear_ValueType();
    set_has_boolean();
    _impl_.ValueType_.boolean_ = CreateMaybeMessage< ::Property::BooleanPropertyDeclaration >(GetArenaForAllocation());
  }
  return _impl_.ValueType_.boolean_;
}
inline ::Property::BooleanPropertyDeclaration* AnyPropertyDeclaration::mutable_boolean() {
  ::Property::BooleanPropertyDeclaration* _msg = _internal_mutable_boolean();
  // @@protoc_insertion_point(field_mutable:Property.AnyPropertyDeclaration.boolean)
  return _msg;
}

// .Property.JsonPropertyDeclaration json = 9;
inline bool AnyPropertyDeclaration::_internal_has_json() const {
  return ValueType_case() == kJson;
}
inline bool AnyPropertyDeclaration::has_json() const {
  return _internal_has_json();
}
inline void AnyPropertyDeclaration::set_has_json() {
  _impl_._oneof_case_[0] = kJson;
}
inline void AnyPropertyDeclaration::clear_json() {
  if (_internal_has_json()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.ValueType_.json_;
    }
    clear_has_ValueType();
  }
}
inline ::Property::JsonPropertyDeclaration* AnyPropertyDeclaration::release_json() {
  // @@protoc_insertion_point(field_release:Property.AnyPropertyDeclaration.json)
  if (_internal_has_json()) {
    clear_has_ValueType();
    ::Property::JsonPropertyDeclaration* temp = _impl_.ValueType_.json_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.ValueType_.json_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::JsonPropertyDeclaration& AnyPropertyDeclaration::_internal_json() const {
  return _internal_has_json()
      ? *_impl_.ValueType_.json_
      : reinterpret_cast< ::Property::JsonPropertyDeclaration&>(::Property::_JsonPropertyDeclaration_default_instance_);
}
inline const ::Property::JsonPropertyDeclaration& AnyPropertyDeclaration::json() const {
  // @@protoc_insertion_point(field_get:Property.AnyPropertyDeclaration.json)
  return _internal_json();
}
inline ::Property::JsonPropertyDeclaration* AnyPropertyDeclaration::unsafe_arena_release_json() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.AnyPropertyDeclaration.json)
  if (_internal_has_json()) {
    clear_has_ValueType();
    ::Property::JsonPropertyDeclaration* temp = _impl_.ValueType_.json_;
    _impl_.ValueType_.json_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyPropertyDeclaration::unsafe_arena_set_allocated_json(::Property::JsonPropertyDeclaration* json) {
  clear_ValueType();
  if (json) {
    set_has_json();
    _impl_.ValueType_.json_ = json;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.AnyPropertyDeclaration.json)
}
inline ::Property::JsonPropertyDeclaration* AnyPropertyDeclaration::_internal_mutable_json() {
  if (!_internal_has_json()) {
    clear_ValueType();
    set_has_json();
    _impl_.ValueType_.json_ = CreateMaybeMessage< ::Property::JsonPropertyDeclaration >(GetArenaForAllocation());
  }
  return _impl_.ValueType_.json_;
}
inline ::Property::JsonPropertyDeclaration* AnyPropertyDeclaration::mutable_json() {
  ::Property::JsonPropertyDeclaration* _msg = _internal_mutable_json();
  // @@protoc_insertion_point(field_mutable:Property.AnyPropertyDeclaration.json)
  return _msg;
}

// .Property.LinkPropertyDeclaration link = 10;
inline bool AnyPropertyDeclaration::_internal_has_link() const {
  return ValueType_case() == kLink;
}
inline bool AnyPropertyDeclaration::has_link() const {
  return _internal_has_link();
}
inline void AnyPropertyDeclaration::set_has_link() {
  _impl_._oneof_case_[0] = kLink;
}
inline void AnyPropertyDeclaration::clear_link() {
  if (_internal_has_link()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.ValueType_.link_;
    }
    clear_has_ValueType();
  }
}
inline ::Property::LinkPropertyDeclaration* AnyPropertyDeclaration::release_link() {
  // @@protoc_insertion_point(field_release:Property.AnyPropertyDeclaration.link)
  if (_internal_has_link()) {
    clear_has_ValueType();
    ::Property::LinkPropertyDeclaration* temp = _impl_.ValueType_.link_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.ValueType_.link_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::LinkPropertyDeclaration& AnyPropertyDeclaration::_internal_link() const {
  return _internal_has_link()
      ? *_impl_.ValueType_.link_
      : reinterpret_cast< ::Property::LinkPropertyDeclaration&>(::Property::_LinkPropertyDeclaration_default_instance_);
}
inline const ::Property::LinkPropertyDeclaration& AnyPropertyDeclaration::link() const {
  // @@protoc_insertion_point(field_get:Property.AnyPropertyDeclaration.link)
  return _internal_link();
}
inline ::Property::LinkPropertyDeclaration* AnyPropertyDeclaration::unsafe_arena_release_link() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.AnyPropertyDeclaration.link)
  if (_internal_has_link()) {
    clear_has_ValueType();
    ::Property::LinkPropertyDeclaration* temp = _impl_.ValueType_.link_;
    _impl_.ValueType_.link_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyPropertyDeclaration::unsafe_arena_set_allocated_link(::Property::LinkPropertyDeclaration* link) {
  clear_ValueType();
  if (link) {
    set_has_link();
    _impl_.ValueType_.link_ = link;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.AnyPropertyDeclaration.link)
}
inline ::Property::LinkPropertyDeclaration* AnyPropertyDeclaration::_internal_mutable_link() {
  if (!_internal_has_link()) {
    clear_ValueType();
    set_has_link();
    _impl_.ValueType_.link_ = CreateMaybeMessage< ::Property::LinkPropertyDeclaration >(GetArenaForAllocation());
  }
  return _impl_.ValueType_.link_;
}
inline ::Property::LinkPropertyDeclaration* AnyPropertyDeclaration::mutable_link() {
  ::Property::LinkPropertyDeclaration* _msg = _internal_mutable_link();
  // @@protoc_insertion_point(field_mutable:Property.AnyPropertyDeclaration.link)
  return _msg;
}

inline bool AnyPropertyDeclaration::has_ValueType() const {
  return ValueType_case() != VALUETYPE_NOT_SET;
}
inline void AnyPropertyDeclaration::clear_has_ValueType() {
  _impl_._oneof_case_[0] = VALUETYPE_NOT_SET;
}
inline AnyPropertyDeclaration::ValueTypeCase AnyPropertyDeclaration::ValueType_case() const {
  return AnyPropertyDeclaration::ValueTypeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Interpolation

// optional float easeOut = 1;
inline bool Interpolation::_internal_has_easeout() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Interpolation::has_easeout() const {
  return _internal_has_easeout();
}
inline void Interpolation::clear_easeout() {
  _impl_.easeout_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float Interpolation::_internal_easeout() const {
  return _impl_.easeout_;
}
inline float Interpolation::easeout() const {
  // @@protoc_insertion_point(field_get:Property.Interpolation.easeOut)
  return _internal_easeout();
}
inline void Interpolation::_internal_set_easeout(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.easeout_ = value;
}
inline void Interpolation::set_easeout(float value) {
  _internal_set_easeout(value);
  // @@protoc_insertion_point(field_set:Property.Interpolation.easeOut)
}

// optional float easeIn = 2;
inline bool Interpolation::_internal_has_easein() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Interpolation::has_easein() const {
  return _internal_has_easein();
}
inline void Interpolation::clear_easein() {
  _impl_.easein_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float Interpolation::_internal_easein() const {
  return _impl_.easein_;
}
inline float Interpolation::easein() const {
  // @@protoc_insertion_point(field_get:Property.Interpolation.easeIn)
  return _internal_easein();
}
inline void Interpolation::_internal_set_easein(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.easein_ = value;
}
inline void Interpolation::set_easein(float value) {
  _internal_set_easein(value);
  // @@protoc_insertion_point(field_set:Property.Interpolation.easeIn)
}

// optional float duration = 3;
inline bool Interpolation::_internal_has_duration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Interpolation::has_duration() const {
  return _internal_has_duration();
}
inline void Interpolation::clear_duration() {
  _impl_.duration_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float Interpolation::_internal_duration() const {
  return _impl_.duration_;
}
inline float Interpolation::duration() const {
  // @@protoc_insertion_point(field_get:Property.Interpolation.duration)
  return _internal_duration();
}
inline void Interpolation::_internal_set_duration(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.duration_ = value;
}
inline void Interpolation::set_duration(float value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:Property.Interpolation.duration)
}

// optional float delay = 4;
inline bool Interpolation::_internal_has_delay() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Interpolation::has_delay() const {
  return _internal_has_delay();
}
inline void Interpolation::clear_delay() {
  _impl_.delay_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float Interpolation::_internal_delay() const {
  return _impl_.delay_;
}
inline float Interpolation::delay() const {
  // @@protoc_insertion_point(field_get:Property.Interpolation.delay)
  return _internal_delay();
}
inline void Interpolation::_internal_set_delay(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.delay_ = value;
}
inline void Interpolation::set_delay(float value) {
  _internal_set_delay(value);
  // @@protoc_insertion_point(field_set:Property.Interpolation.delay)
}

// -------------------------------------------------------------------

// ScalarPropertyAssignment

// optional .Property.ScalarPropertyAssignment.ScalarPropertyMethod method = 1;
inline bool ScalarPropertyAssignment::_internal_has_method() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ScalarPropertyAssignment::has_method() const {
  return _internal_has_method();
}
inline void ScalarPropertyAssignment::clear_method() {
  _impl_.method_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::Property::ScalarPropertyAssignment_ScalarPropertyMethod ScalarPropertyAssignment::_internal_method() const {
  return static_cast< ::Property::ScalarPropertyAssignment_ScalarPropertyMethod >(_impl_.method_);
}
inline ::Property::ScalarPropertyAssignment_ScalarPropertyMethod ScalarPropertyAssignment::method() const {
  // @@protoc_insertion_point(field_get:Property.ScalarPropertyAssignment.method)
  return _internal_method();
}
inline void ScalarPropertyAssignment::_internal_set_method(::Property::ScalarPropertyAssignment_ScalarPropertyMethod value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.method_ = value;
}
inline void ScalarPropertyAssignment::set_method(::Property::ScalarPropertyAssignment_ScalarPropertyMethod value) {
  _internal_set_method(value);
  // @@protoc_insertion_point(field_set:Property.ScalarPropertyAssignment.method)
}

// optional int32 overridingPriority = 2;
inline bool ScalarPropertyAssignment::_internal_has_overridingpriority() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ScalarPropertyAssignment::has_overridingpriority() const {
  return _internal_has_overridingpriority();
}
inline void ScalarPropertyAssignment::clear_overridingpriority() {
  _impl_.overridingpriority_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t ScalarPropertyAssignment::_internal_overridingpriority() const {
  return _impl_.overridingpriority_;
}
inline int32_t ScalarPropertyAssignment::overridingpriority() const {
  // @@protoc_insertion_point(field_get:Property.ScalarPropertyAssignment.overridingPriority)
  return _internal_overridingpriority();
}
inline void ScalarPropertyAssignment::_internal_set_overridingpriority(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.overridingpriority_ = value;
}
inline void ScalarPropertyAssignment::set_overridingpriority(int32_t value) {
  _internal_set_overridingpriority(value);
  // @@protoc_insertion_point(field_set:Property.ScalarPropertyAssignment.overridingPriority)
}

// string assignmentId = 4;
inline void ScalarPropertyAssignment::clear_assignmentid() {
  _impl_.assignmentid_.ClearToEmpty();
}
inline const std::string& ScalarPropertyAssignment::assignmentid() const {
  // @@protoc_insertion_point(field_get:Property.ScalarPropertyAssignment.assignmentId)
  return _internal_assignmentid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ScalarPropertyAssignment::set_assignmentid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.assignmentid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Property.ScalarPropertyAssignment.assignmentId)
}
inline std::string* ScalarPropertyAssignment::mutable_assignmentid() {
  std::string* _s = _internal_mutable_assignmentid();
  // @@protoc_insertion_point(field_mutable:Property.ScalarPropertyAssignment.assignmentId)
  return _s;
}
inline const std::string& ScalarPropertyAssignment::_internal_assignmentid() const {
  return _impl_.assignmentid_.Get();
}
inline void ScalarPropertyAssignment::_internal_set_assignmentid(const std::string& value) {
  
  _impl_.assignmentid_.Set(value, GetArenaForAllocation());
}
inline std::string* ScalarPropertyAssignment::_internal_mutable_assignmentid() {
  
  return _impl_.assignmentid_.Mutable(GetArenaForAllocation());
}
inline std::string* ScalarPropertyAssignment::release_assignmentid() {
  // @@protoc_insertion_point(field_release:Property.ScalarPropertyAssignment.assignmentId)
  return _impl_.assignmentid_.Release();
}
inline void ScalarPropertyAssignment::set_allocated_assignmentid(std::string* assignmentid) {
  if (assignmentid != nullptr) {
    
  } else {
    
  }
  _impl_.assignmentid_.SetAllocated(assignmentid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.assignmentid_.IsDefault()) {
    _impl_.assignmentid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Property.ScalarPropertyAssignment.assignmentId)
}

// .Property.ScalarPropertyValue value = 3;
inline bool ScalarPropertyAssignment::_internal_has_value() const {
  return this != internal_default_instance() && _impl_.value_ != nullptr;
}
inline bool ScalarPropertyAssignment::has_value() const {
  return _internal_has_value();
}
inline void ScalarPropertyAssignment::clear_value() {
  if (GetArenaForAllocation() == nullptr && _impl_.value_ != nullptr) {
    delete _impl_.value_;
  }
  _impl_.value_ = nullptr;
}
inline const ::Property::ScalarPropertyValue& ScalarPropertyAssignment::_internal_value() const {
  const ::Property::ScalarPropertyValue* p = _impl_.value_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::ScalarPropertyValue&>(
      ::Property::_ScalarPropertyValue_default_instance_);
}
inline const ::Property::ScalarPropertyValue& ScalarPropertyAssignment::value() const {
  // @@protoc_insertion_point(field_get:Property.ScalarPropertyAssignment.value)
  return _internal_value();
}
inline void ScalarPropertyAssignment::unsafe_arena_set_allocated_value(
    ::Property::ScalarPropertyValue* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_);
  }
  _impl_.value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.ScalarPropertyAssignment.value)
}
inline ::Property::ScalarPropertyValue* ScalarPropertyAssignment::release_value() {
  
  ::Property::ScalarPropertyValue* temp = _impl_.value_;
  _impl_.value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::ScalarPropertyValue* ScalarPropertyAssignment::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:Property.ScalarPropertyAssignment.value)
  
  ::Property::ScalarPropertyValue* temp = _impl_.value_;
  _impl_.value_ = nullptr;
  return temp;
}
inline ::Property::ScalarPropertyValue* ScalarPropertyAssignment::_internal_mutable_value() {
  
  if (_impl_.value_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::ScalarPropertyValue>(GetArenaForAllocation());
    _impl_.value_ = p;
  }
  return _impl_.value_;
}
inline ::Property::ScalarPropertyValue* ScalarPropertyAssignment::mutable_value() {
  ::Property::ScalarPropertyValue* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:Property.ScalarPropertyAssignment.value)
  return _msg;
}
inline void ScalarPropertyAssignment::set_allocated_value(::Property::ScalarPropertyValue* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.value_ = value;
  // @@protoc_insertion_point(field_set_allocated:Property.ScalarPropertyAssignment.value)
}

// -------------------------------------------------------------------

// ScalarPropertyValue

// float constant = 1;
inline bool ScalarPropertyValue::_internal_has_constant() const {
  return ValueType_case() == kConstant;
}
inline bool ScalarPropertyValue::has_constant() const {
  return _internal_has_constant();
}
inline void ScalarPropertyValue::set_has_constant() {
  _impl_._oneof_case_[0] = kConstant;
}
inline void ScalarPropertyValue::clear_constant() {
  if (_internal_has_constant()) {
    _impl_.ValueType_.constant_ = 0;
    clear_has_ValueType();
  }
}
inline float ScalarPropertyValue::_internal_constant() const {
  if (_internal_has_constant()) {
    return _impl_.ValueType_.constant_;
  }
  return 0;
}
inline void ScalarPropertyValue::_internal_set_constant(float value) {
  if (!_internal_has_constant()) {
    clear_ValueType();
    set_has_constant();
  }
  _impl_.ValueType_.constant_ = value;
}
inline float ScalarPropertyValue::constant() const {
  // @@protoc_insertion_point(field_get:Property.ScalarPropertyValue.constant)
  return _internal_constant();
}
inline void ScalarPropertyValue::set_constant(float value) {
  _internal_set_constant(value);
  // @@protoc_insertion_point(field_set:Property.ScalarPropertyValue.constant)
}

// .Property.PropertyIdentifier ref = 2;
inline bool ScalarPropertyValue::_internal_has_ref() const {
  return ValueType_case() == kRef;
}
inline bool ScalarPropertyValue::has_ref() const {
  return _internal_has_ref();
}
inline void ScalarPropertyValue::set_has_ref() {
  _impl_._oneof_case_[0] = kRef;
}
inline void ScalarPropertyValue::clear_ref() {
  if (_internal_has_ref()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.ValueType_.ref_;
    }
    clear_has_ValueType();
  }
}
inline ::Property::PropertyIdentifier* ScalarPropertyValue::release_ref() {
  // @@protoc_insertion_point(field_release:Property.ScalarPropertyValue.ref)
  if (_internal_has_ref()) {
    clear_has_ValueType();
    ::Property::PropertyIdentifier* temp = _impl_.ValueType_.ref_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.ValueType_.ref_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::PropertyIdentifier& ScalarPropertyValue::_internal_ref() const {
  return _internal_has_ref()
      ? *_impl_.ValueType_.ref_
      : reinterpret_cast< ::Property::PropertyIdentifier&>(::Property::_PropertyIdentifier_default_instance_);
}
inline const ::Property::PropertyIdentifier& ScalarPropertyValue::ref() const {
  // @@protoc_insertion_point(field_get:Property.ScalarPropertyValue.ref)
  return _internal_ref();
}
inline ::Property::PropertyIdentifier* ScalarPropertyValue::unsafe_arena_release_ref() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.ScalarPropertyValue.ref)
  if (_internal_has_ref()) {
    clear_has_ValueType();
    ::Property::PropertyIdentifier* temp = _impl_.ValueType_.ref_;
    _impl_.ValueType_.ref_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ScalarPropertyValue::unsafe_arena_set_allocated_ref(::Property::PropertyIdentifier* ref) {
  clear_ValueType();
  if (ref) {
    set_has_ref();
    _impl_.ValueType_.ref_ = ref;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.ScalarPropertyValue.ref)
}
inline ::Property::PropertyIdentifier* ScalarPropertyValue::_internal_mutable_ref() {
  if (!_internal_has_ref()) {
    clear_ValueType();
    set_has_ref();
    _impl_.ValueType_.ref_ = CreateMaybeMessage< ::Property::PropertyIdentifier >(GetArenaForAllocation());
  }
  return _impl_.ValueType_.ref_;
}
inline ::Property::PropertyIdentifier* ScalarPropertyValue::mutable_ref() {
  ::Property::PropertyIdentifier* _msg = _internal_mutable_ref();
  // @@protoc_insertion_point(field_mutable:Property.ScalarPropertyValue.ref)
  return _msg;
}

// string expr = 3;
inline bool ScalarPropertyValue::_internal_has_expr() const {
  return ValueType_case() == kExpr;
}
inline bool ScalarPropertyValue::has_expr() const {
  return _internal_has_expr();
}
inline void ScalarPropertyValue::set_has_expr() {
  _impl_._oneof_case_[0] = kExpr;
}
inline void ScalarPropertyValue::clear_expr() {
  if (_internal_has_expr()) {
    _impl_.ValueType_.expr_.Destroy();
    clear_has_ValueType();
  }
}
inline const std::string& ScalarPropertyValue::expr() const {
  // @@protoc_insertion_point(field_get:Property.ScalarPropertyValue.expr)
  return _internal_expr();
}
template <typename ArgT0, typename... ArgT>
inline void ScalarPropertyValue::set_expr(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_expr()) {
    clear_ValueType();
    set_has_expr();
    _impl_.ValueType_.expr_.InitDefault();
  }
  _impl_.ValueType_.expr_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Property.ScalarPropertyValue.expr)
}
inline std::string* ScalarPropertyValue::mutable_expr() {
  std::string* _s = _internal_mutable_expr();
  // @@protoc_insertion_point(field_mutable:Property.ScalarPropertyValue.expr)
  return _s;
}
inline const std::string& ScalarPropertyValue::_internal_expr() const {
  if (_internal_has_expr()) {
    return _impl_.ValueType_.expr_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ScalarPropertyValue::_internal_set_expr(const std::string& value) {
  if (!_internal_has_expr()) {
    clear_ValueType();
    set_has_expr();
    _impl_.ValueType_.expr_.InitDefault();
  }
  _impl_.ValueType_.expr_.Set(value, GetArenaForAllocation());
}
inline std::string* ScalarPropertyValue::_internal_mutable_expr() {
  if (!_internal_has_expr()) {
    clear_ValueType();
    set_has_expr();
    _impl_.ValueType_.expr_.InitDefault();
  }
  return _impl_.ValueType_.expr_.Mutable(      GetArenaForAllocation());
}
inline std::string* ScalarPropertyValue::release_expr() {
  // @@protoc_insertion_point(field_release:Property.ScalarPropertyValue.expr)
  if (_internal_has_expr()) {
    clear_has_ValueType();
    return _impl_.ValueType_.expr_.Release();
  } else {
    return nullptr;
  }
}
inline void ScalarPropertyValue::set_allocated_expr(std::string* expr) {
  if (has_ValueType()) {
    clear_ValueType();
  }
  if (expr != nullptr) {
    set_has_expr();
    _impl_.ValueType_.expr_.InitAllocated(expr, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:Property.ScalarPropertyValue.expr)
}

// .Property.ScalarPropertyKeyframed keyframes = 4;
inline bool ScalarPropertyValue::_internal_has_keyframes() const {
  return ValueType_case() == kKeyframes;
}
inline bool ScalarPropertyValue::has_keyframes() const {
  return _internal_has_keyframes();
}
inline void ScalarPropertyValue::set_has_keyframes() {
  _impl_._oneof_case_[0] = kKeyframes;
}
inline void ScalarPropertyValue::clear_keyframes() {
  if (_internal_has_keyframes()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.ValueType_.keyframes_;
    }
    clear_has_ValueType();
  }
}
inline ::Property::ScalarPropertyKeyframed* ScalarPropertyValue::release_keyframes() {
  // @@protoc_insertion_point(field_release:Property.ScalarPropertyValue.keyframes)
  if (_internal_has_keyframes()) {
    clear_has_ValueType();
    ::Property::ScalarPropertyKeyframed* temp = _impl_.ValueType_.keyframes_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.ValueType_.keyframes_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::ScalarPropertyKeyframed& ScalarPropertyValue::_internal_keyframes() const {
  return _internal_has_keyframes()
      ? *_impl_.ValueType_.keyframes_
      : reinterpret_cast< ::Property::ScalarPropertyKeyframed&>(::Property::_ScalarPropertyKeyframed_default_instance_);
}
inline const ::Property::ScalarPropertyKeyframed& ScalarPropertyValue::keyframes() const {
  // @@protoc_insertion_point(field_get:Property.ScalarPropertyValue.keyframes)
  return _internal_keyframes();
}
inline ::Property::ScalarPropertyKeyframed* ScalarPropertyValue::unsafe_arena_release_keyframes() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.ScalarPropertyValue.keyframes)
  if (_internal_has_keyframes()) {
    clear_has_ValueType();
    ::Property::ScalarPropertyKeyframed* temp = _impl_.ValueType_.keyframes_;
    _impl_.ValueType_.keyframes_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ScalarPropertyValue::unsafe_arena_set_allocated_keyframes(::Property::ScalarPropertyKeyframed* keyframes) {
  clear_ValueType();
  if (keyframes) {
    set_has_keyframes();
    _impl_.ValueType_.keyframes_ = keyframes;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.ScalarPropertyValue.keyframes)
}
inline ::Property::ScalarPropertyKeyframed* ScalarPropertyValue::_internal_mutable_keyframes() {
  if (!_internal_has_keyframes()) {
    clear_ValueType();
    set_has_keyframes();
    _impl_.ValueType_.keyframes_ = CreateMaybeMessage< ::Property::ScalarPropertyKeyframed >(GetArenaForAllocation());
  }
  return _impl_.ValueType_.keyframes_;
}
inline ::Property::ScalarPropertyKeyframed* ScalarPropertyValue::mutable_keyframes() {
  ::Property::ScalarPropertyKeyframed* _msg = _internal_mutable_keyframes();
  // @@protoc_insertion_point(field_mutable:Property.ScalarPropertyValue.keyframes)
  return _msg;
}

// bool useDefault = 5;
inline bool ScalarPropertyValue::_internal_has_usedefault() const {
  return ValueType_case() == kUseDefault;
}
inline bool ScalarPropertyValue::has_usedefault() const {
  return _internal_has_usedefault();
}
inline void ScalarPropertyValue::set_has_usedefault() {
  _impl_._oneof_case_[0] = kUseDefault;
}
inline void ScalarPropertyValue::clear_usedefault() {
  if (_internal_has_usedefault()) {
    _impl_.ValueType_.usedefault_ = false;
    clear_has_ValueType();
  }
}
inline bool ScalarPropertyValue::_internal_usedefault() const {
  if (_internal_has_usedefault()) {
    return _impl_.ValueType_.usedefault_;
  }
  return false;
}
inline void ScalarPropertyValue::_internal_set_usedefault(bool value) {
  if (!_internal_has_usedefault()) {
    clear_ValueType();
    set_has_usedefault();
  }
  _impl_.ValueType_.usedefault_ = value;
}
inline bool ScalarPropertyValue::usedefault() const {
  // @@protoc_insertion_point(field_get:Property.ScalarPropertyValue.useDefault)
  return _internal_usedefault();
}
inline void ScalarPropertyValue::set_usedefault(bool value) {
  _internal_set_usedefault(value);
  // @@protoc_insertion_point(field_set:Property.ScalarPropertyValue.useDefault)
}

// .Property.ScalarPropertyPulse pulse = 6;
inline bool ScalarPropertyValue::_internal_has_pulse() const {
  return ValueType_case() == kPulse;
}
inline bool ScalarPropertyValue::has_pulse() const {
  return _internal_has_pulse();
}
inline void ScalarPropertyValue::set_has_pulse() {
  _impl_._oneof_case_[0] = kPulse;
}
inline void ScalarPropertyValue::clear_pulse() {
  if (_internal_has_pulse()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.ValueType_.pulse_;
    }
    clear_has_ValueType();
  }
}
inline ::Property::ScalarPropertyPulse* ScalarPropertyValue::release_pulse() {
  // @@protoc_insertion_point(field_release:Property.ScalarPropertyValue.pulse)
  if (_internal_has_pulse()) {
    clear_has_ValueType();
    ::Property::ScalarPropertyPulse* temp = _impl_.ValueType_.pulse_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.ValueType_.pulse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::ScalarPropertyPulse& ScalarPropertyValue::_internal_pulse() const {
  return _internal_has_pulse()
      ? *_impl_.ValueType_.pulse_
      : reinterpret_cast< ::Property::ScalarPropertyPulse&>(::Property::_ScalarPropertyPulse_default_instance_);
}
inline const ::Property::ScalarPropertyPulse& ScalarPropertyValue::pulse() const {
  // @@protoc_insertion_point(field_get:Property.ScalarPropertyValue.pulse)
  return _internal_pulse();
}
inline ::Property::ScalarPropertyPulse* ScalarPropertyValue::unsafe_arena_release_pulse() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.ScalarPropertyValue.pulse)
  if (_internal_has_pulse()) {
    clear_has_ValueType();
    ::Property::ScalarPropertyPulse* temp = _impl_.ValueType_.pulse_;
    _impl_.ValueType_.pulse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ScalarPropertyValue::unsafe_arena_set_allocated_pulse(::Property::ScalarPropertyPulse* pulse) {
  clear_ValueType();
  if (pulse) {
    set_has_pulse();
    _impl_.ValueType_.pulse_ = pulse;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.ScalarPropertyValue.pulse)
}
inline ::Property::ScalarPropertyPulse* ScalarPropertyValue::_internal_mutable_pulse() {
  if (!_internal_has_pulse()) {
    clear_ValueType();
    set_has_pulse();
    _impl_.ValueType_.pulse_ = CreateMaybeMessage< ::Property::ScalarPropertyPulse >(GetArenaForAllocation());
  }
  return _impl_.ValueType_.pulse_;
}
inline ::Property::ScalarPropertyPulse* ScalarPropertyValue::mutable_pulse() {
  ::Property::ScalarPropertyPulse* _msg = _internal_mutable_pulse();
  // @@protoc_insertion_point(field_mutable:Property.ScalarPropertyValue.pulse)
  return _msg;
}

// .Property.ScalarPropertyPlayback playback = 7;
inline bool ScalarPropertyValue::_internal_has_playback() const {
  return ValueType_case() == kPlayback;
}
inline bool ScalarPropertyValue::has_playback() const {
  return _internal_has_playback();
}
inline void ScalarPropertyValue::set_has_playback() {
  _impl_._oneof_case_[0] = kPlayback;
}
inline void ScalarPropertyValue::clear_playback() {
  if (_internal_has_playback()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.ValueType_.playback_;
    }
    clear_has_ValueType();
  }
}
inline ::Property::ScalarPropertyPlayback* ScalarPropertyValue::release_playback() {
  // @@protoc_insertion_point(field_release:Property.ScalarPropertyValue.playback)
  if (_internal_has_playback()) {
    clear_has_ValueType();
    ::Property::ScalarPropertyPlayback* temp = _impl_.ValueType_.playback_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.ValueType_.playback_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::ScalarPropertyPlayback& ScalarPropertyValue::_internal_playback() const {
  return _internal_has_playback()
      ? *_impl_.ValueType_.playback_
      : reinterpret_cast< ::Property::ScalarPropertyPlayback&>(::Property::_ScalarPropertyPlayback_default_instance_);
}
inline const ::Property::ScalarPropertyPlayback& ScalarPropertyValue::playback() const {
  // @@protoc_insertion_point(field_get:Property.ScalarPropertyValue.playback)
  return _internal_playback();
}
inline ::Property::ScalarPropertyPlayback* ScalarPropertyValue::unsafe_arena_release_playback() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.ScalarPropertyValue.playback)
  if (_internal_has_playback()) {
    clear_has_ValueType();
    ::Property::ScalarPropertyPlayback* temp = _impl_.ValueType_.playback_;
    _impl_.ValueType_.playback_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ScalarPropertyValue::unsafe_arena_set_allocated_playback(::Property::ScalarPropertyPlayback* playback) {
  clear_ValueType();
  if (playback) {
    set_has_playback();
    _impl_.ValueType_.playback_ = playback;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.ScalarPropertyValue.playback)
}
inline ::Property::ScalarPropertyPlayback* ScalarPropertyValue::_internal_mutable_playback() {
  if (!_internal_has_playback()) {
    clear_ValueType();
    set_has_playback();
    _impl_.ValueType_.playback_ = CreateMaybeMessage< ::Property::ScalarPropertyPlayback >(GetArenaForAllocation());
  }
  return _impl_.ValueType_.playback_;
}
inline ::Property::ScalarPropertyPlayback* ScalarPropertyValue::mutable_playback() {
  ::Property::ScalarPropertyPlayback* _msg = _internal_mutable_playback();
  // @@protoc_insertion_point(field_mutable:Property.ScalarPropertyValue.playback)
  return _msg;
}

// .Property.ScalarPropertyPlaybackBasic playbackBasic = 8;
inline bool ScalarPropertyValue::_internal_has_playbackbasic() const {
  return ValueType_case() == kPlaybackBasic;
}
inline bool ScalarPropertyValue::has_playbackbasic() const {
  return _internal_has_playbackbasic();
}
inline void ScalarPropertyValue::set_has_playbackbasic() {
  _impl_._oneof_case_[0] = kPlaybackBasic;
}
inline void ScalarPropertyValue::clear_playbackbasic() {
  if (_internal_has_playbackbasic()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.ValueType_.playbackbasic_;
    }
    clear_has_ValueType();
  }
}
inline ::Property::ScalarPropertyPlaybackBasic* ScalarPropertyValue::release_playbackbasic() {
  // @@protoc_insertion_point(field_release:Property.ScalarPropertyValue.playbackBasic)
  if (_internal_has_playbackbasic()) {
    clear_has_ValueType();
    ::Property::ScalarPropertyPlaybackBasic* temp = _impl_.ValueType_.playbackbasic_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.ValueType_.playbackbasic_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::ScalarPropertyPlaybackBasic& ScalarPropertyValue::_internal_playbackbasic() const {
  return _internal_has_playbackbasic()
      ? *_impl_.ValueType_.playbackbasic_
      : reinterpret_cast< ::Property::ScalarPropertyPlaybackBasic&>(::Property::_ScalarPropertyPlaybackBasic_default_instance_);
}
inline const ::Property::ScalarPropertyPlaybackBasic& ScalarPropertyValue::playbackbasic() const {
  // @@protoc_insertion_point(field_get:Property.ScalarPropertyValue.playbackBasic)
  return _internal_playbackbasic();
}
inline ::Property::ScalarPropertyPlaybackBasic* ScalarPropertyValue::unsafe_arena_release_playbackbasic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.ScalarPropertyValue.playbackBasic)
  if (_internal_has_playbackbasic()) {
    clear_has_ValueType();
    ::Property::ScalarPropertyPlaybackBasic* temp = _impl_.ValueType_.playbackbasic_;
    _impl_.ValueType_.playbackbasic_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ScalarPropertyValue::unsafe_arena_set_allocated_playbackbasic(::Property::ScalarPropertyPlaybackBasic* playbackbasic) {
  clear_ValueType();
  if (playbackbasic) {
    set_has_playbackbasic();
    _impl_.ValueType_.playbackbasic_ = playbackbasic;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.ScalarPropertyValue.playbackBasic)
}
inline ::Property::ScalarPropertyPlaybackBasic* ScalarPropertyValue::_internal_mutable_playbackbasic() {
  if (!_internal_has_playbackbasic()) {
    clear_ValueType();
    set_has_playbackbasic();
    _impl_.ValueType_.playbackbasic_ = CreateMaybeMessage< ::Property::ScalarPropertyPlaybackBasic >(GetArenaForAllocation());
  }
  return _impl_.ValueType_.playbackbasic_;
}
inline ::Property::ScalarPropertyPlaybackBasic* ScalarPropertyValue::mutable_playbackbasic() {
  ::Property::ScalarPropertyPlaybackBasic* _msg = _internal_mutable_playbackbasic();
  // @@protoc_insertion_point(field_mutable:Property.ScalarPropertyValue.playbackBasic)
  return _msg;
}

// .Property.ScalarPropertyInterpolator interp = 9;
inline bool ScalarPropertyValue::_internal_has_interp() const {
  return ValueType_case() == kInterp;
}
inline bool ScalarPropertyValue::has_interp() const {
  return _internal_has_interp();
}
inline void ScalarPropertyValue::set_has_interp() {
  _impl_._oneof_case_[0] = kInterp;
}
inline void ScalarPropertyValue::clear_interp() {
  if (_internal_has_interp()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.ValueType_.interp_;
    }
    clear_has_ValueType();
  }
}
inline ::Property::ScalarPropertyInterpolator* ScalarPropertyValue::release_interp() {
  // @@protoc_insertion_point(field_release:Property.ScalarPropertyValue.interp)
  if (_internal_has_interp()) {
    clear_has_ValueType();
    ::Property::ScalarPropertyInterpolator* temp = _impl_.ValueType_.interp_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.ValueType_.interp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::ScalarPropertyInterpolator& ScalarPropertyValue::_internal_interp() const {
  return _internal_has_interp()
      ? *_impl_.ValueType_.interp_
      : reinterpret_cast< ::Property::ScalarPropertyInterpolator&>(::Property::_ScalarPropertyInterpolator_default_instance_);
}
inline const ::Property::ScalarPropertyInterpolator& ScalarPropertyValue::interp() const {
  // @@protoc_insertion_point(field_get:Property.ScalarPropertyValue.interp)
  return _internal_interp();
}
inline ::Property::ScalarPropertyInterpolator* ScalarPropertyValue::unsafe_arena_release_interp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.ScalarPropertyValue.interp)
  if (_internal_has_interp()) {
    clear_has_ValueType();
    ::Property::ScalarPropertyInterpolator* temp = _impl_.ValueType_.interp_;
    _impl_.ValueType_.interp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ScalarPropertyValue::unsafe_arena_set_allocated_interp(::Property::ScalarPropertyInterpolator* interp) {
  clear_ValueType();
  if (interp) {
    set_has_interp();
    _impl_.ValueType_.interp_ = interp;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.ScalarPropertyValue.interp)
}
inline ::Property::ScalarPropertyInterpolator* ScalarPropertyValue::_internal_mutable_interp() {
  if (!_internal_has_interp()) {
    clear_ValueType();
    set_has_interp();
    _impl_.ValueType_.interp_ = CreateMaybeMessage< ::Property::ScalarPropertyInterpolator >(GetArenaForAllocation());
  }
  return _impl_.ValueType_.interp_;
}
inline ::Property::ScalarPropertyInterpolator* ScalarPropertyValue::mutable_interp() {
  ::Property::ScalarPropertyInterpolator* _msg = _internal_mutable_interp();
  // @@protoc_insertion_point(field_mutable:Property.ScalarPropertyValue.interp)
  return _msg;
}

// .Property.CustomGeneratorValue custom = 10;
inline bool ScalarPropertyValue::_internal_has_custom() const {
  return ValueType_case() == kCustom;
}
inline bool ScalarPropertyValue::has_custom() const {
  return _internal_has_custom();
}
inline void ScalarPropertyValue::set_has_custom() {
  _impl_._oneof_case_[0] = kCustom;
}
inline void ScalarPropertyValue::clear_custom() {
  if (_internal_has_custom()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.ValueType_.custom_;
    }
    clear_has_ValueType();
  }
}
inline ::Property::CustomGeneratorValue* ScalarPropertyValue::release_custom() {
  // @@protoc_insertion_point(field_release:Property.ScalarPropertyValue.custom)
  if (_internal_has_custom()) {
    clear_has_ValueType();
    ::Property::CustomGeneratorValue* temp = _impl_.ValueType_.custom_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.ValueType_.custom_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::CustomGeneratorValue& ScalarPropertyValue::_internal_custom() const {
  return _internal_has_custom()
      ? *_impl_.ValueType_.custom_
      : reinterpret_cast< ::Property::CustomGeneratorValue&>(::Property::_CustomGeneratorValue_default_instance_);
}
inline const ::Property::CustomGeneratorValue& ScalarPropertyValue::custom() const {
  // @@protoc_insertion_point(field_get:Property.ScalarPropertyValue.custom)
  return _internal_custom();
}
inline ::Property::CustomGeneratorValue* ScalarPropertyValue::unsafe_arena_release_custom() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.ScalarPropertyValue.custom)
  if (_internal_has_custom()) {
    clear_has_ValueType();
    ::Property::CustomGeneratorValue* temp = _impl_.ValueType_.custom_;
    _impl_.ValueType_.custom_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ScalarPropertyValue::unsafe_arena_set_allocated_custom(::Property::CustomGeneratorValue* custom) {
  clear_ValueType();
  if (custom) {
    set_has_custom();
    _impl_.ValueType_.custom_ = custom;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.ScalarPropertyValue.custom)
}
inline ::Property::CustomGeneratorValue* ScalarPropertyValue::_internal_mutable_custom() {
  if (!_internal_has_custom()) {
    clear_ValueType();
    set_has_custom();
    _impl_.ValueType_.custom_ = CreateMaybeMessage< ::Property::CustomGeneratorValue >(GetArenaForAllocation());
  }
  return _impl_.ValueType_.custom_;
}
inline ::Property::CustomGeneratorValue* ScalarPropertyValue::mutable_custom() {
  ::Property::CustomGeneratorValue* _msg = _internal_mutable_custom();
  // @@protoc_insertion_point(field_mutable:Property.ScalarPropertyValue.custom)
  return _msg;
}

// .Property.ScalarPropertyApproach approach = 11;
inline bool ScalarPropertyValue::_internal_has_approach() const {
  return ValueType_case() == kApproach;
}
inline bool ScalarPropertyValue::has_approach() const {
  return _internal_has_approach();
}
inline void ScalarPropertyValue::set_has_approach() {
  _impl_._oneof_case_[0] = kApproach;
}
inline void ScalarPropertyValue::clear_approach() {
  if (_internal_has_approach()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.ValueType_.approach_;
    }
    clear_has_ValueType();
  }
}
inline ::Property::ScalarPropertyApproach* ScalarPropertyValue::release_approach() {
  // @@protoc_insertion_point(field_release:Property.ScalarPropertyValue.approach)
  if (_internal_has_approach()) {
    clear_has_ValueType();
    ::Property::ScalarPropertyApproach* temp = _impl_.ValueType_.approach_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.ValueType_.approach_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::ScalarPropertyApproach& ScalarPropertyValue::_internal_approach() const {
  return _internal_has_approach()
      ? *_impl_.ValueType_.approach_
      : reinterpret_cast< ::Property::ScalarPropertyApproach&>(::Property::_ScalarPropertyApproach_default_instance_);
}
inline const ::Property::ScalarPropertyApproach& ScalarPropertyValue::approach() const {
  // @@protoc_insertion_point(field_get:Property.ScalarPropertyValue.approach)
  return _internal_approach();
}
inline ::Property::ScalarPropertyApproach* ScalarPropertyValue::unsafe_arena_release_approach() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.ScalarPropertyValue.approach)
  if (_internal_has_approach()) {
    clear_has_ValueType();
    ::Property::ScalarPropertyApproach* temp = _impl_.ValueType_.approach_;
    _impl_.ValueType_.approach_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ScalarPropertyValue::unsafe_arena_set_allocated_approach(::Property::ScalarPropertyApproach* approach) {
  clear_ValueType();
  if (approach) {
    set_has_approach();
    _impl_.ValueType_.approach_ = approach;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.ScalarPropertyValue.approach)
}
inline ::Property::ScalarPropertyApproach* ScalarPropertyValue::_internal_mutable_approach() {
  if (!_internal_has_approach()) {
    clear_ValueType();
    set_has_approach();
    _impl_.ValueType_.approach_ = CreateMaybeMessage< ::Property::ScalarPropertyApproach >(GetArenaForAllocation());
  }
  return _impl_.ValueType_.approach_;
}
inline ::Property::ScalarPropertyApproach* ScalarPropertyValue::mutable_approach() {
  ::Property::ScalarPropertyApproach* _msg = _internal_mutable_approach();
  // @@protoc_insertion_point(field_mutable:Property.ScalarPropertyValue.approach)
  return _msg;
}

inline bool ScalarPropertyValue::has_ValueType() const {
  return ValueType_case() != VALUETYPE_NOT_SET;
}
inline void ScalarPropertyValue::clear_has_ValueType() {
  _impl_._oneof_case_[0] = VALUETYPE_NOT_SET;
}
inline ScalarPropertyValue::ValueTypeCase ScalarPropertyValue::ValueType_case() const {
  return ScalarPropertyValue::ValueTypeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ScalarPropertyInterpolator

// .Property.ScalarPropertyValue t = 4;
inline bool ScalarPropertyInterpolator::_internal_has_t() const {
  return this != internal_default_instance() && _impl_.t_ != nullptr;
}
inline bool ScalarPropertyInterpolator::has_t() const {
  return _internal_has_t();
}
inline void ScalarPropertyInterpolator::clear_t() {
  if (GetArenaForAllocation() == nullptr && _impl_.t_ != nullptr) {
    delete _impl_.t_;
  }
  _impl_.t_ = nullptr;
}
inline const ::Property::ScalarPropertyValue& ScalarPropertyInterpolator::_internal_t() const {
  const ::Property::ScalarPropertyValue* p = _impl_.t_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::ScalarPropertyValue&>(
      ::Property::_ScalarPropertyValue_default_instance_);
}
inline const ::Property::ScalarPropertyValue& ScalarPropertyInterpolator::t() const {
  // @@protoc_insertion_point(field_get:Property.ScalarPropertyInterpolator.t)
  return _internal_t();
}
inline void ScalarPropertyInterpolator::unsafe_arena_set_allocated_t(
    ::Property::ScalarPropertyValue* t) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.t_);
  }
  _impl_.t_ = t;
  if (t) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.ScalarPropertyInterpolator.t)
}
inline ::Property::ScalarPropertyValue* ScalarPropertyInterpolator::release_t() {
  
  ::Property::ScalarPropertyValue* temp = _impl_.t_;
  _impl_.t_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::ScalarPropertyValue* ScalarPropertyInterpolator::unsafe_arena_release_t() {
  // @@protoc_insertion_point(field_release:Property.ScalarPropertyInterpolator.t)
  
  ::Property::ScalarPropertyValue* temp = _impl_.t_;
  _impl_.t_ = nullptr;
  return temp;
}
inline ::Property::ScalarPropertyValue* ScalarPropertyInterpolator::_internal_mutable_t() {
  
  if (_impl_.t_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::ScalarPropertyValue>(GetArenaForAllocation());
    _impl_.t_ = p;
  }
  return _impl_.t_;
}
inline ::Property::ScalarPropertyValue* ScalarPropertyInterpolator::mutable_t() {
  ::Property::ScalarPropertyValue* _msg = _internal_mutable_t();
  // @@protoc_insertion_point(field_mutable:Property.ScalarPropertyInterpolator.t)
  return _msg;
}
inline void ScalarPropertyInterpolator::set_allocated_t(::Property::ScalarPropertyValue* t) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.t_;
  }
  if (t) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(t);
    if (message_arena != submessage_arena) {
      t = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, t, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.t_ = t;
  // @@protoc_insertion_point(field_set_allocated:Property.ScalarPropertyInterpolator.t)
}

// .Property.ScalarPropertyValue from = 1;
inline bool ScalarPropertyInterpolator::_internal_has_from() const {
  return this != internal_default_instance() && _impl_.from_ != nullptr;
}
inline bool ScalarPropertyInterpolator::has_from() const {
  return _internal_has_from();
}
inline void ScalarPropertyInterpolator::clear_from() {
  if (GetArenaForAllocation() == nullptr && _impl_.from_ != nullptr) {
    delete _impl_.from_;
  }
  _impl_.from_ = nullptr;
}
inline const ::Property::ScalarPropertyValue& ScalarPropertyInterpolator::_internal_from() const {
  const ::Property::ScalarPropertyValue* p = _impl_.from_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::ScalarPropertyValue&>(
      ::Property::_ScalarPropertyValue_default_instance_);
}
inline const ::Property::ScalarPropertyValue& ScalarPropertyInterpolator::from() const {
  // @@protoc_insertion_point(field_get:Property.ScalarPropertyInterpolator.from)
  return _internal_from();
}
inline void ScalarPropertyInterpolator::unsafe_arena_set_allocated_from(
    ::Property::ScalarPropertyValue* from) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.from_);
  }
  _impl_.from_ = from;
  if (from) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.ScalarPropertyInterpolator.from)
}
inline ::Property::ScalarPropertyValue* ScalarPropertyInterpolator::release_from() {
  
  ::Property::ScalarPropertyValue* temp = _impl_.from_;
  _impl_.from_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::ScalarPropertyValue* ScalarPropertyInterpolator::unsafe_arena_release_from() {
  // @@protoc_insertion_point(field_release:Property.ScalarPropertyInterpolator.from)
  
  ::Property::ScalarPropertyValue* temp = _impl_.from_;
  _impl_.from_ = nullptr;
  return temp;
}
inline ::Property::ScalarPropertyValue* ScalarPropertyInterpolator::_internal_mutable_from() {
  
  if (_impl_.from_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::ScalarPropertyValue>(GetArenaForAllocation());
    _impl_.from_ = p;
  }
  return _impl_.from_;
}
inline ::Property::ScalarPropertyValue* ScalarPropertyInterpolator::mutable_from() {
  ::Property::ScalarPropertyValue* _msg = _internal_mutable_from();
  // @@protoc_insertion_point(field_mutable:Property.ScalarPropertyInterpolator.from)
  return _msg;
}
inline void ScalarPropertyInterpolator::set_allocated_from(::Property::ScalarPropertyValue* from) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.from_;
  }
  if (from) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(from);
    if (message_arena != submessage_arena) {
      from = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, from, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.from_ = from;
  // @@protoc_insertion_point(field_set_allocated:Property.ScalarPropertyInterpolator.from)
}

// .Property.ScalarPropertyValue to = 2;
inline bool ScalarPropertyInterpolator::_internal_has_to() const {
  return this != internal_default_instance() && _impl_.to_ != nullptr;
}
inline bool ScalarPropertyInterpolator::has_to() const {
  return _internal_has_to();
}
inline void ScalarPropertyInterpolator::clear_to() {
  if (GetArenaForAllocation() == nullptr && _impl_.to_ != nullptr) {
    delete _impl_.to_;
  }
  _impl_.to_ = nullptr;
}
inline const ::Property::ScalarPropertyValue& ScalarPropertyInterpolator::_internal_to() const {
  const ::Property::ScalarPropertyValue* p = _impl_.to_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::ScalarPropertyValue&>(
      ::Property::_ScalarPropertyValue_default_instance_);
}
inline const ::Property::ScalarPropertyValue& ScalarPropertyInterpolator::to() const {
  // @@protoc_insertion_point(field_get:Property.ScalarPropertyInterpolator.to)
  return _internal_to();
}
inline void ScalarPropertyInterpolator::unsafe_arena_set_allocated_to(
    ::Property::ScalarPropertyValue* to) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.to_);
  }
  _impl_.to_ = to;
  if (to) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.ScalarPropertyInterpolator.to)
}
inline ::Property::ScalarPropertyValue* ScalarPropertyInterpolator::release_to() {
  
  ::Property::ScalarPropertyValue* temp = _impl_.to_;
  _impl_.to_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::ScalarPropertyValue* ScalarPropertyInterpolator::unsafe_arena_release_to() {
  // @@protoc_insertion_point(field_release:Property.ScalarPropertyInterpolator.to)
  
  ::Property::ScalarPropertyValue* temp = _impl_.to_;
  _impl_.to_ = nullptr;
  return temp;
}
inline ::Property::ScalarPropertyValue* ScalarPropertyInterpolator::_internal_mutable_to() {
  
  if (_impl_.to_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::ScalarPropertyValue>(GetArenaForAllocation());
    _impl_.to_ = p;
  }
  return _impl_.to_;
}
inline ::Property::ScalarPropertyValue* ScalarPropertyInterpolator::mutable_to() {
  ::Property::ScalarPropertyValue* _msg = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:Property.ScalarPropertyInterpolator.to)
  return _msg;
}
inline void ScalarPropertyInterpolator::set_allocated_to(::Property::ScalarPropertyValue* to) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.to_;
  }
  if (to) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(to);
    if (message_arena != submessage_arena) {
      to = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, to, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.to_ = to;
  // @@protoc_insertion_point(field_set_allocated:Property.ScalarPropertyInterpolator.to)
}

// .Property.Interpolation by = 3;
inline bool ScalarPropertyInterpolator::_internal_has_by() const {
  return this != internal_default_instance() && _impl_.by_ != nullptr;
}
inline bool ScalarPropertyInterpolator::has_by() const {
  return _internal_has_by();
}
inline void ScalarPropertyInterpolator::clear_by() {
  if (GetArenaForAllocation() == nullptr && _impl_.by_ != nullptr) {
    delete _impl_.by_;
  }
  _impl_.by_ = nullptr;
}
inline const ::Property::Interpolation& ScalarPropertyInterpolator::_internal_by() const {
  const ::Property::Interpolation* p = _impl_.by_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::Interpolation&>(
      ::Property::_Interpolation_default_instance_);
}
inline const ::Property::Interpolation& ScalarPropertyInterpolator::by() const {
  // @@protoc_insertion_point(field_get:Property.ScalarPropertyInterpolator.by)
  return _internal_by();
}
inline void ScalarPropertyInterpolator::unsafe_arena_set_allocated_by(
    ::Property::Interpolation* by) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.by_);
  }
  _impl_.by_ = by;
  if (by) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.ScalarPropertyInterpolator.by)
}
inline ::Property::Interpolation* ScalarPropertyInterpolator::release_by() {
  
  ::Property::Interpolation* temp = _impl_.by_;
  _impl_.by_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::Interpolation* ScalarPropertyInterpolator::unsafe_arena_release_by() {
  // @@protoc_insertion_point(field_release:Property.ScalarPropertyInterpolator.by)
  
  ::Property::Interpolation* temp = _impl_.by_;
  _impl_.by_ = nullptr;
  return temp;
}
inline ::Property::Interpolation* ScalarPropertyInterpolator::_internal_mutable_by() {
  
  if (_impl_.by_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::Interpolation>(GetArenaForAllocation());
    _impl_.by_ = p;
  }
  return _impl_.by_;
}
inline ::Property::Interpolation* ScalarPropertyInterpolator::mutable_by() {
  ::Property::Interpolation* _msg = _internal_mutable_by();
  // @@protoc_insertion_point(field_mutable:Property.ScalarPropertyInterpolator.by)
  return _msg;
}
inline void ScalarPropertyInterpolator::set_allocated_by(::Property::Interpolation* by) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.by_;
  }
  if (by) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(by);
    if (message_arena != submessage_arena) {
      by = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, by, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.by_ = by;
  // @@protoc_insertion_point(field_set_allocated:Property.ScalarPropertyInterpolator.by)
}

// -------------------------------------------------------------------

// ScalarPropertyPulse

// .Property.ScalarPropertyValue tSrc = 1;
inline bool ScalarPropertyPulse::_internal_has_tsrc() const {
  return this != internal_default_instance() && _impl_.tsrc_ != nullptr;
}
inline bool ScalarPropertyPulse::has_tsrc() const {
  return _internal_has_tsrc();
}
inline void ScalarPropertyPulse::clear_tsrc() {
  if (GetArenaForAllocation() == nullptr && _impl_.tsrc_ != nullptr) {
    delete _impl_.tsrc_;
  }
  _impl_.tsrc_ = nullptr;
}
inline const ::Property::ScalarPropertyValue& ScalarPropertyPulse::_internal_tsrc() const {
  const ::Property::ScalarPropertyValue* p = _impl_.tsrc_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::ScalarPropertyValue&>(
      ::Property::_ScalarPropertyValue_default_instance_);
}
inline const ::Property::ScalarPropertyValue& ScalarPropertyPulse::tsrc() const {
  // @@protoc_insertion_point(field_get:Property.ScalarPropertyPulse.tSrc)
  return _internal_tsrc();
}
inline void ScalarPropertyPulse::unsafe_arena_set_allocated_tsrc(
    ::Property::ScalarPropertyValue* tsrc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tsrc_);
  }
  _impl_.tsrc_ = tsrc;
  if (tsrc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.ScalarPropertyPulse.tSrc)
}
inline ::Property::ScalarPropertyValue* ScalarPropertyPulse::release_tsrc() {
  
  ::Property::ScalarPropertyValue* temp = _impl_.tsrc_;
  _impl_.tsrc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::ScalarPropertyValue* ScalarPropertyPulse::unsafe_arena_release_tsrc() {
  // @@protoc_insertion_point(field_release:Property.ScalarPropertyPulse.tSrc)
  
  ::Property::ScalarPropertyValue* temp = _impl_.tsrc_;
  _impl_.tsrc_ = nullptr;
  return temp;
}
inline ::Property::ScalarPropertyValue* ScalarPropertyPulse::_internal_mutable_tsrc() {
  
  if (_impl_.tsrc_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::ScalarPropertyValue>(GetArenaForAllocation());
    _impl_.tsrc_ = p;
  }
  return _impl_.tsrc_;
}
inline ::Property::ScalarPropertyValue* ScalarPropertyPulse::mutable_tsrc() {
  ::Property::ScalarPropertyValue* _msg = _internal_mutable_tsrc();
  // @@protoc_insertion_point(field_mutable:Property.ScalarPropertyPulse.tSrc)
  return _msg;
}
inline void ScalarPropertyPulse::set_allocated_tsrc(::Property::ScalarPropertyValue* tsrc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.tsrc_;
  }
  if (tsrc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tsrc);
    if (message_arena != submessage_arena) {
      tsrc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tsrc, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.tsrc_ = tsrc;
  // @@protoc_insertion_point(field_set_allocated:Property.ScalarPropertyPulse.tSrc)
}

// .Property.ScalarPropertyValue length = 2;
inline bool ScalarPropertyPulse::_internal_has_length() const {
  return this != internal_default_instance() && _impl_.length_ != nullptr;
}
inline bool ScalarPropertyPulse::has_length() const {
  return _internal_has_length();
}
inline void ScalarPropertyPulse::clear_length() {
  if (GetArenaForAllocation() == nullptr && _impl_.length_ != nullptr) {
    delete _impl_.length_;
  }
  _impl_.length_ = nullptr;
}
inline const ::Property::ScalarPropertyValue& ScalarPropertyPulse::_internal_length() const {
  const ::Property::ScalarPropertyValue* p = _impl_.length_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::ScalarPropertyValue&>(
      ::Property::_ScalarPropertyValue_default_instance_);
}
inline const ::Property::ScalarPropertyValue& ScalarPropertyPulse::length() const {
  // @@protoc_insertion_point(field_get:Property.ScalarPropertyPulse.length)
  return _internal_length();
}
inline void ScalarPropertyPulse::unsafe_arena_set_allocated_length(
    ::Property::ScalarPropertyValue* length) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.length_);
  }
  _impl_.length_ = length;
  if (length) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.ScalarPropertyPulse.length)
}
inline ::Property::ScalarPropertyValue* ScalarPropertyPulse::release_length() {
  
  ::Property::ScalarPropertyValue* temp = _impl_.length_;
  _impl_.length_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::ScalarPropertyValue* ScalarPropertyPulse::unsafe_arena_release_length() {
  // @@protoc_insertion_point(field_release:Property.ScalarPropertyPulse.length)
  
  ::Property::ScalarPropertyValue* temp = _impl_.length_;
  _impl_.length_ = nullptr;
  return temp;
}
inline ::Property::ScalarPropertyValue* ScalarPropertyPulse::_internal_mutable_length() {
  
  if (_impl_.length_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::ScalarPropertyValue>(GetArenaForAllocation());
    _impl_.length_ = p;
  }
  return _impl_.length_;
}
inline ::Property::ScalarPropertyValue* ScalarPropertyPulse::mutable_length() {
  ::Property::ScalarPropertyValue* _msg = _internal_mutable_length();
  // @@protoc_insertion_point(field_mutable:Property.ScalarPropertyPulse.length)
  return _msg;
}
inline void ScalarPropertyPulse::set_allocated_length(::Property::ScalarPropertyValue* length) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.length_;
  }
  if (length) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(length);
    if (message_arena != submessage_arena) {
      length = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, length, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.length_ = length;
  // @@protoc_insertion_point(field_set_allocated:Property.ScalarPropertyPulse.length)
}

// .Property.ScalarPropertyValue min = 3;
inline bool ScalarPropertyPulse::_internal_has_min() const {
  return this != internal_default_instance() && _impl_.min_ != nullptr;
}
inline bool ScalarPropertyPulse::has_min() const {
  return _internal_has_min();
}
inline void ScalarPropertyPulse::clear_min() {
  if (GetArenaForAllocation() == nullptr && _impl_.min_ != nullptr) {
    delete _impl_.min_;
  }
  _impl_.min_ = nullptr;
}
inline const ::Property::ScalarPropertyValue& ScalarPropertyPulse::_internal_min() const {
  const ::Property::ScalarPropertyValue* p = _impl_.min_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::ScalarPropertyValue&>(
      ::Property::_ScalarPropertyValue_default_instance_);
}
inline const ::Property::ScalarPropertyValue& ScalarPropertyPulse::min() const {
  // @@protoc_insertion_point(field_get:Property.ScalarPropertyPulse.min)
  return _internal_min();
}
inline void ScalarPropertyPulse::unsafe_arena_set_allocated_min(
    ::Property::ScalarPropertyValue* min) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.min_);
  }
  _impl_.min_ = min;
  if (min) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.ScalarPropertyPulse.min)
}
inline ::Property::ScalarPropertyValue* ScalarPropertyPulse::release_min() {
  
  ::Property::ScalarPropertyValue* temp = _impl_.min_;
  _impl_.min_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::ScalarPropertyValue* ScalarPropertyPulse::unsafe_arena_release_min() {
  // @@protoc_insertion_point(field_release:Property.ScalarPropertyPulse.min)
  
  ::Property::ScalarPropertyValue* temp = _impl_.min_;
  _impl_.min_ = nullptr;
  return temp;
}
inline ::Property::ScalarPropertyValue* ScalarPropertyPulse::_internal_mutable_min() {
  
  if (_impl_.min_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::ScalarPropertyValue>(GetArenaForAllocation());
    _impl_.min_ = p;
  }
  return _impl_.min_;
}
inline ::Property::ScalarPropertyValue* ScalarPropertyPulse::mutable_min() {
  ::Property::ScalarPropertyValue* _msg = _internal_mutable_min();
  // @@protoc_insertion_point(field_mutable:Property.ScalarPropertyPulse.min)
  return _msg;
}
inline void ScalarPropertyPulse::set_allocated_min(::Property::ScalarPropertyValue* min) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.min_;
  }
  if (min) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(min);
    if (message_arena != submessage_arena) {
      min = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, min, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.min_ = min;
  // @@protoc_insertion_point(field_set_allocated:Property.ScalarPropertyPulse.min)
}

// .Property.ScalarPropertyValue max = 4;
inline bool ScalarPropertyPulse::_internal_has_max() const {
  return this != internal_default_instance() && _impl_.max_ != nullptr;
}
inline bool ScalarPropertyPulse::has_max() const {
  return _internal_has_max();
}
inline void ScalarPropertyPulse::clear_max() {
  if (GetArenaForAllocation() == nullptr && _impl_.max_ != nullptr) {
    delete _impl_.max_;
  }
  _impl_.max_ = nullptr;
}
inline const ::Property::ScalarPropertyValue& ScalarPropertyPulse::_internal_max() const {
  const ::Property::ScalarPropertyValue* p = _impl_.max_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::ScalarPropertyValue&>(
      ::Property::_ScalarPropertyValue_default_instance_);
}
inline const ::Property::ScalarPropertyValue& ScalarPropertyPulse::max() const {
  // @@protoc_insertion_point(field_get:Property.ScalarPropertyPulse.max)
  return _internal_max();
}
inline void ScalarPropertyPulse::unsafe_arena_set_allocated_max(
    ::Property::ScalarPropertyValue* max) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_);
  }
  _impl_.max_ = max;
  if (max) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.ScalarPropertyPulse.max)
}
inline ::Property::ScalarPropertyValue* ScalarPropertyPulse::release_max() {
  
  ::Property::ScalarPropertyValue* temp = _impl_.max_;
  _impl_.max_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::ScalarPropertyValue* ScalarPropertyPulse::unsafe_arena_release_max() {
  // @@protoc_insertion_point(field_release:Property.ScalarPropertyPulse.max)
  
  ::Property::ScalarPropertyValue* temp = _impl_.max_;
  _impl_.max_ = nullptr;
  return temp;
}
inline ::Property::ScalarPropertyValue* ScalarPropertyPulse::_internal_mutable_max() {
  
  if (_impl_.max_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::ScalarPropertyValue>(GetArenaForAllocation());
    _impl_.max_ = p;
  }
  return _impl_.max_;
}
inline ::Property::ScalarPropertyValue* ScalarPropertyPulse::mutable_max() {
  ::Property::ScalarPropertyValue* _msg = _internal_mutable_max();
  // @@protoc_insertion_point(field_mutable:Property.ScalarPropertyPulse.max)
  return _msg;
}
inline void ScalarPropertyPulse::set_allocated_max(::Property::ScalarPropertyValue* max) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.max_;
  }
  if (max) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(max);
    if (message_arena != submessage_arena) {
      max = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.max_ = max;
  // @@protoc_insertion_point(field_set_allocated:Property.ScalarPropertyPulse.max)
}

// -------------------------------------------------------------------

// ScalarPropertyPlaybackBasic

// bool playing = 3;
inline void ScalarPropertyPlaybackBasic::clear_playing() {
  _impl_.playing_ = false;
}
inline bool ScalarPropertyPlaybackBasic::_internal_playing() const {
  return _impl_.playing_;
}
inline bool ScalarPropertyPlaybackBasic::playing() const {
  // @@protoc_insertion_point(field_get:Property.ScalarPropertyPlaybackBasic.playing)
  return _internal_playing();
}
inline void ScalarPropertyPlaybackBasic::_internal_set_playing(bool value) {
  
  _impl_.playing_ = value;
}
inline void ScalarPropertyPlaybackBasic::set_playing(bool value) {
  _internal_set_playing(value);
  // @@protoc_insertion_point(field_set:Property.ScalarPropertyPlaybackBasic.playing)
}

// float startTime = 2;
inline void ScalarPropertyPlaybackBasic::clear_starttime() {
  _impl_.starttime_ = 0;
}
inline float ScalarPropertyPlaybackBasic::_internal_starttime() const {
  return _impl_.starttime_;
}
inline float ScalarPropertyPlaybackBasic::starttime() const {
  // @@protoc_insertion_point(field_get:Property.ScalarPropertyPlaybackBasic.startTime)
  return _internal_starttime();
}
inline void ScalarPropertyPlaybackBasic::_internal_set_starttime(float value) {
  
  _impl_.starttime_ = value;
}
inline void ScalarPropertyPlaybackBasic::set_starttime(float value) {
  _internal_set_starttime(value);
  // @@protoc_insertion_point(field_set:Property.ScalarPropertyPlaybackBasic.startTime)
}

// float speedWhilePlaying = 4;
inline void ScalarPropertyPlaybackBasic::clear_speedwhileplaying() {
  _impl_.speedwhileplaying_ = 0;
}
inline float ScalarPropertyPlaybackBasic::_internal_speedwhileplaying() const {
  return _impl_.speedwhileplaying_;
}
inline float ScalarPropertyPlaybackBasic::speedwhileplaying() const {
  // @@protoc_insertion_point(field_get:Property.ScalarPropertyPlaybackBasic.speedWhilePlaying)
  return _internal_speedwhileplaying();
}
inline void ScalarPropertyPlaybackBasic::_internal_set_speedwhileplaying(float value) {
  
  _impl_.speedwhileplaying_ = value;
}
inline void ScalarPropertyPlaybackBasic::set_speedwhileplaying(float value) {
  _internal_set_speedwhileplaying(value);
  // @@protoc_insertion_point(field_set:Property.ScalarPropertyPlaybackBasic.speedWhilePlaying)
}

// -------------------------------------------------------------------

// ScalarPropertyPlayback

// .Property.ScalarPropertyValue tSrc = 1;
inline bool ScalarPropertyPlayback::_internal_has_tsrc() const {
  return this != internal_default_instance() && _impl_.tsrc_ != nullptr;
}
inline bool ScalarPropertyPlayback::has_tsrc() const {
  return _internal_has_tsrc();
}
inline void ScalarPropertyPlayback::clear_tsrc() {
  if (GetArenaForAllocation() == nullptr && _impl_.tsrc_ != nullptr) {
    delete _impl_.tsrc_;
  }
  _impl_.tsrc_ = nullptr;
}
inline const ::Property::ScalarPropertyValue& ScalarPropertyPlayback::_internal_tsrc() const {
  const ::Property::ScalarPropertyValue* p = _impl_.tsrc_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::ScalarPropertyValue&>(
      ::Property::_ScalarPropertyValue_default_instance_);
}
inline const ::Property::ScalarPropertyValue& ScalarPropertyPlayback::tsrc() const {
  // @@protoc_insertion_point(field_get:Property.ScalarPropertyPlayback.tSrc)
  return _internal_tsrc();
}
inline void ScalarPropertyPlayback::unsafe_arena_set_allocated_tsrc(
    ::Property::ScalarPropertyValue* tsrc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tsrc_);
  }
  _impl_.tsrc_ = tsrc;
  if (tsrc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.ScalarPropertyPlayback.tSrc)
}
inline ::Property::ScalarPropertyValue* ScalarPropertyPlayback::release_tsrc() {
  
  ::Property::ScalarPropertyValue* temp = _impl_.tsrc_;
  _impl_.tsrc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::ScalarPropertyValue* ScalarPropertyPlayback::unsafe_arena_release_tsrc() {
  // @@protoc_insertion_point(field_release:Property.ScalarPropertyPlayback.tSrc)
  
  ::Property::ScalarPropertyValue* temp = _impl_.tsrc_;
  _impl_.tsrc_ = nullptr;
  return temp;
}
inline ::Property::ScalarPropertyValue* ScalarPropertyPlayback::_internal_mutable_tsrc() {
  
  if (_impl_.tsrc_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::ScalarPropertyValue>(GetArenaForAllocation());
    _impl_.tsrc_ = p;
  }
  return _impl_.tsrc_;
}
inline ::Property::ScalarPropertyValue* ScalarPropertyPlayback::mutable_tsrc() {
  ::Property::ScalarPropertyValue* _msg = _internal_mutable_tsrc();
  // @@protoc_insertion_point(field_mutable:Property.ScalarPropertyPlayback.tSrc)
  return _msg;
}
inline void ScalarPropertyPlayback::set_allocated_tsrc(::Property::ScalarPropertyValue* tsrc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.tsrc_;
  }
  if (tsrc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tsrc);
    if (message_arena != submessage_arena) {
      tsrc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tsrc, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.tsrc_ = tsrc;
  // @@protoc_insertion_point(field_set_allocated:Property.ScalarPropertyPlayback.tSrc)
}

// .Property.ScalarPropertyValue startTime = 2;
inline bool ScalarPropertyPlayback::_internal_has_starttime() const {
  return this != internal_default_instance() && _impl_.starttime_ != nullptr;
}
inline bool ScalarPropertyPlayback::has_starttime() const {
  return _internal_has_starttime();
}
inline void ScalarPropertyPlayback::clear_starttime() {
  if (GetArenaForAllocation() == nullptr && _impl_.starttime_ != nullptr) {
    delete _impl_.starttime_;
  }
  _impl_.starttime_ = nullptr;
}
inline const ::Property::ScalarPropertyValue& ScalarPropertyPlayback::_internal_starttime() const {
  const ::Property::ScalarPropertyValue* p = _impl_.starttime_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::ScalarPropertyValue&>(
      ::Property::_ScalarPropertyValue_default_instance_);
}
inline const ::Property::ScalarPropertyValue& ScalarPropertyPlayback::starttime() const {
  // @@protoc_insertion_point(field_get:Property.ScalarPropertyPlayback.startTime)
  return _internal_starttime();
}
inline void ScalarPropertyPlayback::unsafe_arena_set_allocated_starttime(
    ::Property::ScalarPropertyValue* starttime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.starttime_);
  }
  _impl_.starttime_ = starttime;
  if (starttime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.ScalarPropertyPlayback.startTime)
}
inline ::Property::ScalarPropertyValue* ScalarPropertyPlayback::release_starttime() {
  
  ::Property::ScalarPropertyValue* temp = _impl_.starttime_;
  _impl_.starttime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::ScalarPropertyValue* ScalarPropertyPlayback::unsafe_arena_release_starttime() {
  // @@protoc_insertion_point(field_release:Property.ScalarPropertyPlayback.startTime)
  
  ::Property::ScalarPropertyValue* temp = _impl_.starttime_;
  _impl_.starttime_ = nullptr;
  return temp;
}
inline ::Property::ScalarPropertyValue* ScalarPropertyPlayback::_internal_mutable_starttime() {
  
  if (_impl_.starttime_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::ScalarPropertyValue>(GetArenaForAllocation());
    _impl_.starttime_ = p;
  }
  return _impl_.starttime_;
}
inline ::Property::ScalarPropertyValue* ScalarPropertyPlayback::mutable_starttime() {
  ::Property::ScalarPropertyValue* _msg = _internal_mutable_starttime();
  // @@protoc_insertion_point(field_mutable:Property.ScalarPropertyPlayback.startTime)
  return _msg;
}
inline void ScalarPropertyPlayback::set_allocated_starttime(::Property::ScalarPropertyValue* starttime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.starttime_;
  }
  if (starttime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(starttime);
    if (message_arena != submessage_arena) {
      starttime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, starttime, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.starttime_ = starttime;
  // @@protoc_insertion_point(field_set_allocated:Property.ScalarPropertyPlayback.startTime)
}

// .Property.BooleanPropertyValue playing = 3;
inline bool ScalarPropertyPlayback::_internal_has_playing() const {
  return this != internal_default_instance() && _impl_.playing_ != nullptr;
}
inline bool ScalarPropertyPlayback::has_playing() const {
  return _internal_has_playing();
}
inline void ScalarPropertyPlayback::clear_playing() {
  if (GetArenaForAllocation() == nullptr && _impl_.playing_ != nullptr) {
    delete _impl_.playing_;
  }
  _impl_.playing_ = nullptr;
}
inline const ::Property::BooleanPropertyValue& ScalarPropertyPlayback::_internal_playing() const {
  const ::Property::BooleanPropertyValue* p = _impl_.playing_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::BooleanPropertyValue&>(
      ::Property::_BooleanPropertyValue_default_instance_);
}
inline const ::Property::BooleanPropertyValue& ScalarPropertyPlayback::playing() const {
  // @@protoc_insertion_point(field_get:Property.ScalarPropertyPlayback.playing)
  return _internal_playing();
}
inline void ScalarPropertyPlayback::unsafe_arena_set_allocated_playing(
    ::Property::BooleanPropertyValue* playing) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playing_);
  }
  _impl_.playing_ = playing;
  if (playing) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.ScalarPropertyPlayback.playing)
}
inline ::Property::BooleanPropertyValue* ScalarPropertyPlayback::release_playing() {
  
  ::Property::BooleanPropertyValue* temp = _impl_.playing_;
  _impl_.playing_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::BooleanPropertyValue* ScalarPropertyPlayback::unsafe_arena_release_playing() {
  // @@protoc_insertion_point(field_release:Property.ScalarPropertyPlayback.playing)
  
  ::Property::BooleanPropertyValue* temp = _impl_.playing_;
  _impl_.playing_ = nullptr;
  return temp;
}
inline ::Property::BooleanPropertyValue* ScalarPropertyPlayback::_internal_mutable_playing() {
  
  if (_impl_.playing_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::BooleanPropertyValue>(GetArenaForAllocation());
    _impl_.playing_ = p;
  }
  return _impl_.playing_;
}
inline ::Property::BooleanPropertyValue* ScalarPropertyPlayback::mutable_playing() {
  ::Property::BooleanPropertyValue* _msg = _internal_mutable_playing();
  // @@protoc_insertion_point(field_mutable:Property.ScalarPropertyPlayback.playing)
  return _msg;
}
inline void ScalarPropertyPlayback::set_allocated_playing(::Property::BooleanPropertyValue* playing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.playing_;
  }
  if (playing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(playing);
    if (message_arena != submessage_arena) {
      playing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playing, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.playing_ = playing;
  // @@protoc_insertion_point(field_set_allocated:Property.ScalarPropertyPlayback.playing)
}

// float speedWhilePlaying = 4;
inline void ScalarPropertyPlayback::clear_speedwhileplaying() {
  _impl_.speedwhileplaying_ = 0;
}
inline float ScalarPropertyPlayback::_internal_speedwhileplaying() const {
  return _impl_.speedwhileplaying_;
}
inline float ScalarPropertyPlayback::speedwhileplaying() const {
  // @@protoc_insertion_point(field_get:Property.ScalarPropertyPlayback.speedWhilePlaying)
  return _internal_speedwhileplaying();
}
inline void ScalarPropertyPlayback::_internal_set_speedwhileplaying(float value) {
  
  _impl_.speedwhileplaying_ = value;
}
inline void ScalarPropertyPlayback::set_speedwhileplaying(float value) {
  _internal_set_speedwhileplaying(value);
  // @@protoc_insertion_point(field_set:Property.ScalarPropertyPlayback.speedWhilePlaying)
}

// -------------------------------------------------------------------

// ScalarPropertyKeyframed_ScalarKeyframe

// float t = 1;
inline void ScalarPropertyKeyframed_ScalarKeyframe::clear_t() {
  _impl_.t_ = 0;
}
inline float ScalarPropertyKeyframed_ScalarKeyframe::_internal_t() const {
  return _impl_.t_;
}
inline float ScalarPropertyKeyframed_ScalarKeyframe::t() const {
  // @@protoc_insertion_point(field_get:Property.ScalarPropertyKeyframed.ScalarKeyframe.t)
  return _internal_t();
}
inline void ScalarPropertyKeyframed_ScalarKeyframe::_internal_set_t(float value) {
  
  _impl_.t_ = value;
}
inline void ScalarPropertyKeyframed_ScalarKeyframe::set_t(float value) {
  _internal_set_t(value);
  // @@protoc_insertion_point(field_set:Property.ScalarPropertyKeyframed.ScalarKeyframe.t)
}

// .Property.ScalarPropertyValue val = 2;
inline bool ScalarPropertyKeyframed_ScalarKeyframe::_internal_has_val() const {
  return this != internal_default_instance() && _impl_.val_ != nullptr;
}
inline bool ScalarPropertyKeyframed_ScalarKeyframe::has_val() const {
  return _internal_has_val();
}
inline void ScalarPropertyKeyframed_ScalarKeyframe::clear_val() {
  if (GetArenaForAllocation() == nullptr && _impl_.val_ != nullptr) {
    delete _impl_.val_;
  }
  _impl_.val_ = nullptr;
}
inline const ::Property::ScalarPropertyValue& ScalarPropertyKeyframed_ScalarKeyframe::_internal_val() const {
  const ::Property::ScalarPropertyValue* p = _impl_.val_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::ScalarPropertyValue&>(
      ::Property::_ScalarPropertyValue_default_instance_);
}
inline const ::Property::ScalarPropertyValue& ScalarPropertyKeyframed_ScalarKeyframe::val() const {
  // @@protoc_insertion_point(field_get:Property.ScalarPropertyKeyframed.ScalarKeyframe.val)
  return _internal_val();
}
inline void ScalarPropertyKeyframed_ScalarKeyframe::unsafe_arena_set_allocated_val(
    ::Property::ScalarPropertyValue* val) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.val_);
  }
  _impl_.val_ = val;
  if (val) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.ScalarPropertyKeyframed.ScalarKeyframe.val)
}
inline ::Property::ScalarPropertyValue* ScalarPropertyKeyframed_ScalarKeyframe::release_val() {
  
  ::Property::ScalarPropertyValue* temp = _impl_.val_;
  _impl_.val_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::ScalarPropertyValue* ScalarPropertyKeyframed_ScalarKeyframe::unsafe_arena_release_val() {
  // @@protoc_insertion_point(field_release:Property.ScalarPropertyKeyframed.ScalarKeyframe.val)
  
  ::Property::ScalarPropertyValue* temp = _impl_.val_;
  _impl_.val_ = nullptr;
  return temp;
}
inline ::Property::ScalarPropertyValue* ScalarPropertyKeyframed_ScalarKeyframe::_internal_mutable_val() {
  
  if (_impl_.val_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::ScalarPropertyValue>(GetArenaForAllocation());
    _impl_.val_ = p;
  }
  return _impl_.val_;
}
inline ::Property::ScalarPropertyValue* ScalarPropertyKeyframed_ScalarKeyframe::mutable_val() {
  ::Property::ScalarPropertyValue* _msg = _internal_mutable_val();
  // @@protoc_insertion_point(field_mutable:Property.ScalarPropertyKeyframed.ScalarKeyframe.val)
  return _msg;
}
inline void ScalarPropertyKeyframed_ScalarKeyframe::set_allocated_val(::Property::ScalarPropertyValue* val) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.val_;
  }
  if (val) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(val);
    if (message_arena != submessage_arena) {
      val = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, val, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.val_ = val;
  // @@protoc_insertion_point(field_set_allocated:Property.ScalarPropertyKeyframed.ScalarKeyframe.val)
}

// optional float tangentIn = 3;
inline bool ScalarPropertyKeyframed_ScalarKeyframe::_internal_has_tangentin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ScalarPropertyKeyframed_ScalarKeyframe::has_tangentin() const {
  return _internal_has_tangentin();
}
inline void ScalarPropertyKeyframed_ScalarKeyframe::clear_tangentin() {
  _impl_.tangentin_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float ScalarPropertyKeyframed_ScalarKeyframe::_internal_tangentin() const {
  return _impl_.tangentin_;
}
inline float ScalarPropertyKeyframed_ScalarKeyframe::tangentin() const {
  // @@protoc_insertion_point(field_get:Property.ScalarPropertyKeyframed.ScalarKeyframe.tangentIn)
  return _internal_tangentin();
}
inline void ScalarPropertyKeyframed_ScalarKeyframe::_internal_set_tangentin(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.tangentin_ = value;
}
inline void ScalarPropertyKeyframed_ScalarKeyframe::set_tangentin(float value) {
  _internal_set_tangentin(value);
  // @@protoc_insertion_point(field_set:Property.ScalarPropertyKeyframed.ScalarKeyframe.tangentIn)
}

// optional float tangentOut = 4;
inline bool ScalarPropertyKeyframed_ScalarKeyframe::_internal_has_tangentout() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ScalarPropertyKeyframed_ScalarKeyframe::has_tangentout() const {
  return _internal_has_tangentout();
}
inline void ScalarPropertyKeyframed_ScalarKeyframe::clear_tangentout() {
  _impl_.tangentout_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float ScalarPropertyKeyframed_ScalarKeyframe::_internal_tangentout() const {
  return _impl_.tangentout_;
}
inline float ScalarPropertyKeyframed_ScalarKeyframe::tangentout() const {
  // @@protoc_insertion_point(field_get:Property.ScalarPropertyKeyframed.ScalarKeyframe.tangentOut)
  return _internal_tangentout();
}
inline void ScalarPropertyKeyframed_ScalarKeyframe::_internal_set_tangentout(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.tangentout_ = value;
}
inline void ScalarPropertyKeyframed_ScalarKeyframe::set_tangentout(float value) {
  _internal_set_tangentout(value);
  // @@protoc_insertion_point(field_set:Property.ScalarPropertyKeyframed.ScalarKeyframe.tangentOut)
}

// -------------------------------------------------------------------

// ScalarPropertyKeyframed

// optional .Property.ScalarPropertyValue tSrc = 8;
inline bool ScalarPropertyKeyframed::_internal_has_tsrc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tsrc_ != nullptr);
  return value;
}
inline bool ScalarPropertyKeyframed::has_tsrc() const {
  return _internal_has_tsrc();
}
inline void ScalarPropertyKeyframed::clear_tsrc() {
  if (_impl_.tsrc_ != nullptr) _impl_.tsrc_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::Property::ScalarPropertyValue& ScalarPropertyKeyframed::_internal_tsrc() const {
  const ::Property::ScalarPropertyValue* p = _impl_.tsrc_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::ScalarPropertyValue&>(
      ::Property::_ScalarPropertyValue_default_instance_);
}
inline const ::Property::ScalarPropertyValue& ScalarPropertyKeyframed::tsrc() const {
  // @@protoc_insertion_point(field_get:Property.ScalarPropertyKeyframed.tSrc)
  return _internal_tsrc();
}
inline void ScalarPropertyKeyframed::unsafe_arena_set_allocated_tsrc(
    ::Property::ScalarPropertyValue* tsrc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tsrc_);
  }
  _impl_.tsrc_ = tsrc;
  if (tsrc) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.ScalarPropertyKeyframed.tSrc)
}
inline ::Property::ScalarPropertyValue* ScalarPropertyKeyframed::release_tsrc() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Property::ScalarPropertyValue* temp = _impl_.tsrc_;
  _impl_.tsrc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::ScalarPropertyValue* ScalarPropertyKeyframed::unsafe_arena_release_tsrc() {
  // @@protoc_insertion_point(field_release:Property.ScalarPropertyKeyframed.tSrc)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Property::ScalarPropertyValue* temp = _impl_.tsrc_;
  _impl_.tsrc_ = nullptr;
  return temp;
}
inline ::Property::ScalarPropertyValue* ScalarPropertyKeyframed::_internal_mutable_tsrc() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.tsrc_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::ScalarPropertyValue>(GetArenaForAllocation());
    _impl_.tsrc_ = p;
  }
  return _impl_.tsrc_;
}
inline ::Property::ScalarPropertyValue* ScalarPropertyKeyframed::mutable_tsrc() {
  ::Property::ScalarPropertyValue* _msg = _internal_mutable_tsrc();
  // @@protoc_insertion_point(field_mutable:Property.ScalarPropertyKeyframed.tSrc)
  return _msg;
}
inline void ScalarPropertyKeyframed::set_allocated_tsrc(::Property::ScalarPropertyValue* tsrc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.tsrc_;
  }
  if (tsrc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tsrc);
    if (message_arena != submessage_arena) {
      tsrc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tsrc, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.tsrc_ = tsrc;
  // @@protoc_insertion_point(field_set_allocated:Property.ScalarPropertyKeyframed.tSrc)
}

// repeated .Property.ScalarPropertyKeyframed.ScalarKeyframe keys = 10;
inline int ScalarPropertyKeyframed::_internal_keys_size() const {
  return _impl_.keys_.size();
}
inline int ScalarPropertyKeyframed::keys_size() const {
  return _internal_keys_size();
}
inline void ScalarPropertyKeyframed::clear_keys() {
  _impl_.keys_.Clear();
}
inline ::Property::ScalarPropertyKeyframed_ScalarKeyframe* ScalarPropertyKeyframed::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:Property.ScalarPropertyKeyframed.keys)
  return _impl_.keys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Property::ScalarPropertyKeyframed_ScalarKeyframe >*
ScalarPropertyKeyframed::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:Property.ScalarPropertyKeyframed.keys)
  return &_impl_.keys_;
}
inline const ::Property::ScalarPropertyKeyframed_ScalarKeyframe& ScalarPropertyKeyframed::_internal_keys(int index) const {
  return _impl_.keys_.Get(index);
}
inline const ::Property::ScalarPropertyKeyframed_ScalarKeyframe& ScalarPropertyKeyframed::keys(int index) const {
  // @@protoc_insertion_point(field_get:Property.ScalarPropertyKeyframed.keys)
  return _internal_keys(index);
}
inline ::Property::ScalarPropertyKeyframed_ScalarKeyframe* ScalarPropertyKeyframed::_internal_add_keys() {
  return _impl_.keys_.Add();
}
inline ::Property::ScalarPropertyKeyframed_ScalarKeyframe* ScalarPropertyKeyframed::add_keys() {
  ::Property::ScalarPropertyKeyframed_ScalarKeyframe* _add = _internal_add_keys();
  // @@protoc_insertion_point(field_add:Property.ScalarPropertyKeyframed.keys)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Property::ScalarPropertyKeyframed_ScalarKeyframe >&
ScalarPropertyKeyframed::keys() const {
  // @@protoc_insertion_point(field_list:Property.ScalarPropertyKeyframed.keys)
  return _impl_.keys_;
}

// .Property.KeyframeLoopingEnum looping = 11;
inline void ScalarPropertyKeyframed::clear_looping() {
  _impl_.looping_ = 0;
}
inline ::Property::KeyframeLoopingEnum ScalarPropertyKeyframed::_internal_looping() const {
  return static_cast< ::Property::KeyframeLoopingEnum >(_impl_.looping_);
}
inline ::Property::KeyframeLoopingEnum ScalarPropertyKeyframed::looping() const {
  // @@protoc_insertion_point(field_get:Property.ScalarPropertyKeyframed.looping)
  return _internal_looping();
}
inline void ScalarPropertyKeyframed::_internal_set_looping(::Property::KeyframeLoopingEnum value) {
  
  _impl_.looping_ = value;
}
inline void ScalarPropertyKeyframed::set_looping(::Property::KeyframeLoopingEnum value) {
  _internal_set_looping(value);
  // @@protoc_insertion_point(field_set:Property.ScalarPropertyKeyframed.looping)
}

// .Property.TangentsAutocomputeMethodEnum tangentGen = 12;
inline void ScalarPropertyKeyframed::clear_tangentgen() {
  _impl_.tangentgen_ = 0;
}
inline ::Property::TangentsAutocomputeMethodEnum ScalarPropertyKeyframed::_internal_tangentgen() const {
  return static_cast< ::Property::TangentsAutocomputeMethodEnum >(_impl_.tangentgen_);
}
inline ::Property::TangentsAutocomputeMethodEnum ScalarPropertyKeyframed::tangentgen() const {
  // @@protoc_insertion_point(field_get:Property.ScalarPropertyKeyframed.tangentGen)
  return _internal_tangentgen();
}
inline void ScalarPropertyKeyframed::_internal_set_tangentgen(::Property::TangentsAutocomputeMethodEnum value) {
  
  _impl_.tangentgen_ = value;
}
inline void ScalarPropertyKeyframed::set_tangentgen(::Property::TangentsAutocomputeMethodEnum value) {
  _internal_set_tangentgen(value);
  // @@protoc_insertion_point(field_set:Property.ScalarPropertyKeyframed.tangentGen)
}

// -------------------------------------------------------------------

// ScalarPropertyApproach

// .Property.ScalarPropertyValue t = 1;
inline bool ScalarPropertyApproach::_internal_has_t() const {
  return this != internal_default_instance() && _impl_.t_ != nullptr;
}
inline bool ScalarPropertyApproach::has_t() const {
  return _internal_has_t();
}
inline void ScalarPropertyApproach::clear_t() {
  if (GetArenaForAllocation() == nullptr && _impl_.t_ != nullptr) {
    delete _impl_.t_;
  }
  _impl_.t_ = nullptr;
}
inline const ::Property::ScalarPropertyValue& ScalarPropertyApproach::_internal_t() const {
  const ::Property::ScalarPropertyValue* p = _impl_.t_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::ScalarPropertyValue&>(
      ::Property::_ScalarPropertyValue_default_instance_);
}
inline const ::Property::ScalarPropertyValue& ScalarPropertyApproach::t() const {
  // @@protoc_insertion_point(field_get:Property.ScalarPropertyApproach.t)
  return _internal_t();
}
inline void ScalarPropertyApproach::unsafe_arena_set_allocated_t(
    ::Property::ScalarPropertyValue* t) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.t_);
  }
  _impl_.t_ = t;
  if (t) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.ScalarPropertyApproach.t)
}
inline ::Property::ScalarPropertyValue* ScalarPropertyApproach::release_t() {
  
  ::Property::ScalarPropertyValue* temp = _impl_.t_;
  _impl_.t_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::ScalarPropertyValue* ScalarPropertyApproach::unsafe_arena_release_t() {
  // @@protoc_insertion_point(field_release:Property.ScalarPropertyApproach.t)
  
  ::Property::ScalarPropertyValue* temp = _impl_.t_;
  _impl_.t_ = nullptr;
  return temp;
}
inline ::Property::ScalarPropertyValue* ScalarPropertyApproach::_internal_mutable_t() {
  
  if (_impl_.t_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::ScalarPropertyValue>(GetArenaForAllocation());
    _impl_.t_ = p;
  }
  return _impl_.t_;
}
inline ::Property::ScalarPropertyValue* ScalarPropertyApproach::mutable_t() {
  ::Property::ScalarPropertyValue* _msg = _internal_mutable_t();
  // @@protoc_insertion_point(field_mutable:Property.ScalarPropertyApproach.t)
  return _msg;
}
inline void ScalarPropertyApproach::set_allocated_t(::Property::ScalarPropertyValue* t) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.t_;
  }
  if (t) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(t);
    if (message_arena != submessage_arena) {
      t = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, t, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.t_ = t;
  // @@protoc_insertion_point(field_set_allocated:Property.ScalarPropertyApproach.t)
}

// .Property.ScalarPropertyValue to = 2;
inline bool ScalarPropertyApproach::_internal_has_to() const {
  return this != internal_default_instance() && _impl_.to_ != nullptr;
}
inline bool ScalarPropertyApproach::has_to() const {
  return _internal_has_to();
}
inline void ScalarPropertyApproach::clear_to() {
  if (GetArenaForAllocation() == nullptr && _impl_.to_ != nullptr) {
    delete _impl_.to_;
  }
  _impl_.to_ = nullptr;
}
inline const ::Property::ScalarPropertyValue& ScalarPropertyApproach::_internal_to() const {
  const ::Property::ScalarPropertyValue* p = _impl_.to_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::ScalarPropertyValue&>(
      ::Property::_ScalarPropertyValue_default_instance_);
}
inline const ::Property::ScalarPropertyValue& ScalarPropertyApproach::to() const {
  // @@protoc_insertion_point(field_get:Property.ScalarPropertyApproach.to)
  return _internal_to();
}
inline void ScalarPropertyApproach::unsafe_arena_set_allocated_to(
    ::Property::ScalarPropertyValue* to) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.to_);
  }
  _impl_.to_ = to;
  if (to) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.ScalarPropertyApproach.to)
}
inline ::Property::ScalarPropertyValue* ScalarPropertyApproach::release_to() {
  
  ::Property::ScalarPropertyValue* temp = _impl_.to_;
  _impl_.to_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::ScalarPropertyValue* ScalarPropertyApproach::unsafe_arena_release_to() {
  // @@protoc_insertion_point(field_release:Property.ScalarPropertyApproach.to)
  
  ::Property::ScalarPropertyValue* temp = _impl_.to_;
  _impl_.to_ = nullptr;
  return temp;
}
inline ::Property::ScalarPropertyValue* ScalarPropertyApproach::_internal_mutable_to() {
  
  if (_impl_.to_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::ScalarPropertyValue>(GetArenaForAllocation());
    _impl_.to_ = p;
  }
  return _impl_.to_;
}
inline ::Property::ScalarPropertyValue* ScalarPropertyApproach::mutable_to() {
  ::Property::ScalarPropertyValue* _msg = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:Property.ScalarPropertyApproach.to)
  return _msg;
}
inline void ScalarPropertyApproach::set_allocated_to(::Property::ScalarPropertyValue* to) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.to_;
  }
  if (to) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(to);
    if (message_arena != submessage_arena) {
      to = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, to, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.to_ = to;
  // @@protoc_insertion_point(field_set_allocated:Property.ScalarPropertyApproach.to)
}

// .Property.ScalarPropertyValue timeToHalf = 3;
inline bool ScalarPropertyApproach::_internal_has_timetohalf() const {
  return this != internal_default_instance() && _impl_.timetohalf_ != nullptr;
}
inline bool ScalarPropertyApproach::has_timetohalf() const {
  return _internal_has_timetohalf();
}
inline void ScalarPropertyApproach::clear_timetohalf() {
  if (GetArenaForAllocation() == nullptr && _impl_.timetohalf_ != nullptr) {
    delete _impl_.timetohalf_;
  }
  _impl_.timetohalf_ = nullptr;
}
inline const ::Property::ScalarPropertyValue& ScalarPropertyApproach::_internal_timetohalf() const {
  const ::Property::ScalarPropertyValue* p = _impl_.timetohalf_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::ScalarPropertyValue&>(
      ::Property::_ScalarPropertyValue_default_instance_);
}
inline const ::Property::ScalarPropertyValue& ScalarPropertyApproach::timetohalf() const {
  // @@protoc_insertion_point(field_get:Property.ScalarPropertyApproach.timeToHalf)
  return _internal_timetohalf();
}
inline void ScalarPropertyApproach::unsafe_arena_set_allocated_timetohalf(
    ::Property::ScalarPropertyValue* timetohalf) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timetohalf_);
  }
  _impl_.timetohalf_ = timetohalf;
  if (timetohalf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.ScalarPropertyApproach.timeToHalf)
}
inline ::Property::ScalarPropertyValue* ScalarPropertyApproach::release_timetohalf() {
  
  ::Property::ScalarPropertyValue* temp = _impl_.timetohalf_;
  _impl_.timetohalf_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::ScalarPropertyValue* ScalarPropertyApproach::unsafe_arena_release_timetohalf() {
  // @@protoc_insertion_point(field_release:Property.ScalarPropertyApproach.timeToHalf)
  
  ::Property::ScalarPropertyValue* temp = _impl_.timetohalf_;
  _impl_.timetohalf_ = nullptr;
  return temp;
}
inline ::Property::ScalarPropertyValue* ScalarPropertyApproach::_internal_mutable_timetohalf() {
  
  if (_impl_.timetohalf_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::ScalarPropertyValue>(GetArenaForAllocation());
    _impl_.timetohalf_ = p;
  }
  return _impl_.timetohalf_;
}
inline ::Property::ScalarPropertyValue* ScalarPropertyApproach::mutable_timetohalf() {
  ::Property::ScalarPropertyValue* _msg = _internal_mutable_timetohalf();
  // @@protoc_insertion_point(field_mutable:Property.ScalarPropertyApproach.timeToHalf)
  return _msg;
}
inline void ScalarPropertyApproach::set_allocated_timetohalf(::Property::ScalarPropertyValue* timetohalf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.timetohalf_;
  }
  if (timetohalf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(timetohalf);
    if (message_arena != submessage_arena) {
      timetohalf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timetohalf, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.timetohalf_ = timetohalf;
  // @@protoc_insertion_point(field_set_allocated:Property.ScalarPropertyApproach.timeToHalf)
}

// .Property.ScalarPropertyValue start = 4;
inline bool ScalarPropertyApproach::_internal_has_start() const {
  return this != internal_default_instance() && _impl_.start_ != nullptr;
}
inline bool ScalarPropertyApproach::has_start() const {
  return _internal_has_start();
}
inline void ScalarPropertyApproach::clear_start() {
  if (GetArenaForAllocation() == nullptr && _impl_.start_ != nullptr) {
    delete _impl_.start_;
  }
  _impl_.start_ = nullptr;
}
inline const ::Property::ScalarPropertyValue& ScalarPropertyApproach::_internal_start() const {
  const ::Property::ScalarPropertyValue* p = _impl_.start_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::ScalarPropertyValue&>(
      ::Property::_ScalarPropertyValue_default_instance_);
}
inline const ::Property::ScalarPropertyValue& ScalarPropertyApproach::start() const {
  // @@protoc_insertion_point(field_get:Property.ScalarPropertyApproach.start)
  return _internal_start();
}
inline void ScalarPropertyApproach::unsafe_arena_set_allocated_start(
    ::Property::ScalarPropertyValue* start) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.start_);
  }
  _impl_.start_ = start;
  if (start) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.ScalarPropertyApproach.start)
}
inline ::Property::ScalarPropertyValue* ScalarPropertyApproach::release_start() {
  
  ::Property::ScalarPropertyValue* temp = _impl_.start_;
  _impl_.start_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::ScalarPropertyValue* ScalarPropertyApproach::unsafe_arena_release_start() {
  // @@protoc_insertion_point(field_release:Property.ScalarPropertyApproach.start)
  
  ::Property::ScalarPropertyValue* temp = _impl_.start_;
  _impl_.start_ = nullptr;
  return temp;
}
inline ::Property::ScalarPropertyValue* ScalarPropertyApproach::_internal_mutable_start() {
  
  if (_impl_.start_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::ScalarPropertyValue>(GetArenaForAllocation());
    _impl_.start_ = p;
  }
  return _impl_.start_;
}
inline ::Property::ScalarPropertyValue* ScalarPropertyApproach::mutable_start() {
  ::Property::ScalarPropertyValue* _msg = _internal_mutable_start();
  // @@protoc_insertion_point(field_mutable:Property.ScalarPropertyApproach.start)
  return _msg;
}
inline void ScalarPropertyApproach::set_allocated_start(::Property::ScalarPropertyValue* start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.start_;
  }
  if (start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(start);
    if (message_arena != submessage_arena) {
      start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.start_ = start;
  // @@protoc_insertion_point(field_set_allocated:Property.ScalarPropertyApproach.start)
}

// -------------------------------------------------------------------

// ScalarPropertyDeclaration

// float default = 2;
inline void ScalarPropertyDeclaration::clear_default_() {
  _impl_.default__ = 0;
}
inline float ScalarPropertyDeclaration::_internal_default_() const {
  return _impl_.default__;
}
inline float ScalarPropertyDeclaration::default_() const {
  // @@protoc_insertion_point(field_get:Property.ScalarPropertyDeclaration.default)
  return _internal_default_();
}
inline void ScalarPropertyDeclaration::_internal_set_default_(float value) {
  
  _impl_.default__ = value;
}
inline void ScalarPropertyDeclaration::set_default_(float value) {
  _internal_set_default_(value);
  // @@protoc_insertion_point(field_set:Property.ScalarPropertyDeclaration.default)
}

// .Property.ScalarPropertyMetadata meta = 1;
inline bool ScalarPropertyDeclaration::_internal_has_meta() const {
  return this != internal_default_instance() && _impl_.meta_ != nullptr;
}
inline bool ScalarPropertyDeclaration::has_meta() const {
  return _internal_has_meta();
}
inline void ScalarPropertyDeclaration::clear_meta() {
  if (GetArenaForAllocation() == nullptr && _impl_.meta_ != nullptr) {
    delete _impl_.meta_;
  }
  _impl_.meta_ = nullptr;
}
inline const ::Property::ScalarPropertyMetadata& ScalarPropertyDeclaration::_internal_meta() const {
  const ::Property::ScalarPropertyMetadata* p = _impl_.meta_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::ScalarPropertyMetadata&>(
      ::Property::_ScalarPropertyMetadata_default_instance_);
}
inline const ::Property::ScalarPropertyMetadata& ScalarPropertyDeclaration::meta() const {
  // @@protoc_insertion_point(field_get:Property.ScalarPropertyDeclaration.meta)
  return _internal_meta();
}
inline void ScalarPropertyDeclaration::unsafe_arena_set_allocated_meta(
    ::Property::ScalarPropertyMetadata* meta) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.meta_);
  }
  _impl_.meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.ScalarPropertyDeclaration.meta)
}
inline ::Property::ScalarPropertyMetadata* ScalarPropertyDeclaration::release_meta() {
  
  ::Property::ScalarPropertyMetadata* temp = _impl_.meta_;
  _impl_.meta_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::ScalarPropertyMetadata* ScalarPropertyDeclaration::unsafe_arena_release_meta() {
  // @@protoc_insertion_point(field_release:Property.ScalarPropertyDeclaration.meta)
  
  ::Property::ScalarPropertyMetadata* temp = _impl_.meta_;
  _impl_.meta_ = nullptr;
  return temp;
}
inline ::Property::ScalarPropertyMetadata* ScalarPropertyDeclaration::_internal_mutable_meta() {
  
  if (_impl_.meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::ScalarPropertyMetadata>(GetArenaForAllocation());
    _impl_.meta_ = p;
  }
  return _impl_.meta_;
}
inline ::Property::ScalarPropertyMetadata* ScalarPropertyDeclaration::mutable_meta() {
  ::Property::ScalarPropertyMetadata* _msg = _internal_mutable_meta();
  // @@protoc_insertion_point(field_mutable:Property.ScalarPropertyDeclaration.meta)
  return _msg;
}
inline void ScalarPropertyDeclaration::set_allocated_meta(::Property::ScalarPropertyMetadata* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.meta_;
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(meta);
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:Property.ScalarPropertyDeclaration.meta)
}

// -------------------------------------------------------------------

// ScalarEditingMetadata

// optional .Property.ScalarEditingMetadata.ScalarInterpretationEnum scalarType = 1;
inline bool ScalarEditingMetadata::_internal_has_scalartype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ScalarEditingMetadata::has_scalartype() const {
  return _internal_has_scalartype();
}
inline void ScalarEditingMetadata::clear_scalartype() {
  _impl_.scalartype_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::Property::ScalarEditingMetadata_ScalarInterpretationEnum ScalarEditingMetadata::_internal_scalartype() const {
  return static_cast< ::Property::ScalarEditingMetadata_ScalarInterpretationEnum >(_impl_.scalartype_);
}
inline ::Property::ScalarEditingMetadata_ScalarInterpretationEnum ScalarEditingMetadata::scalartype() const {
  // @@protoc_insertion_point(field_get:Property.ScalarEditingMetadata.scalarType)
  return _internal_scalartype();
}
inline void ScalarEditingMetadata::_internal_set_scalartype(::Property::ScalarEditingMetadata_ScalarInterpretationEnum value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.scalartype_ = value;
}
inline void ScalarEditingMetadata::set_scalartype(::Property::ScalarEditingMetadata_ScalarInterpretationEnum value) {
  _internal_set_scalartype(value);
  // @@protoc_insertion_point(field_set:Property.ScalarEditingMetadata.scalarType)
}

// optional float uiIncrement = 2;
inline bool ScalarEditingMetadata::_internal_has_uiincrement() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ScalarEditingMetadata::has_uiincrement() const {
  return _internal_has_uiincrement();
}
inline void ScalarEditingMetadata::clear_uiincrement() {
  _impl_.uiincrement_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float ScalarEditingMetadata::_internal_uiincrement() const {
  return _impl_.uiincrement_;
}
inline float ScalarEditingMetadata::uiincrement() const {
  // @@protoc_insertion_point(field_get:Property.ScalarEditingMetadata.uiIncrement)
  return _internal_uiincrement();
}
inline void ScalarEditingMetadata::_internal_set_uiincrement(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.uiincrement_ = value;
}
inline void ScalarEditingMetadata::set_uiincrement(float value) {
  _internal_set_uiincrement(value);
  // @@protoc_insertion_point(field_set:Property.ScalarEditingMetadata.uiIncrement)
}

// optional float uiMinimum = 3;
inline bool ScalarEditingMetadata::_internal_has_uiminimum() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ScalarEditingMetadata::has_uiminimum() const {
  return _internal_has_uiminimum();
}
inline void ScalarEditingMetadata::clear_uiminimum() {
  _impl_.uiminimum_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float ScalarEditingMetadata::_internal_uiminimum() const {
  return _impl_.uiminimum_;
}
inline float ScalarEditingMetadata::uiminimum() const {
  // @@protoc_insertion_point(field_get:Property.ScalarEditingMetadata.uiMinimum)
  return _internal_uiminimum();
}
inline void ScalarEditingMetadata::_internal_set_uiminimum(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.uiminimum_ = value;
}
inline void ScalarEditingMetadata::set_uiminimum(float value) {
  _internal_set_uiminimum(value);
  // @@protoc_insertion_point(field_set:Property.ScalarEditingMetadata.uiMinimum)
}

// optional float uiMaximum = 4;
inline bool ScalarEditingMetadata::_internal_has_uimaximum() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ScalarEditingMetadata::has_uimaximum() const {
  return _internal_has_uimaximum();
}
inline void ScalarEditingMetadata::clear_uimaximum() {
  _impl_.uimaximum_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float ScalarEditingMetadata::_internal_uimaximum() const {
  return _impl_.uimaximum_;
}
inline float ScalarEditingMetadata::uimaximum() const {
  // @@protoc_insertion_point(field_get:Property.ScalarEditingMetadata.uiMaximum)
  return _internal_uimaximum();
}
inline void ScalarEditingMetadata::_internal_set_uimaximum(float value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.uimaximum_ = value;
}
inline void ScalarEditingMetadata::set_uimaximum(float value) {
  _internal_set_uimaximum(value);
  // @@protoc_insertion_point(field_set:Property.ScalarEditingMetadata.uiMaximum)
}

// optional string playbackLengthRef = 5;
inline bool ScalarEditingMetadata::_internal_has_playbacklengthref() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ScalarEditingMetadata::has_playbacklengthref() const {
  return _internal_has_playbacklengthref();
}
inline void ScalarEditingMetadata::clear_playbacklengthref() {
  _impl_.playbacklengthref_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ScalarEditingMetadata::playbacklengthref() const {
  // @@protoc_insertion_point(field_get:Property.ScalarEditingMetadata.playbackLengthRef)
  return _internal_playbacklengthref();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ScalarEditingMetadata::set_playbacklengthref(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.playbacklengthref_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Property.ScalarEditingMetadata.playbackLengthRef)
}
inline std::string* ScalarEditingMetadata::mutable_playbacklengthref() {
  std::string* _s = _internal_mutable_playbacklengthref();
  // @@protoc_insertion_point(field_mutable:Property.ScalarEditingMetadata.playbackLengthRef)
  return _s;
}
inline const std::string& ScalarEditingMetadata::_internal_playbacklengthref() const {
  return _impl_.playbacklengthref_.Get();
}
inline void ScalarEditingMetadata::_internal_set_playbacklengthref(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.playbacklengthref_.Set(value, GetArenaForAllocation());
}
inline std::string* ScalarEditingMetadata::_internal_mutable_playbacklengthref() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.playbacklengthref_.Mutable(GetArenaForAllocation());
}
inline std::string* ScalarEditingMetadata::release_playbacklengthref() {
  // @@protoc_insertion_point(field_release:Property.ScalarEditingMetadata.playbackLengthRef)
  if (!_internal_has_playbacklengthref()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.playbacklengthref_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.playbacklengthref_.IsDefault()) {
    _impl_.playbacklengthref_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ScalarEditingMetadata::set_allocated_playbacklengthref(std::string* playbacklengthref) {
  if (playbacklengthref != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.playbacklengthref_.SetAllocated(playbacklengthref, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.playbacklengthref_.IsDefault()) {
    _impl_.playbacklengthref_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Property.ScalarEditingMetadata.playbackLengthRef)
}

// -------------------------------------------------------------------

// ScalarGeneratorMetadata

// .Property.GeneratorMetadata base = 1;
inline bool ScalarGeneratorMetadata::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool ScalarGeneratorMetadata::has_base() const {
  return _internal_has_base();
}
inline void ScalarGeneratorMetadata::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
inline const ::Property::GeneratorMetadata& ScalarGeneratorMetadata::_internal_base() const {
  const ::Property::GeneratorMetadata* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::GeneratorMetadata&>(
      ::Property::_GeneratorMetadata_default_instance_);
}
inline const ::Property::GeneratorMetadata& ScalarGeneratorMetadata::base() const {
  // @@protoc_insertion_point(field_get:Property.ScalarGeneratorMetadata.base)
  return _internal_base();
}
inline void ScalarGeneratorMetadata::unsafe_arena_set_allocated_base(
    ::Property::GeneratorMetadata* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.ScalarGeneratorMetadata.base)
}
inline ::Property::GeneratorMetadata* ScalarGeneratorMetadata::release_base() {
  
  ::Property::GeneratorMetadata* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::GeneratorMetadata* ScalarGeneratorMetadata::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:Property.ScalarGeneratorMetadata.base)
  
  ::Property::GeneratorMetadata* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::Property::GeneratorMetadata* ScalarGeneratorMetadata::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::GeneratorMetadata>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::Property::GeneratorMetadata* ScalarGeneratorMetadata::mutable_base() {
  ::Property::GeneratorMetadata* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:Property.ScalarGeneratorMetadata.base)
  return _msg;
}
inline void ScalarGeneratorMetadata::set_allocated_base(::Property::GeneratorMetadata* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:Property.ScalarGeneratorMetadata.base)
}

// .Property.ScalarEditingMetadata edit = 2;
inline bool ScalarGeneratorMetadata::_internal_has_edit() const {
  return this != internal_default_instance() && _impl_.edit_ != nullptr;
}
inline bool ScalarGeneratorMetadata::has_edit() const {
  return _internal_has_edit();
}
inline void ScalarGeneratorMetadata::clear_edit() {
  if (GetArenaForAllocation() == nullptr && _impl_.edit_ != nullptr) {
    delete _impl_.edit_;
  }
  _impl_.edit_ = nullptr;
}
inline const ::Property::ScalarEditingMetadata& ScalarGeneratorMetadata::_internal_edit() const {
  const ::Property::ScalarEditingMetadata* p = _impl_.edit_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::ScalarEditingMetadata&>(
      ::Property::_ScalarEditingMetadata_default_instance_);
}
inline const ::Property::ScalarEditingMetadata& ScalarGeneratorMetadata::edit() const {
  // @@protoc_insertion_point(field_get:Property.ScalarGeneratorMetadata.edit)
  return _internal_edit();
}
inline void ScalarGeneratorMetadata::unsafe_arena_set_allocated_edit(
    ::Property::ScalarEditingMetadata* edit) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.edit_);
  }
  _impl_.edit_ = edit;
  if (edit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.ScalarGeneratorMetadata.edit)
}
inline ::Property::ScalarEditingMetadata* ScalarGeneratorMetadata::release_edit() {
  
  ::Property::ScalarEditingMetadata* temp = _impl_.edit_;
  _impl_.edit_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::ScalarEditingMetadata* ScalarGeneratorMetadata::unsafe_arena_release_edit() {
  // @@protoc_insertion_point(field_release:Property.ScalarGeneratorMetadata.edit)
  
  ::Property::ScalarEditingMetadata* temp = _impl_.edit_;
  _impl_.edit_ = nullptr;
  return temp;
}
inline ::Property::ScalarEditingMetadata* ScalarGeneratorMetadata::_internal_mutable_edit() {
  
  if (_impl_.edit_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::ScalarEditingMetadata>(GetArenaForAllocation());
    _impl_.edit_ = p;
  }
  return _impl_.edit_;
}
inline ::Property::ScalarEditingMetadata* ScalarGeneratorMetadata::mutable_edit() {
  ::Property::ScalarEditingMetadata* _msg = _internal_mutable_edit();
  // @@protoc_insertion_point(field_mutable:Property.ScalarGeneratorMetadata.edit)
  return _msg;
}
inline void ScalarGeneratorMetadata::set_allocated_edit(::Property::ScalarEditingMetadata* edit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.edit_;
  }
  if (edit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(edit);
    if (message_arena != submessage_arena) {
      edit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, edit, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.edit_ = edit;
  // @@protoc_insertion_point(field_set_allocated:Property.ScalarGeneratorMetadata.edit)
}

// -------------------------------------------------------------------

// ScalarPropertyMetadata

// .Property.PropertyMetadata base = 1;
inline bool ScalarPropertyMetadata::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool ScalarPropertyMetadata::has_base() const {
  return _internal_has_base();
}
inline void ScalarPropertyMetadata::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
inline const ::Property::PropertyMetadata& ScalarPropertyMetadata::_internal_base() const {
  const ::Property::PropertyMetadata* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::PropertyMetadata&>(
      ::Property::_PropertyMetadata_default_instance_);
}
inline const ::Property::PropertyMetadata& ScalarPropertyMetadata::base() const {
  // @@protoc_insertion_point(field_get:Property.ScalarPropertyMetadata.base)
  return _internal_base();
}
inline void ScalarPropertyMetadata::unsafe_arena_set_allocated_base(
    ::Property::PropertyMetadata* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.ScalarPropertyMetadata.base)
}
inline ::Property::PropertyMetadata* ScalarPropertyMetadata::release_base() {
  
  ::Property::PropertyMetadata* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::PropertyMetadata* ScalarPropertyMetadata::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:Property.ScalarPropertyMetadata.base)
  
  ::Property::PropertyMetadata* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::Property::PropertyMetadata* ScalarPropertyMetadata::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::PropertyMetadata>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::Property::PropertyMetadata* ScalarPropertyMetadata::mutable_base() {
  ::Property::PropertyMetadata* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:Property.ScalarPropertyMetadata.base)
  return _msg;
}
inline void ScalarPropertyMetadata::set_allocated_base(::Property::PropertyMetadata* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:Property.ScalarPropertyMetadata.base)
}

// .Property.ScalarEditingMetadata edit = 5;
inline bool ScalarPropertyMetadata::_internal_has_edit() const {
  return this != internal_default_instance() && _impl_.edit_ != nullptr;
}
inline bool ScalarPropertyMetadata::has_edit() const {
  return _internal_has_edit();
}
inline void ScalarPropertyMetadata::clear_edit() {
  if (GetArenaForAllocation() == nullptr && _impl_.edit_ != nullptr) {
    delete _impl_.edit_;
  }
  _impl_.edit_ = nullptr;
}
inline const ::Property::ScalarEditingMetadata& ScalarPropertyMetadata::_internal_edit() const {
  const ::Property::ScalarEditingMetadata* p = _impl_.edit_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::ScalarEditingMetadata&>(
      ::Property::_ScalarEditingMetadata_default_instance_);
}
inline const ::Property::ScalarEditingMetadata& ScalarPropertyMetadata::edit() const {
  // @@protoc_insertion_point(field_get:Property.ScalarPropertyMetadata.edit)
  return _internal_edit();
}
inline void ScalarPropertyMetadata::unsafe_arena_set_allocated_edit(
    ::Property::ScalarEditingMetadata* edit) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.edit_);
  }
  _impl_.edit_ = edit;
  if (edit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.ScalarPropertyMetadata.edit)
}
inline ::Property::ScalarEditingMetadata* ScalarPropertyMetadata::release_edit() {
  
  ::Property::ScalarEditingMetadata* temp = _impl_.edit_;
  _impl_.edit_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::ScalarEditingMetadata* ScalarPropertyMetadata::unsafe_arena_release_edit() {
  // @@protoc_insertion_point(field_release:Property.ScalarPropertyMetadata.edit)
  
  ::Property::ScalarEditingMetadata* temp = _impl_.edit_;
  _impl_.edit_ = nullptr;
  return temp;
}
inline ::Property::ScalarEditingMetadata* ScalarPropertyMetadata::_internal_mutable_edit() {
  
  if (_impl_.edit_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::ScalarEditingMetadata>(GetArenaForAllocation());
    _impl_.edit_ = p;
  }
  return _impl_.edit_;
}
inline ::Property::ScalarEditingMetadata* ScalarPropertyMetadata::mutable_edit() {
  ::Property::ScalarEditingMetadata* _msg = _internal_mutable_edit();
  // @@protoc_insertion_point(field_mutable:Property.ScalarPropertyMetadata.edit)
  return _msg;
}
inline void ScalarPropertyMetadata::set_allocated_edit(::Property::ScalarEditingMetadata* edit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.edit_;
  }
  if (edit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(edit);
    if (message_arena != submessage_arena) {
      edit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, edit, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.edit_ = edit;
  // @@protoc_insertion_point(field_set_allocated:Property.ScalarPropertyMetadata.edit)
}

// -------------------------------------------------------------------

// StringPropertyAssignment

// optional int32 priority = 2;
inline bool StringPropertyAssignment::_internal_has_priority() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StringPropertyAssignment::has_priority() const {
  return _internal_has_priority();
}
inline void StringPropertyAssignment::clear_priority() {
  _impl_.priority_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t StringPropertyAssignment::_internal_priority() const {
  return _impl_.priority_;
}
inline int32_t StringPropertyAssignment::priority() const {
  // @@protoc_insertion_point(field_get:Property.StringPropertyAssignment.priority)
  return _internal_priority();
}
inline void StringPropertyAssignment::_internal_set_priority(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.priority_ = value;
}
inline void StringPropertyAssignment::set_priority(int32_t value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:Property.StringPropertyAssignment.priority)
}

// .Property.StringPropertyValue value = 3;
inline bool StringPropertyAssignment::_internal_has_value() const {
  return this != internal_default_instance() && _impl_.value_ != nullptr;
}
inline bool StringPropertyAssignment::has_value() const {
  return _internal_has_value();
}
inline void StringPropertyAssignment::clear_value() {
  if (GetArenaForAllocation() == nullptr && _impl_.value_ != nullptr) {
    delete _impl_.value_;
  }
  _impl_.value_ = nullptr;
}
inline const ::Property::StringPropertyValue& StringPropertyAssignment::_internal_value() const {
  const ::Property::StringPropertyValue* p = _impl_.value_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::StringPropertyValue&>(
      ::Property::_StringPropertyValue_default_instance_);
}
inline const ::Property::StringPropertyValue& StringPropertyAssignment::value() const {
  // @@protoc_insertion_point(field_get:Property.StringPropertyAssignment.value)
  return _internal_value();
}
inline void StringPropertyAssignment::unsafe_arena_set_allocated_value(
    ::Property::StringPropertyValue* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_);
  }
  _impl_.value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.StringPropertyAssignment.value)
}
inline ::Property::StringPropertyValue* StringPropertyAssignment::release_value() {
  
  ::Property::StringPropertyValue* temp = _impl_.value_;
  _impl_.value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::StringPropertyValue* StringPropertyAssignment::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:Property.StringPropertyAssignment.value)
  
  ::Property::StringPropertyValue* temp = _impl_.value_;
  _impl_.value_ = nullptr;
  return temp;
}
inline ::Property::StringPropertyValue* StringPropertyAssignment::_internal_mutable_value() {
  
  if (_impl_.value_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::StringPropertyValue>(GetArenaForAllocation());
    _impl_.value_ = p;
  }
  return _impl_.value_;
}
inline ::Property::StringPropertyValue* StringPropertyAssignment::mutable_value() {
  ::Property::StringPropertyValue* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:Property.StringPropertyAssignment.value)
  return _msg;
}
inline void StringPropertyAssignment::set_allocated_value(::Property::StringPropertyValue* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.value_ = value;
  // @@protoc_insertion_point(field_set_allocated:Property.StringPropertyAssignment.value)
}

// string assignmentId = 4;
inline void StringPropertyAssignment::clear_assignmentid() {
  _impl_.assignmentid_.ClearToEmpty();
}
inline const std::string& StringPropertyAssignment::assignmentid() const {
  // @@protoc_insertion_point(field_get:Property.StringPropertyAssignment.assignmentId)
  return _internal_assignmentid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StringPropertyAssignment::set_assignmentid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.assignmentid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Property.StringPropertyAssignment.assignmentId)
}
inline std::string* StringPropertyAssignment::mutable_assignmentid() {
  std::string* _s = _internal_mutable_assignmentid();
  // @@protoc_insertion_point(field_mutable:Property.StringPropertyAssignment.assignmentId)
  return _s;
}
inline const std::string& StringPropertyAssignment::_internal_assignmentid() const {
  return _impl_.assignmentid_.Get();
}
inline void StringPropertyAssignment::_internal_set_assignmentid(const std::string& value) {
  
  _impl_.assignmentid_.Set(value, GetArenaForAllocation());
}
inline std::string* StringPropertyAssignment::_internal_mutable_assignmentid() {
  
  return _impl_.assignmentid_.Mutable(GetArenaForAllocation());
}
inline std::string* StringPropertyAssignment::release_assignmentid() {
  // @@protoc_insertion_point(field_release:Property.StringPropertyAssignment.assignmentId)
  return _impl_.assignmentid_.Release();
}
inline void StringPropertyAssignment::set_allocated_assignmentid(std::string* assignmentid) {
  if (assignmentid != nullptr) {
    
  } else {
    
  }
  _impl_.assignmentid_.SetAllocated(assignmentid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.assignmentid_.IsDefault()) {
    _impl_.assignmentid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Property.StringPropertyAssignment.assignmentId)
}

// -------------------------------------------------------------------

// StringPropertyValue

// string constant = 1;
inline bool StringPropertyValue::_internal_has_constant() const {
  return ValueType_case() == kConstant;
}
inline bool StringPropertyValue::has_constant() const {
  return _internal_has_constant();
}
inline void StringPropertyValue::set_has_constant() {
  _impl_._oneof_case_[0] = kConstant;
}
inline void StringPropertyValue::clear_constant() {
  if (_internal_has_constant()) {
    _impl_.ValueType_.constant_.Destroy();
    clear_has_ValueType();
  }
}
inline const std::string& StringPropertyValue::constant() const {
  // @@protoc_insertion_point(field_get:Property.StringPropertyValue.constant)
  return _internal_constant();
}
template <typename ArgT0, typename... ArgT>
inline void StringPropertyValue::set_constant(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_constant()) {
    clear_ValueType();
    set_has_constant();
    _impl_.ValueType_.constant_.InitDefault();
  }
  _impl_.ValueType_.constant_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Property.StringPropertyValue.constant)
}
inline std::string* StringPropertyValue::mutable_constant() {
  std::string* _s = _internal_mutable_constant();
  // @@protoc_insertion_point(field_mutable:Property.StringPropertyValue.constant)
  return _s;
}
inline const std::string& StringPropertyValue::_internal_constant() const {
  if (_internal_has_constant()) {
    return _impl_.ValueType_.constant_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void StringPropertyValue::_internal_set_constant(const std::string& value) {
  if (!_internal_has_constant()) {
    clear_ValueType();
    set_has_constant();
    _impl_.ValueType_.constant_.InitDefault();
  }
  _impl_.ValueType_.constant_.Set(value, GetArenaForAllocation());
}
inline std::string* StringPropertyValue::_internal_mutable_constant() {
  if (!_internal_has_constant()) {
    clear_ValueType();
    set_has_constant();
    _impl_.ValueType_.constant_.InitDefault();
  }
  return _impl_.ValueType_.constant_.Mutable(      GetArenaForAllocation());
}
inline std::string* StringPropertyValue::release_constant() {
  // @@protoc_insertion_point(field_release:Property.StringPropertyValue.constant)
  if (_internal_has_constant()) {
    clear_has_ValueType();
    return _impl_.ValueType_.constant_.Release();
  } else {
    return nullptr;
  }
}
inline void StringPropertyValue::set_allocated_constant(std::string* constant) {
  if (has_ValueType()) {
    clear_ValueType();
  }
  if (constant != nullptr) {
    set_has_constant();
    _impl_.ValueType_.constant_.InitAllocated(constant, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:Property.StringPropertyValue.constant)
}

// .Property.StringPropertyFormatted formatted = 2;
inline bool StringPropertyValue::_internal_has_formatted() const {
  return ValueType_case() == kFormatted;
}
inline bool StringPropertyValue::has_formatted() const {
  return _internal_has_formatted();
}
inline void StringPropertyValue::set_has_formatted() {
  _impl_._oneof_case_[0] = kFormatted;
}
inline void StringPropertyValue::clear_formatted() {
  if (_internal_has_formatted()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.ValueType_.formatted_;
    }
    clear_has_ValueType();
  }
}
inline ::Property::StringPropertyFormatted* StringPropertyValue::release_formatted() {
  // @@protoc_insertion_point(field_release:Property.StringPropertyValue.formatted)
  if (_internal_has_formatted()) {
    clear_has_ValueType();
    ::Property::StringPropertyFormatted* temp = _impl_.ValueType_.formatted_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.ValueType_.formatted_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::StringPropertyFormatted& StringPropertyValue::_internal_formatted() const {
  return _internal_has_formatted()
      ? *_impl_.ValueType_.formatted_
      : reinterpret_cast< ::Property::StringPropertyFormatted&>(::Property::_StringPropertyFormatted_default_instance_);
}
inline const ::Property::StringPropertyFormatted& StringPropertyValue::formatted() const {
  // @@protoc_insertion_point(field_get:Property.StringPropertyValue.formatted)
  return _internal_formatted();
}
inline ::Property::StringPropertyFormatted* StringPropertyValue::unsafe_arena_release_formatted() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.StringPropertyValue.formatted)
  if (_internal_has_formatted()) {
    clear_has_ValueType();
    ::Property::StringPropertyFormatted* temp = _impl_.ValueType_.formatted_;
    _impl_.ValueType_.formatted_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StringPropertyValue::unsafe_arena_set_allocated_formatted(::Property::StringPropertyFormatted* formatted) {
  clear_ValueType();
  if (formatted) {
    set_has_formatted();
    _impl_.ValueType_.formatted_ = formatted;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.StringPropertyValue.formatted)
}
inline ::Property::StringPropertyFormatted* StringPropertyValue::_internal_mutable_formatted() {
  if (!_internal_has_formatted()) {
    clear_ValueType();
    set_has_formatted();
    _impl_.ValueType_.formatted_ = CreateMaybeMessage< ::Property::StringPropertyFormatted >(GetArenaForAllocation());
  }
  return _impl_.ValueType_.formatted_;
}
inline ::Property::StringPropertyFormatted* StringPropertyValue::mutable_formatted() {
  ::Property::StringPropertyFormatted* _msg = _internal_mutable_formatted();
  // @@protoc_insertion_point(field_mutable:Property.StringPropertyValue.formatted)
  return _msg;
}

// .Property.PropertyIdentifier ref = 3;
inline bool StringPropertyValue::_internal_has_ref() const {
  return ValueType_case() == kRef;
}
inline bool StringPropertyValue::has_ref() const {
  return _internal_has_ref();
}
inline void StringPropertyValue::set_has_ref() {
  _impl_._oneof_case_[0] = kRef;
}
inline void StringPropertyValue::clear_ref() {
  if (_internal_has_ref()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.ValueType_.ref_;
    }
    clear_has_ValueType();
  }
}
inline ::Property::PropertyIdentifier* StringPropertyValue::release_ref() {
  // @@protoc_insertion_point(field_release:Property.StringPropertyValue.ref)
  if (_internal_has_ref()) {
    clear_has_ValueType();
    ::Property::PropertyIdentifier* temp = _impl_.ValueType_.ref_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.ValueType_.ref_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::PropertyIdentifier& StringPropertyValue::_internal_ref() const {
  return _internal_has_ref()
      ? *_impl_.ValueType_.ref_
      : reinterpret_cast< ::Property::PropertyIdentifier&>(::Property::_PropertyIdentifier_default_instance_);
}
inline const ::Property::PropertyIdentifier& StringPropertyValue::ref() const {
  // @@protoc_insertion_point(field_get:Property.StringPropertyValue.ref)
  return _internal_ref();
}
inline ::Property::PropertyIdentifier* StringPropertyValue::unsafe_arena_release_ref() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.StringPropertyValue.ref)
  if (_internal_has_ref()) {
    clear_has_ValueType();
    ::Property::PropertyIdentifier* temp = _impl_.ValueType_.ref_;
    _impl_.ValueType_.ref_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StringPropertyValue::unsafe_arena_set_allocated_ref(::Property::PropertyIdentifier* ref) {
  clear_ValueType();
  if (ref) {
    set_has_ref();
    _impl_.ValueType_.ref_ = ref;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.StringPropertyValue.ref)
}
inline ::Property::PropertyIdentifier* StringPropertyValue::_internal_mutable_ref() {
  if (!_internal_has_ref()) {
    clear_ValueType();
    set_has_ref();
    _impl_.ValueType_.ref_ = CreateMaybeMessage< ::Property::PropertyIdentifier >(GetArenaForAllocation());
  }
  return _impl_.ValueType_.ref_;
}
inline ::Property::PropertyIdentifier* StringPropertyValue::mutable_ref() {
  ::Property::PropertyIdentifier* _msg = _internal_mutable_ref();
  // @@protoc_insertion_point(field_mutable:Property.StringPropertyValue.ref)
  return _msg;
}

// string expr = 4;
inline bool StringPropertyValue::_internal_has_expr() const {
  return ValueType_case() == kExpr;
}
inline bool StringPropertyValue::has_expr() const {
  return _internal_has_expr();
}
inline void StringPropertyValue::set_has_expr() {
  _impl_._oneof_case_[0] = kExpr;
}
inline void StringPropertyValue::clear_expr() {
  if (_internal_has_expr()) {
    _impl_.ValueType_.expr_.Destroy();
    clear_has_ValueType();
  }
}
inline const std::string& StringPropertyValue::expr() const {
  // @@protoc_insertion_point(field_get:Property.StringPropertyValue.expr)
  return _internal_expr();
}
template <typename ArgT0, typename... ArgT>
inline void StringPropertyValue::set_expr(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_expr()) {
    clear_ValueType();
    set_has_expr();
    _impl_.ValueType_.expr_.InitDefault();
  }
  _impl_.ValueType_.expr_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Property.StringPropertyValue.expr)
}
inline std::string* StringPropertyValue::mutable_expr() {
  std::string* _s = _internal_mutable_expr();
  // @@protoc_insertion_point(field_mutable:Property.StringPropertyValue.expr)
  return _s;
}
inline const std::string& StringPropertyValue::_internal_expr() const {
  if (_internal_has_expr()) {
    return _impl_.ValueType_.expr_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void StringPropertyValue::_internal_set_expr(const std::string& value) {
  if (!_internal_has_expr()) {
    clear_ValueType();
    set_has_expr();
    _impl_.ValueType_.expr_.InitDefault();
  }
  _impl_.ValueType_.expr_.Set(value, GetArenaForAllocation());
}
inline std::string* StringPropertyValue::_internal_mutable_expr() {
  if (!_internal_has_expr()) {
    clear_ValueType();
    set_has_expr();
    _impl_.ValueType_.expr_.InitDefault();
  }
  return _impl_.ValueType_.expr_.Mutable(      GetArenaForAllocation());
}
inline std::string* StringPropertyValue::release_expr() {
  // @@protoc_insertion_point(field_release:Property.StringPropertyValue.expr)
  if (_internal_has_expr()) {
    clear_has_ValueType();
    return _impl_.ValueType_.expr_.Release();
  } else {
    return nullptr;
  }
}
inline void StringPropertyValue::set_allocated_expr(std::string* expr) {
  if (has_ValueType()) {
    clear_ValueType();
  }
  if (expr != nullptr) {
    set_has_expr();
    _impl_.ValueType_.expr_.InitAllocated(expr, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:Property.StringPropertyValue.expr)
}

// bool useDefault = 5;
inline bool StringPropertyValue::_internal_has_usedefault() const {
  return ValueType_case() == kUseDefault;
}
inline bool StringPropertyValue::has_usedefault() const {
  return _internal_has_usedefault();
}
inline void StringPropertyValue::set_has_usedefault() {
  _impl_._oneof_case_[0] = kUseDefault;
}
inline void StringPropertyValue::clear_usedefault() {
  if (_internal_has_usedefault()) {
    _impl_.ValueType_.usedefault_ = false;
    clear_has_ValueType();
  }
}
inline bool StringPropertyValue::_internal_usedefault() const {
  if (_internal_has_usedefault()) {
    return _impl_.ValueType_.usedefault_;
  }
  return false;
}
inline void StringPropertyValue::_internal_set_usedefault(bool value) {
  if (!_internal_has_usedefault()) {
    clear_ValueType();
    set_has_usedefault();
  }
  _impl_.ValueType_.usedefault_ = value;
}
inline bool StringPropertyValue::usedefault() const {
  // @@protoc_insertion_point(field_get:Property.StringPropertyValue.useDefault)
  return _internal_usedefault();
}
inline void StringPropertyValue::set_usedefault(bool value) {
  _internal_set_usedefault(value);
  // @@protoc_insertion_point(field_set:Property.StringPropertyValue.useDefault)
}

// .Property.CustomGeneratorValue custom = 10;
inline bool StringPropertyValue::_internal_has_custom() const {
  return ValueType_case() == kCustom;
}
inline bool StringPropertyValue::has_custom() const {
  return _internal_has_custom();
}
inline void StringPropertyValue::set_has_custom() {
  _impl_._oneof_case_[0] = kCustom;
}
inline void StringPropertyValue::clear_custom() {
  if (_internal_has_custom()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.ValueType_.custom_;
    }
    clear_has_ValueType();
  }
}
inline ::Property::CustomGeneratorValue* StringPropertyValue::release_custom() {
  // @@protoc_insertion_point(field_release:Property.StringPropertyValue.custom)
  if (_internal_has_custom()) {
    clear_has_ValueType();
    ::Property::CustomGeneratorValue* temp = _impl_.ValueType_.custom_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.ValueType_.custom_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::CustomGeneratorValue& StringPropertyValue::_internal_custom() const {
  return _internal_has_custom()
      ? *_impl_.ValueType_.custom_
      : reinterpret_cast< ::Property::CustomGeneratorValue&>(::Property::_CustomGeneratorValue_default_instance_);
}
inline const ::Property::CustomGeneratorValue& StringPropertyValue::custom() const {
  // @@protoc_insertion_point(field_get:Property.StringPropertyValue.custom)
  return _internal_custom();
}
inline ::Property::CustomGeneratorValue* StringPropertyValue::unsafe_arena_release_custom() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.StringPropertyValue.custom)
  if (_internal_has_custom()) {
    clear_has_ValueType();
    ::Property::CustomGeneratorValue* temp = _impl_.ValueType_.custom_;
    _impl_.ValueType_.custom_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StringPropertyValue::unsafe_arena_set_allocated_custom(::Property::CustomGeneratorValue* custom) {
  clear_ValueType();
  if (custom) {
    set_has_custom();
    _impl_.ValueType_.custom_ = custom;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.StringPropertyValue.custom)
}
inline ::Property::CustomGeneratorValue* StringPropertyValue::_internal_mutable_custom() {
  if (!_internal_has_custom()) {
    clear_ValueType();
    set_has_custom();
    _impl_.ValueType_.custom_ = CreateMaybeMessage< ::Property::CustomGeneratorValue >(GetArenaForAllocation());
  }
  return _impl_.ValueType_.custom_;
}
inline ::Property::CustomGeneratorValue* StringPropertyValue::mutable_custom() {
  ::Property::CustomGeneratorValue* _msg = _internal_mutable_custom();
  // @@protoc_insertion_point(field_mutable:Property.StringPropertyValue.custom)
  return _msg;
}

inline bool StringPropertyValue::has_ValueType() const {
  return ValueType_case() != VALUETYPE_NOT_SET;
}
inline void StringPropertyValue::clear_has_ValueType() {
  _impl_._oneof_case_[0] = VALUETYPE_NOT_SET;
}
inline StringPropertyValue::ValueTypeCase StringPropertyValue::ValueType_case() const {
  return StringPropertyValue::ValueTypeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// StringPropertyFormatted

// string FormatString = 1;
inline void StringPropertyFormatted::clear_formatstring() {
  _impl_.formatstring_.ClearToEmpty();
}
inline const std::string& StringPropertyFormatted::formatstring() const {
  // @@protoc_insertion_point(field_get:Property.StringPropertyFormatted.FormatString)
  return _internal_formatstring();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StringPropertyFormatted::set_formatstring(ArgT0&& arg0, ArgT... args) {
 
 _impl_.formatstring_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Property.StringPropertyFormatted.FormatString)
}
inline std::string* StringPropertyFormatted::mutable_formatstring() {
  std::string* _s = _internal_mutable_formatstring();
  // @@protoc_insertion_point(field_mutable:Property.StringPropertyFormatted.FormatString)
  return _s;
}
inline const std::string& StringPropertyFormatted::_internal_formatstring() const {
  return _impl_.formatstring_.Get();
}
inline void StringPropertyFormatted::_internal_set_formatstring(const std::string& value) {
  
  _impl_.formatstring_.Set(value, GetArenaForAllocation());
}
inline std::string* StringPropertyFormatted::_internal_mutable_formatstring() {
  
  return _impl_.formatstring_.Mutable(GetArenaForAllocation());
}
inline std::string* StringPropertyFormatted::release_formatstring() {
  // @@protoc_insertion_point(field_release:Property.StringPropertyFormatted.FormatString)
  return _impl_.formatstring_.Release();
}
inline void StringPropertyFormatted::set_allocated_formatstring(std::string* formatstring) {
  if (formatstring != nullptr) {
    
  } else {
    
  }
  _impl_.formatstring_.SetAllocated(formatstring, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.formatstring_.IsDefault()) {
    _impl_.formatstring_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Property.StringPropertyFormatted.FormatString)
}

// repeated .Property.AnyPropertyValue Arguments = 2;
inline int StringPropertyFormatted::_internal_arguments_size() const {
  return _impl_.arguments_.size();
}
inline int StringPropertyFormatted::arguments_size() const {
  return _internal_arguments_size();
}
inline void StringPropertyFormatted::clear_arguments() {
  _impl_.arguments_.Clear();
}
inline ::Property::AnyPropertyValue* StringPropertyFormatted::mutable_arguments(int index) {
  // @@protoc_insertion_point(field_mutable:Property.StringPropertyFormatted.Arguments)
  return _impl_.arguments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Property::AnyPropertyValue >*
StringPropertyFormatted::mutable_arguments() {
  // @@protoc_insertion_point(field_mutable_list:Property.StringPropertyFormatted.Arguments)
  return &_impl_.arguments_;
}
inline const ::Property::AnyPropertyValue& StringPropertyFormatted::_internal_arguments(int index) const {
  return _impl_.arguments_.Get(index);
}
inline const ::Property::AnyPropertyValue& StringPropertyFormatted::arguments(int index) const {
  // @@protoc_insertion_point(field_get:Property.StringPropertyFormatted.Arguments)
  return _internal_arguments(index);
}
inline ::Property::AnyPropertyValue* StringPropertyFormatted::_internal_add_arguments() {
  return _impl_.arguments_.Add();
}
inline ::Property::AnyPropertyValue* StringPropertyFormatted::add_arguments() {
  ::Property::AnyPropertyValue* _add = _internal_add_arguments();
  // @@protoc_insertion_point(field_add:Property.StringPropertyFormatted.Arguments)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Property::AnyPropertyValue >&
StringPropertyFormatted::arguments() const {
  // @@protoc_insertion_point(field_list:Property.StringPropertyFormatted.Arguments)
  return _impl_.arguments_;
}

// -------------------------------------------------------------------

// StringPropertyDeclaration

// string default = 2;
inline void StringPropertyDeclaration::clear_default_() {
  _impl_.default__.ClearToEmpty();
}
inline const std::string& StringPropertyDeclaration::default_() const {
  // @@protoc_insertion_point(field_get:Property.StringPropertyDeclaration.default)
  return _internal_default_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StringPropertyDeclaration::set_default_(ArgT0&& arg0, ArgT... args) {
 
 _impl_.default__.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Property.StringPropertyDeclaration.default)
}
inline std::string* StringPropertyDeclaration::mutable_default_() {
  std::string* _s = _internal_mutable_default_();
  // @@protoc_insertion_point(field_mutable:Property.StringPropertyDeclaration.default)
  return _s;
}
inline const std::string& StringPropertyDeclaration::_internal_default_() const {
  return _impl_.default__.Get();
}
inline void StringPropertyDeclaration::_internal_set_default_(const std::string& value) {
  
  _impl_.default__.Set(value, GetArenaForAllocation());
}
inline std::string* StringPropertyDeclaration::_internal_mutable_default_() {
  
  return _impl_.default__.Mutable(GetArenaForAllocation());
}
inline std::string* StringPropertyDeclaration::release_default_() {
  // @@protoc_insertion_point(field_release:Property.StringPropertyDeclaration.default)
  return _impl_.default__.Release();
}
inline void StringPropertyDeclaration::set_allocated_default_(std::string* default_) {
  if (default_ != nullptr) {
    
  } else {
    
  }
  _impl_.default__.SetAllocated(default_, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.default__.IsDefault()) {
    _impl_.default__.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Property.StringPropertyDeclaration.default)
}

// .Property.StringPropertyMetadata meta = 1;
inline bool StringPropertyDeclaration::_internal_has_meta() const {
  return this != internal_default_instance() && _impl_.meta_ != nullptr;
}
inline bool StringPropertyDeclaration::has_meta() const {
  return _internal_has_meta();
}
inline void StringPropertyDeclaration::clear_meta() {
  if (GetArenaForAllocation() == nullptr && _impl_.meta_ != nullptr) {
    delete _impl_.meta_;
  }
  _impl_.meta_ = nullptr;
}
inline const ::Property::StringPropertyMetadata& StringPropertyDeclaration::_internal_meta() const {
  const ::Property::StringPropertyMetadata* p = _impl_.meta_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::StringPropertyMetadata&>(
      ::Property::_StringPropertyMetadata_default_instance_);
}
inline const ::Property::StringPropertyMetadata& StringPropertyDeclaration::meta() const {
  // @@protoc_insertion_point(field_get:Property.StringPropertyDeclaration.meta)
  return _internal_meta();
}
inline void StringPropertyDeclaration::unsafe_arena_set_allocated_meta(
    ::Property::StringPropertyMetadata* meta) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.meta_);
  }
  _impl_.meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.StringPropertyDeclaration.meta)
}
inline ::Property::StringPropertyMetadata* StringPropertyDeclaration::release_meta() {
  
  ::Property::StringPropertyMetadata* temp = _impl_.meta_;
  _impl_.meta_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::StringPropertyMetadata* StringPropertyDeclaration::unsafe_arena_release_meta() {
  // @@protoc_insertion_point(field_release:Property.StringPropertyDeclaration.meta)
  
  ::Property::StringPropertyMetadata* temp = _impl_.meta_;
  _impl_.meta_ = nullptr;
  return temp;
}
inline ::Property::StringPropertyMetadata* StringPropertyDeclaration::_internal_mutable_meta() {
  
  if (_impl_.meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::StringPropertyMetadata>(GetArenaForAllocation());
    _impl_.meta_ = p;
  }
  return _impl_.meta_;
}
inline ::Property::StringPropertyMetadata* StringPropertyDeclaration::mutable_meta() {
  ::Property::StringPropertyMetadata* _msg = _internal_mutable_meta();
  // @@protoc_insertion_point(field_mutable:Property.StringPropertyDeclaration.meta)
  return _msg;
}
inline void StringPropertyDeclaration::set_allocated_meta(::Property::StringPropertyMetadata* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.meta_;
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(meta);
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:Property.StringPropertyDeclaration.meta)
}

// -------------------------------------------------------------------

// StringValueEnumerationOption

// string enumValue = 1;
inline void StringValueEnumerationOption::clear_enumvalue() {
  _impl_.enumvalue_.ClearToEmpty();
}
inline const std::string& StringValueEnumerationOption::enumvalue() const {
  // @@protoc_insertion_point(field_get:Property.StringValueEnumerationOption.enumValue)
  return _internal_enumvalue();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StringValueEnumerationOption::set_enumvalue(ArgT0&& arg0, ArgT... args) {
 
 _impl_.enumvalue_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Property.StringValueEnumerationOption.enumValue)
}
inline std::string* StringValueEnumerationOption::mutable_enumvalue() {
  std::string* _s = _internal_mutable_enumvalue();
  // @@protoc_insertion_point(field_mutable:Property.StringValueEnumerationOption.enumValue)
  return _s;
}
inline const std::string& StringValueEnumerationOption::_internal_enumvalue() const {
  return _impl_.enumvalue_.Get();
}
inline void StringValueEnumerationOption::_internal_set_enumvalue(const std::string& value) {
  
  _impl_.enumvalue_.Set(value, GetArenaForAllocation());
}
inline std::string* StringValueEnumerationOption::_internal_mutable_enumvalue() {
  
  return _impl_.enumvalue_.Mutable(GetArenaForAllocation());
}
inline std::string* StringValueEnumerationOption::release_enumvalue() {
  // @@protoc_insertion_point(field_release:Property.StringValueEnumerationOption.enumValue)
  return _impl_.enumvalue_.Release();
}
inline void StringValueEnumerationOption::set_allocated_enumvalue(std::string* enumvalue) {
  if (enumvalue != nullptr) {
    
  } else {
    
  }
  _impl_.enumvalue_.SetAllocated(enumvalue, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.enumvalue_.IsDefault()) {
    _impl_.enumvalue_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Property.StringValueEnumerationOption.enumValue)
}

// string displayText = 2;
inline void StringValueEnumerationOption::clear_displaytext() {
  _impl_.displaytext_.ClearToEmpty();
}
inline const std::string& StringValueEnumerationOption::displaytext() const {
  // @@protoc_insertion_point(field_get:Property.StringValueEnumerationOption.displayText)
  return _internal_displaytext();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StringValueEnumerationOption::set_displaytext(ArgT0&& arg0, ArgT... args) {
 
 _impl_.displaytext_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Property.StringValueEnumerationOption.displayText)
}
inline std::string* StringValueEnumerationOption::mutable_displaytext() {
  std::string* _s = _internal_mutable_displaytext();
  // @@protoc_insertion_point(field_mutable:Property.StringValueEnumerationOption.displayText)
  return _s;
}
inline const std::string& StringValueEnumerationOption::_internal_displaytext() const {
  return _impl_.displaytext_.Get();
}
inline void StringValueEnumerationOption::_internal_set_displaytext(const std::string& value) {
  
  _impl_.displaytext_.Set(value, GetArenaForAllocation());
}
inline std::string* StringValueEnumerationOption::_internal_mutable_displaytext() {
  
  return _impl_.displaytext_.Mutable(GetArenaForAllocation());
}
inline std::string* StringValueEnumerationOption::release_displaytext() {
  // @@protoc_insertion_point(field_release:Property.StringValueEnumerationOption.displayText)
  return _impl_.displaytext_.Release();
}
inline void StringValueEnumerationOption::set_allocated_displaytext(std::string* displaytext) {
  if (displaytext != nullptr) {
    
  } else {
    
  }
  _impl_.displaytext_.SetAllocated(displaytext, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.displaytext_.IsDefault()) {
    _impl_.displaytext_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Property.StringValueEnumerationOption.displayText)
}

// -------------------------------------------------------------------

// StringEditingMetadata

// repeated .Property.StringValueEnumerationOption enumerationOptions = 2;
inline int StringEditingMetadata::_internal_enumerationoptions_size() const {
  return _impl_.enumerationoptions_.size();
}
inline int StringEditingMetadata::enumerationoptions_size() const {
  return _internal_enumerationoptions_size();
}
inline void StringEditingMetadata::clear_enumerationoptions() {
  _impl_.enumerationoptions_.Clear();
}
inline ::Property::StringValueEnumerationOption* StringEditingMetadata::mutable_enumerationoptions(int index) {
  // @@protoc_insertion_point(field_mutable:Property.StringEditingMetadata.enumerationOptions)
  return _impl_.enumerationoptions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Property::StringValueEnumerationOption >*
StringEditingMetadata::mutable_enumerationoptions() {
  // @@protoc_insertion_point(field_mutable_list:Property.StringEditingMetadata.enumerationOptions)
  return &_impl_.enumerationoptions_;
}
inline const ::Property::StringValueEnumerationOption& StringEditingMetadata::_internal_enumerationoptions(int index) const {
  return _impl_.enumerationoptions_.Get(index);
}
inline const ::Property::StringValueEnumerationOption& StringEditingMetadata::enumerationoptions(int index) const {
  // @@protoc_insertion_point(field_get:Property.StringEditingMetadata.enumerationOptions)
  return _internal_enumerationoptions(index);
}
inline ::Property::StringValueEnumerationOption* StringEditingMetadata::_internal_add_enumerationoptions() {
  return _impl_.enumerationoptions_.Add();
}
inline ::Property::StringValueEnumerationOption* StringEditingMetadata::add_enumerationoptions() {
  ::Property::StringValueEnumerationOption* _add = _internal_add_enumerationoptions();
  // @@protoc_insertion_point(field_add:Property.StringEditingMetadata.enumerationOptions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Property::StringValueEnumerationOption >&
StringEditingMetadata::enumerationoptions() const {
  // @@protoc_insertion_point(field_list:Property.StringEditingMetadata.enumerationOptions)
  return _impl_.enumerationoptions_;
}

// optional bool isScript = 4;
inline bool StringEditingMetadata::_internal_has_isscript() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StringEditingMetadata::has_isscript() const {
  return _internal_has_isscript();
}
inline void StringEditingMetadata::clear_isscript() {
  _impl_.isscript_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool StringEditingMetadata::_internal_isscript() const {
  return _impl_.isscript_;
}
inline bool StringEditingMetadata::isscript() const {
  // @@protoc_insertion_point(field_get:Property.StringEditingMetadata.isScript)
  return _internal_isscript();
}
inline void StringEditingMetadata::_internal_set_isscript(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.isscript_ = value;
}
inline void StringEditingMetadata::set_isscript(bool value) {
  _internal_set_isscript(value);
  // @@protoc_insertion_point(field_set:Property.StringEditingMetadata.isScript)
}

// optional bool isMultiLine = 5;
inline bool StringEditingMetadata::_internal_has_ismultiline() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StringEditingMetadata::has_ismultiline() const {
  return _internal_has_ismultiline();
}
inline void StringEditingMetadata::clear_ismultiline() {
  _impl_.ismultiline_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool StringEditingMetadata::_internal_ismultiline() const {
  return _impl_.ismultiline_;
}
inline bool StringEditingMetadata::ismultiline() const {
  // @@protoc_insertion_point(field_get:Property.StringEditingMetadata.isMultiLine)
  return _internal_ismultiline();
}
inline void StringEditingMetadata::_internal_set_ismultiline(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ismultiline_ = value;
}
inline void StringEditingMetadata::set_ismultiline(bool value) {
  _internal_set_ismultiline(value);
  // @@protoc_insertion_point(field_set:Property.StringEditingMetadata.isMultiLine)
}

// -------------------------------------------------------------------

// StringGeneratorMetadata

// .Property.GeneratorMetadata base = 1;
inline bool StringGeneratorMetadata::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool StringGeneratorMetadata::has_base() const {
  return _internal_has_base();
}
inline void StringGeneratorMetadata::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
inline const ::Property::GeneratorMetadata& StringGeneratorMetadata::_internal_base() const {
  const ::Property::GeneratorMetadata* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::GeneratorMetadata&>(
      ::Property::_GeneratorMetadata_default_instance_);
}
inline const ::Property::GeneratorMetadata& StringGeneratorMetadata::base() const {
  // @@protoc_insertion_point(field_get:Property.StringGeneratorMetadata.base)
  return _internal_base();
}
inline void StringGeneratorMetadata::unsafe_arena_set_allocated_base(
    ::Property::GeneratorMetadata* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.StringGeneratorMetadata.base)
}
inline ::Property::GeneratorMetadata* StringGeneratorMetadata::release_base() {
  
  ::Property::GeneratorMetadata* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::GeneratorMetadata* StringGeneratorMetadata::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:Property.StringGeneratorMetadata.base)
  
  ::Property::GeneratorMetadata* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::Property::GeneratorMetadata* StringGeneratorMetadata::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::GeneratorMetadata>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::Property::GeneratorMetadata* StringGeneratorMetadata::mutable_base() {
  ::Property::GeneratorMetadata* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:Property.StringGeneratorMetadata.base)
  return _msg;
}
inline void StringGeneratorMetadata::set_allocated_base(::Property::GeneratorMetadata* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:Property.StringGeneratorMetadata.base)
}

// optional .Property.StringEditingMetadata edit = 2;
inline bool StringGeneratorMetadata::_internal_has_edit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.edit_ != nullptr);
  return value;
}
inline bool StringGeneratorMetadata::has_edit() const {
  return _internal_has_edit();
}
inline void StringGeneratorMetadata::clear_edit() {
  if (_impl_.edit_ != nullptr) _impl_.edit_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::Property::StringEditingMetadata& StringGeneratorMetadata::_internal_edit() const {
  const ::Property::StringEditingMetadata* p = _impl_.edit_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::StringEditingMetadata&>(
      ::Property::_StringEditingMetadata_default_instance_);
}
inline const ::Property::StringEditingMetadata& StringGeneratorMetadata::edit() const {
  // @@protoc_insertion_point(field_get:Property.StringGeneratorMetadata.edit)
  return _internal_edit();
}
inline void StringGeneratorMetadata::unsafe_arena_set_allocated_edit(
    ::Property::StringEditingMetadata* edit) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.edit_);
  }
  _impl_.edit_ = edit;
  if (edit) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.StringGeneratorMetadata.edit)
}
inline ::Property::StringEditingMetadata* StringGeneratorMetadata::release_edit() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Property::StringEditingMetadata* temp = _impl_.edit_;
  _impl_.edit_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::StringEditingMetadata* StringGeneratorMetadata::unsafe_arena_release_edit() {
  // @@protoc_insertion_point(field_release:Property.StringGeneratorMetadata.edit)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Property::StringEditingMetadata* temp = _impl_.edit_;
  _impl_.edit_ = nullptr;
  return temp;
}
inline ::Property::StringEditingMetadata* StringGeneratorMetadata::_internal_mutable_edit() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.edit_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::StringEditingMetadata>(GetArenaForAllocation());
    _impl_.edit_ = p;
  }
  return _impl_.edit_;
}
inline ::Property::StringEditingMetadata* StringGeneratorMetadata::mutable_edit() {
  ::Property::StringEditingMetadata* _msg = _internal_mutable_edit();
  // @@protoc_insertion_point(field_mutable:Property.StringGeneratorMetadata.edit)
  return _msg;
}
inline void StringGeneratorMetadata::set_allocated_edit(::Property::StringEditingMetadata* edit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.edit_;
  }
  if (edit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(edit);
    if (message_arena != submessage_arena) {
      edit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, edit, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.edit_ = edit;
  // @@protoc_insertion_point(field_set_allocated:Property.StringGeneratorMetadata.edit)
}

// -------------------------------------------------------------------

// StringPropertyMetadata

// .Property.PropertyMetadata base = 1;
inline bool StringPropertyMetadata::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool StringPropertyMetadata::has_base() const {
  return _internal_has_base();
}
inline void StringPropertyMetadata::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
inline const ::Property::PropertyMetadata& StringPropertyMetadata::_internal_base() const {
  const ::Property::PropertyMetadata* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::PropertyMetadata&>(
      ::Property::_PropertyMetadata_default_instance_);
}
inline const ::Property::PropertyMetadata& StringPropertyMetadata::base() const {
  // @@protoc_insertion_point(field_get:Property.StringPropertyMetadata.base)
  return _internal_base();
}
inline void StringPropertyMetadata::unsafe_arena_set_allocated_base(
    ::Property::PropertyMetadata* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.StringPropertyMetadata.base)
}
inline ::Property::PropertyMetadata* StringPropertyMetadata::release_base() {
  
  ::Property::PropertyMetadata* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::PropertyMetadata* StringPropertyMetadata::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:Property.StringPropertyMetadata.base)
  
  ::Property::PropertyMetadata* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::Property::PropertyMetadata* StringPropertyMetadata::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::PropertyMetadata>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::Property::PropertyMetadata* StringPropertyMetadata::mutable_base() {
  ::Property::PropertyMetadata* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:Property.StringPropertyMetadata.base)
  return _msg;
}
inline void StringPropertyMetadata::set_allocated_base(::Property::PropertyMetadata* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:Property.StringPropertyMetadata.base)
}

// optional .Property.StringEditingMetadata edit = 3;
inline bool StringPropertyMetadata::_internal_has_edit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.edit_ != nullptr);
  return value;
}
inline bool StringPropertyMetadata::has_edit() const {
  return _internal_has_edit();
}
inline void StringPropertyMetadata::clear_edit() {
  if (_impl_.edit_ != nullptr) _impl_.edit_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::Property::StringEditingMetadata& StringPropertyMetadata::_internal_edit() const {
  const ::Property::StringEditingMetadata* p = _impl_.edit_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::StringEditingMetadata&>(
      ::Property::_StringEditingMetadata_default_instance_);
}
inline const ::Property::StringEditingMetadata& StringPropertyMetadata::edit() const {
  // @@protoc_insertion_point(field_get:Property.StringPropertyMetadata.edit)
  return _internal_edit();
}
inline void StringPropertyMetadata::unsafe_arena_set_allocated_edit(
    ::Property::StringEditingMetadata* edit) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.edit_);
  }
  _impl_.edit_ = edit;
  if (edit) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.StringPropertyMetadata.edit)
}
inline ::Property::StringEditingMetadata* StringPropertyMetadata::release_edit() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Property::StringEditingMetadata* temp = _impl_.edit_;
  _impl_.edit_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::StringEditingMetadata* StringPropertyMetadata::unsafe_arena_release_edit() {
  // @@protoc_insertion_point(field_release:Property.StringPropertyMetadata.edit)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Property::StringEditingMetadata* temp = _impl_.edit_;
  _impl_.edit_ = nullptr;
  return temp;
}
inline ::Property::StringEditingMetadata* StringPropertyMetadata::_internal_mutable_edit() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.edit_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::StringEditingMetadata>(GetArenaForAllocation());
    _impl_.edit_ = p;
  }
  return _impl_.edit_;
}
inline ::Property::StringEditingMetadata* StringPropertyMetadata::mutable_edit() {
  ::Property::StringEditingMetadata* _msg = _internal_mutable_edit();
  // @@protoc_insertion_point(field_mutable:Property.StringPropertyMetadata.edit)
  return _msg;
}
inline void StringPropertyMetadata::set_allocated_edit(::Property::StringEditingMetadata* edit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.edit_;
  }
  if (edit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(edit);
    if (message_arena != submessage_arena) {
      edit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, edit, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.edit_ = edit;
  // @@protoc_insertion_point(field_set_allocated:Property.StringPropertyMetadata.edit)
}

// -------------------------------------------------------------------

// LinkPropertyAssignment

// optional int32 priority = 2;
inline bool LinkPropertyAssignment::_internal_has_priority() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LinkPropertyAssignment::has_priority() const {
  return _internal_has_priority();
}
inline void LinkPropertyAssignment::clear_priority() {
  _impl_.priority_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t LinkPropertyAssignment::_internal_priority() const {
  return _impl_.priority_;
}
inline int32_t LinkPropertyAssignment::priority() const {
  // @@protoc_insertion_point(field_get:Property.LinkPropertyAssignment.priority)
  return _internal_priority();
}
inline void LinkPropertyAssignment::_internal_set_priority(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.priority_ = value;
}
inline void LinkPropertyAssignment::set_priority(int32_t value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:Property.LinkPropertyAssignment.priority)
}

// .Property.LinkPropertyValue value = 3;
inline bool LinkPropertyAssignment::_internal_has_value() const {
  return this != internal_default_instance() && _impl_.value_ != nullptr;
}
inline bool LinkPropertyAssignment::has_value() const {
  return _internal_has_value();
}
inline void LinkPropertyAssignment::clear_value() {
  if (GetArenaForAllocation() == nullptr && _impl_.value_ != nullptr) {
    delete _impl_.value_;
  }
  _impl_.value_ = nullptr;
}
inline const ::Property::LinkPropertyValue& LinkPropertyAssignment::_internal_value() const {
  const ::Property::LinkPropertyValue* p = _impl_.value_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::LinkPropertyValue&>(
      ::Property::_LinkPropertyValue_default_instance_);
}
inline const ::Property::LinkPropertyValue& LinkPropertyAssignment::value() const {
  // @@protoc_insertion_point(field_get:Property.LinkPropertyAssignment.value)
  return _internal_value();
}
inline void LinkPropertyAssignment::unsafe_arena_set_allocated_value(
    ::Property::LinkPropertyValue* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_);
  }
  _impl_.value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.LinkPropertyAssignment.value)
}
inline ::Property::LinkPropertyValue* LinkPropertyAssignment::release_value() {
  
  ::Property::LinkPropertyValue* temp = _impl_.value_;
  _impl_.value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::LinkPropertyValue* LinkPropertyAssignment::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:Property.LinkPropertyAssignment.value)
  
  ::Property::LinkPropertyValue* temp = _impl_.value_;
  _impl_.value_ = nullptr;
  return temp;
}
inline ::Property::LinkPropertyValue* LinkPropertyAssignment::_internal_mutable_value() {
  
  if (_impl_.value_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::LinkPropertyValue>(GetArenaForAllocation());
    _impl_.value_ = p;
  }
  return _impl_.value_;
}
inline ::Property::LinkPropertyValue* LinkPropertyAssignment::mutable_value() {
  ::Property::LinkPropertyValue* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:Property.LinkPropertyAssignment.value)
  return _msg;
}
inline void LinkPropertyAssignment::set_allocated_value(::Property::LinkPropertyValue* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.value_ = value;
  // @@protoc_insertion_point(field_set_allocated:Property.LinkPropertyAssignment.value)
}

// string assignmentId = 4;
inline void LinkPropertyAssignment::clear_assignmentid() {
  _impl_.assignmentid_.ClearToEmpty();
}
inline const std::string& LinkPropertyAssignment::assignmentid() const {
  // @@protoc_insertion_point(field_get:Property.LinkPropertyAssignment.assignmentId)
  return _internal_assignmentid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LinkPropertyAssignment::set_assignmentid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.assignmentid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Property.LinkPropertyAssignment.assignmentId)
}
inline std::string* LinkPropertyAssignment::mutable_assignmentid() {
  std::string* _s = _internal_mutable_assignmentid();
  // @@protoc_insertion_point(field_mutable:Property.LinkPropertyAssignment.assignmentId)
  return _s;
}
inline const std::string& LinkPropertyAssignment::_internal_assignmentid() const {
  return _impl_.assignmentid_.Get();
}
inline void LinkPropertyAssignment::_internal_set_assignmentid(const std::string& value) {
  
  _impl_.assignmentid_.Set(value, GetArenaForAllocation());
}
inline std::string* LinkPropertyAssignment::_internal_mutable_assignmentid() {
  
  return _impl_.assignmentid_.Mutable(GetArenaForAllocation());
}
inline std::string* LinkPropertyAssignment::release_assignmentid() {
  // @@protoc_insertion_point(field_release:Property.LinkPropertyAssignment.assignmentId)
  return _impl_.assignmentid_.Release();
}
inline void LinkPropertyAssignment::set_allocated_assignmentid(std::string* assignmentid) {
  if (assignmentid != nullptr) {
    
  } else {
    
  }
  _impl_.assignmentid_.SetAllocated(assignmentid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.assignmentid_.IsDefault()) {
    _impl_.assignmentid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Property.LinkPropertyAssignment.assignmentId)
}

// -------------------------------------------------------------------

// LinkPropertyValue

// .Property.PropertyIdentifier constant = 1;
inline bool LinkPropertyValue::_internal_has_constant() const {
  return ValueType_case() == kConstant;
}
inline bool LinkPropertyValue::has_constant() const {
  return _internal_has_constant();
}
inline void LinkPropertyValue::set_has_constant() {
  _impl_._oneof_case_[0] = kConstant;
}
inline void LinkPropertyValue::clear_constant() {
  if (_internal_has_constant()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.ValueType_.constant_;
    }
    clear_has_ValueType();
  }
}
inline ::Property::PropertyIdentifier* LinkPropertyValue::release_constant() {
  // @@protoc_insertion_point(field_release:Property.LinkPropertyValue.constant)
  if (_internal_has_constant()) {
    clear_has_ValueType();
    ::Property::PropertyIdentifier* temp = _impl_.ValueType_.constant_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.ValueType_.constant_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::PropertyIdentifier& LinkPropertyValue::_internal_constant() const {
  return _internal_has_constant()
      ? *_impl_.ValueType_.constant_
      : reinterpret_cast< ::Property::PropertyIdentifier&>(::Property::_PropertyIdentifier_default_instance_);
}
inline const ::Property::PropertyIdentifier& LinkPropertyValue::constant() const {
  // @@protoc_insertion_point(field_get:Property.LinkPropertyValue.constant)
  return _internal_constant();
}
inline ::Property::PropertyIdentifier* LinkPropertyValue::unsafe_arena_release_constant() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.LinkPropertyValue.constant)
  if (_internal_has_constant()) {
    clear_has_ValueType();
    ::Property::PropertyIdentifier* temp = _impl_.ValueType_.constant_;
    _impl_.ValueType_.constant_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void LinkPropertyValue::unsafe_arena_set_allocated_constant(::Property::PropertyIdentifier* constant) {
  clear_ValueType();
  if (constant) {
    set_has_constant();
    _impl_.ValueType_.constant_ = constant;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.LinkPropertyValue.constant)
}
inline ::Property::PropertyIdentifier* LinkPropertyValue::_internal_mutable_constant() {
  if (!_internal_has_constant()) {
    clear_ValueType();
    set_has_constant();
    _impl_.ValueType_.constant_ = CreateMaybeMessage< ::Property::PropertyIdentifier >(GetArenaForAllocation());
  }
  return _impl_.ValueType_.constant_;
}
inline ::Property::PropertyIdentifier* LinkPropertyValue::mutable_constant() {
  ::Property::PropertyIdentifier* _msg = _internal_mutable_constant();
  // @@protoc_insertion_point(field_mutable:Property.LinkPropertyValue.constant)
  return _msg;
}

// .Property.PropertyIdentifier ref = 3;
inline bool LinkPropertyValue::_internal_has_ref() const {
  return ValueType_case() == kRef;
}
inline bool LinkPropertyValue::has_ref() const {
  return _internal_has_ref();
}
inline void LinkPropertyValue::set_has_ref() {
  _impl_._oneof_case_[0] = kRef;
}
inline void LinkPropertyValue::clear_ref() {
  if (_internal_has_ref()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.ValueType_.ref_;
    }
    clear_has_ValueType();
  }
}
inline ::Property::PropertyIdentifier* LinkPropertyValue::release_ref() {
  // @@protoc_insertion_point(field_release:Property.LinkPropertyValue.ref)
  if (_internal_has_ref()) {
    clear_has_ValueType();
    ::Property::PropertyIdentifier* temp = _impl_.ValueType_.ref_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.ValueType_.ref_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::PropertyIdentifier& LinkPropertyValue::_internal_ref() const {
  return _internal_has_ref()
      ? *_impl_.ValueType_.ref_
      : reinterpret_cast< ::Property::PropertyIdentifier&>(::Property::_PropertyIdentifier_default_instance_);
}
inline const ::Property::PropertyIdentifier& LinkPropertyValue::ref() const {
  // @@protoc_insertion_point(field_get:Property.LinkPropertyValue.ref)
  return _internal_ref();
}
inline ::Property::PropertyIdentifier* LinkPropertyValue::unsafe_arena_release_ref() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.LinkPropertyValue.ref)
  if (_internal_has_ref()) {
    clear_has_ValueType();
    ::Property::PropertyIdentifier* temp = _impl_.ValueType_.ref_;
    _impl_.ValueType_.ref_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void LinkPropertyValue::unsafe_arena_set_allocated_ref(::Property::PropertyIdentifier* ref) {
  clear_ValueType();
  if (ref) {
    set_has_ref();
    _impl_.ValueType_.ref_ = ref;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.LinkPropertyValue.ref)
}
inline ::Property::PropertyIdentifier* LinkPropertyValue::_internal_mutable_ref() {
  if (!_internal_has_ref()) {
    clear_ValueType();
    set_has_ref();
    _impl_.ValueType_.ref_ = CreateMaybeMessage< ::Property::PropertyIdentifier >(GetArenaForAllocation());
  }
  return _impl_.ValueType_.ref_;
}
inline ::Property::PropertyIdentifier* LinkPropertyValue::mutable_ref() {
  ::Property::PropertyIdentifier* _msg = _internal_mutable_ref();
  // @@protoc_insertion_point(field_mutable:Property.LinkPropertyValue.ref)
  return _msg;
}

// string expr = 4;
inline bool LinkPropertyValue::_internal_has_expr() const {
  return ValueType_case() == kExpr;
}
inline bool LinkPropertyValue::has_expr() const {
  return _internal_has_expr();
}
inline void LinkPropertyValue::set_has_expr() {
  _impl_._oneof_case_[0] = kExpr;
}
inline void LinkPropertyValue::clear_expr() {
  if (_internal_has_expr()) {
    _impl_.ValueType_.expr_.Destroy();
    clear_has_ValueType();
  }
}
inline const std::string& LinkPropertyValue::expr() const {
  // @@protoc_insertion_point(field_get:Property.LinkPropertyValue.expr)
  return _internal_expr();
}
template <typename ArgT0, typename... ArgT>
inline void LinkPropertyValue::set_expr(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_expr()) {
    clear_ValueType();
    set_has_expr();
    _impl_.ValueType_.expr_.InitDefault();
  }
  _impl_.ValueType_.expr_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Property.LinkPropertyValue.expr)
}
inline std::string* LinkPropertyValue::mutable_expr() {
  std::string* _s = _internal_mutable_expr();
  // @@protoc_insertion_point(field_mutable:Property.LinkPropertyValue.expr)
  return _s;
}
inline const std::string& LinkPropertyValue::_internal_expr() const {
  if (_internal_has_expr()) {
    return _impl_.ValueType_.expr_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void LinkPropertyValue::_internal_set_expr(const std::string& value) {
  if (!_internal_has_expr()) {
    clear_ValueType();
    set_has_expr();
    _impl_.ValueType_.expr_.InitDefault();
  }
  _impl_.ValueType_.expr_.Set(value, GetArenaForAllocation());
}
inline std::string* LinkPropertyValue::_internal_mutable_expr() {
  if (!_internal_has_expr()) {
    clear_ValueType();
    set_has_expr();
    _impl_.ValueType_.expr_.InitDefault();
  }
  return _impl_.ValueType_.expr_.Mutable(      GetArenaForAllocation());
}
inline std::string* LinkPropertyValue::release_expr() {
  // @@protoc_insertion_point(field_release:Property.LinkPropertyValue.expr)
  if (_internal_has_expr()) {
    clear_has_ValueType();
    return _impl_.ValueType_.expr_.Release();
  } else {
    return nullptr;
  }
}
inline void LinkPropertyValue::set_allocated_expr(std::string* expr) {
  if (has_ValueType()) {
    clear_ValueType();
  }
  if (expr != nullptr) {
    set_has_expr();
    _impl_.ValueType_.expr_.InitAllocated(expr, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:Property.LinkPropertyValue.expr)
}

// bool useDefault = 5;
inline bool LinkPropertyValue::_internal_has_usedefault() const {
  return ValueType_case() == kUseDefault;
}
inline bool LinkPropertyValue::has_usedefault() const {
  return _internal_has_usedefault();
}
inline void LinkPropertyValue::set_has_usedefault() {
  _impl_._oneof_case_[0] = kUseDefault;
}
inline void LinkPropertyValue::clear_usedefault() {
  if (_internal_has_usedefault()) {
    _impl_.ValueType_.usedefault_ = false;
    clear_has_ValueType();
  }
}
inline bool LinkPropertyValue::_internal_usedefault() const {
  if (_internal_has_usedefault()) {
    return _impl_.ValueType_.usedefault_;
  }
  return false;
}
inline void LinkPropertyValue::_internal_set_usedefault(bool value) {
  if (!_internal_has_usedefault()) {
    clear_ValueType();
    set_has_usedefault();
  }
  _impl_.ValueType_.usedefault_ = value;
}
inline bool LinkPropertyValue::usedefault() const {
  // @@protoc_insertion_point(field_get:Property.LinkPropertyValue.useDefault)
  return _internal_usedefault();
}
inline void LinkPropertyValue::set_usedefault(bool value) {
  _internal_set_usedefault(value);
  // @@protoc_insertion_point(field_set:Property.LinkPropertyValue.useDefault)
}

// .Property.CustomGeneratorValue custom = 10;
inline bool LinkPropertyValue::_internal_has_custom() const {
  return ValueType_case() == kCustom;
}
inline bool LinkPropertyValue::has_custom() const {
  return _internal_has_custom();
}
inline void LinkPropertyValue::set_has_custom() {
  _impl_._oneof_case_[0] = kCustom;
}
inline void LinkPropertyValue::clear_custom() {
  if (_internal_has_custom()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.ValueType_.custom_;
    }
    clear_has_ValueType();
  }
}
inline ::Property::CustomGeneratorValue* LinkPropertyValue::release_custom() {
  // @@protoc_insertion_point(field_release:Property.LinkPropertyValue.custom)
  if (_internal_has_custom()) {
    clear_has_ValueType();
    ::Property::CustomGeneratorValue* temp = _impl_.ValueType_.custom_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.ValueType_.custom_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::CustomGeneratorValue& LinkPropertyValue::_internal_custom() const {
  return _internal_has_custom()
      ? *_impl_.ValueType_.custom_
      : reinterpret_cast< ::Property::CustomGeneratorValue&>(::Property::_CustomGeneratorValue_default_instance_);
}
inline const ::Property::CustomGeneratorValue& LinkPropertyValue::custom() const {
  // @@protoc_insertion_point(field_get:Property.LinkPropertyValue.custom)
  return _internal_custom();
}
inline ::Property::CustomGeneratorValue* LinkPropertyValue::unsafe_arena_release_custom() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.LinkPropertyValue.custom)
  if (_internal_has_custom()) {
    clear_has_ValueType();
    ::Property::CustomGeneratorValue* temp = _impl_.ValueType_.custom_;
    _impl_.ValueType_.custom_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void LinkPropertyValue::unsafe_arena_set_allocated_custom(::Property::CustomGeneratorValue* custom) {
  clear_ValueType();
  if (custom) {
    set_has_custom();
    _impl_.ValueType_.custom_ = custom;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.LinkPropertyValue.custom)
}
inline ::Property::CustomGeneratorValue* LinkPropertyValue::_internal_mutable_custom() {
  if (!_internal_has_custom()) {
    clear_ValueType();
    set_has_custom();
    _impl_.ValueType_.custom_ = CreateMaybeMessage< ::Property::CustomGeneratorValue >(GetArenaForAllocation());
  }
  return _impl_.ValueType_.custom_;
}
inline ::Property::CustomGeneratorValue* LinkPropertyValue::mutable_custom() {
  ::Property::CustomGeneratorValue* _msg = _internal_mutable_custom();
  // @@protoc_insertion_point(field_mutable:Property.LinkPropertyValue.custom)
  return _msg;
}

inline bool LinkPropertyValue::has_ValueType() const {
  return ValueType_case() != VALUETYPE_NOT_SET;
}
inline void LinkPropertyValue::clear_has_ValueType() {
  _impl_._oneof_case_[0] = VALUETYPE_NOT_SET;
}
inline LinkPropertyValue::ValueTypeCase LinkPropertyValue::ValueType_case() const {
  return LinkPropertyValue::ValueTypeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// LinkPropertyDeclaration

// string default = 2;
inline void LinkPropertyDeclaration::clear_default_() {
  _impl_.default__.ClearToEmpty();
}
inline const std::string& LinkPropertyDeclaration::default_() const {
  // @@protoc_insertion_point(field_get:Property.LinkPropertyDeclaration.default)
  return _internal_default_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LinkPropertyDeclaration::set_default_(ArgT0&& arg0, ArgT... args) {
 
 _impl_.default__.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Property.LinkPropertyDeclaration.default)
}
inline std::string* LinkPropertyDeclaration::mutable_default_() {
  std::string* _s = _internal_mutable_default_();
  // @@protoc_insertion_point(field_mutable:Property.LinkPropertyDeclaration.default)
  return _s;
}
inline const std::string& LinkPropertyDeclaration::_internal_default_() const {
  return _impl_.default__.Get();
}
inline void LinkPropertyDeclaration::_internal_set_default_(const std::string& value) {
  
  _impl_.default__.Set(value, GetArenaForAllocation());
}
inline std::string* LinkPropertyDeclaration::_internal_mutable_default_() {
  
  return _impl_.default__.Mutable(GetArenaForAllocation());
}
inline std::string* LinkPropertyDeclaration::release_default_() {
  // @@protoc_insertion_point(field_release:Property.LinkPropertyDeclaration.default)
  return _impl_.default__.Release();
}
inline void LinkPropertyDeclaration::set_allocated_default_(std::string* default_) {
  if (default_ != nullptr) {
    
  } else {
    
  }
  _impl_.default__.SetAllocated(default_, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.default__.IsDefault()) {
    _impl_.default__.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Property.LinkPropertyDeclaration.default)
}

// .Property.LinkPropertyMetadata meta = 1;
inline bool LinkPropertyDeclaration::_internal_has_meta() const {
  return this != internal_default_instance() && _impl_.meta_ != nullptr;
}
inline bool LinkPropertyDeclaration::has_meta() const {
  return _internal_has_meta();
}
inline void LinkPropertyDeclaration::clear_meta() {
  if (GetArenaForAllocation() == nullptr && _impl_.meta_ != nullptr) {
    delete _impl_.meta_;
  }
  _impl_.meta_ = nullptr;
}
inline const ::Property::LinkPropertyMetadata& LinkPropertyDeclaration::_internal_meta() const {
  const ::Property::LinkPropertyMetadata* p = _impl_.meta_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::LinkPropertyMetadata&>(
      ::Property::_LinkPropertyMetadata_default_instance_);
}
inline const ::Property::LinkPropertyMetadata& LinkPropertyDeclaration::meta() const {
  // @@protoc_insertion_point(field_get:Property.LinkPropertyDeclaration.meta)
  return _internal_meta();
}
inline void LinkPropertyDeclaration::unsafe_arena_set_allocated_meta(
    ::Property::LinkPropertyMetadata* meta) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.meta_);
  }
  _impl_.meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.LinkPropertyDeclaration.meta)
}
inline ::Property::LinkPropertyMetadata* LinkPropertyDeclaration::release_meta() {
  
  ::Property::LinkPropertyMetadata* temp = _impl_.meta_;
  _impl_.meta_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::LinkPropertyMetadata* LinkPropertyDeclaration::unsafe_arena_release_meta() {
  // @@protoc_insertion_point(field_release:Property.LinkPropertyDeclaration.meta)
  
  ::Property::LinkPropertyMetadata* temp = _impl_.meta_;
  _impl_.meta_ = nullptr;
  return temp;
}
inline ::Property::LinkPropertyMetadata* LinkPropertyDeclaration::_internal_mutable_meta() {
  
  if (_impl_.meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::LinkPropertyMetadata>(GetArenaForAllocation());
    _impl_.meta_ = p;
  }
  return _impl_.meta_;
}
inline ::Property::LinkPropertyMetadata* LinkPropertyDeclaration::mutable_meta() {
  ::Property::LinkPropertyMetadata* _msg = _internal_mutable_meta();
  // @@protoc_insertion_point(field_mutable:Property.LinkPropertyDeclaration.meta)
  return _msg;
}
inline void LinkPropertyDeclaration::set_allocated_meta(::Property::LinkPropertyMetadata* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.meta_;
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(meta);
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:Property.LinkPropertyDeclaration.meta)
}

// -------------------------------------------------------------------

// LinkPropertyMetadata

// .Property.PropertyMetadata base = 1;
inline bool LinkPropertyMetadata::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool LinkPropertyMetadata::has_base() const {
  return _internal_has_base();
}
inline void LinkPropertyMetadata::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
inline const ::Property::PropertyMetadata& LinkPropertyMetadata::_internal_base() const {
  const ::Property::PropertyMetadata* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::PropertyMetadata&>(
      ::Property::_PropertyMetadata_default_instance_);
}
inline const ::Property::PropertyMetadata& LinkPropertyMetadata::base() const {
  // @@protoc_insertion_point(field_get:Property.LinkPropertyMetadata.base)
  return _internal_base();
}
inline void LinkPropertyMetadata::unsafe_arena_set_allocated_base(
    ::Property::PropertyMetadata* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.LinkPropertyMetadata.base)
}
inline ::Property::PropertyMetadata* LinkPropertyMetadata::release_base() {
  
  ::Property::PropertyMetadata* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::PropertyMetadata* LinkPropertyMetadata::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:Property.LinkPropertyMetadata.base)
  
  ::Property::PropertyMetadata* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::Property::PropertyMetadata* LinkPropertyMetadata::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::PropertyMetadata>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::Property::PropertyMetadata* LinkPropertyMetadata::mutable_base() {
  ::Property::PropertyMetadata* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:Property.LinkPropertyMetadata.base)
  return _msg;
}
inline void LinkPropertyMetadata::set_allocated_base(::Property::PropertyMetadata* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:Property.LinkPropertyMetadata.base)
}

// optional .Property.LinkEditingMetadata edit = 2;
inline bool LinkPropertyMetadata::_internal_has_edit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.edit_ != nullptr);
  return value;
}
inline bool LinkPropertyMetadata::has_edit() const {
  return _internal_has_edit();
}
inline void LinkPropertyMetadata::clear_edit() {
  if (_impl_.edit_ != nullptr) _impl_.edit_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::Property::LinkEditingMetadata& LinkPropertyMetadata::_internal_edit() const {
  const ::Property::LinkEditingMetadata* p = _impl_.edit_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::LinkEditingMetadata&>(
      ::Property::_LinkEditingMetadata_default_instance_);
}
inline const ::Property::LinkEditingMetadata& LinkPropertyMetadata::edit() const {
  // @@protoc_insertion_point(field_get:Property.LinkPropertyMetadata.edit)
  return _internal_edit();
}
inline void LinkPropertyMetadata::unsafe_arena_set_allocated_edit(
    ::Property::LinkEditingMetadata* edit) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.edit_);
  }
  _impl_.edit_ = edit;
  if (edit) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.LinkPropertyMetadata.edit)
}
inline ::Property::LinkEditingMetadata* LinkPropertyMetadata::release_edit() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Property::LinkEditingMetadata* temp = _impl_.edit_;
  _impl_.edit_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::LinkEditingMetadata* LinkPropertyMetadata::unsafe_arena_release_edit() {
  // @@protoc_insertion_point(field_release:Property.LinkPropertyMetadata.edit)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Property::LinkEditingMetadata* temp = _impl_.edit_;
  _impl_.edit_ = nullptr;
  return temp;
}
inline ::Property::LinkEditingMetadata* LinkPropertyMetadata::_internal_mutable_edit() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.edit_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::LinkEditingMetadata>(GetArenaForAllocation());
    _impl_.edit_ = p;
  }
  return _impl_.edit_;
}
inline ::Property::LinkEditingMetadata* LinkPropertyMetadata::mutable_edit() {
  ::Property::LinkEditingMetadata* _msg = _internal_mutable_edit();
  // @@protoc_insertion_point(field_mutable:Property.LinkPropertyMetadata.edit)
  return _msg;
}
inline void LinkPropertyMetadata::set_allocated_edit(::Property::LinkEditingMetadata* edit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.edit_;
  }
  if (edit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(edit);
    if (message_arena != submessage_arena) {
      edit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, edit, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.edit_ = edit;
  // @@protoc_insertion_point(field_set_allocated:Property.LinkPropertyMetadata.edit)
}

// -------------------------------------------------------------------

// LinkGeneratorMetadata

// .Property.GeneratorMetadata base = 1;
inline bool LinkGeneratorMetadata::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool LinkGeneratorMetadata::has_base() const {
  return _internal_has_base();
}
inline void LinkGeneratorMetadata::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
inline const ::Property::GeneratorMetadata& LinkGeneratorMetadata::_internal_base() const {
  const ::Property::GeneratorMetadata* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::GeneratorMetadata&>(
      ::Property::_GeneratorMetadata_default_instance_);
}
inline const ::Property::GeneratorMetadata& LinkGeneratorMetadata::base() const {
  // @@protoc_insertion_point(field_get:Property.LinkGeneratorMetadata.base)
  return _internal_base();
}
inline void LinkGeneratorMetadata::unsafe_arena_set_allocated_base(
    ::Property::GeneratorMetadata* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.LinkGeneratorMetadata.base)
}
inline ::Property::GeneratorMetadata* LinkGeneratorMetadata::release_base() {
  
  ::Property::GeneratorMetadata* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::GeneratorMetadata* LinkGeneratorMetadata::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:Property.LinkGeneratorMetadata.base)
  
  ::Property::GeneratorMetadata* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::Property::GeneratorMetadata* LinkGeneratorMetadata::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::GeneratorMetadata>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::Property::GeneratorMetadata* LinkGeneratorMetadata::mutable_base() {
  ::Property::GeneratorMetadata* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:Property.LinkGeneratorMetadata.base)
  return _msg;
}
inline void LinkGeneratorMetadata::set_allocated_base(::Property::GeneratorMetadata* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:Property.LinkGeneratorMetadata.base)
}

// optional .Property.LinkEditingMetadata edit = 2;
inline bool LinkGeneratorMetadata::_internal_has_edit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.edit_ != nullptr);
  return value;
}
inline bool LinkGeneratorMetadata::has_edit() const {
  return _internal_has_edit();
}
inline void LinkGeneratorMetadata::clear_edit() {
  if (_impl_.edit_ != nullptr) _impl_.edit_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::Property::LinkEditingMetadata& LinkGeneratorMetadata::_internal_edit() const {
  const ::Property::LinkEditingMetadata* p = _impl_.edit_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::LinkEditingMetadata&>(
      ::Property::_LinkEditingMetadata_default_instance_);
}
inline const ::Property::LinkEditingMetadata& LinkGeneratorMetadata::edit() const {
  // @@protoc_insertion_point(field_get:Property.LinkGeneratorMetadata.edit)
  return _internal_edit();
}
inline void LinkGeneratorMetadata::unsafe_arena_set_allocated_edit(
    ::Property::LinkEditingMetadata* edit) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.edit_);
  }
  _impl_.edit_ = edit;
  if (edit) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.LinkGeneratorMetadata.edit)
}
inline ::Property::LinkEditingMetadata* LinkGeneratorMetadata::release_edit() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Property::LinkEditingMetadata* temp = _impl_.edit_;
  _impl_.edit_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::LinkEditingMetadata* LinkGeneratorMetadata::unsafe_arena_release_edit() {
  // @@protoc_insertion_point(field_release:Property.LinkGeneratorMetadata.edit)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Property::LinkEditingMetadata* temp = _impl_.edit_;
  _impl_.edit_ = nullptr;
  return temp;
}
inline ::Property::LinkEditingMetadata* LinkGeneratorMetadata::_internal_mutable_edit() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.edit_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::LinkEditingMetadata>(GetArenaForAllocation());
    _impl_.edit_ = p;
  }
  return _impl_.edit_;
}
inline ::Property::LinkEditingMetadata* LinkGeneratorMetadata::mutable_edit() {
  ::Property::LinkEditingMetadata* _msg = _internal_mutable_edit();
  // @@protoc_insertion_point(field_mutable:Property.LinkGeneratorMetadata.edit)
  return _msg;
}
inline void LinkGeneratorMetadata::set_allocated_edit(::Property::LinkEditingMetadata* edit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.edit_;
  }
  if (edit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(edit);
    if (message_arena != submessage_arena) {
      edit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, edit, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.edit_ = edit;
  // @@protoc_insertion_point(field_set_allocated:Property.LinkGeneratorMetadata.edit)
}

// -------------------------------------------------------------------

// LinkEditingMetadata

// optional .Property.LinkContentTypeSpecifier contentType = 1;
inline bool LinkEditingMetadata::_internal_has_contenttype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.contenttype_ != nullptr);
  return value;
}
inline bool LinkEditingMetadata::has_contenttype() const {
  return _internal_has_contenttype();
}
inline void LinkEditingMetadata::clear_contenttype() {
  if (_impl_.contenttype_ != nullptr) _impl_.contenttype_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::Property::LinkContentTypeSpecifier& LinkEditingMetadata::_internal_contenttype() const {
  const ::Property::LinkContentTypeSpecifier* p = _impl_.contenttype_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::LinkContentTypeSpecifier&>(
      ::Property::_LinkContentTypeSpecifier_default_instance_);
}
inline const ::Property::LinkContentTypeSpecifier& LinkEditingMetadata::contenttype() const {
  // @@protoc_insertion_point(field_get:Property.LinkEditingMetadata.contentType)
  return _internal_contenttype();
}
inline void LinkEditingMetadata::unsafe_arena_set_allocated_contenttype(
    ::Property::LinkContentTypeSpecifier* contenttype) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.contenttype_);
  }
  _impl_.contenttype_ = contenttype;
  if (contenttype) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.LinkEditingMetadata.contentType)
}
inline ::Property::LinkContentTypeSpecifier* LinkEditingMetadata::release_contenttype() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Property::LinkContentTypeSpecifier* temp = _impl_.contenttype_;
  _impl_.contenttype_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::LinkContentTypeSpecifier* LinkEditingMetadata::unsafe_arena_release_contenttype() {
  // @@protoc_insertion_point(field_release:Property.LinkEditingMetadata.contentType)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Property::LinkContentTypeSpecifier* temp = _impl_.contenttype_;
  _impl_.contenttype_ = nullptr;
  return temp;
}
inline ::Property::LinkContentTypeSpecifier* LinkEditingMetadata::_internal_mutable_contenttype() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.contenttype_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::LinkContentTypeSpecifier>(GetArenaForAllocation());
    _impl_.contenttype_ = p;
  }
  return _impl_.contenttype_;
}
inline ::Property::LinkContentTypeSpecifier* LinkEditingMetadata::mutable_contenttype() {
  ::Property::LinkContentTypeSpecifier* _msg = _internal_mutable_contenttype();
  // @@protoc_insertion_point(field_mutable:Property.LinkEditingMetadata.contentType)
  return _msg;
}
inline void LinkEditingMetadata::set_allocated_contenttype(::Property::LinkContentTypeSpecifier* contenttype) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.contenttype_;
  }
  if (contenttype) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(contenttype);
    if (message_arena != submessage_arena) {
      contenttype = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contenttype, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.contenttype_ = contenttype;
  // @@protoc_insertion_point(field_set_allocated:Property.LinkEditingMetadata.contentType)
}

// optional bool directToLibrary = 2;
inline bool LinkEditingMetadata::_internal_has_directtolibrary() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LinkEditingMetadata::has_directtolibrary() const {
  return _internal_has_directtolibrary();
}
inline void LinkEditingMetadata::clear_directtolibrary() {
  _impl_.directtolibrary_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool LinkEditingMetadata::_internal_directtolibrary() const {
  return _impl_.directtolibrary_;
}
inline bool LinkEditingMetadata::directtolibrary() const {
  // @@protoc_insertion_point(field_get:Property.LinkEditingMetadata.directToLibrary)
  return _internal_directtolibrary();
}
inline void LinkEditingMetadata::_internal_set_directtolibrary(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.directtolibrary_ = value;
}
inline void LinkEditingMetadata::set_directtolibrary(bool value) {
  _internal_set_directtolibrary(value);
  // @@protoc_insertion_point(field_set:Property.LinkEditingMetadata.directToLibrary)
}

// -------------------------------------------------------------------

// LinkContentTypeSpecifier

// .Property.LinkContentTypeSpecifier.TextureType Texture = 1;
inline bool LinkContentTypeSpecifier::_internal_has_texture() const {
  return ContentType_case() == kTexture;
}
inline bool LinkContentTypeSpecifier::has_texture() const {
  return _internal_has_texture();
}
inline void LinkContentTypeSpecifier::set_has_texture() {
  _impl_._oneof_case_[0] = kTexture;
}
inline void LinkContentTypeSpecifier::clear_texture() {
  if (_internal_has_texture()) {
    _impl_.ContentType_.texture_ = 0;
    clear_has_ContentType();
  }
}
inline ::Property::LinkContentTypeSpecifier_TextureType LinkContentTypeSpecifier::_internal_texture() const {
  if (_internal_has_texture()) {
    return static_cast< ::Property::LinkContentTypeSpecifier_TextureType >(_impl_.ContentType_.texture_);
  }
  return static_cast< ::Property::LinkContentTypeSpecifier_TextureType >(0);
}
inline ::Property::LinkContentTypeSpecifier_TextureType LinkContentTypeSpecifier::texture() const {
  // @@protoc_insertion_point(field_get:Property.LinkContentTypeSpecifier.Texture)
  return _internal_texture();
}
inline void LinkContentTypeSpecifier::_internal_set_texture(::Property::LinkContentTypeSpecifier_TextureType value) {
  if (!_internal_has_texture()) {
    clear_ContentType();
    set_has_texture();
  }
  _impl_.ContentType_.texture_ = value;
}
inline void LinkContentTypeSpecifier::set_texture(::Property::LinkContentTypeSpecifier_TextureType value) {
  _internal_set_texture(value);
  // @@protoc_insertion_point(field_set:Property.LinkContentTypeSpecifier.Texture)
}

// .Property.LinkContentTypeSpecifier.MaterialType Material = 2;
inline bool LinkContentTypeSpecifier::_internal_has_material() const {
  return ContentType_case() == kMaterial;
}
inline bool LinkContentTypeSpecifier::has_material() const {
  return _internal_has_material();
}
inline void LinkContentTypeSpecifier::set_has_material() {
  _impl_._oneof_case_[0] = kMaterial;
}
inline void LinkContentTypeSpecifier::clear_material() {
  if (_internal_has_material()) {
    _impl_.ContentType_.material_ = 0;
    clear_has_ContentType();
  }
}
inline ::Property::LinkContentTypeSpecifier_MaterialType LinkContentTypeSpecifier::_internal_material() const {
  if (_internal_has_material()) {
    return static_cast< ::Property::LinkContentTypeSpecifier_MaterialType >(_impl_.ContentType_.material_);
  }
  return static_cast< ::Property::LinkContentTypeSpecifier_MaterialType >(0);
}
inline ::Property::LinkContentTypeSpecifier_MaterialType LinkContentTypeSpecifier::material() const {
  // @@protoc_insertion_point(field_get:Property.LinkContentTypeSpecifier.Material)
  return _internal_material();
}
inline void LinkContentTypeSpecifier::_internal_set_material(::Property::LinkContentTypeSpecifier_MaterialType value) {
  if (!_internal_has_material()) {
    clear_ContentType();
    set_has_material();
  }
  _impl_.ContentType_.material_ = value;
}
inline void LinkContentTypeSpecifier::set_material(::Property::LinkContentTypeSpecifier_MaterialType value) {
  _internal_set_material(value);
  // @@protoc_insertion_point(field_set:Property.LinkContentTypeSpecifier.Material)
}

// .Property.LinkContentTypeSpecifier.GeometryType Geometry = 3;
inline bool LinkContentTypeSpecifier::_internal_has_geometry() const {
  return ContentType_case() == kGeometry;
}
inline bool LinkContentTypeSpecifier::has_geometry() const {
  return _internal_has_geometry();
}
inline void LinkContentTypeSpecifier::set_has_geometry() {
  _impl_._oneof_case_[0] = kGeometry;
}
inline void LinkContentTypeSpecifier::clear_geometry() {
  if (_internal_has_geometry()) {
    _impl_.ContentType_.geometry_ = 0;
    clear_has_ContentType();
  }
}
inline ::Property::LinkContentTypeSpecifier_GeometryType LinkContentTypeSpecifier::_internal_geometry() const {
  if (_internal_has_geometry()) {
    return static_cast< ::Property::LinkContentTypeSpecifier_GeometryType >(_impl_.ContentType_.geometry_);
  }
  return static_cast< ::Property::LinkContentTypeSpecifier_GeometryType >(0);
}
inline ::Property::LinkContentTypeSpecifier_GeometryType LinkContentTypeSpecifier::geometry() const {
  // @@protoc_insertion_point(field_get:Property.LinkContentTypeSpecifier.Geometry)
  return _internal_geometry();
}
inline void LinkContentTypeSpecifier::_internal_set_geometry(::Property::LinkContentTypeSpecifier_GeometryType value) {
  if (!_internal_has_geometry()) {
    clear_ContentType();
    set_has_geometry();
  }
  _impl_.ContentType_.geometry_ = value;
}
inline void LinkContentTypeSpecifier::set_geometry(::Property::LinkContentTypeSpecifier_GeometryType value) {
  _internal_set_geometry(value);
  // @@protoc_insertion_point(field_set:Property.LinkContentTypeSpecifier.Geometry)
}

inline bool LinkContentTypeSpecifier::has_ContentType() const {
  return ContentType_case() != CONTENTTYPE_NOT_SET;
}
inline void LinkContentTypeSpecifier::clear_has_ContentType() {
  _impl_._oneof_case_[0] = CONTENTTYPE_NOT_SET;
}
inline LinkContentTypeSpecifier::ContentTypeCase LinkContentTypeSpecifier::ContentType_case() const {
  return LinkContentTypeSpecifier::ContentTypeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// VectorPropertyAssignment

// optional .Property.VectorPropertyAssignment.VectorPropertyMethod method = 1;
inline bool VectorPropertyAssignment::_internal_has_method() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VectorPropertyAssignment::has_method() const {
  return _internal_has_method();
}
inline void VectorPropertyAssignment::clear_method() {
  _impl_.method_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::Property::VectorPropertyAssignment_VectorPropertyMethod VectorPropertyAssignment::_internal_method() const {
  return static_cast< ::Property::VectorPropertyAssignment_VectorPropertyMethod >(_impl_.method_);
}
inline ::Property::VectorPropertyAssignment_VectorPropertyMethod VectorPropertyAssignment::method() const {
  // @@protoc_insertion_point(field_get:Property.VectorPropertyAssignment.method)
  return _internal_method();
}
inline void VectorPropertyAssignment::_internal_set_method(::Property::VectorPropertyAssignment_VectorPropertyMethod value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.method_ = value;
}
inline void VectorPropertyAssignment::set_method(::Property::VectorPropertyAssignment_VectorPropertyMethod value) {
  _internal_set_method(value);
  // @@protoc_insertion_point(field_set:Property.VectorPropertyAssignment.method)
}

// optional int32 priority = 2;
inline bool VectorPropertyAssignment::_internal_has_priority() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VectorPropertyAssignment::has_priority() const {
  return _internal_has_priority();
}
inline void VectorPropertyAssignment::clear_priority() {
  _impl_.priority_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t VectorPropertyAssignment::_internal_priority() const {
  return _impl_.priority_;
}
inline int32_t VectorPropertyAssignment::priority() const {
  // @@protoc_insertion_point(field_get:Property.VectorPropertyAssignment.priority)
  return _internal_priority();
}
inline void VectorPropertyAssignment::_internal_set_priority(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.priority_ = value;
}
inline void VectorPropertyAssignment::set_priority(int32_t value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:Property.VectorPropertyAssignment.priority)
}

// string assignmentId = 4;
inline void VectorPropertyAssignment::clear_assignmentid() {
  _impl_.assignmentid_.ClearToEmpty();
}
inline const std::string& VectorPropertyAssignment::assignmentid() const {
  // @@protoc_insertion_point(field_get:Property.VectorPropertyAssignment.assignmentId)
  return _internal_assignmentid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VectorPropertyAssignment::set_assignmentid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.assignmentid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Property.VectorPropertyAssignment.assignmentId)
}
inline std::string* VectorPropertyAssignment::mutable_assignmentid() {
  std::string* _s = _internal_mutable_assignmentid();
  // @@protoc_insertion_point(field_mutable:Property.VectorPropertyAssignment.assignmentId)
  return _s;
}
inline const std::string& VectorPropertyAssignment::_internal_assignmentid() const {
  return _impl_.assignmentid_.Get();
}
inline void VectorPropertyAssignment::_internal_set_assignmentid(const std::string& value) {
  
  _impl_.assignmentid_.Set(value, GetArenaForAllocation());
}
inline std::string* VectorPropertyAssignment::_internal_mutable_assignmentid() {
  
  return _impl_.assignmentid_.Mutable(GetArenaForAllocation());
}
inline std::string* VectorPropertyAssignment::release_assignmentid() {
  // @@protoc_insertion_point(field_release:Property.VectorPropertyAssignment.assignmentId)
  return _impl_.assignmentid_.Release();
}
inline void VectorPropertyAssignment::set_allocated_assignmentid(std::string* assignmentid) {
  if (assignmentid != nullptr) {
    
  } else {
    
  }
  _impl_.assignmentid_.SetAllocated(assignmentid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.assignmentid_.IsDefault()) {
    _impl_.assignmentid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Property.VectorPropertyAssignment.assignmentId)
}

// .Property.VectorPropertyValue value = 3;
inline bool VectorPropertyAssignment::_internal_has_value() const {
  return this != internal_default_instance() && _impl_.value_ != nullptr;
}
inline bool VectorPropertyAssignment::has_value() const {
  return _internal_has_value();
}
inline void VectorPropertyAssignment::clear_value() {
  if (GetArenaForAllocation() == nullptr && _impl_.value_ != nullptr) {
    delete _impl_.value_;
  }
  _impl_.value_ = nullptr;
}
inline const ::Property::VectorPropertyValue& VectorPropertyAssignment::_internal_value() const {
  const ::Property::VectorPropertyValue* p = _impl_.value_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::VectorPropertyValue&>(
      ::Property::_VectorPropertyValue_default_instance_);
}
inline const ::Property::VectorPropertyValue& VectorPropertyAssignment::value() const {
  // @@protoc_insertion_point(field_get:Property.VectorPropertyAssignment.value)
  return _internal_value();
}
inline void VectorPropertyAssignment::unsafe_arena_set_allocated_value(
    ::Property::VectorPropertyValue* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_);
  }
  _impl_.value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.VectorPropertyAssignment.value)
}
inline ::Property::VectorPropertyValue* VectorPropertyAssignment::release_value() {
  
  ::Property::VectorPropertyValue* temp = _impl_.value_;
  _impl_.value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::VectorPropertyValue* VectorPropertyAssignment::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:Property.VectorPropertyAssignment.value)
  
  ::Property::VectorPropertyValue* temp = _impl_.value_;
  _impl_.value_ = nullptr;
  return temp;
}
inline ::Property::VectorPropertyValue* VectorPropertyAssignment::_internal_mutable_value() {
  
  if (_impl_.value_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::VectorPropertyValue>(GetArenaForAllocation());
    _impl_.value_ = p;
  }
  return _impl_.value_;
}
inline ::Property::VectorPropertyValue* VectorPropertyAssignment::mutable_value() {
  ::Property::VectorPropertyValue* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:Property.VectorPropertyAssignment.value)
  return _msg;
}
inline void VectorPropertyAssignment::set_allocated_value(::Property::VectorPropertyValue* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.value_ = value;
  // @@protoc_insertion_point(field_set_allocated:Property.VectorPropertyAssignment.value)
}

// -------------------------------------------------------------------

// VectorPropertyValue

// .Common.Float4 constant = 1;
inline bool VectorPropertyValue::_internal_has_constant() const {
  return ValueType_case() == kConstant;
}
inline bool VectorPropertyValue::has_constant() const {
  return _internal_has_constant();
}
inline void VectorPropertyValue::set_has_constant() {
  _impl_._oneof_case_[0] = kConstant;
}
inline ::Common::Float4* VectorPropertyValue::release_constant() {
  // @@protoc_insertion_point(field_release:Property.VectorPropertyValue.constant)
  if (_internal_has_constant()) {
    clear_has_ValueType();
    ::Common::Float4* temp = _impl_.ValueType_.constant_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.ValueType_.constant_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Common::Float4& VectorPropertyValue::_internal_constant() const {
  return _internal_has_constant()
      ? *_impl_.ValueType_.constant_
      : reinterpret_cast< ::Common::Float4&>(::Common::_Float4_default_instance_);
}
inline const ::Common::Float4& VectorPropertyValue::constant() const {
  // @@protoc_insertion_point(field_get:Property.VectorPropertyValue.constant)
  return _internal_constant();
}
inline ::Common::Float4* VectorPropertyValue::unsafe_arena_release_constant() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.VectorPropertyValue.constant)
  if (_internal_has_constant()) {
    clear_has_ValueType();
    ::Common::Float4* temp = _impl_.ValueType_.constant_;
    _impl_.ValueType_.constant_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void VectorPropertyValue::unsafe_arena_set_allocated_constant(::Common::Float4* constant) {
  clear_ValueType();
  if (constant) {
    set_has_constant();
    _impl_.ValueType_.constant_ = constant;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.VectorPropertyValue.constant)
}
inline ::Common::Float4* VectorPropertyValue::_internal_mutable_constant() {
  if (!_internal_has_constant()) {
    clear_ValueType();
    set_has_constant();
    _impl_.ValueType_.constant_ = CreateMaybeMessage< ::Common::Float4 >(GetArenaForAllocation());
  }
  return _impl_.ValueType_.constant_;
}
inline ::Common::Float4* VectorPropertyValue::mutable_constant() {
  ::Common::Float4* _msg = _internal_mutable_constant();
  // @@protoc_insertion_point(field_mutable:Property.VectorPropertyValue.constant)
  return _msg;
}

// .Property.PropertyIdentifier ref = 2;
inline bool VectorPropertyValue::_internal_has_ref() const {
  return ValueType_case() == kRef;
}
inline bool VectorPropertyValue::has_ref() const {
  return _internal_has_ref();
}
inline void VectorPropertyValue::set_has_ref() {
  _impl_._oneof_case_[0] = kRef;
}
inline void VectorPropertyValue::clear_ref() {
  if (_internal_has_ref()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.ValueType_.ref_;
    }
    clear_has_ValueType();
  }
}
inline ::Property::PropertyIdentifier* VectorPropertyValue::release_ref() {
  // @@protoc_insertion_point(field_release:Property.VectorPropertyValue.ref)
  if (_internal_has_ref()) {
    clear_has_ValueType();
    ::Property::PropertyIdentifier* temp = _impl_.ValueType_.ref_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.ValueType_.ref_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::PropertyIdentifier& VectorPropertyValue::_internal_ref() const {
  return _internal_has_ref()
      ? *_impl_.ValueType_.ref_
      : reinterpret_cast< ::Property::PropertyIdentifier&>(::Property::_PropertyIdentifier_default_instance_);
}
inline const ::Property::PropertyIdentifier& VectorPropertyValue::ref() const {
  // @@protoc_insertion_point(field_get:Property.VectorPropertyValue.ref)
  return _internal_ref();
}
inline ::Property::PropertyIdentifier* VectorPropertyValue::unsafe_arena_release_ref() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.VectorPropertyValue.ref)
  if (_internal_has_ref()) {
    clear_has_ValueType();
    ::Property::PropertyIdentifier* temp = _impl_.ValueType_.ref_;
    _impl_.ValueType_.ref_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void VectorPropertyValue::unsafe_arena_set_allocated_ref(::Property::PropertyIdentifier* ref) {
  clear_ValueType();
  if (ref) {
    set_has_ref();
    _impl_.ValueType_.ref_ = ref;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.VectorPropertyValue.ref)
}
inline ::Property::PropertyIdentifier* VectorPropertyValue::_internal_mutable_ref() {
  if (!_internal_has_ref()) {
    clear_ValueType();
    set_has_ref();
    _impl_.ValueType_.ref_ = CreateMaybeMessage< ::Property::PropertyIdentifier >(GetArenaForAllocation());
  }
  return _impl_.ValueType_.ref_;
}
inline ::Property::PropertyIdentifier* VectorPropertyValue::mutable_ref() {
  ::Property::PropertyIdentifier* _msg = _internal_mutable_ref();
  // @@protoc_insertion_point(field_mutable:Property.VectorPropertyValue.ref)
  return _msg;
}

// string expr = 3;
inline bool VectorPropertyValue::_internal_has_expr() const {
  return ValueType_case() == kExpr;
}
inline bool VectorPropertyValue::has_expr() const {
  return _internal_has_expr();
}
inline void VectorPropertyValue::set_has_expr() {
  _impl_._oneof_case_[0] = kExpr;
}
inline void VectorPropertyValue::clear_expr() {
  if (_internal_has_expr()) {
    _impl_.ValueType_.expr_.Destroy();
    clear_has_ValueType();
  }
}
inline const std::string& VectorPropertyValue::expr() const {
  // @@protoc_insertion_point(field_get:Property.VectorPropertyValue.expr)
  return _internal_expr();
}
template <typename ArgT0, typename... ArgT>
inline void VectorPropertyValue::set_expr(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_expr()) {
    clear_ValueType();
    set_has_expr();
    _impl_.ValueType_.expr_.InitDefault();
  }
  _impl_.ValueType_.expr_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Property.VectorPropertyValue.expr)
}
inline std::string* VectorPropertyValue::mutable_expr() {
  std::string* _s = _internal_mutable_expr();
  // @@protoc_insertion_point(field_mutable:Property.VectorPropertyValue.expr)
  return _s;
}
inline const std::string& VectorPropertyValue::_internal_expr() const {
  if (_internal_has_expr()) {
    return _impl_.ValueType_.expr_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void VectorPropertyValue::_internal_set_expr(const std::string& value) {
  if (!_internal_has_expr()) {
    clear_ValueType();
    set_has_expr();
    _impl_.ValueType_.expr_.InitDefault();
  }
  _impl_.ValueType_.expr_.Set(value, GetArenaForAllocation());
}
inline std::string* VectorPropertyValue::_internal_mutable_expr() {
  if (!_internal_has_expr()) {
    clear_ValueType();
    set_has_expr();
    _impl_.ValueType_.expr_.InitDefault();
  }
  return _impl_.ValueType_.expr_.Mutable(      GetArenaForAllocation());
}
inline std::string* VectorPropertyValue::release_expr() {
  // @@protoc_insertion_point(field_release:Property.VectorPropertyValue.expr)
  if (_internal_has_expr()) {
    clear_has_ValueType();
    return _impl_.ValueType_.expr_.Release();
  } else {
    return nullptr;
  }
}
inline void VectorPropertyValue::set_allocated_expr(std::string* expr) {
  if (has_ValueType()) {
    clear_ValueType();
  }
  if (expr != nullptr) {
    set_has_expr();
    _impl_.ValueType_.expr_.InitAllocated(expr, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:Property.VectorPropertyValue.expr)
}

// .Property.VectorPerChannel byChannel = 4;
inline bool VectorPropertyValue::_internal_has_bychannel() const {
  return ValueType_case() == kByChannel;
}
inline bool VectorPropertyValue::has_bychannel() const {
  return _internal_has_bychannel();
}
inline void VectorPropertyValue::set_has_bychannel() {
  _impl_._oneof_case_[0] = kByChannel;
}
inline void VectorPropertyValue::clear_bychannel() {
  if (_internal_has_bychannel()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.ValueType_.bychannel_;
    }
    clear_has_ValueType();
  }
}
inline ::Property::VectorPerChannel* VectorPropertyValue::release_bychannel() {
  // @@protoc_insertion_point(field_release:Property.VectorPropertyValue.byChannel)
  if (_internal_has_bychannel()) {
    clear_has_ValueType();
    ::Property::VectorPerChannel* temp = _impl_.ValueType_.bychannel_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.ValueType_.bychannel_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::VectorPerChannel& VectorPropertyValue::_internal_bychannel() const {
  return _internal_has_bychannel()
      ? *_impl_.ValueType_.bychannel_
      : reinterpret_cast< ::Property::VectorPerChannel&>(::Property::_VectorPerChannel_default_instance_);
}
inline const ::Property::VectorPerChannel& VectorPropertyValue::bychannel() const {
  // @@protoc_insertion_point(field_get:Property.VectorPropertyValue.byChannel)
  return _internal_bychannel();
}
inline ::Property::VectorPerChannel* VectorPropertyValue::unsafe_arena_release_bychannel() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.VectorPropertyValue.byChannel)
  if (_internal_has_bychannel()) {
    clear_has_ValueType();
    ::Property::VectorPerChannel* temp = _impl_.ValueType_.bychannel_;
    _impl_.ValueType_.bychannel_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void VectorPropertyValue::unsafe_arena_set_allocated_bychannel(::Property::VectorPerChannel* bychannel) {
  clear_ValueType();
  if (bychannel) {
    set_has_bychannel();
    _impl_.ValueType_.bychannel_ = bychannel;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.VectorPropertyValue.byChannel)
}
inline ::Property::VectorPerChannel* VectorPropertyValue::_internal_mutable_bychannel() {
  if (!_internal_has_bychannel()) {
    clear_ValueType();
    set_has_bychannel();
    _impl_.ValueType_.bychannel_ = CreateMaybeMessage< ::Property::VectorPerChannel >(GetArenaForAllocation());
  }
  return _impl_.ValueType_.bychannel_;
}
inline ::Property::VectorPerChannel* VectorPropertyValue::mutable_bychannel() {
  ::Property::VectorPerChannel* _msg = _internal_mutable_bychannel();
  // @@protoc_insertion_point(field_mutable:Property.VectorPropertyValue.byChannel)
  return _msg;
}

// .Property.VectorPropertyKeyframed keyframes = 5;
inline bool VectorPropertyValue::_internal_has_keyframes() const {
  return ValueType_case() == kKeyframes;
}
inline bool VectorPropertyValue::has_keyframes() const {
  return _internal_has_keyframes();
}
inline void VectorPropertyValue::set_has_keyframes() {
  _impl_._oneof_case_[0] = kKeyframes;
}
inline void VectorPropertyValue::clear_keyframes() {
  if (_internal_has_keyframes()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.ValueType_.keyframes_;
    }
    clear_has_ValueType();
  }
}
inline ::Property::VectorPropertyKeyframed* VectorPropertyValue::release_keyframes() {
  // @@protoc_insertion_point(field_release:Property.VectorPropertyValue.keyframes)
  if (_internal_has_keyframes()) {
    clear_has_ValueType();
    ::Property::VectorPropertyKeyframed* temp = _impl_.ValueType_.keyframes_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.ValueType_.keyframes_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::VectorPropertyKeyframed& VectorPropertyValue::_internal_keyframes() const {
  return _internal_has_keyframes()
      ? *_impl_.ValueType_.keyframes_
      : reinterpret_cast< ::Property::VectorPropertyKeyframed&>(::Property::_VectorPropertyKeyframed_default_instance_);
}
inline const ::Property::VectorPropertyKeyframed& VectorPropertyValue::keyframes() const {
  // @@protoc_insertion_point(field_get:Property.VectorPropertyValue.keyframes)
  return _internal_keyframes();
}
inline ::Property::VectorPropertyKeyframed* VectorPropertyValue::unsafe_arena_release_keyframes() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.VectorPropertyValue.keyframes)
  if (_internal_has_keyframes()) {
    clear_has_ValueType();
    ::Property::VectorPropertyKeyframed* temp = _impl_.ValueType_.keyframes_;
    _impl_.ValueType_.keyframes_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void VectorPropertyValue::unsafe_arena_set_allocated_keyframes(::Property::VectorPropertyKeyframed* keyframes) {
  clear_ValueType();
  if (keyframes) {
    set_has_keyframes();
    _impl_.ValueType_.keyframes_ = keyframes;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.VectorPropertyValue.keyframes)
}
inline ::Property::VectorPropertyKeyframed* VectorPropertyValue::_internal_mutable_keyframes() {
  if (!_internal_has_keyframes()) {
    clear_ValueType();
    set_has_keyframes();
    _impl_.ValueType_.keyframes_ = CreateMaybeMessage< ::Property::VectorPropertyKeyframed >(GetArenaForAllocation());
  }
  return _impl_.ValueType_.keyframes_;
}
inline ::Property::VectorPropertyKeyframed* VectorPropertyValue::mutable_keyframes() {
  ::Property::VectorPropertyKeyframed* _msg = _internal_mutable_keyframes();
  // @@protoc_insertion_point(field_mutable:Property.VectorPropertyValue.keyframes)
  return _msg;
}

// bool useDefault = 6;
inline bool VectorPropertyValue::_internal_has_usedefault() const {
  return ValueType_case() == kUseDefault;
}
inline bool VectorPropertyValue::has_usedefault() const {
  return _internal_has_usedefault();
}
inline void VectorPropertyValue::set_has_usedefault() {
  _impl_._oneof_case_[0] = kUseDefault;
}
inline void VectorPropertyValue::clear_usedefault() {
  if (_internal_has_usedefault()) {
    _impl_.ValueType_.usedefault_ = false;
    clear_has_ValueType();
  }
}
inline bool VectorPropertyValue::_internal_usedefault() const {
  if (_internal_has_usedefault()) {
    return _impl_.ValueType_.usedefault_;
  }
  return false;
}
inline void VectorPropertyValue::_internal_set_usedefault(bool value) {
  if (!_internal_has_usedefault()) {
    clear_ValueType();
    set_has_usedefault();
  }
  _impl_.ValueType_.usedefault_ = value;
}
inline bool VectorPropertyValue::usedefault() const {
  // @@protoc_insertion_point(field_get:Property.VectorPropertyValue.useDefault)
  return _internal_usedefault();
}
inline void VectorPropertyValue::set_usedefault(bool value) {
  _internal_set_usedefault(value);
  // @@protoc_insertion_point(field_set:Property.VectorPropertyValue.useDefault)
}

// .Property.VectorPropertyInterpolator interp = 9;
inline bool VectorPropertyValue::_internal_has_interp() const {
  return ValueType_case() == kInterp;
}
inline bool VectorPropertyValue::has_interp() const {
  return _internal_has_interp();
}
inline void VectorPropertyValue::set_has_interp() {
  _impl_._oneof_case_[0] = kInterp;
}
inline void VectorPropertyValue::clear_interp() {
  if (_internal_has_interp()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.ValueType_.interp_;
    }
    clear_has_ValueType();
  }
}
inline ::Property::VectorPropertyInterpolator* VectorPropertyValue::release_interp() {
  // @@protoc_insertion_point(field_release:Property.VectorPropertyValue.interp)
  if (_internal_has_interp()) {
    clear_has_ValueType();
    ::Property::VectorPropertyInterpolator* temp = _impl_.ValueType_.interp_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.ValueType_.interp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::VectorPropertyInterpolator& VectorPropertyValue::_internal_interp() const {
  return _internal_has_interp()
      ? *_impl_.ValueType_.interp_
      : reinterpret_cast< ::Property::VectorPropertyInterpolator&>(::Property::_VectorPropertyInterpolator_default_instance_);
}
inline const ::Property::VectorPropertyInterpolator& VectorPropertyValue::interp() const {
  // @@protoc_insertion_point(field_get:Property.VectorPropertyValue.interp)
  return _internal_interp();
}
inline ::Property::VectorPropertyInterpolator* VectorPropertyValue::unsafe_arena_release_interp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.VectorPropertyValue.interp)
  if (_internal_has_interp()) {
    clear_has_ValueType();
    ::Property::VectorPropertyInterpolator* temp = _impl_.ValueType_.interp_;
    _impl_.ValueType_.interp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void VectorPropertyValue::unsafe_arena_set_allocated_interp(::Property::VectorPropertyInterpolator* interp) {
  clear_ValueType();
  if (interp) {
    set_has_interp();
    _impl_.ValueType_.interp_ = interp;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.VectorPropertyValue.interp)
}
inline ::Property::VectorPropertyInterpolator* VectorPropertyValue::_internal_mutable_interp() {
  if (!_internal_has_interp()) {
    clear_ValueType();
    set_has_interp();
    _impl_.ValueType_.interp_ = CreateMaybeMessage< ::Property::VectorPropertyInterpolator >(GetArenaForAllocation());
  }
  return _impl_.ValueType_.interp_;
}
inline ::Property::VectorPropertyInterpolator* VectorPropertyValue::mutable_interp() {
  ::Property::VectorPropertyInterpolator* _msg = _internal_mutable_interp();
  // @@protoc_insertion_point(field_mutable:Property.VectorPropertyValue.interp)
  return _msg;
}

// .Property.CustomGeneratorValue custom = 10;
inline bool VectorPropertyValue::_internal_has_custom() const {
  return ValueType_case() == kCustom;
}
inline bool VectorPropertyValue::has_custom() const {
  return _internal_has_custom();
}
inline void VectorPropertyValue::set_has_custom() {
  _impl_._oneof_case_[0] = kCustom;
}
inline void VectorPropertyValue::clear_custom() {
  if (_internal_has_custom()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.ValueType_.custom_;
    }
    clear_has_ValueType();
  }
}
inline ::Property::CustomGeneratorValue* VectorPropertyValue::release_custom() {
  // @@protoc_insertion_point(field_release:Property.VectorPropertyValue.custom)
  if (_internal_has_custom()) {
    clear_has_ValueType();
    ::Property::CustomGeneratorValue* temp = _impl_.ValueType_.custom_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.ValueType_.custom_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::CustomGeneratorValue& VectorPropertyValue::_internal_custom() const {
  return _internal_has_custom()
      ? *_impl_.ValueType_.custom_
      : reinterpret_cast< ::Property::CustomGeneratorValue&>(::Property::_CustomGeneratorValue_default_instance_);
}
inline const ::Property::CustomGeneratorValue& VectorPropertyValue::custom() const {
  // @@protoc_insertion_point(field_get:Property.VectorPropertyValue.custom)
  return _internal_custom();
}
inline ::Property::CustomGeneratorValue* VectorPropertyValue::unsafe_arena_release_custom() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.VectorPropertyValue.custom)
  if (_internal_has_custom()) {
    clear_has_ValueType();
    ::Property::CustomGeneratorValue* temp = _impl_.ValueType_.custom_;
    _impl_.ValueType_.custom_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void VectorPropertyValue::unsafe_arena_set_allocated_custom(::Property::CustomGeneratorValue* custom) {
  clear_ValueType();
  if (custom) {
    set_has_custom();
    _impl_.ValueType_.custom_ = custom;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.VectorPropertyValue.custom)
}
inline ::Property::CustomGeneratorValue* VectorPropertyValue::_internal_mutable_custom() {
  if (!_internal_has_custom()) {
    clear_ValueType();
    set_has_custom();
    _impl_.ValueType_.custom_ = CreateMaybeMessage< ::Property::CustomGeneratorValue >(GetArenaForAllocation());
  }
  return _impl_.ValueType_.custom_;
}
inline ::Property::CustomGeneratorValue* VectorPropertyValue::mutable_custom() {
  ::Property::CustomGeneratorValue* _msg = _internal_mutable_custom();
  // @@protoc_insertion_point(field_mutable:Property.VectorPropertyValue.custom)
  return _msg;
}

// .Property.VectorPropertyQuadratic quadratic = 11;
inline bool VectorPropertyValue::_internal_has_quadratic() const {
  return ValueType_case() == kQuadratic;
}
inline bool VectorPropertyValue::has_quadratic() const {
  return _internal_has_quadratic();
}
inline void VectorPropertyValue::set_has_quadratic() {
  _impl_._oneof_case_[0] = kQuadratic;
}
inline void VectorPropertyValue::clear_quadratic() {
  if (_internal_has_quadratic()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.ValueType_.quadratic_;
    }
    clear_has_ValueType();
  }
}
inline ::Property::VectorPropertyQuadratic* VectorPropertyValue::release_quadratic() {
  // @@protoc_insertion_point(field_release:Property.VectorPropertyValue.quadratic)
  if (_internal_has_quadratic()) {
    clear_has_ValueType();
    ::Property::VectorPropertyQuadratic* temp = _impl_.ValueType_.quadratic_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.ValueType_.quadratic_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::VectorPropertyQuadratic& VectorPropertyValue::_internal_quadratic() const {
  return _internal_has_quadratic()
      ? *_impl_.ValueType_.quadratic_
      : reinterpret_cast< ::Property::VectorPropertyQuadratic&>(::Property::_VectorPropertyQuadratic_default_instance_);
}
inline const ::Property::VectorPropertyQuadratic& VectorPropertyValue::quadratic() const {
  // @@protoc_insertion_point(field_get:Property.VectorPropertyValue.quadratic)
  return _internal_quadratic();
}
inline ::Property::VectorPropertyQuadratic* VectorPropertyValue::unsafe_arena_release_quadratic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.VectorPropertyValue.quadratic)
  if (_internal_has_quadratic()) {
    clear_has_ValueType();
    ::Property::VectorPropertyQuadratic* temp = _impl_.ValueType_.quadratic_;
    _impl_.ValueType_.quadratic_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void VectorPropertyValue::unsafe_arena_set_allocated_quadratic(::Property::VectorPropertyQuadratic* quadratic) {
  clear_ValueType();
  if (quadratic) {
    set_has_quadratic();
    _impl_.ValueType_.quadratic_ = quadratic;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.VectorPropertyValue.quadratic)
}
inline ::Property::VectorPropertyQuadratic* VectorPropertyValue::_internal_mutable_quadratic() {
  if (!_internal_has_quadratic()) {
    clear_ValueType();
    set_has_quadratic();
    _impl_.ValueType_.quadratic_ = CreateMaybeMessage< ::Property::VectorPropertyQuadratic >(GetArenaForAllocation());
  }
  return _impl_.ValueType_.quadratic_;
}
inline ::Property::VectorPropertyQuadratic* VectorPropertyValue::mutable_quadratic() {
  ::Property::VectorPropertyQuadratic* _msg = _internal_mutable_quadratic();
  // @@protoc_insertion_point(field_mutable:Property.VectorPropertyValue.quadratic)
  return _msg;
}

// .Property.ScalarPropertyValue uniform = 12;
inline bool VectorPropertyValue::_internal_has_uniform() const {
  return ValueType_case() == kUniform;
}
inline bool VectorPropertyValue::has_uniform() const {
  return _internal_has_uniform();
}
inline void VectorPropertyValue::set_has_uniform() {
  _impl_._oneof_case_[0] = kUniform;
}
inline void VectorPropertyValue::clear_uniform() {
  if (_internal_has_uniform()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.ValueType_.uniform_;
    }
    clear_has_ValueType();
  }
}
inline ::Property::ScalarPropertyValue* VectorPropertyValue::release_uniform() {
  // @@protoc_insertion_point(field_release:Property.VectorPropertyValue.uniform)
  if (_internal_has_uniform()) {
    clear_has_ValueType();
    ::Property::ScalarPropertyValue* temp = _impl_.ValueType_.uniform_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.ValueType_.uniform_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::ScalarPropertyValue& VectorPropertyValue::_internal_uniform() const {
  return _internal_has_uniform()
      ? *_impl_.ValueType_.uniform_
      : reinterpret_cast< ::Property::ScalarPropertyValue&>(::Property::_ScalarPropertyValue_default_instance_);
}
inline const ::Property::ScalarPropertyValue& VectorPropertyValue::uniform() const {
  // @@protoc_insertion_point(field_get:Property.VectorPropertyValue.uniform)
  return _internal_uniform();
}
inline ::Property::ScalarPropertyValue* VectorPropertyValue::unsafe_arena_release_uniform() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.VectorPropertyValue.uniform)
  if (_internal_has_uniform()) {
    clear_has_ValueType();
    ::Property::ScalarPropertyValue* temp = _impl_.ValueType_.uniform_;
    _impl_.ValueType_.uniform_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void VectorPropertyValue::unsafe_arena_set_allocated_uniform(::Property::ScalarPropertyValue* uniform) {
  clear_ValueType();
  if (uniform) {
    set_has_uniform();
    _impl_.ValueType_.uniform_ = uniform;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.VectorPropertyValue.uniform)
}
inline ::Property::ScalarPropertyValue* VectorPropertyValue::_internal_mutable_uniform() {
  if (!_internal_has_uniform()) {
    clear_ValueType();
    set_has_uniform();
    _impl_.ValueType_.uniform_ = CreateMaybeMessage< ::Property::ScalarPropertyValue >(GetArenaForAllocation());
  }
  return _impl_.ValueType_.uniform_;
}
inline ::Property::ScalarPropertyValue* VectorPropertyValue::mutable_uniform() {
  ::Property::ScalarPropertyValue* _msg = _internal_mutable_uniform();
  // @@protoc_insertion_point(field_mutable:Property.VectorPropertyValue.uniform)
  return _msg;
}

// .Property.VectorPropertyApproach approach = 13;
inline bool VectorPropertyValue::_internal_has_approach() const {
  return ValueType_case() == kApproach;
}
inline bool VectorPropertyValue::has_approach() const {
  return _internal_has_approach();
}
inline void VectorPropertyValue::set_has_approach() {
  _impl_._oneof_case_[0] = kApproach;
}
inline void VectorPropertyValue::clear_approach() {
  if (_internal_has_approach()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.ValueType_.approach_;
    }
    clear_has_ValueType();
  }
}
inline ::Property::VectorPropertyApproach* VectorPropertyValue::release_approach() {
  // @@protoc_insertion_point(field_release:Property.VectorPropertyValue.approach)
  if (_internal_has_approach()) {
    clear_has_ValueType();
    ::Property::VectorPropertyApproach* temp = _impl_.ValueType_.approach_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.ValueType_.approach_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::VectorPropertyApproach& VectorPropertyValue::_internal_approach() const {
  return _internal_has_approach()
      ? *_impl_.ValueType_.approach_
      : reinterpret_cast< ::Property::VectorPropertyApproach&>(::Property::_VectorPropertyApproach_default_instance_);
}
inline const ::Property::VectorPropertyApproach& VectorPropertyValue::approach() const {
  // @@protoc_insertion_point(field_get:Property.VectorPropertyValue.approach)
  return _internal_approach();
}
inline ::Property::VectorPropertyApproach* VectorPropertyValue::unsafe_arena_release_approach() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.VectorPropertyValue.approach)
  if (_internal_has_approach()) {
    clear_has_ValueType();
    ::Property::VectorPropertyApproach* temp = _impl_.ValueType_.approach_;
    _impl_.ValueType_.approach_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void VectorPropertyValue::unsafe_arena_set_allocated_approach(::Property::VectorPropertyApproach* approach) {
  clear_ValueType();
  if (approach) {
    set_has_approach();
    _impl_.ValueType_.approach_ = approach;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.VectorPropertyValue.approach)
}
inline ::Property::VectorPropertyApproach* VectorPropertyValue::_internal_mutable_approach() {
  if (!_internal_has_approach()) {
    clear_ValueType();
    set_has_approach();
    _impl_.ValueType_.approach_ = CreateMaybeMessage< ::Property::VectorPropertyApproach >(GetArenaForAllocation());
  }
  return _impl_.ValueType_.approach_;
}
inline ::Property::VectorPropertyApproach* VectorPropertyValue::mutable_approach() {
  ::Property::VectorPropertyApproach* _msg = _internal_mutable_approach();
  // @@protoc_insertion_point(field_mutable:Property.VectorPropertyValue.approach)
  return _msg;
}

inline bool VectorPropertyValue::has_ValueType() const {
  return ValueType_case() != VALUETYPE_NOT_SET;
}
inline void VectorPropertyValue::clear_has_ValueType() {
  _impl_._oneof_case_[0] = VALUETYPE_NOT_SET;
}
inline VectorPropertyValue::ValueTypeCase VectorPropertyValue::ValueType_case() const {
  return VectorPropertyValue::ValueTypeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// VectorPropertyInterpolator

// .Property.ScalarPropertyValue t = 4;
inline bool VectorPropertyInterpolator::_internal_has_t() const {
  return this != internal_default_instance() && _impl_.t_ != nullptr;
}
inline bool VectorPropertyInterpolator::has_t() const {
  return _internal_has_t();
}
inline void VectorPropertyInterpolator::clear_t() {
  if (GetArenaForAllocation() == nullptr && _impl_.t_ != nullptr) {
    delete _impl_.t_;
  }
  _impl_.t_ = nullptr;
}
inline const ::Property::ScalarPropertyValue& VectorPropertyInterpolator::_internal_t() const {
  const ::Property::ScalarPropertyValue* p = _impl_.t_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::ScalarPropertyValue&>(
      ::Property::_ScalarPropertyValue_default_instance_);
}
inline const ::Property::ScalarPropertyValue& VectorPropertyInterpolator::t() const {
  // @@protoc_insertion_point(field_get:Property.VectorPropertyInterpolator.t)
  return _internal_t();
}
inline void VectorPropertyInterpolator::unsafe_arena_set_allocated_t(
    ::Property::ScalarPropertyValue* t) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.t_);
  }
  _impl_.t_ = t;
  if (t) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.VectorPropertyInterpolator.t)
}
inline ::Property::ScalarPropertyValue* VectorPropertyInterpolator::release_t() {
  
  ::Property::ScalarPropertyValue* temp = _impl_.t_;
  _impl_.t_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::ScalarPropertyValue* VectorPropertyInterpolator::unsafe_arena_release_t() {
  // @@protoc_insertion_point(field_release:Property.VectorPropertyInterpolator.t)
  
  ::Property::ScalarPropertyValue* temp = _impl_.t_;
  _impl_.t_ = nullptr;
  return temp;
}
inline ::Property::ScalarPropertyValue* VectorPropertyInterpolator::_internal_mutable_t() {
  
  if (_impl_.t_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::ScalarPropertyValue>(GetArenaForAllocation());
    _impl_.t_ = p;
  }
  return _impl_.t_;
}
inline ::Property::ScalarPropertyValue* VectorPropertyInterpolator::mutable_t() {
  ::Property::ScalarPropertyValue* _msg = _internal_mutable_t();
  // @@protoc_insertion_point(field_mutable:Property.VectorPropertyInterpolator.t)
  return _msg;
}
inline void VectorPropertyInterpolator::set_allocated_t(::Property::ScalarPropertyValue* t) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.t_;
  }
  if (t) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(t);
    if (message_arena != submessage_arena) {
      t = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, t, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.t_ = t;
  // @@protoc_insertion_point(field_set_allocated:Property.VectorPropertyInterpolator.t)
}

// .Property.VectorPropertyValue from = 1;
inline bool VectorPropertyInterpolator::_internal_has_from() const {
  return this != internal_default_instance() && _impl_.from_ != nullptr;
}
inline bool VectorPropertyInterpolator::has_from() const {
  return _internal_has_from();
}
inline void VectorPropertyInterpolator::clear_from() {
  if (GetArenaForAllocation() == nullptr && _impl_.from_ != nullptr) {
    delete _impl_.from_;
  }
  _impl_.from_ = nullptr;
}
inline const ::Property::VectorPropertyValue& VectorPropertyInterpolator::_internal_from() const {
  const ::Property::VectorPropertyValue* p = _impl_.from_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::VectorPropertyValue&>(
      ::Property::_VectorPropertyValue_default_instance_);
}
inline const ::Property::VectorPropertyValue& VectorPropertyInterpolator::from() const {
  // @@protoc_insertion_point(field_get:Property.VectorPropertyInterpolator.from)
  return _internal_from();
}
inline void VectorPropertyInterpolator::unsafe_arena_set_allocated_from(
    ::Property::VectorPropertyValue* from) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.from_);
  }
  _impl_.from_ = from;
  if (from) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.VectorPropertyInterpolator.from)
}
inline ::Property::VectorPropertyValue* VectorPropertyInterpolator::release_from() {
  
  ::Property::VectorPropertyValue* temp = _impl_.from_;
  _impl_.from_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::VectorPropertyValue* VectorPropertyInterpolator::unsafe_arena_release_from() {
  // @@protoc_insertion_point(field_release:Property.VectorPropertyInterpolator.from)
  
  ::Property::VectorPropertyValue* temp = _impl_.from_;
  _impl_.from_ = nullptr;
  return temp;
}
inline ::Property::VectorPropertyValue* VectorPropertyInterpolator::_internal_mutable_from() {
  
  if (_impl_.from_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::VectorPropertyValue>(GetArenaForAllocation());
    _impl_.from_ = p;
  }
  return _impl_.from_;
}
inline ::Property::VectorPropertyValue* VectorPropertyInterpolator::mutable_from() {
  ::Property::VectorPropertyValue* _msg = _internal_mutable_from();
  // @@protoc_insertion_point(field_mutable:Property.VectorPropertyInterpolator.from)
  return _msg;
}
inline void VectorPropertyInterpolator::set_allocated_from(::Property::VectorPropertyValue* from) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.from_;
  }
  if (from) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(from);
    if (message_arena != submessage_arena) {
      from = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, from, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.from_ = from;
  // @@protoc_insertion_point(field_set_allocated:Property.VectorPropertyInterpolator.from)
}

// .Property.VectorPropertyValue to = 2;
inline bool VectorPropertyInterpolator::_internal_has_to() const {
  return this != internal_default_instance() && _impl_.to_ != nullptr;
}
inline bool VectorPropertyInterpolator::has_to() const {
  return _internal_has_to();
}
inline void VectorPropertyInterpolator::clear_to() {
  if (GetArenaForAllocation() == nullptr && _impl_.to_ != nullptr) {
    delete _impl_.to_;
  }
  _impl_.to_ = nullptr;
}
inline const ::Property::VectorPropertyValue& VectorPropertyInterpolator::_internal_to() const {
  const ::Property::VectorPropertyValue* p = _impl_.to_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::VectorPropertyValue&>(
      ::Property::_VectorPropertyValue_default_instance_);
}
inline const ::Property::VectorPropertyValue& VectorPropertyInterpolator::to() const {
  // @@protoc_insertion_point(field_get:Property.VectorPropertyInterpolator.to)
  return _internal_to();
}
inline void VectorPropertyInterpolator::unsafe_arena_set_allocated_to(
    ::Property::VectorPropertyValue* to) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.to_);
  }
  _impl_.to_ = to;
  if (to) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.VectorPropertyInterpolator.to)
}
inline ::Property::VectorPropertyValue* VectorPropertyInterpolator::release_to() {
  
  ::Property::VectorPropertyValue* temp = _impl_.to_;
  _impl_.to_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::VectorPropertyValue* VectorPropertyInterpolator::unsafe_arena_release_to() {
  // @@protoc_insertion_point(field_release:Property.VectorPropertyInterpolator.to)
  
  ::Property::VectorPropertyValue* temp = _impl_.to_;
  _impl_.to_ = nullptr;
  return temp;
}
inline ::Property::VectorPropertyValue* VectorPropertyInterpolator::_internal_mutable_to() {
  
  if (_impl_.to_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::VectorPropertyValue>(GetArenaForAllocation());
    _impl_.to_ = p;
  }
  return _impl_.to_;
}
inline ::Property::VectorPropertyValue* VectorPropertyInterpolator::mutable_to() {
  ::Property::VectorPropertyValue* _msg = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:Property.VectorPropertyInterpolator.to)
  return _msg;
}
inline void VectorPropertyInterpolator::set_allocated_to(::Property::VectorPropertyValue* to) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.to_;
  }
  if (to) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(to);
    if (message_arena != submessage_arena) {
      to = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, to, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.to_ = to;
  // @@protoc_insertion_point(field_set_allocated:Property.VectorPropertyInterpolator.to)
}

// .Property.Interpolation by = 3;
inline bool VectorPropertyInterpolator::_internal_has_by() const {
  return this != internal_default_instance() && _impl_.by_ != nullptr;
}
inline bool VectorPropertyInterpolator::has_by() const {
  return _internal_has_by();
}
inline void VectorPropertyInterpolator::clear_by() {
  if (GetArenaForAllocation() == nullptr && _impl_.by_ != nullptr) {
    delete _impl_.by_;
  }
  _impl_.by_ = nullptr;
}
inline const ::Property::Interpolation& VectorPropertyInterpolator::_internal_by() const {
  const ::Property::Interpolation* p = _impl_.by_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::Interpolation&>(
      ::Property::_Interpolation_default_instance_);
}
inline const ::Property::Interpolation& VectorPropertyInterpolator::by() const {
  // @@protoc_insertion_point(field_get:Property.VectorPropertyInterpolator.by)
  return _internal_by();
}
inline void VectorPropertyInterpolator::unsafe_arena_set_allocated_by(
    ::Property::Interpolation* by) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.by_);
  }
  _impl_.by_ = by;
  if (by) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.VectorPropertyInterpolator.by)
}
inline ::Property::Interpolation* VectorPropertyInterpolator::release_by() {
  
  ::Property::Interpolation* temp = _impl_.by_;
  _impl_.by_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::Interpolation* VectorPropertyInterpolator::unsafe_arena_release_by() {
  // @@protoc_insertion_point(field_release:Property.VectorPropertyInterpolator.by)
  
  ::Property::Interpolation* temp = _impl_.by_;
  _impl_.by_ = nullptr;
  return temp;
}
inline ::Property::Interpolation* VectorPropertyInterpolator::_internal_mutable_by() {
  
  if (_impl_.by_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::Interpolation>(GetArenaForAllocation());
    _impl_.by_ = p;
  }
  return _impl_.by_;
}
inline ::Property::Interpolation* VectorPropertyInterpolator::mutable_by() {
  ::Property::Interpolation* _msg = _internal_mutable_by();
  // @@protoc_insertion_point(field_mutable:Property.VectorPropertyInterpolator.by)
  return _msg;
}
inline void VectorPropertyInterpolator::set_allocated_by(::Property::Interpolation* by) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.by_;
  }
  if (by) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(by);
    if (message_arena != submessage_arena) {
      by = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, by, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.by_ = by;
  // @@protoc_insertion_point(field_set_allocated:Property.VectorPropertyInterpolator.by)
}

// -------------------------------------------------------------------

// VectorPerChannel

// .Property.ScalarPropertyValue x = 1;
inline bool VectorPerChannel::_internal_has_x() const {
  return this != internal_default_instance() && _impl_.x_ != nullptr;
}
inline bool VectorPerChannel::has_x() const {
  return _internal_has_x();
}
inline void VectorPerChannel::clear_x() {
  if (GetArenaForAllocation() == nullptr && _impl_.x_ != nullptr) {
    delete _impl_.x_;
  }
  _impl_.x_ = nullptr;
}
inline const ::Property::ScalarPropertyValue& VectorPerChannel::_internal_x() const {
  const ::Property::ScalarPropertyValue* p = _impl_.x_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::ScalarPropertyValue&>(
      ::Property::_ScalarPropertyValue_default_instance_);
}
inline const ::Property::ScalarPropertyValue& VectorPerChannel::x() const {
  // @@protoc_insertion_point(field_get:Property.VectorPerChannel.x)
  return _internal_x();
}
inline void VectorPerChannel::unsafe_arena_set_allocated_x(
    ::Property::ScalarPropertyValue* x) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.x_);
  }
  _impl_.x_ = x;
  if (x) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.VectorPerChannel.x)
}
inline ::Property::ScalarPropertyValue* VectorPerChannel::release_x() {
  
  ::Property::ScalarPropertyValue* temp = _impl_.x_;
  _impl_.x_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::ScalarPropertyValue* VectorPerChannel::unsafe_arena_release_x() {
  // @@protoc_insertion_point(field_release:Property.VectorPerChannel.x)
  
  ::Property::ScalarPropertyValue* temp = _impl_.x_;
  _impl_.x_ = nullptr;
  return temp;
}
inline ::Property::ScalarPropertyValue* VectorPerChannel::_internal_mutable_x() {
  
  if (_impl_.x_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::ScalarPropertyValue>(GetArenaForAllocation());
    _impl_.x_ = p;
  }
  return _impl_.x_;
}
inline ::Property::ScalarPropertyValue* VectorPerChannel::mutable_x() {
  ::Property::ScalarPropertyValue* _msg = _internal_mutable_x();
  // @@protoc_insertion_point(field_mutable:Property.VectorPerChannel.x)
  return _msg;
}
inline void VectorPerChannel::set_allocated_x(::Property::ScalarPropertyValue* x) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.x_;
  }
  if (x) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(x);
    if (message_arena != submessage_arena) {
      x = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, x, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.x_ = x;
  // @@protoc_insertion_point(field_set_allocated:Property.VectorPerChannel.x)
}

// .Property.ScalarPropertyValue y = 2;
inline bool VectorPerChannel::_internal_has_y() const {
  return this != internal_default_instance() && _impl_.y_ != nullptr;
}
inline bool VectorPerChannel::has_y() const {
  return _internal_has_y();
}
inline void VectorPerChannel::clear_y() {
  if (GetArenaForAllocation() == nullptr && _impl_.y_ != nullptr) {
    delete _impl_.y_;
  }
  _impl_.y_ = nullptr;
}
inline const ::Property::ScalarPropertyValue& VectorPerChannel::_internal_y() const {
  const ::Property::ScalarPropertyValue* p = _impl_.y_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::ScalarPropertyValue&>(
      ::Property::_ScalarPropertyValue_default_instance_);
}
inline const ::Property::ScalarPropertyValue& VectorPerChannel::y() const {
  // @@protoc_insertion_point(field_get:Property.VectorPerChannel.y)
  return _internal_y();
}
inline void VectorPerChannel::unsafe_arena_set_allocated_y(
    ::Property::ScalarPropertyValue* y) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.y_);
  }
  _impl_.y_ = y;
  if (y) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.VectorPerChannel.y)
}
inline ::Property::ScalarPropertyValue* VectorPerChannel::release_y() {
  
  ::Property::ScalarPropertyValue* temp = _impl_.y_;
  _impl_.y_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::ScalarPropertyValue* VectorPerChannel::unsafe_arena_release_y() {
  // @@protoc_insertion_point(field_release:Property.VectorPerChannel.y)
  
  ::Property::ScalarPropertyValue* temp = _impl_.y_;
  _impl_.y_ = nullptr;
  return temp;
}
inline ::Property::ScalarPropertyValue* VectorPerChannel::_internal_mutable_y() {
  
  if (_impl_.y_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::ScalarPropertyValue>(GetArenaForAllocation());
    _impl_.y_ = p;
  }
  return _impl_.y_;
}
inline ::Property::ScalarPropertyValue* VectorPerChannel::mutable_y() {
  ::Property::ScalarPropertyValue* _msg = _internal_mutable_y();
  // @@protoc_insertion_point(field_mutable:Property.VectorPerChannel.y)
  return _msg;
}
inline void VectorPerChannel::set_allocated_y(::Property::ScalarPropertyValue* y) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.y_;
  }
  if (y) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(y);
    if (message_arena != submessage_arena) {
      y = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, y, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.y_ = y;
  // @@protoc_insertion_point(field_set_allocated:Property.VectorPerChannel.y)
}

// .Property.ScalarPropertyValue z = 3;
inline bool VectorPerChannel::_internal_has_z() const {
  return this != internal_default_instance() && _impl_.z_ != nullptr;
}
inline bool VectorPerChannel::has_z() const {
  return _internal_has_z();
}
inline void VectorPerChannel::clear_z() {
  if (GetArenaForAllocation() == nullptr && _impl_.z_ != nullptr) {
    delete _impl_.z_;
  }
  _impl_.z_ = nullptr;
}
inline const ::Property::ScalarPropertyValue& VectorPerChannel::_internal_z() const {
  const ::Property::ScalarPropertyValue* p = _impl_.z_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::ScalarPropertyValue&>(
      ::Property::_ScalarPropertyValue_default_instance_);
}
inline const ::Property::ScalarPropertyValue& VectorPerChannel::z() const {
  // @@protoc_insertion_point(field_get:Property.VectorPerChannel.z)
  return _internal_z();
}
inline void VectorPerChannel::unsafe_arena_set_allocated_z(
    ::Property::ScalarPropertyValue* z) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.z_);
  }
  _impl_.z_ = z;
  if (z) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.VectorPerChannel.z)
}
inline ::Property::ScalarPropertyValue* VectorPerChannel::release_z() {
  
  ::Property::ScalarPropertyValue* temp = _impl_.z_;
  _impl_.z_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::ScalarPropertyValue* VectorPerChannel::unsafe_arena_release_z() {
  // @@protoc_insertion_point(field_release:Property.VectorPerChannel.z)
  
  ::Property::ScalarPropertyValue* temp = _impl_.z_;
  _impl_.z_ = nullptr;
  return temp;
}
inline ::Property::ScalarPropertyValue* VectorPerChannel::_internal_mutable_z() {
  
  if (_impl_.z_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::ScalarPropertyValue>(GetArenaForAllocation());
    _impl_.z_ = p;
  }
  return _impl_.z_;
}
inline ::Property::ScalarPropertyValue* VectorPerChannel::mutable_z() {
  ::Property::ScalarPropertyValue* _msg = _internal_mutable_z();
  // @@protoc_insertion_point(field_mutable:Property.VectorPerChannel.z)
  return _msg;
}
inline void VectorPerChannel::set_allocated_z(::Property::ScalarPropertyValue* z) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.z_;
  }
  if (z) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(z);
    if (message_arena != submessage_arena) {
      z = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, z, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.z_ = z;
  // @@protoc_insertion_point(field_set_allocated:Property.VectorPerChannel.z)
}

// optional .Property.ScalarPropertyValue w = 4;
inline bool VectorPerChannel::_internal_has_w() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.w_ != nullptr);
  return value;
}
inline bool VectorPerChannel::has_w() const {
  return _internal_has_w();
}
inline void VectorPerChannel::clear_w() {
  if (_impl_.w_ != nullptr) _impl_.w_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::Property::ScalarPropertyValue& VectorPerChannel::_internal_w() const {
  const ::Property::ScalarPropertyValue* p = _impl_.w_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::ScalarPropertyValue&>(
      ::Property::_ScalarPropertyValue_default_instance_);
}
inline const ::Property::ScalarPropertyValue& VectorPerChannel::w() const {
  // @@protoc_insertion_point(field_get:Property.VectorPerChannel.w)
  return _internal_w();
}
inline void VectorPerChannel::unsafe_arena_set_allocated_w(
    ::Property::ScalarPropertyValue* w) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.w_);
  }
  _impl_.w_ = w;
  if (w) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.VectorPerChannel.w)
}
inline ::Property::ScalarPropertyValue* VectorPerChannel::release_w() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Property::ScalarPropertyValue* temp = _impl_.w_;
  _impl_.w_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::ScalarPropertyValue* VectorPerChannel::unsafe_arena_release_w() {
  // @@protoc_insertion_point(field_release:Property.VectorPerChannel.w)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Property::ScalarPropertyValue* temp = _impl_.w_;
  _impl_.w_ = nullptr;
  return temp;
}
inline ::Property::ScalarPropertyValue* VectorPerChannel::_internal_mutable_w() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.w_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::ScalarPropertyValue>(GetArenaForAllocation());
    _impl_.w_ = p;
  }
  return _impl_.w_;
}
inline ::Property::ScalarPropertyValue* VectorPerChannel::mutable_w() {
  ::Property::ScalarPropertyValue* _msg = _internal_mutable_w();
  // @@protoc_insertion_point(field_mutable:Property.VectorPerChannel.w)
  return _msg;
}
inline void VectorPerChannel::set_allocated_w(::Property::ScalarPropertyValue* w) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.w_;
  }
  if (w) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(w);
    if (message_arena != submessage_arena) {
      w = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, w, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.w_ = w;
  // @@protoc_insertion_point(field_set_allocated:Property.VectorPerChannel.w)
}

// -------------------------------------------------------------------

// VectorPropertyQuadratic

// .Property.VectorPropertyValue p = 1;
inline bool VectorPropertyQuadratic::_internal_has_p() const {
  return this != internal_default_instance() && _impl_.p_ != nullptr;
}
inline bool VectorPropertyQuadratic::has_p() const {
  return _internal_has_p();
}
inline void VectorPropertyQuadratic::clear_p() {
  if (GetArenaForAllocation() == nullptr && _impl_.p_ != nullptr) {
    delete _impl_.p_;
  }
  _impl_.p_ = nullptr;
}
inline const ::Property::VectorPropertyValue& VectorPropertyQuadratic::_internal_p() const {
  const ::Property::VectorPropertyValue* p = _impl_.p_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::VectorPropertyValue&>(
      ::Property::_VectorPropertyValue_default_instance_);
}
inline const ::Property::VectorPropertyValue& VectorPropertyQuadratic::p() const {
  // @@protoc_insertion_point(field_get:Property.VectorPropertyQuadratic.p)
  return _internal_p();
}
inline void VectorPropertyQuadratic::unsafe_arena_set_allocated_p(
    ::Property::VectorPropertyValue* p) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.p_);
  }
  _impl_.p_ = p;
  if (p) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.VectorPropertyQuadratic.p)
}
inline ::Property::VectorPropertyValue* VectorPropertyQuadratic::release_p() {
  
  ::Property::VectorPropertyValue* temp = _impl_.p_;
  _impl_.p_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::VectorPropertyValue* VectorPropertyQuadratic::unsafe_arena_release_p() {
  // @@protoc_insertion_point(field_release:Property.VectorPropertyQuadratic.p)
  
  ::Property::VectorPropertyValue* temp = _impl_.p_;
  _impl_.p_ = nullptr;
  return temp;
}
inline ::Property::VectorPropertyValue* VectorPropertyQuadratic::_internal_mutable_p() {
  
  if (_impl_.p_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::VectorPropertyValue>(GetArenaForAllocation());
    _impl_.p_ = p;
  }
  return _impl_.p_;
}
inline ::Property::VectorPropertyValue* VectorPropertyQuadratic::mutable_p() {
  ::Property::VectorPropertyValue* _msg = _internal_mutable_p();
  // @@protoc_insertion_point(field_mutable:Property.VectorPropertyQuadratic.p)
  return _msg;
}
inline void VectorPropertyQuadratic::set_allocated_p(::Property::VectorPropertyValue* p) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.p_;
  }
  if (p) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(p);
    if (message_arena != submessage_arena) {
      p = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, p, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.p_ = p;
  // @@protoc_insertion_point(field_set_allocated:Property.VectorPropertyQuadratic.p)
}

// .Property.VectorPropertyValue v = 2;
inline bool VectorPropertyQuadratic::_internal_has_v() const {
  return this != internal_default_instance() && _impl_.v_ != nullptr;
}
inline bool VectorPropertyQuadratic::has_v() const {
  return _internal_has_v();
}
inline void VectorPropertyQuadratic::clear_v() {
  if (GetArenaForAllocation() == nullptr && _impl_.v_ != nullptr) {
    delete _impl_.v_;
  }
  _impl_.v_ = nullptr;
}
inline const ::Property::VectorPropertyValue& VectorPropertyQuadratic::_internal_v() const {
  const ::Property::VectorPropertyValue* p = _impl_.v_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::VectorPropertyValue&>(
      ::Property::_VectorPropertyValue_default_instance_);
}
inline const ::Property::VectorPropertyValue& VectorPropertyQuadratic::v() const {
  // @@protoc_insertion_point(field_get:Property.VectorPropertyQuadratic.v)
  return _internal_v();
}
inline void VectorPropertyQuadratic::unsafe_arena_set_allocated_v(
    ::Property::VectorPropertyValue* v) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.v_);
  }
  _impl_.v_ = v;
  if (v) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.VectorPropertyQuadratic.v)
}
inline ::Property::VectorPropertyValue* VectorPropertyQuadratic::release_v() {
  
  ::Property::VectorPropertyValue* temp = _impl_.v_;
  _impl_.v_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::VectorPropertyValue* VectorPropertyQuadratic::unsafe_arena_release_v() {
  // @@protoc_insertion_point(field_release:Property.VectorPropertyQuadratic.v)
  
  ::Property::VectorPropertyValue* temp = _impl_.v_;
  _impl_.v_ = nullptr;
  return temp;
}
inline ::Property::VectorPropertyValue* VectorPropertyQuadratic::_internal_mutable_v() {
  
  if (_impl_.v_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::VectorPropertyValue>(GetArenaForAllocation());
    _impl_.v_ = p;
  }
  return _impl_.v_;
}
inline ::Property::VectorPropertyValue* VectorPropertyQuadratic::mutable_v() {
  ::Property::VectorPropertyValue* _msg = _internal_mutable_v();
  // @@protoc_insertion_point(field_mutable:Property.VectorPropertyQuadratic.v)
  return _msg;
}
inline void VectorPropertyQuadratic::set_allocated_v(::Property::VectorPropertyValue* v) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.v_;
  }
  if (v) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(v);
    if (message_arena != submessage_arena) {
      v = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, v, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.v_ = v;
  // @@protoc_insertion_point(field_set_allocated:Property.VectorPropertyQuadratic.v)
}

// optional .Property.VectorPropertyValue a = 3;
inline bool VectorPropertyQuadratic::_internal_has_a() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.a_ != nullptr);
  return value;
}
inline bool VectorPropertyQuadratic::has_a() const {
  return _internal_has_a();
}
inline void VectorPropertyQuadratic::clear_a() {
  if (_impl_.a_ != nullptr) _impl_.a_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::Property::VectorPropertyValue& VectorPropertyQuadratic::_internal_a() const {
  const ::Property::VectorPropertyValue* p = _impl_.a_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::VectorPropertyValue&>(
      ::Property::_VectorPropertyValue_default_instance_);
}
inline const ::Property::VectorPropertyValue& VectorPropertyQuadratic::a() const {
  // @@protoc_insertion_point(field_get:Property.VectorPropertyQuadratic.a)
  return _internal_a();
}
inline void VectorPropertyQuadratic::unsafe_arena_set_allocated_a(
    ::Property::VectorPropertyValue* a) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.a_);
  }
  _impl_.a_ = a;
  if (a) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.VectorPropertyQuadratic.a)
}
inline ::Property::VectorPropertyValue* VectorPropertyQuadratic::release_a() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Property::VectorPropertyValue* temp = _impl_.a_;
  _impl_.a_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::VectorPropertyValue* VectorPropertyQuadratic::unsafe_arena_release_a() {
  // @@protoc_insertion_point(field_release:Property.VectorPropertyQuadratic.a)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Property::VectorPropertyValue* temp = _impl_.a_;
  _impl_.a_ = nullptr;
  return temp;
}
inline ::Property::VectorPropertyValue* VectorPropertyQuadratic::_internal_mutable_a() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.a_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::VectorPropertyValue>(GetArenaForAllocation());
    _impl_.a_ = p;
  }
  return _impl_.a_;
}
inline ::Property::VectorPropertyValue* VectorPropertyQuadratic::mutable_a() {
  ::Property::VectorPropertyValue* _msg = _internal_mutable_a();
  // @@protoc_insertion_point(field_mutable:Property.VectorPropertyQuadratic.a)
  return _msg;
}
inline void VectorPropertyQuadratic::set_allocated_a(::Property::VectorPropertyValue* a) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.a_;
  }
  if (a) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(a);
    if (message_arena != submessage_arena) {
      a = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, a, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.a_ = a;
  // @@protoc_insertion_point(field_set_allocated:Property.VectorPropertyQuadratic.a)
}

// optional .Property.ScalarPropertyValue t = 4;
inline bool VectorPropertyQuadratic::_internal_has_t() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.t_ != nullptr);
  return value;
}
inline bool VectorPropertyQuadratic::has_t() const {
  return _internal_has_t();
}
inline void VectorPropertyQuadratic::clear_t() {
  if (_impl_.t_ != nullptr) _impl_.t_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::Property::ScalarPropertyValue& VectorPropertyQuadratic::_internal_t() const {
  const ::Property::ScalarPropertyValue* p = _impl_.t_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::ScalarPropertyValue&>(
      ::Property::_ScalarPropertyValue_default_instance_);
}
inline const ::Property::ScalarPropertyValue& VectorPropertyQuadratic::t() const {
  // @@protoc_insertion_point(field_get:Property.VectorPropertyQuadratic.t)
  return _internal_t();
}
inline void VectorPropertyQuadratic::unsafe_arena_set_allocated_t(
    ::Property::ScalarPropertyValue* t) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.t_);
  }
  _impl_.t_ = t;
  if (t) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.VectorPropertyQuadratic.t)
}
inline ::Property::ScalarPropertyValue* VectorPropertyQuadratic::release_t() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Property::ScalarPropertyValue* temp = _impl_.t_;
  _impl_.t_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::ScalarPropertyValue* VectorPropertyQuadratic::unsafe_arena_release_t() {
  // @@protoc_insertion_point(field_release:Property.VectorPropertyQuadratic.t)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Property::ScalarPropertyValue* temp = _impl_.t_;
  _impl_.t_ = nullptr;
  return temp;
}
inline ::Property::ScalarPropertyValue* VectorPropertyQuadratic::_internal_mutable_t() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.t_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::ScalarPropertyValue>(GetArenaForAllocation());
    _impl_.t_ = p;
  }
  return _impl_.t_;
}
inline ::Property::ScalarPropertyValue* VectorPropertyQuadratic::mutable_t() {
  ::Property::ScalarPropertyValue* _msg = _internal_mutable_t();
  // @@protoc_insertion_point(field_mutable:Property.VectorPropertyQuadratic.t)
  return _msg;
}
inline void VectorPropertyQuadratic::set_allocated_t(::Property::ScalarPropertyValue* t) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.t_;
  }
  if (t) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(t);
    if (message_arena != submessage_arena) {
      t = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, t, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.t_ = t;
  // @@protoc_insertion_point(field_set_allocated:Property.VectorPropertyQuadratic.t)
}

// -------------------------------------------------------------------

// VectorPropertyApproach

// .Property.ScalarPropertyValue t = 1;
inline bool VectorPropertyApproach::_internal_has_t() const {
  return this != internal_default_instance() && _impl_.t_ != nullptr;
}
inline bool VectorPropertyApproach::has_t() const {
  return _internal_has_t();
}
inline void VectorPropertyApproach::clear_t() {
  if (GetArenaForAllocation() == nullptr && _impl_.t_ != nullptr) {
    delete _impl_.t_;
  }
  _impl_.t_ = nullptr;
}
inline const ::Property::ScalarPropertyValue& VectorPropertyApproach::_internal_t() const {
  const ::Property::ScalarPropertyValue* p = _impl_.t_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::ScalarPropertyValue&>(
      ::Property::_ScalarPropertyValue_default_instance_);
}
inline const ::Property::ScalarPropertyValue& VectorPropertyApproach::t() const {
  // @@protoc_insertion_point(field_get:Property.VectorPropertyApproach.t)
  return _internal_t();
}
inline void VectorPropertyApproach::unsafe_arena_set_allocated_t(
    ::Property::ScalarPropertyValue* t) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.t_);
  }
  _impl_.t_ = t;
  if (t) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.VectorPropertyApproach.t)
}
inline ::Property::ScalarPropertyValue* VectorPropertyApproach::release_t() {
  
  ::Property::ScalarPropertyValue* temp = _impl_.t_;
  _impl_.t_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::ScalarPropertyValue* VectorPropertyApproach::unsafe_arena_release_t() {
  // @@protoc_insertion_point(field_release:Property.VectorPropertyApproach.t)
  
  ::Property::ScalarPropertyValue* temp = _impl_.t_;
  _impl_.t_ = nullptr;
  return temp;
}
inline ::Property::ScalarPropertyValue* VectorPropertyApproach::_internal_mutable_t() {
  
  if (_impl_.t_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::ScalarPropertyValue>(GetArenaForAllocation());
    _impl_.t_ = p;
  }
  return _impl_.t_;
}
inline ::Property::ScalarPropertyValue* VectorPropertyApproach::mutable_t() {
  ::Property::ScalarPropertyValue* _msg = _internal_mutable_t();
  // @@protoc_insertion_point(field_mutable:Property.VectorPropertyApproach.t)
  return _msg;
}
inline void VectorPropertyApproach::set_allocated_t(::Property::ScalarPropertyValue* t) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.t_;
  }
  if (t) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(t);
    if (message_arena != submessage_arena) {
      t = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, t, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.t_ = t;
  // @@protoc_insertion_point(field_set_allocated:Property.VectorPropertyApproach.t)
}

// .Property.VectorPropertyValue to = 2;
inline bool VectorPropertyApproach::_internal_has_to() const {
  return this != internal_default_instance() && _impl_.to_ != nullptr;
}
inline bool VectorPropertyApproach::has_to() const {
  return _internal_has_to();
}
inline void VectorPropertyApproach::clear_to() {
  if (GetArenaForAllocation() == nullptr && _impl_.to_ != nullptr) {
    delete _impl_.to_;
  }
  _impl_.to_ = nullptr;
}
inline const ::Property::VectorPropertyValue& VectorPropertyApproach::_internal_to() const {
  const ::Property::VectorPropertyValue* p = _impl_.to_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::VectorPropertyValue&>(
      ::Property::_VectorPropertyValue_default_instance_);
}
inline const ::Property::VectorPropertyValue& VectorPropertyApproach::to() const {
  // @@protoc_insertion_point(field_get:Property.VectorPropertyApproach.to)
  return _internal_to();
}
inline void VectorPropertyApproach::unsafe_arena_set_allocated_to(
    ::Property::VectorPropertyValue* to) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.to_);
  }
  _impl_.to_ = to;
  if (to) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.VectorPropertyApproach.to)
}
inline ::Property::VectorPropertyValue* VectorPropertyApproach::release_to() {
  
  ::Property::VectorPropertyValue* temp = _impl_.to_;
  _impl_.to_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::VectorPropertyValue* VectorPropertyApproach::unsafe_arena_release_to() {
  // @@protoc_insertion_point(field_release:Property.VectorPropertyApproach.to)
  
  ::Property::VectorPropertyValue* temp = _impl_.to_;
  _impl_.to_ = nullptr;
  return temp;
}
inline ::Property::VectorPropertyValue* VectorPropertyApproach::_internal_mutable_to() {
  
  if (_impl_.to_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::VectorPropertyValue>(GetArenaForAllocation());
    _impl_.to_ = p;
  }
  return _impl_.to_;
}
inline ::Property::VectorPropertyValue* VectorPropertyApproach::mutable_to() {
  ::Property::VectorPropertyValue* _msg = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:Property.VectorPropertyApproach.to)
  return _msg;
}
inline void VectorPropertyApproach::set_allocated_to(::Property::VectorPropertyValue* to) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.to_;
  }
  if (to) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(to);
    if (message_arena != submessage_arena) {
      to = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, to, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.to_ = to;
  // @@protoc_insertion_point(field_set_allocated:Property.VectorPropertyApproach.to)
}

// .Property.ScalarPropertyValue timeToHalf = 3;
inline bool VectorPropertyApproach::_internal_has_timetohalf() const {
  return this != internal_default_instance() && _impl_.timetohalf_ != nullptr;
}
inline bool VectorPropertyApproach::has_timetohalf() const {
  return _internal_has_timetohalf();
}
inline void VectorPropertyApproach::clear_timetohalf() {
  if (GetArenaForAllocation() == nullptr && _impl_.timetohalf_ != nullptr) {
    delete _impl_.timetohalf_;
  }
  _impl_.timetohalf_ = nullptr;
}
inline const ::Property::ScalarPropertyValue& VectorPropertyApproach::_internal_timetohalf() const {
  const ::Property::ScalarPropertyValue* p = _impl_.timetohalf_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::ScalarPropertyValue&>(
      ::Property::_ScalarPropertyValue_default_instance_);
}
inline const ::Property::ScalarPropertyValue& VectorPropertyApproach::timetohalf() const {
  // @@protoc_insertion_point(field_get:Property.VectorPropertyApproach.timeToHalf)
  return _internal_timetohalf();
}
inline void VectorPropertyApproach::unsafe_arena_set_allocated_timetohalf(
    ::Property::ScalarPropertyValue* timetohalf) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timetohalf_);
  }
  _impl_.timetohalf_ = timetohalf;
  if (timetohalf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.VectorPropertyApproach.timeToHalf)
}
inline ::Property::ScalarPropertyValue* VectorPropertyApproach::release_timetohalf() {
  
  ::Property::ScalarPropertyValue* temp = _impl_.timetohalf_;
  _impl_.timetohalf_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::ScalarPropertyValue* VectorPropertyApproach::unsafe_arena_release_timetohalf() {
  // @@protoc_insertion_point(field_release:Property.VectorPropertyApproach.timeToHalf)
  
  ::Property::ScalarPropertyValue* temp = _impl_.timetohalf_;
  _impl_.timetohalf_ = nullptr;
  return temp;
}
inline ::Property::ScalarPropertyValue* VectorPropertyApproach::_internal_mutable_timetohalf() {
  
  if (_impl_.timetohalf_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::ScalarPropertyValue>(GetArenaForAllocation());
    _impl_.timetohalf_ = p;
  }
  return _impl_.timetohalf_;
}
inline ::Property::ScalarPropertyValue* VectorPropertyApproach::mutable_timetohalf() {
  ::Property::ScalarPropertyValue* _msg = _internal_mutable_timetohalf();
  // @@protoc_insertion_point(field_mutable:Property.VectorPropertyApproach.timeToHalf)
  return _msg;
}
inline void VectorPropertyApproach::set_allocated_timetohalf(::Property::ScalarPropertyValue* timetohalf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.timetohalf_;
  }
  if (timetohalf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(timetohalf);
    if (message_arena != submessage_arena) {
      timetohalf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timetohalf, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.timetohalf_ = timetohalf;
  // @@protoc_insertion_point(field_set_allocated:Property.VectorPropertyApproach.timeToHalf)
}

// .Property.VectorPropertyValue start = 4;
inline bool VectorPropertyApproach::_internal_has_start() const {
  return this != internal_default_instance() && _impl_.start_ != nullptr;
}
inline bool VectorPropertyApproach::has_start() const {
  return _internal_has_start();
}
inline void VectorPropertyApproach::clear_start() {
  if (GetArenaForAllocation() == nullptr && _impl_.start_ != nullptr) {
    delete _impl_.start_;
  }
  _impl_.start_ = nullptr;
}
inline const ::Property::VectorPropertyValue& VectorPropertyApproach::_internal_start() const {
  const ::Property::VectorPropertyValue* p = _impl_.start_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::VectorPropertyValue&>(
      ::Property::_VectorPropertyValue_default_instance_);
}
inline const ::Property::VectorPropertyValue& VectorPropertyApproach::start() const {
  // @@protoc_insertion_point(field_get:Property.VectorPropertyApproach.start)
  return _internal_start();
}
inline void VectorPropertyApproach::unsafe_arena_set_allocated_start(
    ::Property::VectorPropertyValue* start) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.start_);
  }
  _impl_.start_ = start;
  if (start) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.VectorPropertyApproach.start)
}
inline ::Property::VectorPropertyValue* VectorPropertyApproach::release_start() {
  
  ::Property::VectorPropertyValue* temp = _impl_.start_;
  _impl_.start_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::VectorPropertyValue* VectorPropertyApproach::unsafe_arena_release_start() {
  // @@protoc_insertion_point(field_release:Property.VectorPropertyApproach.start)
  
  ::Property::VectorPropertyValue* temp = _impl_.start_;
  _impl_.start_ = nullptr;
  return temp;
}
inline ::Property::VectorPropertyValue* VectorPropertyApproach::_internal_mutable_start() {
  
  if (_impl_.start_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::VectorPropertyValue>(GetArenaForAllocation());
    _impl_.start_ = p;
  }
  return _impl_.start_;
}
inline ::Property::VectorPropertyValue* VectorPropertyApproach::mutable_start() {
  ::Property::VectorPropertyValue* _msg = _internal_mutable_start();
  // @@protoc_insertion_point(field_mutable:Property.VectorPropertyApproach.start)
  return _msg;
}
inline void VectorPropertyApproach::set_allocated_start(::Property::VectorPropertyValue* start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.start_;
  }
  if (start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(start);
    if (message_arena != submessage_arena) {
      start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.start_ = start;
  // @@protoc_insertion_point(field_set_allocated:Property.VectorPropertyApproach.start)
}

// -------------------------------------------------------------------

// VectorPropertyKeyframed_VectorKeyframe

// float t = 1;
inline void VectorPropertyKeyframed_VectorKeyframe::clear_t() {
  _impl_.t_ = 0;
}
inline float VectorPropertyKeyframed_VectorKeyframe::_internal_t() const {
  return _impl_.t_;
}
inline float VectorPropertyKeyframed_VectorKeyframe::t() const {
  // @@protoc_insertion_point(field_get:Property.VectorPropertyKeyframed.VectorKeyframe.t)
  return _internal_t();
}
inline void VectorPropertyKeyframed_VectorKeyframe::_internal_set_t(float value) {
  
  _impl_.t_ = value;
}
inline void VectorPropertyKeyframed_VectorKeyframe::set_t(float value) {
  _internal_set_t(value);
  // @@protoc_insertion_point(field_set:Property.VectorPropertyKeyframed.VectorKeyframe.t)
}

// .Property.VectorPropertyValue val = 2;
inline bool VectorPropertyKeyframed_VectorKeyframe::_internal_has_val() const {
  return this != internal_default_instance() && _impl_.val_ != nullptr;
}
inline bool VectorPropertyKeyframed_VectorKeyframe::has_val() const {
  return _internal_has_val();
}
inline void VectorPropertyKeyframed_VectorKeyframe::clear_val() {
  if (GetArenaForAllocation() == nullptr && _impl_.val_ != nullptr) {
    delete _impl_.val_;
  }
  _impl_.val_ = nullptr;
}
inline const ::Property::VectorPropertyValue& VectorPropertyKeyframed_VectorKeyframe::_internal_val() const {
  const ::Property::VectorPropertyValue* p = _impl_.val_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::VectorPropertyValue&>(
      ::Property::_VectorPropertyValue_default_instance_);
}
inline const ::Property::VectorPropertyValue& VectorPropertyKeyframed_VectorKeyframe::val() const {
  // @@protoc_insertion_point(field_get:Property.VectorPropertyKeyframed.VectorKeyframe.val)
  return _internal_val();
}
inline void VectorPropertyKeyframed_VectorKeyframe::unsafe_arena_set_allocated_val(
    ::Property::VectorPropertyValue* val) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.val_);
  }
  _impl_.val_ = val;
  if (val) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.VectorPropertyKeyframed.VectorKeyframe.val)
}
inline ::Property::VectorPropertyValue* VectorPropertyKeyframed_VectorKeyframe::release_val() {
  
  ::Property::VectorPropertyValue* temp = _impl_.val_;
  _impl_.val_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::VectorPropertyValue* VectorPropertyKeyframed_VectorKeyframe::unsafe_arena_release_val() {
  // @@protoc_insertion_point(field_release:Property.VectorPropertyKeyframed.VectorKeyframe.val)
  
  ::Property::VectorPropertyValue* temp = _impl_.val_;
  _impl_.val_ = nullptr;
  return temp;
}
inline ::Property::VectorPropertyValue* VectorPropertyKeyframed_VectorKeyframe::_internal_mutable_val() {
  
  if (_impl_.val_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::VectorPropertyValue>(GetArenaForAllocation());
    _impl_.val_ = p;
  }
  return _impl_.val_;
}
inline ::Property::VectorPropertyValue* VectorPropertyKeyframed_VectorKeyframe::mutable_val() {
  ::Property::VectorPropertyValue* _msg = _internal_mutable_val();
  // @@protoc_insertion_point(field_mutable:Property.VectorPropertyKeyframed.VectorKeyframe.val)
  return _msg;
}
inline void VectorPropertyKeyframed_VectorKeyframe::set_allocated_val(::Property::VectorPropertyValue* val) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.val_;
  }
  if (val) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(val);
    if (message_arena != submessage_arena) {
      val = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, val, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.val_ = val;
  // @@protoc_insertion_point(field_set_allocated:Property.VectorPropertyKeyframed.VectorKeyframe.val)
}

// optional .Common.Float4 tangentIn = 3;
inline bool VectorPropertyKeyframed_VectorKeyframe::_internal_has_tangentin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tangentin_ != nullptr);
  return value;
}
inline bool VectorPropertyKeyframed_VectorKeyframe::has_tangentin() const {
  return _internal_has_tangentin();
}
inline const ::Common::Float4& VectorPropertyKeyframed_VectorKeyframe::_internal_tangentin() const {
  const ::Common::Float4* p = _impl_.tangentin_;
  return p != nullptr ? *p : reinterpret_cast<const ::Common::Float4&>(
      ::Common::_Float4_default_instance_);
}
inline const ::Common::Float4& VectorPropertyKeyframed_VectorKeyframe::tangentin() const {
  // @@protoc_insertion_point(field_get:Property.VectorPropertyKeyframed.VectorKeyframe.tangentIn)
  return _internal_tangentin();
}
inline void VectorPropertyKeyframed_VectorKeyframe::unsafe_arena_set_allocated_tangentin(
    ::Common::Float4* tangentin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tangentin_);
  }
  _impl_.tangentin_ = tangentin;
  if (tangentin) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.VectorPropertyKeyframed.VectorKeyframe.tangentIn)
}
inline ::Common::Float4* VectorPropertyKeyframed_VectorKeyframe::release_tangentin() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Common::Float4* temp = _impl_.tangentin_;
  _impl_.tangentin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Common::Float4* VectorPropertyKeyframed_VectorKeyframe::unsafe_arena_release_tangentin() {
  // @@protoc_insertion_point(field_release:Property.VectorPropertyKeyframed.VectorKeyframe.tangentIn)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Common::Float4* temp = _impl_.tangentin_;
  _impl_.tangentin_ = nullptr;
  return temp;
}
inline ::Common::Float4* VectorPropertyKeyframed_VectorKeyframe::_internal_mutable_tangentin() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.tangentin_ == nullptr) {
    auto* p = CreateMaybeMessage<::Common::Float4>(GetArenaForAllocation());
    _impl_.tangentin_ = p;
  }
  return _impl_.tangentin_;
}
inline ::Common::Float4* VectorPropertyKeyframed_VectorKeyframe::mutable_tangentin() {
  ::Common::Float4* _msg = _internal_mutable_tangentin();
  // @@protoc_insertion_point(field_mutable:Property.VectorPropertyKeyframed.VectorKeyframe.tangentIn)
  return _msg;
}
inline void VectorPropertyKeyframed_VectorKeyframe::set_allocated_tangentin(::Common::Float4* tangentin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tangentin_);
  }
  if (tangentin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tangentin));
    if (message_arena != submessage_arena) {
      tangentin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tangentin, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.tangentin_ = tangentin;
  // @@protoc_insertion_point(field_set_allocated:Property.VectorPropertyKeyframed.VectorKeyframe.tangentIn)
}

// optional .Common.Float4 tangentOut = 4;
inline bool VectorPropertyKeyframed_VectorKeyframe::_internal_has_tangentout() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tangentout_ != nullptr);
  return value;
}
inline bool VectorPropertyKeyframed_VectorKeyframe::has_tangentout() const {
  return _internal_has_tangentout();
}
inline const ::Common::Float4& VectorPropertyKeyframed_VectorKeyframe::_internal_tangentout() const {
  const ::Common::Float4* p = _impl_.tangentout_;
  return p != nullptr ? *p : reinterpret_cast<const ::Common::Float4&>(
      ::Common::_Float4_default_instance_);
}
inline const ::Common::Float4& VectorPropertyKeyframed_VectorKeyframe::tangentout() const {
  // @@protoc_insertion_point(field_get:Property.VectorPropertyKeyframed.VectorKeyframe.tangentOut)
  return _internal_tangentout();
}
inline void VectorPropertyKeyframed_VectorKeyframe::unsafe_arena_set_allocated_tangentout(
    ::Common::Float4* tangentout) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tangentout_);
  }
  _impl_.tangentout_ = tangentout;
  if (tangentout) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.VectorPropertyKeyframed.VectorKeyframe.tangentOut)
}
inline ::Common::Float4* VectorPropertyKeyframed_VectorKeyframe::release_tangentout() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Common::Float4* temp = _impl_.tangentout_;
  _impl_.tangentout_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Common::Float4* VectorPropertyKeyframed_VectorKeyframe::unsafe_arena_release_tangentout() {
  // @@protoc_insertion_point(field_release:Property.VectorPropertyKeyframed.VectorKeyframe.tangentOut)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Common::Float4* temp = _impl_.tangentout_;
  _impl_.tangentout_ = nullptr;
  return temp;
}
inline ::Common::Float4* VectorPropertyKeyframed_VectorKeyframe::_internal_mutable_tangentout() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.tangentout_ == nullptr) {
    auto* p = CreateMaybeMessage<::Common::Float4>(GetArenaForAllocation());
    _impl_.tangentout_ = p;
  }
  return _impl_.tangentout_;
}
inline ::Common::Float4* VectorPropertyKeyframed_VectorKeyframe::mutable_tangentout() {
  ::Common::Float4* _msg = _internal_mutable_tangentout();
  // @@protoc_insertion_point(field_mutable:Property.VectorPropertyKeyframed.VectorKeyframe.tangentOut)
  return _msg;
}
inline void VectorPropertyKeyframed_VectorKeyframe::set_allocated_tangentout(::Common::Float4* tangentout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tangentout_);
  }
  if (tangentout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tangentout));
    if (message_arena != submessage_arena) {
      tangentout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tangentout, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.tangentout_ = tangentout;
  // @@protoc_insertion_point(field_set_allocated:Property.VectorPropertyKeyframed.VectorKeyframe.tangentOut)
}

// -------------------------------------------------------------------

// VectorPropertyKeyframed

// optional .Property.ScalarPropertyValue tSrc = 8;
inline bool VectorPropertyKeyframed::_internal_has_tsrc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tsrc_ != nullptr);
  return value;
}
inline bool VectorPropertyKeyframed::has_tsrc() const {
  return _internal_has_tsrc();
}
inline void VectorPropertyKeyframed::clear_tsrc() {
  if (_impl_.tsrc_ != nullptr) _impl_.tsrc_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::Property::ScalarPropertyValue& VectorPropertyKeyframed::_internal_tsrc() const {
  const ::Property::ScalarPropertyValue* p = _impl_.tsrc_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::ScalarPropertyValue&>(
      ::Property::_ScalarPropertyValue_default_instance_);
}
inline const ::Property::ScalarPropertyValue& VectorPropertyKeyframed::tsrc() const {
  // @@protoc_insertion_point(field_get:Property.VectorPropertyKeyframed.tSrc)
  return _internal_tsrc();
}
inline void VectorPropertyKeyframed::unsafe_arena_set_allocated_tsrc(
    ::Property::ScalarPropertyValue* tsrc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tsrc_);
  }
  _impl_.tsrc_ = tsrc;
  if (tsrc) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.VectorPropertyKeyframed.tSrc)
}
inline ::Property::ScalarPropertyValue* VectorPropertyKeyframed::release_tsrc() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Property::ScalarPropertyValue* temp = _impl_.tsrc_;
  _impl_.tsrc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::ScalarPropertyValue* VectorPropertyKeyframed::unsafe_arena_release_tsrc() {
  // @@protoc_insertion_point(field_release:Property.VectorPropertyKeyframed.tSrc)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Property::ScalarPropertyValue* temp = _impl_.tsrc_;
  _impl_.tsrc_ = nullptr;
  return temp;
}
inline ::Property::ScalarPropertyValue* VectorPropertyKeyframed::_internal_mutable_tsrc() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.tsrc_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::ScalarPropertyValue>(GetArenaForAllocation());
    _impl_.tsrc_ = p;
  }
  return _impl_.tsrc_;
}
inline ::Property::ScalarPropertyValue* VectorPropertyKeyframed::mutable_tsrc() {
  ::Property::ScalarPropertyValue* _msg = _internal_mutable_tsrc();
  // @@protoc_insertion_point(field_mutable:Property.VectorPropertyKeyframed.tSrc)
  return _msg;
}
inline void VectorPropertyKeyframed::set_allocated_tsrc(::Property::ScalarPropertyValue* tsrc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.tsrc_;
  }
  if (tsrc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tsrc);
    if (message_arena != submessage_arena) {
      tsrc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tsrc, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.tsrc_ = tsrc;
  // @@protoc_insertion_point(field_set_allocated:Property.VectorPropertyKeyframed.tSrc)
}

// repeated .Property.VectorPropertyKeyframed.VectorKeyframe keys = 10;
inline int VectorPropertyKeyframed::_internal_keys_size() const {
  return _impl_.keys_.size();
}
inline int VectorPropertyKeyframed::keys_size() const {
  return _internal_keys_size();
}
inline void VectorPropertyKeyframed::clear_keys() {
  _impl_.keys_.Clear();
}
inline ::Property::VectorPropertyKeyframed_VectorKeyframe* VectorPropertyKeyframed::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:Property.VectorPropertyKeyframed.keys)
  return _impl_.keys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Property::VectorPropertyKeyframed_VectorKeyframe >*
VectorPropertyKeyframed::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:Property.VectorPropertyKeyframed.keys)
  return &_impl_.keys_;
}
inline const ::Property::VectorPropertyKeyframed_VectorKeyframe& VectorPropertyKeyframed::_internal_keys(int index) const {
  return _impl_.keys_.Get(index);
}
inline const ::Property::VectorPropertyKeyframed_VectorKeyframe& VectorPropertyKeyframed::keys(int index) const {
  // @@protoc_insertion_point(field_get:Property.VectorPropertyKeyframed.keys)
  return _internal_keys(index);
}
inline ::Property::VectorPropertyKeyframed_VectorKeyframe* VectorPropertyKeyframed::_internal_add_keys() {
  return _impl_.keys_.Add();
}
inline ::Property::VectorPropertyKeyframed_VectorKeyframe* VectorPropertyKeyframed::add_keys() {
  ::Property::VectorPropertyKeyframed_VectorKeyframe* _add = _internal_add_keys();
  // @@protoc_insertion_point(field_add:Property.VectorPropertyKeyframed.keys)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Property::VectorPropertyKeyframed_VectorKeyframe >&
VectorPropertyKeyframed::keys() const {
  // @@protoc_insertion_point(field_list:Property.VectorPropertyKeyframed.keys)
  return _impl_.keys_;
}

// .Property.KeyframeLoopingEnum looping = 11;
inline void VectorPropertyKeyframed::clear_looping() {
  _impl_.looping_ = 0;
}
inline ::Property::KeyframeLoopingEnum VectorPropertyKeyframed::_internal_looping() const {
  return static_cast< ::Property::KeyframeLoopingEnum >(_impl_.looping_);
}
inline ::Property::KeyframeLoopingEnum VectorPropertyKeyframed::looping() const {
  // @@protoc_insertion_point(field_get:Property.VectorPropertyKeyframed.looping)
  return _internal_looping();
}
inline void VectorPropertyKeyframed::_internal_set_looping(::Property::KeyframeLoopingEnum value) {
  
  _impl_.looping_ = value;
}
inline void VectorPropertyKeyframed::set_looping(::Property::KeyframeLoopingEnum value) {
  _internal_set_looping(value);
  // @@protoc_insertion_point(field_set:Property.VectorPropertyKeyframed.looping)
}

// .Property.TangentsAutocomputeMethodEnum tangentGen = 12;
inline void VectorPropertyKeyframed::clear_tangentgen() {
  _impl_.tangentgen_ = 0;
}
inline ::Property::TangentsAutocomputeMethodEnum VectorPropertyKeyframed::_internal_tangentgen() const {
  return static_cast< ::Property::TangentsAutocomputeMethodEnum >(_impl_.tangentgen_);
}
inline ::Property::TangentsAutocomputeMethodEnum VectorPropertyKeyframed::tangentgen() const {
  // @@protoc_insertion_point(field_get:Property.VectorPropertyKeyframed.tangentGen)
  return _internal_tangentgen();
}
inline void VectorPropertyKeyframed::_internal_set_tangentgen(::Property::TangentsAutocomputeMethodEnum value) {
  
  _impl_.tangentgen_ = value;
}
inline void VectorPropertyKeyframed::set_tangentgen(::Property::TangentsAutocomputeMethodEnum value) {
  _internal_set_tangentgen(value);
  // @@protoc_insertion_point(field_set:Property.VectorPropertyKeyframed.tangentGen)
}

// .Property.VectorPropertyKeyframed.VectorInterpolationMethod interpolationMethod = 13;
inline void VectorPropertyKeyframed::clear_interpolationmethod() {
  _impl_.interpolationmethod_ = 0;
}
inline ::Property::VectorPropertyKeyframed_VectorInterpolationMethod VectorPropertyKeyframed::_internal_interpolationmethod() const {
  return static_cast< ::Property::VectorPropertyKeyframed_VectorInterpolationMethod >(_impl_.interpolationmethod_);
}
inline ::Property::VectorPropertyKeyframed_VectorInterpolationMethod VectorPropertyKeyframed::interpolationmethod() const {
  // @@protoc_insertion_point(field_get:Property.VectorPropertyKeyframed.interpolationMethod)
  return _internal_interpolationmethod();
}
inline void VectorPropertyKeyframed::_internal_set_interpolationmethod(::Property::VectorPropertyKeyframed_VectorInterpolationMethod value) {
  
  _impl_.interpolationmethod_ = value;
}
inline void VectorPropertyKeyframed::set_interpolationmethod(::Property::VectorPropertyKeyframed_VectorInterpolationMethod value) {
  _internal_set_interpolationmethod(value);
  // @@protoc_insertion_point(field_set:Property.VectorPropertyKeyframed.interpolationMethod)
}

// -------------------------------------------------------------------

// VectorPropertyDeclaration

// .Common.Float4 default = 2;
inline bool VectorPropertyDeclaration::_internal_has_default_() const {
  return this != internal_default_instance() && _impl_.default__ != nullptr;
}
inline bool VectorPropertyDeclaration::has_default_() const {
  return _internal_has_default_();
}
inline const ::Common::Float4& VectorPropertyDeclaration::_internal_default_() const {
  const ::Common::Float4* p = _impl_.default__;
  return p != nullptr ? *p : reinterpret_cast<const ::Common::Float4&>(
      ::Common::_Float4_default_instance_);
}
inline const ::Common::Float4& VectorPropertyDeclaration::default_() const {
  // @@protoc_insertion_point(field_get:Property.VectorPropertyDeclaration.default)
  return _internal_default_();
}
inline void VectorPropertyDeclaration::unsafe_arena_set_allocated_default_(
    ::Common::Float4* default_) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.default__);
  }
  _impl_.default__ = default_;
  if (default_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.VectorPropertyDeclaration.default)
}
inline ::Common::Float4* VectorPropertyDeclaration::release_default_() {
  
  ::Common::Float4* temp = _impl_.default__;
  _impl_.default__ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Common::Float4* VectorPropertyDeclaration::unsafe_arena_release_default_() {
  // @@protoc_insertion_point(field_release:Property.VectorPropertyDeclaration.default)
  
  ::Common::Float4* temp = _impl_.default__;
  _impl_.default__ = nullptr;
  return temp;
}
inline ::Common::Float4* VectorPropertyDeclaration::_internal_mutable_default_() {
  
  if (_impl_.default__ == nullptr) {
    auto* p = CreateMaybeMessage<::Common::Float4>(GetArenaForAllocation());
    _impl_.default__ = p;
  }
  return _impl_.default__;
}
inline ::Common::Float4* VectorPropertyDeclaration::mutable_default_() {
  ::Common::Float4* _msg = _internal_mutable_default_();
  // @@protoc_insertion_point(field_mutable:Property.VectorPropertyDeclaration.default)
  return _msg;
}
inline void VectorPropertyDeclaration::set_allocated_default_(::Common::Float4* default_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.default__);
  }
  if (default_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(default_));
    if (message_arena != submessage_arena) {
      default_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, default_, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.default__ = default_;
  // @@protoc_insertion_point(field_set_allocated:Property.VectorPropertyDeclaration.default)
}

// .Property.VectorPropertyMetadata meta = 1;
inline bool VectorPropertyDeclaration::_internal_has_meta() const {
  return this != internal_default_instance() && _impl_.meta_ != nullptr;
}
inline bool VectorPropertyDeclaration::has_meta() const {
  return _internal_has_meta();
}
inline void VectorPropertyDeclaration::clear_meta() {
  if (GetArenaForAllocation() == nullptr && _impl_.meta_ != nullptr) {
    delete _impl_.meta_;
  }
  _impl_.meta_ = nullptr;
}
inline const ::Property::VectorPropertyMetadata& VectorPropertyDeclaration::_internal_meta() const {
  const ::Property::VectorPropertyMetadata* p = _impl_.meta_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::VectorPropertyMetadata&>(
      ::Property::_VectorPropertyMetadata_default_instance_);
}
inline const ::Property::VectorPropertyMetadata& VectorPropertyDeclaration::meta() const {
  // @@protoc_insertion_point(field_get:Property.VectorPropertyDeclaration.meta)
  return _internal_meta();
}
inline void VectorPropertyDeclaration::unsafe_arena_set_allocated_meta(
    ::Property::VectorPropertyMetadata* meta) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.meta_);
  }
  _impl_.meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.VectorPropertyDeclaration.meta)
}
inline ::Property::VectorPropertyMetadata* VectorPropertyDeclaration::release_meta() {
  
  ::Property::VectorPropertyMetadata* temp = _impl_.meta_;
  _impl_.meta_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::VectorPropertyMetadata* VectorPropertyDeclaration::unsafe_arena_release_meta() {
  // @@protoc_insertion_point(field_release:Property.VectorPropertyDeclaration.meta)
  
  ::Property::VectorPropertyMetadata* temp = _impl_.meta_;
  _impl_.meta_ = nullptr;
  return temp;
}
inline ::Property::VectorPropertyMetadata* VectorPropertyDeclaration::_internal_mutable_meta() {
  
  if (_impl_.meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::VectorPropertyMetadata>(GetArenaForAllocation());
    _impl_.meta_ = p;
  }
  return _impl_.meta_;
}
inline ::Property::VectorPropertyMetadata* VectorPropertyDeclaration::mutable_meta() {
  ::Property::VectorPropertyMetadata* _msg = _internal_mutable_meta();
  // @@protoc_insertion_point(field_mutable:Property.VectorPropertyDeclaration.meta)
  return _msg;
}
inline void VectorPropertyDeclaration::set_allocated_meta(::Property::VectorPropertyMetadata* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.meta_;
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(meta);
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:Property.VectorPropertyDeclaration.meta)
}

// -------------------------------------------------------------------

// VectorEditingMetadata

// .Property.VectorEditingMetadata.VectorInterpretationEnum usage = 1;
inline void VectorEditingMetadata::clear_usage() {
  _impl_.usage_ = 0;
}
inline ::Property::VectorEditingMetadata_VectorInterpretationEnum VectorEditingMetadata::_internal_usage() const {
  return static_cast< ::Property::VectorEditingMetadata_VectorInterpretationEnum >(_impl_.usage_);
}
inline ::Property::VectorEditingMetadata_VectorInterpretationEnum VectorEditingMetadata::usage() const {
  // @@protoc_insertion_point(field_get:Property.VectorEditingMetadata.usage)
  return _internal_usage();
}
inline void VectorEditingMetadata::_internal_set_usage(::Property::VectorEditingMetadata_VectorInterpretationEnum value) {
  
  _impl_.usage_ = value;
}
inline void VectorEditingMetadata::set_usage(::Property::VectorEditingMetadata_VectorInterpretationEnum value) {
  _internal_set_usage(value);
  // @@protoc_insertion_point(field_set:Property.VectorEditingMetadata.usage)
}

// -------------------------------------------------------------------

// VectorGeneratorMetadata

// .Property.GeneratorMetadata base = 1;
inline bool VectorGeneratorMetadata::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool VectorGeneratorMetadata::has_base() const {
  return _internal_has_base();
}
inline void VectorGeneratorMetadata::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
inline const ::Property::GeneratorMetadata& VectorGeneratorMetadata::_internal_base() const {
  const ::Property::GeneratorMetadata* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::GeneratorMetadata&>(
      ::Property::_GeneratorMetadata_default_instance_);
}
inline const ::Property::GeneratorMetadata& VectorGeneratorMetadata::base() const {
  // @@protoc_insertion_point(field_get:Property.VectorGeneratorMetadata.base)
  return _internal_base();
}
inline void VectorGeneratorMetadata::unsafe_arena_set_allocated_base(
    ::Property::GeneratorMetadata* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.VectorGeneratorMetadata.base)
}
inline ::Property::GeneratorMetadata* VectorGeneratorMetadata::release_base() {
  
  ::Property::GeneratorMetadata* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::GeneratorMetadata* VectorGeneratorMetadata::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:Property.VectorGeneratorMetadata.base)
  
  ::Property::GeneratorMetadata* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::Property::GeneratorMetadata* VectorGeneratorMetadata::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::GeneratorMetadata>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::Property::GeneratorMetadata* VectorGeneratorMetadata::mutable_base() {
  ::Property::GeneratorMetadata* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:Property.VectorGeneratorMetadata.base)
  return _msg;
}
inline void VectorGeneratorMetadata::set_allocated_base(::Property::GeneratorMetadata* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:Property.VectorGeneratorMetadata.base)
}

// optional .Property.VectorEditingMetadata edit = 2;
inline bool VectorGeneratorMetadata::_internal_has_edit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.edit_ != nullptr);
  return value;
}
inline bool VectorGeneratorMetadata::has_edit() const {
  return _internal_has_edit();
}
inline void VectorGeneratorMetadata::clear_edit() {
  if (_impl_.edit_ != nullptr) _impl_.edit_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::Property::VectorEditingMetadata& VectorGeneratorMetadata::_internal_edit() const {
  const ::Property::VectorEditingMetadata* p = _impl_.edit_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::VectorEditingMetadata&>(
      ::Property::_VectorEditingMetadata_default_instance_);
}
inline const ::Property::VectorEditingMetadata& VectorGeneratorMetadata::edit() const {
  // @@protoc_insertion_point(field_get:Property.VectorGeneratorMetadata.edit)
  return _internal_edit();
}
inline void VectorGeneratorMetadata::unsafe_arena_set_allocated_edit(
    ::Property::VectorEditingMetadata* edit) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.edit_);
  }
  _impl_.edit_ = edit;
  if (edit) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.VectorGeneratorMetadata.edit)
}
inline ::Property::VectorEditingMetadata* VectorGeneratorMetadata::release_edit() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Property::VectorEditingMetadata* temp = _impl_.edit_;
  _impl_.edit_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::VectorEditingMetadata* VectorGeneratorMetadata::unsafe_arena_release_edit() {
  // @@protoc_insertion_point(field_release:Property.VectorGeneratorMetadata.edit)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Property::VectorEditingMetadata* temp = _impl_.edit_;
  _impl_.edit_ = nullptr;
  return temp;
}
inline ::Property::VectorEditingMetadata* VectorGeneratorMetadata::_internal_mutable_edit() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.edit_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::VectorEditingMetadata>(GetArenaForAllocation());
    _impl_.edit_ = p;
  }
  return _impl_.edit_;
}
inline ::Property::VectorEditingMetadata* VectorGeneratorMetadata::mutable_edit() {
  ::Property::VectorEditingMetadata* _msg = _internal_mutable_edit();
  // @@protoc_insertion_point(field_mutable:Property.VectorGeneratorMetadata.edit)
  return _msg;
}
inline void VectorGeneratorMetadata::set_allocated_edit(::Property::VectorEditingMetadata* edit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.edit_;
  }
  if (edit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(edit);
    if (message_arena != submessage_arena) {
      edit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, edit, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.edit_ = edit;
  // @@protoc_insertion_point(field_set_allocated:Property.VectorGeneratorMetadata.edit)
}

// -------------------------------------------------------------------

// VectorPropertyMetadata

// .Property.PropertyMetadata base = 1;
inline bool VectorPropertyMetadata::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool VectorPropertyMetadata::has_base() const {
  return _internal_has_base();
}
inline void VectorPropertyMetadata::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
inline const ::Property::PropertyMetadata& VectorPropertyMetadata::_internal_base() const {
  const ::Property::PropertyMetadata* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::PropertyMetadata&>(
      ::Property::_PropertyMetadata_default_instance_);
}
inline const ::Property::PropertyMetadata& VectorPropertyMetadata::base() const {
  // @@protoc_insertion_point(field_get:Property.VectorPropertyMetadata.base)
  return _internal_base();
}
inline void VectorPropertyMetadata::unsafe_arena_set_allocated_base(
    ::Property::PropertyMetadata* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.VectorPropertyMetadata.base)
}
inline ::Property::PropertyMetadata* VectorPropertyMetadata::release_base() {
  
  ::Property::PropertyMetadata* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::PropertyMetadata* VectorPropertyMetadata::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:Property.VectorPropertyMetadata.base)
  
  ::Property::PropertyMetadata* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::Property::PropertyMetadata* VectorPropertyMetadata::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::PropertyMetadata>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::Property::PropertyMetadata* VectorPropertyMetadata::mutable_base() {
  ::Property::PropertyMetadata* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:Property.VectorPropertyMetadata.base)
  return _msg;
}
inline void VectorPropertyMetadata::set_allocated_base(::Property::PropertyMetadata* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:Property.VectorPropertyMetadata.base)
}

// optional .Property.VectorEditingMetadata edit = 2;
inline bool VectorPropertyMetadata::_internal_has_edit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.edit_ != nullptr);
  return value;
}
inline bool VectorPropertyMetadata::has_edit() const {
  return _internal_has_edit();
}
inline void VectorPropertyMetadata::clear_edit() {
  if (_impl_.edit_ != nullptr) _impl_.edit_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::Property::VectorEditingMetadata& VectorPropertyMetadata::_internal_edit() const {
  const ::Property::VectorEditingMetadata* p = _impl_.edit_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::VectorEditingMetadata&>(
      ::Property::_VectorEditingMetadata_default_instance_);
}
inline const ::Property::VectorEditingMetadata& VectorPropertyMetadata::edit() const {
  // @@protoc_insertion_point(field_get:Property.VectorPropertyMetadata.edit)
  return _internal_edit();
}
inline void VectorPropertyMetadata::unsafe_arena_set_allocated_edit(
    ::Property::VectorEditingMetadata* edit) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.edit_);
  }
  _impl_.edit_ = edit;
  if (edit) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.VectorPropertyMetadata.edit)
}
inline ::Property::VectorEditingMetadata* VectorPropertyMetadata::release_edit() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Property::VectorEditingMetadata* temp = _impl_.edit_;
  _impl_.edit_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::VectorEditingMetadata* VectorPropertyMetadata::unsafe_arena_release_edit() {
  // @@protoc_insertion_point(field_release:Property.VectorPropertyMetadata.edit)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Property::VectorEditingMetadata* temp = _impl_.edit_;
  _impl_.edit_ = nullptr;
  return temp;
}
inline ::Property::VectorEditingMetadata* VectorPropertyMetadata::_internal_mutable_edit() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.edit_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::VectorEditingMetadata>(GetArenaForAllocation());
    _impl_.edit_ = p;
  }
  return _impl_.edit_;
}
inline ::Property::VectorEditingMetadata* VectorPropertyMetadata::mutable_edit() {
  ::Property::VectorEditingMetadata* _msg = _internal_mutable_edit();
  // @@protoc_insertion_point(field_mutable:Property.VectorPropertyMetadata.edit)
  return _msg;
}
inline void VectorPropertyMetadata::set_allocated_edit(::Property::VectorEditingMetadata* edit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.edit_;
  }
  if (edit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(edit);
    if (message_arena != submessage_arena) {
      edit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, edit, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.edit_ = edit;
  // @@protoc_insertion_point(field_set_allocated:Property.VectorPropertyMetadata.edit)
}

// -------------------------------------------------------------------

// ColorPropertyAssignment

// optional .Property.ColorPropertyAssignment.ColorPropertyMethod method = 1;
inline bool ColorPropertyAssignment::_internal_has_method() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ColorPropertyAssignment::has_method() const {
  return _internal_has_method();
}
inline void ColorPropertyAssignment::clear_method() {
  _impl_.method_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::Property::ColorPropertyAssignment_ColorPropertyMethod ColorPropertyAssignment::_internal_method() const {
  return static_cast< ::Property::ColorPropertyAssignment_ColorPropertyMethod >(_impl_.method_);
}
inline ::Property::ColorPropertyAssignment_ColorPropertyMethod ColorPropertyAssignment::method() const {
  // @@protoc_insertion_point(field_get:Property.ColorPropertyAssignment.method)
  return _internal_method();
}
inline void ColorPropertyAssignment::_internal_set_method(::Property::ColorPropertyAssignment_ColorPropertyMethod value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.method_ = value;
}
inline void ColorPropertyAssignment::set_method(::Property::ColorPropertyAssignment_ColorPropertyMethod value) {
  _internal_set_method(value);
  // @@protoc_insertion_point(field_set:Property.ColorPropertyAssignment.method)
}

// optional int32 priority = 2;
inline bool ColorPropertyAssignment::_internal_has_priority() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ColorPropertyAssignment::has_priority() const {
  return _internal_has_priority();
}
inline void ColorPropertyAssignment::clear_priority() {
  _impl_.priority_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t ColorPropertyAssignment::_internal_priority() const {
  return _impl_.priority_;
}
inline int32_t ColorPropertyAssignment::priority() const {
  // @@protoc_insertion_point(field_get:Property.ColorPropertyAssignment.priority)
  return _internal_priority();
}
inline void ColorPropertyAssignment::_internal_set_priority(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.priority_ = value;
}
inline void ColorPropertyAssignment::set_priority(int32_t value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:Property.ColorPropertyAssignment.priority)
}

// string assignmentId = 4;
inline void ColorPropertyAssignment::clear_assignmentid() {
  _impl_.assignmentid_.ClearToEmpty();
}
inline const std::string& ColorPropertyAssignment::assignmentid() const {
  // @@protoc_insertion_point(field_get:Property.ColorPropertyAssignment.assignmentId)
  return _internal_assignmentid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ColorPropertyAssignment::set_assignmentid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.assignmentid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Property.ColorPropertyAssignment.assignmentId)
}
inline std::string* ColorPropertyAssignment::mutable_assignmentid() {
  std::string* _s = _internal_mutable_assignmentid();
  // @@protoc_insertion_point(field_mutable:Property.ColorPropertyAssignment.assignmentId)
  return _s;
}
inline const std::string& ColorPropertyAssignment::_internal_assignmentid() const {
  return _impl_.assignmentid_.Get();
}
inline void ColorPropertyAssignment::_internal_set_assignmentid(const std::string& value) {
  
  _impl_.assignmentid_.Set(value, GetArenaForAllocation());
}
inline std::string* ColorPropertyAssignment::_internal_mutable_assignmentid() {
  
  return _impl_.assignmentid_.Mutable(GetArenaForAllocation());
}
inline std::string* ColorPropertyAssignment::release_assignmentid() {
  // @@protoc_insertion_point(field_release:Property.ColorPropertyAssignment.assignmentId)
  return _impl_.assignmentid_.Release();
}
inline void ColorPropertyAssignment::set_allocated_assignmentid(std::string* assignmentid) {
  if (assignmentid != nullptr) {
    
  } else {
    
  }
  _impl_.assignmentid_.SetAllocated(assignmentid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.assignmentid_.IsDefault()) {
    _impl_.assignmentid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Property.ColorPropertyAssignment.assignmentId)
}

// .Property.ColorPropertyValue value = 3;
inline bool ColorPropertyAssignment::_internal_has_value() const {
  return this != internal_default_instance() && _impl_.value_ != nullptr;
}
inline bool ColorPropertyAssignment::has_value() const {
  return _internal_has_value();
}
inline void ColorPropertyAssignment::clear_value() {
  if (GetArenaForAllocation() == nullptr && _impl_.value_ != nullptr) {
    delete _impl_.value_;
  }
  _impl_.value_ = nullptr;
}
inline const ::Property::ColorPropertyValue& ColorPropertyAssignment::_internal_value() const {
  const ::Property::ColorPropertyValue* p = _impl_.value_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::ColorPropertyValue&>(
      ::Property::_ColorPropertyValue_default_instance_);
}
inline const ::Property::ColorPropertyValue& ColorPropertyAssignment::value() const {
  // @@protoc_insertion_point(field_get:Property.ColorPropertyAssignment.value)
  return _internal_value();
}
inline void ColorPropertyAssignment::unsafe_arena_set_allocated_value(
    ::Property::ColorPropertyValue* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_);
  }
  _impl_.value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.ColorPropertyAssignment.value)
}
inline ::Property::ColorPropertyValue* ColorPropertyAssignment::release_value() {
  
  ::Property::ColorPropertyValue* temp = _impl_.value_;
  _impl_.value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::ColorPropertyValue* ColorPropertyAssignment::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:Property.ColorPropertyAssignment.value)
  
  ::Property::ColorPropertyValue* temp = _impl_.value_;
  _impl_.value_ = nullptr;
  return temp;
}
inline ::Property::ColorPropertyValue* ColorPropertyAssignment::_internal_mutable_value() {
  
  if (_impl_.value_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::ColorPropertyValue>(GetArenaForAllocation());
    _impl_.value_ = p;
  }
  return _impl_.value_;
}
inline ::Property::ColorPropertyValue* ColorPropertyAssignment::mutable_value() {
  ::Property::ColorPropertyValue* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:Property.ColorPropertyAssignment.value)
  return _msg;
}
inline void ColorPropertyAssignment::set_allocated_value(::Property::ColorPropertyValue* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.value_ = value;
  // @@protoc_insertion_point(field_set_allocated:Property.ColorPropertyAssignment.value)
}

// -------------------------------------------------------------------

// ColorPropertyValue

// .Common.Color4 constant = 1;
inline bool ColorPropertyValue::_internal_has_constant() const {
  return ValueType_case() == kConstant;
}
inline bool ColorPropertyValue::has_constant() const {
  return _internal_has_constant();
}
inline void ColorPropertyValue::set_has_constant() {
  _impl_._oneof_case_[0] = kConstant;
}
inline ::Common::Color4* ColorPropertyValue::release_constant() {
  // @@protoc_insertion_point(field_release:Property.ColorPropertyValue.constant)
  if (_internal_has_constant()) {
    clear_has_ValueType();
    ::Common::Color4* temp = _impl_.ValueType_.constant_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.ValueType_.constant_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Common::Color4& ColorPropertyValue::_internal_constant() const {
  return _internal_has_constant()
      ? *_impl_.ValueType_.constant_
      : reinterpret_cast< ::Common::Color4&>(::Common::_Color4_default_instance_);
}
inline const ::Common::Color4& ColorPropertyValue::constant() const {
  // @@protoc_insertion_point(field_get:Property.ColorPropertyValue.constant)
  return _internal_constant();
}
inline ::Common::Color4* ColorPropertyValue::unsafe_arena_release_constant() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.ColorPropertyValue.constant)
  if (_internal_has_constant()) {
    clear_has_ValueType();
    ::Common::Color4* temp = _impl_.ValueType_.constant_;
    _impl_.ValueType_.constant_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ColorPropertyValue::unsafe_arena_set_allocated_constant(::Common::Color4* constant) {
  clear_ValueType();
  if (constant) {
    set_has_constant();
    _impl_.ValueType_.constant_ = constant;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.ColorPropertyValue.constant)
}
inline ::Common::Color4* ColorPropertyValue::_internal_mutable_constant() {
  if (!_internal_has_constant()) {
    clear_ValueType();
    set_has_constant();
    _impl_.ValueType_.constant_ = CreateMaybeMessage< ::Common::Color4 >(GetArenaForAllocation());
  }
  return _impl_.ValueType_.constant_;
}
inline ::Common::Color4* ColorPropertyValue::mutable_constant() {
  ::Common::Color4* _msg = _internal_mutable_constant();
  // @@protoc_insertion_point(field_mutable:Property.ColorPropertyValue.constant)
  return _msg;
}

// .Property.PropertyIdentifier ref = 2;
inline bool ColorPropertyValue::_internal_has_ref() const {
  return ValueType_case() == kRef;
}
inline bool ColorPropertyValue::has_ref() const {
  return _internal_has_ref();
}
inline void ColorPropertyValue::set_has_ref() {
  _impl_._oneof_case_[0] = kRef;
}
inline void ColorPropertyValue::clear_ref() {
  if (_internal_has_ref()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.ValueType_.ref_;
    }
    clear_has_ValueType();
  }
}
inline ::Property::PropertyIdentifier* ColorPropertyValue::release_ref() {
  // @@protoc_insertion_point(field_release:Property.ColorPropertyValue.ref)
  if (_internal_has_ref()) {
    clear_has_ValueType();
    ::Property::PropertyIdentifier* temp = _impl_.ValueType_.ref_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.ValueType_.ref_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::PropertyIdentifier& ColorPropertyValue::_internal_ref() const {
  return _internal_has_ref()
      ? *_impl_.ValueType_.ref_
      : reinterpret_cast< ::Property::PropertyIdentifier&>(::Property::_PropertyIdentifier_default_instance_);
}
inline const ::Property::PropertyIdentifier& ColorPropertyValue::ref() const {
  // @@protoc_insertion_point(field_get:Property.ColorPropertyValue.ref)
  return _internal_ref();
}
inline ::Property::PropertyIdentifier* ColorPropertyValue::unsafe_arena_release_ref() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.ColorPropertyValue.ref)
  if (_internal_has_ref()) {
    clear_has_ValueType();
    ::Property::PropertyIdentifier* temp = _impl_.ValueType_.ref_;
    _impl_.ValueType_.ref_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ColorPropertyValue::unsafe_arena_set_allocated_ref(::Property::PropertyIdentifier* ref) {
  clear_ValueType();
  if (ref) {
    set_has_ref();
    _impl_.ValueType_.ref_ = ref;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.ColorPropertyValue.ref)
}
inline ::Property::PropertyIdentifier* ColorPropertyValue::_internal_mutable_ref() {
  if (!_internal_has_ref()) {
    clear_ValueType();
    set_has_ref();
    _impl_.ValueType_.ref_ = CreateMaybeMessage< ::Property::PropertyIdentifier >(GetArenaForAllocation());
  }
  return _impl_.ValueType_.ref_;
}
inline ::Property::PropertyIdentifier* ColorPropertyValue::mutable_ref() {
  ::Property::PropertyIdentifier* _msg = _internal_mutable_ref();
  // @@protoc_insertion_point(field_mutable:Property.ColorPropertyValue.ref)
  return _msg;
}

// .Property.ColorPerChannel byChannel = 4;
inline bool ColorPropertyValue::_internal_has_bychannel() const {
  return ValueType_case() == kByChannel;
}
inline bool ColorPropertyValue::has_bychannel() const {
  return _internal_has_bychannel();
}
inline void ColorPropertyValue::set_has_bychannel() {
  _impl_._oneof_case_[0] = kByChannel;
}
inline void ColorPropertyValue::clear_bychannel() {
  if (_internal_has_bychannel()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.ValueType_.bychannel_;
    }
    clear_has_ValueType();
  }
}
inline ::Property::ColorPerChannel* ColorPropertyValue::release_bychannel() {
  // @@protoc_insertion_point(field_release:Property.ColorPropertyValue.byChannel)
  if (_internal_has_bychannel()) {
    clear_has_ValueType();
    ::Property::ColorPerChannel* temp = _impl_.ValueType_.bychannel_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.ValueType_.bychannel_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::ColorPerChannel& ColorPropertyValue::_internal_bychannel() const {
  return _internal_has_bychannel()
      ? *_impl_.ValueType_.bychannel_
      : reinterpret_cast< ::Property::ColorPerChannel&>(::Property::_ColorPerChannel_default_instance_);
}
inline const ::Property::ColorPerChannel& ColorPropertyValue::bychannel() const {
  // @@protoc_insertion_point(field_get:Property.ColorPropertyValue.byChannel)
  return _internal_bychannel();
}
inline ::Property::ColorPerChannel* ColorPropertyValue::unsafe_arena_release_bychannel() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.ColorPropertyValue.byChannel)
  if (_internal_has_bychannel()) {
    clear_has_ValueType();
    ::Property::ColorPerChannel* temp = _impl_.ValueType_.bychannel_;
    _impl_.ValueType_.bychannel_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ColorPropertyValue::unsafe_arena_set_allocated_bychannel(::Property::ColorPerChannel* bychannel) {
  clear_ValueType();
  if (bychannel) {
    set_has_bychannel();
    _impl_.ValueType_.bychannel_ = bychannel;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.ColorPropertyValue.byChannel)
}
inline ::Property::ColorPerChannel* ColorPropertyValue::_internal_mutable_bychannel() {
  if (!_internal_has_bychannel()) {
    clear_ValueType();
    set_has_bychannel();
    _impl_.ValueType_.bychannel_ = CreateMaybeMessage< ::Property::ColorPerChannel >(GetArenaForAllocation());
  }
  return _impl_.ValueType_.bychannel_;
}
inline ::Property::ColorPerChannel* ColorPropertyValue::mutable_bychannel() {
  ::Property::ColorPerChannel* _msg = _internal_mutable_bychannel();
  // @@protoc_insertion_point(field_mutable:Property.ColorPropertyValue.byChannel)
  return _msg;
}

// .Property.ColorPropertyKeyframed keyframes = 5;
inline bool ColorPropertyValue::_internal_has_keyframes() const {
  return ValueType_case() == kKeyframes;
}
inline bool ColorPropertyValue::has_keyframes() const {
  return _internal_has_keyframes();
}
inline void ColorPropertyValue::set_has_keyframes() {
  _impl_._oneof_case_[0] = kKeyframes;
}
inline void ColorPropertyValue::clear_keyframes() {
  if (_internal_has_keyframes()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.ValueType_.keyframes_;
    }
    clear_has_ValueType();
  }
}
inline ::Property::ColorPropertyKeyframed* ColorPropertyValue::release_keyframes() {
  // @@protoc_insertion_point(field_release:Property.ColorPropertyValue.keyframes)
  if (_internal_has_keyframes()) {
    clear_has_ValueType();
    ::Property::ColorPropertyKeyframed* temp = _impl_.ValueType_.keyframes_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.ValueType_.keyframes_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::ColorPropertyKeyframed& ColorPropertyValue::_internal_keyframes() const {
  return _internal_has_keyframes()
      ? *_impl_.ValueType_.keyframes_
      : reinterpret_cast< ::Property::ColorPropertyKeyframed&>(::Property::_ColorPropertyKeyframed_default_instance_);
}
inline const ::Property::ColorPropertyKeyframed& ColorPropertyValue::keyframes() const {
  // @@protoc_insertion_point(field_get:Property.ColorPropertyValue.keyframes)
  return _internal_keyframes();
}
inline ::Property::ColorPropertyKeyframed* ColorPropertyValue::unsafe_arena_release_keyframes() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.ColorPropertyValue.keyframes)
  if (_internal_has_keyframes()) {
    clear_has_ValueType();
    ::Property::ColorPropertyKeyframed* temp = _impl_.ValueType_.keyframes_;
    _impl_.ValueType_.keyframes_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ColorPropertyValue::unsafe_arena_set_allocated_keyframes(::Property::ColorPropertyKeyframed* keyframes) {
  clear_ValueType();
  if (keyframes) {
    set_has_keyframes();
    _impl_.ValueType_.keyframes_ = keyframes;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.ColorPropertyValue.keyframes)
}
inline ::Property::ColorPropertyKeyframed* ColorPropertyValue::_internal_mutable_keyframes() {
  if (!_internal_has_keyframes()) {
    clear_ValueType();
    set_has_keyframes();
    _impl_.ValueType_.keyframes_ = CreateMaybeMessage< ::Property::ColorPropertyKeyframed >(GetArenaForAllocation());
  }
  return _impl_.ValueType_.keyframes_;
}
inline ::Property::ColorPropertyKeyframed* ColorPropertyValue::mutable_keyframes() {
  ::Property::ColorPropertyKeyframed* _msg = _internal_mutable_keyframes();
  // @@protoc_insertion_point(field_mutable:Property.ColorPropertyValue.keyframes)
  return _msg;
}

// string expr = 6;
inline bool ColorPropertyValue::_internal_has_expr() const {
  return ValueType_case() == kExpr;
}
inline bool ColorPropertyValue::has_expr() const {
  return _internal_has_expr();
}
inline void ColorPropertyValue::set_has_expr() {
  _impl_._oneof_case_[0] = kExpr;
}
inline void ColorPropertyValue::clear_expr() {
  if (_internal_has_expr()) {
    _impl_.ValueType_.expr_.Destroy();
    clear_has_ValueType();
  }
}
inline const std::string& ColorPropertyValue::expr() const {
  // @@protoc_insertion_point(field_get:Property.ColorPropertyValue.expr)
  return _internal_expr();
}
template <typename ArgT0, typename... ArgT>
inline void ColorPropertyValue::set_expr(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_expr()) {
    clear_ValueType();
    set_has_expr();
    _impl_.ValueType_.expr_.InitDefault();
  }
  _impl_.ValueType_.expr_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Property.ColorPropertyValue.expr)
}
inline std::string* ColorPropertyValue::mutable_expr() {
  std::string* _s = _internal_mutable_expr();
  // @@protoc_insertion_point(field_mutable:Property.ColorPropertyValue.expr)
  return _s;
}
inline const std::string& ColorPropertyValue::_internal_expr() const {
  if (_internal_has_expr()) {
    return _impl_.ValueType_.expr_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ColorPropertyValue::_internal_set_expr(const std::string& value) {
  if (!_internal_has_expr()) {
    clear_ValueType();
    set_has_expr();
    _impl_.ValueType_.expr_.InitDefault();
  }
  _impl_.ValueType_.expr_.Set(value, GetArenaForAllocation());
}
inline std::string* ColorPropertyValue::_internal_mutable_expr() {
  if (!_internal_has_expr()) {
    clear_ValueType();
    set_has_expr();
    _impl_.ValueType_.expr_.InitDefault();
  }
  return _impl_.ValueType_.expr_.Mutable(      GetArenaForAllocation());
}
inline std::string* ColorPropertyValue::release_expr() {
  // @@protoc_insertion_point(field_release:Property.ColorPropertyValue.expr)
  if (_internal_has_expr()) {
    clear_has_ValueType();
    return _impl_.ValueType_.expr_.Release();
  } else {
    return nullptr;
  }
}
inline void ColorPropertyValue::set_allocated_expr(std::string* expr) {
  if (has_ValueType()) {
    clear_ValueType();
  }
  if (expr != nullptr) {
    set_has_expr();
    _impl_.ValueType_.expr_.InitAllocated(expr, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:Property.ColorPropertyValue.expr)
}

// bool useDefault = 7;
inline bool ColorPropertyValue::_internal_has_usedefault() const {
  return ValueType_case() == kUseDefault;
}
inline bool ColorPropertyValue::has_usedefault() const {
  return _internal_has_usedefault();
}
inline void ColorPropertyValue::set_has_usedefault() {
  _impl_._oneof_case_[0] = kUseDefault;
}
inline void ColorPropertyValue::clear_usedefault() {
  if (_internal_has_usedefault()) {
    _impl_.ValueType_.usedefault_ = false;
    clear_has_ValueType();
  }
}
inline bool ColorPropertyValue::_internal_usedefault() const {
  if (_internal_has_usedefault()) {
    return _impl_.ValueType_.usedefault_;
  }
  return false;
}
inline void ColorPropertyValue::_internal_set_usedefault(bool value) {
  if (!_internal_has_usedefault()) {
    clear_ValueType();
    set_has_usedefault();
  }
  _impl_.ValueType_.usedefault_ = value;
}
inline bool ColorPropertyValue::usedefault() const {
  // @@protoc_insertion_point(field_get:Property.ColorPropertyValue.useDefault)
  return _internal_usedefault();
}
inline void ColorPropertyValue::set_usedefault(bool value) {
  _internal_set_usedefault(value);
  // @@protoc_insertion_point(field_set:Property.ColorPropertyValue.useDefault)
}

// .Property.ColorPropertyInterpolator interp = 9;
inline bool ColorPropertyValue::_internal_has_interp() const {
  return ValueType_case() == kInterp;
}
inline bool ColorPropertyValue::has_interp() const {
  return _internal_has_interp();
}
inline void ColorPropertyValue::set_has_interp() {
  _impl_._oneof_case_[0] = kInterp;
}
inline void ColorPropertyValue::clear_interp() {
  if (_internal_has_interp()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.ValueType_.interp_;
    }
    clear_has_ValueType();
  }
}
inline ::Property::ColorPropertyInterpolator* ColorPropertyValue::release_interp() {
  // @@protoc_insertion_point(field_release:Property.ColorPropertyValue.interp)
  if (_internal_has_interp()) {
    clear_has_ValueType();
    ::Property::ColorPropertyInterpolator* temp = _impl_.ValueType_.interp_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.ValueType_.interp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::ColorPropertyInterpolator& ColorPropertyValue::_internal_interp() const {
  return _internal_has_interp()
      ? *_impl_.ValueType_.interp_
      : reinterpret_cast< ::Property::ColorPropertyInterpolator&>(::Property::_ColorPropertyInterpolator_default_instance_);
}
inline const ::Property::ColorPropertyInterpolator& ColorPropertyValue::interp() const {
  // @@protoc_insertion_point(field_get:Property.ColorPropertyValue.interp)
  return _internal_interp();
}
inline ::Property::ColorPropertyInterpolator* ColorPropertyValue::unsafe_arena_release_interp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.ColorPropertyValue.interp)
  if (_internal_has_interp()) {
    clear_has_ValueType();
    ::Property::ColorPropertyInterpolator* temp = _impl_.ValueType_.interp_;
    _impl_.ValueType_.interp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ColorPropertyValue::unsafe_arena_set_allocated_interp(::Property::ColorPropertyInterpolator* interp) {
  clear_ValueType();
  if (interp) {
    set_has_interp();
    _impl_.ValueType_.interp_ = interp;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.ColorPropertyValue.interp)
}
inline ::Property::ColorPropertyInterpolator* ColorPropertyValue::_internal_mutable_interp() {
  if (!_internal_has_interp()) {
    clear_ValueType();
    set_has_interp();
    _impl_.ValueType_.interp_ = CreateMaybeMessage< ::Property::ColorPropertyInterpolator >(GetArenaForAllocation());
  }
  return _impl_.ValueType_.interp_;
}
inline ::Property::ColorPropertyInterpolator* ColorPropertyValue::mutable_interp() {
  ::Property::ColorPropertyInterpolator* _msg = _internal_mutable_interp();
  // @@protoc_insertion_point(field_mutable:Property.ColorPropertyValue.interp)
  return _msg;
}

// .Property.CustomGeneratorValue custom = 10;
inline bool ColorPropertyValue::_internal_has_custom() const {
  return ValueType_case() == kCustom;
}
inline bool ColorPropertyValue::has_custom() const {
  return _internal_has_custom();
}
inline void ColorPropertyValue::set_has_custom() {
  _impl_._oneof_case_[0] = kCustom;
}
inline void ColorPropertyValue::clear_custom() {
  if (_internal_has_custom()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.ValueType_.custom_;
    }
    clear_has_ValueType();
  }
}
inline ::Property::CustomGeneratorValue* ColorPropertyValue::release_custom() {
  // @@protoc_insertion_point(field_release:Property.ColorPropertyValue.custom)
  if (_internal_has_custom()) {
    clear_has_ValueType();
    ::Property::CustomGeneratorValue* temp = _impl_.ValueType_.custom_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.ValueType_.custom_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::CustomGeneratorValue& ColorPropertyValue::_internal_custom() const {
  return _internal_has_custom()
      ? *_impl_.ValueType_.custom_
      : reinterpret_cast< ::Property::CustomGeneratorValue&>(::Property::_CustomGeneratorValue_default_instance_);
}
inline const ::Property::CustomGeneratorValue& ColorPropertyValue::custom() const {
  // @@protoc_insertion_point(field_get:Property.ColorPropertyValue.custom)
  return _internal_custom();
}
inline ::Property::CustomGeneratorValue* ColorPropertyValue::unsafe_arena_release_custom() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.ColorPropertyValue.custom)
  if (_internal_has_custom()) {
    clear_has_ValueType();
    ::Property::CustomGeneratorValue* temp = _impl_.ValueType_.custom_;
    _impl_.ValueType_.custom_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ColorPropertyValue::unsafe_arena_set_allocated_custom(::Property::CustomGeneratorValue* custom) {
  clear_ValueType();
  if (custom) {
    set_has_custom();
    _impl_.ValueType_.custom_ = custom;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.ColorPropertyValue.custom)
}
inline ::Property::CustomGeneratorValue* ColorPropertyValue::_internal_mutable_custom() {
  if (!_internal_has_custom()) {
    clear_ValueType();
    set_has_custom();
    _impl_.ValueType_.custom_ = CreateMaybeMessage< ::Property::CustomGeneratorValue >(GetArenaForAllocation());
  }
  return _impl_.ValueType_.custom_;
}
inline ::Property::CustomGeneratorValue* ColorPropertyValue::mutable_custom() {
  ::Property::CustomGeneratorValue* _msg = _internal_mutable_custom();
  // @@protoc_insertion_point(field_mutable:Property.ColorPropertyValue.custom)
  return _msg;
}

// .Property.ColorPropertyApproach approach = 12;
inline bool ColorPropertyValue::_internal_has_approach() const {
  return ValueType_case() == kApproach;
}
inline bool ColorPropertyValue::has_approach() const {
  return _internal_has_approach();
}
inline void ColorPropertyValue::set_has_approach() {
  _impl_._oneof_case_[0] = kApproach;
}
inline void ColorPropertyValue::clear_approach() {
  if (_internal_has_approach()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.ValueType_.approach_;
    }
    clear_has_ValueType();
  }
}
inline ::Property::ColorPropertyApproach* ColorPropertyValue::release_approach() {
  // @@protoc_insertion_point(field_release:Property.ColorPropertyValue.approach)
  if (_internal_has_approach()) {
    clear_has_ValueType();
    ::Property::ColorPropertyApproach* temp = _impl_.ValueType_.approach_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.ValueType_.approach_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::ColorPropertyApproach& ColorPropertyValue::_internal_approach() const {
  return _internal_has_approach()
      ? *_impl_.ValueType_.approach_
      : reinterpret_cast< ::Property::ColorPropertyApproach&>(::Property::_ColorPropertyApproach_default_instance_);
}
inline const ::Property::ColorPropertyApproach& ColorPropertyValue::approach() const {
  // @@protoc_insertion_point(field_get:Property.ColorPropertyValue.approach)
  return _internal_approach();
}
inline ::Property::ColorPropertyApproach* ColorPropertyValue::unsafe_arena_release_approach() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.ColorPropertyValue.approach)
  if (_internal_has_approach()) {
    clear_has_ValueType();
    ::Property::ColorPropertyApproach* temp = _impl_.ValueType_.approach_;
    _impl_.ValueType_.approach_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ColorPropertyValue::unsafe_arena_set_allocated_approach(::Property::ColorPropertyApproach* approach) {
  clear_ValueType();
  if (approach) {
    set_has_approach();
    _impl_.ValueType_.approach_ = approach;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.ColorPropertyValue.approach)
}
inline ::Property::ColorPropertyApproach* ColorPropertyValue::_internal_mutable_approach() {
  if (!_internal_has_approach()) {
    clear_ValueType();
    set_has_approach();
    _impl_.ValueType_.approach_ = CreateMaybeMessage< ::Property::ColorPropertyApproach >(GetArenaForAllocation());
  }
  return _impl_.ValueType_.approach_;
}
inline ::Property::ColorPropertyApproach* ColorPropertyValue::mutable_approach() {
  ::Property::ColorPropertyApproach* _msg = _internal_mutable_approach();
  // @@protoc_insertion_point(field_mutable:Property.ColorPropertyValue.approach)
  return _msg;
}

inline bool ColorPropertyValue::has_ValueType() const {
  return ValueType_case() != VALUETYPE_NOT_SET;
}
inline void ColorPropertyValue::clear_has_ValueType() {
  _impl_._oneof_case_[0] = VALUETYPE_NOT_SET;
}
inline ColorPropertyValue::ValueTypeCase ColorPropertyValue::ValueType_case() const {
  return ColorPropertyValue::ValueTypeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ColorPropertyInterpolator

// .Property.ScalarPropertyValue t = 4;
inline bool ColorPropertyInterpolator::_internal_has_t() const {
  return this != internal_default_instance() && _impl_.t_ != nullptr;
}
inline bool ColorPropertyInterpolator::has_t() const {
  return _internal_has_t();
}
inline void ColorPropertyInterpolator::clear_t() {
  if (GetArenaForAllocation() == nullptr && _impl_.t_ != nullptr) {
    delete _impl_.t_;
  }
  _impl_.t_ = nullptr;
}
inline const ::Property::ScalarPropertyValue& ColorPropertyInterpolator::_internal_t() const {
  const ::Property::ScalarPropertyValue* p = _impl_.t_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::ScalarPropertyValue&>(
      ::Property::_ScalarPropertyValue_default_instance_);
}
inline const ::Property::ScalarPropertyValue& ColorPropertyInterpolator::t() const {
  // @@protoc_insertion_point(field_get:Property.ColorPropertyInterpolator.t)
  return _internal_t();
}
inline void ColorPropertyInterpolator::unsafe_arena_set_allocated_t(
    ::Property::ScalarPropertyValue* t) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.t_);
  }
  _impl_.t_ = t;
  if (t) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.ColorPropertyInterpolator.t)
}
inline ::Property::ScalarPropertyValue* ColorPropertyInterpolator::release_t() {
  
  ::Property::ScalarPropertyValue* temp = _impl_.t_;
  _impl_.t_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::ScalarPropertyValue* ColorPropertyInterpolator::unsafe_arena_release_t() {
  // @@protoc_insertion_point(field_release:Property.ColorPropertyInterpolator.t)
  
  ::Property::ScalarPropertyValue* temp = _impl_.t_;
  _impl_.t_ = nullptr;
  return temp;
}
inline ::Property::ScalarPropertyValue* ColorPropertyInterpolator::_internal_mutable_t() {
  
  if (_impl_.t_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::ScalarPropertyValue>(GetArenaForAllocation());
    _impl_.t_ = p;
  }
  return _impl_.t_;
}
inline ::Property::ScalarPropertyValue* ColorPropertyInterpolator::mutable_t() {
  ::Property::ScalarPropertyValue* _msg = _internal_mutable_t();
  // @@protoc_insertion_point(field_mutable:Property.ColorPropertyInterpolator.t)
  return _msg;
}
inline void ColorPropertyInterpolator::set_allocated_t(::Property::ScalarPropertyValue* t) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.t_;
  }
  if (t) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(t);
    if (message_arena != submessage_arena) {
      t = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, t, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.t_ = t;
  // @@protoc_insertion_point(field_set_allocated:Property.ColorPropertyInterpolator.t)
}

// .Property.ColorPropertyValue from = 1;
inline bool ColorPropertyInterpolator::_internal_has_from() const {
  return this != internal_default_instance() && _impl_.from_ != nullptr;
}
inline bool ColorPropertyInterpolator::has_from() const {
  return _internal_has_from();
}
inline void ColorPropertyInterpolator::clear_from() {
  if (GetArenaForAllocation() == nullptr && _impl_.from_ != nullptr) {
    delete _impl_.from_;
  }
  _impl_.from_ = nullptr;
}
inline const ::Property::ColorPropertyValue& ColorPropertyInterpolator::_internal_from() const {
  const ::Property::ColorPropertyValue* p = _impl_.from_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::ColorPropertyValue&>(
      ::Property::_ColorPropertyValue_default_instance_);
}
inline const ::Property::ColorPropertyValue& ColorPropertyInterpolator::from() const {
  // @@protoc_insertion_point(field_get:Property.ColorPropertyInterpolator.from)
  return _internal_from();
}
inline void ColorPropertyInterpolator::unsafe_arena_set_allocated_from(
    ::Property::ColorPropertyValue* from) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.from_);
  }
  _impl_.from_ = from;
  if (from) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.ColorPropertyInterpolator.from)
}
inline ::Property::ColorPropertyValue* ColorPropertyInterpolator::release_from() {
  
  ::Property::ColorPropertyValue* temp = _impl_.from_;
  _impl_.from_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::ColorPropertyValue* ColorPropertyInterpolator::unsafe_arena_release_from() {
  // @@protoc_insertion_point(field_release:Property.ColorPropertyInterpolator.from)
  
  ::Property::ColorPropertyValue* temp = _impl_.from_;
  _impl_.from_ = nullptr;
  return temp;
}
inline ::Property::ColorPropertyValue* ColorPropertyInterpolator::_internal_mutable_from() {
  
  if (_impl_.from_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::ColorPropertyValue>(GetArenaForAllocation());
    _impl_.from_ = p;
  }
  return _impl_.from_;
}
inline ::Property::ColorPropertyValue* ColorPropertyInterpolator::mutable_from() {
  ::Property::ColorPropertyValue* _msg = _internal_mutable_from();
  // @@protoc_insertion_point(field_mutable:Property.ColorPropertyInterpolator.from)
  return _msg;
}
inline void ColorPropertyInterpolator::set_allocated_from(::Property::ColorPropertyValue* from) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.from_;
  }
  if (from) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(from);
    if (message_arena != submessage_arena) {
      from = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, from, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.from_ = from;
  // @@protoc_insertion_point(field_set_allocated:Property.ColorPropertyInterpolator.from)
}

// .Property.ColorPropertyValue to = 2;
inline bool ColorPropertyInterpolator::_internal_has_to() const {
  return this != internal_default_instance() && _impl_.to_ != nullptr;
}
inline bool ColorPropertyInterpolator::has_to() const {
  return _internal_has_to();
}
inline void ColorPropertyInterpolator::clear_to() {
  if (GetArenaForAllocation() == nullptr && _impl_.to_ != nullptr) {
    delete _impl_.to_;
  }
  _impl_.to_ = nullptr;
}
inline const ::Property::ColorPropertyValue& ColorPropertyInterpolator::_internal_to() const {
  const ::Property::ColorPropertyValue* p = _impl_.to_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::ColorPropertyValue&>(
      ::Property::_ColorPropertyValue_default_instance_);
}
inline const ::Property::ColorPropertyValue& ColorPropertyInterpolator::to() const {
  // @@protoc_insertion_point(field_get:Property.ColorPropertyInterpolator.to)
  return _internal_to();
}
inline void ColorPropertyInterpolator::unsafe_arena_set_allocated_to(
    ::Property::ColorPropertyValue* to) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.to_);
  }
  _impl_.to_ = to;
  if (to) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.ColorPropertyInterpolator.to)
}
inline ::Property::ColorPropertyValue* ColorPropertyInterpolator::release_to() {
  
  ::Property::ColorPropertyValue* temp = _impl_.to_;
  _impl_.to_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::ColorPropertyValue* ColorPropertyInterpolator::unsafe_arena_release_to() {
  // @@protoc_insertion_point(field_release:Property.ColorPropertyInterpolator.to)
  
  ::Property::ColorPropertyValue* temp = _impl_.to_;
  _impl_.to_ = nullptr;
  return temp;
}
inline ::Property::ColorPropertyValue* ColorPropertyInterpolator::_internal_mutable_to() {
  
  if (_impl_.to_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::ColorPropertyValue>(GetArenaForAllocation());
    _impl_.to_ = p;
  }
  return _impl_.to_;
}
inline ::Property::ColorPropertyValue* ColorPropertyInterpolator::mutable_to() {
  ::Property::ColorPropertyValue* _msg = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:Property.ColorPropertyInterpolator.to)
  return _msg;
}
inline void ColorPropertyInterpolator::set_allocated_to(::Property::ColorPropertyValue* to) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.to_;
  }
  if (to) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(to);
    if (message_arena != submessage_arena) {
      to = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, to, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.to_ = to;
  // @@protoc_insertion_point(field_set_allocated:Property.ColorPropertyInterpolator.to)
}

// .Property.Interpolation by = 3;
inline bool ColorPropertyInterpolator::_internal_has_by() const {
  return this != internal_default_instance() && _impl_.by_ != nullptr;
}
inline bool ColorPropertyInterpolator::has_by() const {
  return _internal_has_by();
}
inline void ColorPropertyInterpolator::clear_by() {
  if (GetArenaForAllocation() == nullptr && _impl_.by_ != nullptr) {
    delete _impl_.by_;
  }
  _impl_.by_ = nullptr;
}
inline const ::Property::Interpolation& ColorPropertyInterpolator::_internal_by() const {
  const ::Property::Interpolation* p = _impl_.by_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::Interpolation&>(
      ::Property::_Interpolation_default_instance_);
}
inline const ::Property::Interpolation& ColorPropertyInterpolator::by() const {
  // @@protoc_insertion_point(field_get:Property.ColorPropertyInterpolator.by)
  return _internal_by();
}
inline void ColorPropertyInterpolator::unsafe_arena_set_allocated_by(
    ::Property::Interpolation* by) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.by_);
  }
  _impl_.by_ = by;
  if (by) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.ColorPropertyInterpolator.by)
}
inline ::Property::Interpolation* ColorPropertyInterpolator::release_by() {
  
  ::Property::Interpolation* temp = _impl_.by_;
  _impl_.by_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::Interpolation* ColorPropertyInterpolator::unsafe_arena_release_by() {
  // @@protoc_insertion_point(field_release:Property.ColorPropertyInterpolator.by)
  
  ::Property::Interpolation* temp = _impl_.by_;
  _impl_.by_ = nullptr;
  return temp;
}
inline ::Property::Interpolation* ColorPropertyInterpolator::_internal_mutable_by() {
  
  if (_impl_.by_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::Interpolation>(GetArenaForAllocation());
    _impl_.by_ = p;
  }
  return _impl_.by_;
}
inline ::Property::Interpolation* ColorPropertyInterpolator::mutable_by() {
  ::Property::Interpolation* _msg = _internal_mutable_by();
  // @@protoc_insertion_point(field_mutable:Property.ColorPropertyInterpolator.by)
  return _msg;
}
inline void ColorPropertyInterpolator::set_allocated_by(::Property::Interpolation* by) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.by_;
  }
  if (by) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(by);
    if (message_arena != submessage_arena) {
      by = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, by, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.by_ = by;
  // @@protoc_insertion_point(field_set_allocated:Property.ColorPropertyInterpolator.by)
}

// -------------------------------------------------------------------

// ColorPerChannel

// .Property.ScalarPropertyValue r = 1;
inline bool ColorPerChannel::_internal_has_r() const {
  return this != internal_default_instance() && _impl_.r_ != nullptr;
}
inline bool ColorPerChannel::has_r() const {
  return _internal_has_r();
}
inline void ColorPerChannel::clear_r() {
  if (GetArenaForAllocation() == nullptr && _impl_.r_ != nullptr) {
    delete _impl_.r_;
  }
  _impl_.r_ = nullptr;
}
inline const ::Property::ScalarPropertyValue& ColorPerChannel::_internal_r() const {
  const ::Property::ScalarPropertyValue* p = _impl_.r_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::ScalarPropertyValue&>(
      ::Property::_ScalarPropertyValue_default_instance_);
}
inline const ::Property::ScalarPropertyValue& ColorPerChannel::r() const {
  // @@protoc_insertion_point(field_get:Property.ColorPerChannel.r)
  return _internal_r();
}
inline void ColorPerChannel::unsafe_arena_set_allocated_r(
    ::Property::ScalarPropertyValue* r) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.r_);
  }
  _impl_.r_ = r;
  if (r) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.ColorPerChannel.r)
}
inline ::Property::ScalarPropertyValue* ColorPerChannel::release_r() {
  
  ::Property::ScalarPropertyValue* temp = _impl_.r_;
  _impl_.r_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::ScalarPropertyValue* ColorPerChannel::unsafe_arena_release_r() {
  // @@protoc_insertion_point(field_release:Property.ColorPerChannel.r)
  
  ::Property::ScalarPropertyValue* temp = _impl_.r_;
  _impl_.r_ = nullptr;
  return temp;
}
inline ::Property::ScalarPropertyValue* ColorPerChannel::_internal_mutable_r() {
  
  if (_impl_.r_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::ScalarPropertyValue>(GetArenaForAllocation());
    _impl_.r_ = p;
  }
  return _impl_.r_;
}
inline ::Property::ScalarPropertyValue* ColorPerChannel::mutable_r() {
  ::Property::ScalarPropertyValue* _msg = _internal_mutable_r();
  // @@protoc_insertion_point(field_mutable:Property.ColorPerChannel.r)
  return _msg;
}
inline void ColorPerChannel::set_allocated_r(::Property::ScalarPropertyValue* r) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.r_;
  }
  if (r) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(r);
    if (message_arena != submessage_arena) {
      r = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, r, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.r_ = r;
  // @@protoc_insertion_point(field_set_allocated:Property.ColorPerChannel.r)
}

// .Property.ScalarPropertyValue g = 2;
inline bool ColorPerChannel::_internal_has_g() const {
  return this != internal_default_instance() && _impl_.g_ != nullptr;
}
inline bool ColorPerChannel::has_g() const {
  return _internal_has_g();
}
inline void ColorPerChannel::clear_g() {
  if (GetArenaForAllocation() == nullptr && _impl_.g_ != nullptr) {
    delete _impl_.g_;
  }
  _impl_.g_ = nullptr;
}
inline const ::Property::ScalarPropertyValue& ColorPerChannel::_internal_g() const {
  const ::Property::ScalarPropertyValue* p = _impl_.g_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::ScalarPropertyValue&>(
      ::Property::_ScalarPropertyValue_default_instance_);
}
inline const ::Property::ScalarPropertyValue& ColorPerChannel::g() const {
  // @@protoc_insertion_point(field_get:Property.ColorPerChannel.g)
  return _internal_g();
}
inline void ColorPerChannel::unsafe_arena_set_allocated_g(
    ::Property::ScalarPropertyValue* g) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.g_);
  }
  _impl_.g_ = g;
  if (g) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.ColorPerChannel.g)
}
inline ::Property::ScalarPropertyValue* ColorPerChannel::release_g() {
  
  ::Property::ScalarPropertyValue* temp = _impl_.g_;
  _impl_.g_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::ScalarPropertyValue* ColorPerChannel::unsafe_arena_release_g() {
  // @@protoc_insertion_point(field_release:Property.ColorPerChannel.g)
  
  ::Property::ScalarPropertyValue* temp = _impl_.g_;
  _impl_.g_ = nullptr;
  return temp;
}
inline ::Property::ScalarPropertyValue* ColorPerChannel::_internal_mutable_g() {
  
  if (_impl_.g_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::ScalarPropertyValue>(GetArenaForAllocation());
    _impl_.g_ = p;
  }
  return _impl_.g_;
}
inline ::Property::ScalarPropertyValue* ColorPerChannel::mutable_g() {
  ::Property::ScalarPropertyValue* _msg = _internal_mutable_g();
  // @@protoc_insertion_point(field_mutable:Property.ColorPerChannel.g)
  return _msg;
}
inline void ColorPerChannel::set_allocated_g(::Property::ScalarPropertyValue* g) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.g_;
  }
  if (g) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(g);
    if (message_arena != submessage_arena) {
      g = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, g, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.g_ = g;
  // @@protoc_insertion_point(field_set_allocated:Property.ColorPerChannel.g)
}

// .Property.ScalarPropertyValue b = 3;
inline bool ColorPerChannel::_internal_has_b() const {
  return this != internal_default_instance() && _impl_.b_ != nullptr;
}
inline bool ColorPerChannel::has_b() const {
  return _internal_has_b();
}
inline void ColorPerChannel::clear_b() {
  if (GetArenaForAllocation() == nullptr && _impl_.b_ != nullptr) {
    delete _impl_.b_;
  }
  _impl_.b_ = nullptr;
}
inline const ::Property::ScalarPropertyValue& ColorPerChannel::_internal_b() const {
  const ::Property::ScalarPropertyValue* p = _impl_.b_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::ScalarPropertyValue&>(
      ::Property::_ScalarPropertyValue_default_instance_);
}
inline const ::Property::ScalarPropertyValue& ColorPerChannel::b() const {
  // @@protoc_insertion_point(field_get:Property.ColorPerChannel.b)
  return _internal_b();
}
inline void ColorPerChannel::unsafe_arena_set_allocated_b(
    ::Property::ScalarPropertyValue* b) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.b_);
  }
  _impl_.b_ = b;
  if (b) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.ColorPerChannel.b)
}
inline ::Property::ScalarPropertyValue* ColorPerChannel::release_b() {
  
  ::Property::ScalarPropertyValue* temp = _impl_.b_;
  _impl_.b_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::ScalarPropertyValue* ColorPerChannel::unsafe_arena_release_b() {
  // @@protoc_insertion_point(field_release:Property.ColorPerChannel.b)
  
  ::Property::ScalarPropertyValue* temp = _impl_.b_;
  _impl_.b_ = nullptr;
  return temp;
}
inline ::Property::ScalarPropertyValue* ColorPerChannel::_internal_mutable_b() {
  
  if (_impl_.b_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::ScalarPropertyValue>(GetArenaForAllocation());
    _impl_.b_ = p;
  }
  return _impl_.b_;
}
inline ::Property::ScalarPropertyValue* ColorPerChannel::mutable_b() {
  ::Property::ScalarPropertyValue* _msg = _internal_mutable_b();
  // @@protoc_insertion_point(field_mutable:Property.ColorPerChannel.b)
  return _msg;
}
inline void ColorPerChannel::set_allocated_b(::Property::ScalarPropertyValue* b) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.b_;
  }
  if (b) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(b);
    if (message_arena != submessage_arena) {
      b = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, b, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.b_ = b;
  // @@protoc_insertion_point(field_set_allocated:Property.ColorPerChannel.b)
}

// .Property.ScalarPropertyValue a = 4;
inline bool ColorPerChannel::_internal_has_a() const {
  return this != internal_default_instance() && _impl_.a_ != nullptr;
}
inline bool ColorPerChannel::has_a() const {
  return _internal_has_a();
}
inline void ColorPerChannel::clear_a() {
  if (GetArenaForAllocation() == nullptr && _impl_.a_ != nullptr) {
    delete _impl_.a_;
  }
  _impl_.a_ = nullptr;
}
inline const ::Property::ScalarPropertyValue& ColorPerChannel::_internal_a() const {
  const ::Property::ScalarPropertyValue* p = _impl_.a_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::ScalarPropertyValue&>(
      ::Property::_ScalarPropertyValue_default_instance_);
}
inline const ::Property::ScalarPropertyValue& ColorPerChannel::a() const {
  // @@protoc_insertion_point(field_get:Property.ColorPerChannel.a)
  return _internal_a();
}
inline void ColorPerChannel::unsafe_arena_set_allocated_a(
    ::Property::ScalarPropertyValue* a) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.a_);
  }
  _impl_.a_ = a;
  if (a) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.ColorPerChannel.a)
}
inline ::Property::ScalarPropertyValue* ColorPerChannel::release_a() {
  
  ::Property::ScalarPropertyValue* temp = _impl_.a_;
  _impl_.a_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::ScalarPropertyValue* ColorPerChannel::unsafe_arena_release_a() {
  // @@protoc_insertion_point(field_release:Property.ColorPerChannel.a)
  
  ::Property::ScalarPropertyValue* temp = _impl_.a_;
  _impl_.a_ = nullptr;
  return temp;
}
inline ::Property::ScalarPropertyValue* ColorPerChannel::_internal_mutable_a() {
  
  if (_impl_.a_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::ScalarPropertyValue>(GetArenaForAllocation());
    _impl_.a_ = p;
  }
  return _impl_.a_;
}
inline ::Property::ScalarPropertyValue* ColorPerChannel::mutable_a() {
  ::Property::ScalarPropertyValue* _msg = _internal_mutable_a();
  // @@protoc_insertion_point(field_mutable:Property.ColorPerChannel.a)
  return _msg;
}
inline void ColorPerChannel::set_allocated_a(::Property::ScalarPropertyValue* a) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.a_;
  }
  if (a) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(a);
    if (message_arena != submessage_arena) {
      a = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, a, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.a_ = a;
  // @@protoc_insertion_point(field_set_allocated:Property.ColorPerChannel.a)
}

// -------------------------------------------------------------------

// ColorPropertyKeyframed_ColorKeyframe

// float t = 1;
inline void ColorPropertyKeyframed_ColorKeyframe::clear_t() {
  _impl_.t_ = 0;
}
inline float ColorPropertyKeyframed_ColorKeyframe::_internal_t() const {
  return _impl_.t_;
}
inline float ColorPropertyKeyframed_ColorKeyframe::t() const {
  // @@protoc_insertion_point(field_get:Property.ColorPropertyKeyframed.ColorKeyframe.t)
  return _internal_t();
}
inline void ColorPropertyKeyframed_ColorKeyframe::_internal_set_t(float value) {
  
  _impl_.t_ = value;
}
inline void ColorPropertyKeyframed_ColorKeyframe::set_t(float value) {
  _internal_set_t(value);
  // @@protoc_insertion_point(field_set:Property.ColorPropertyKeyframed.ColorKeyframe.t)
}

// .Property.ColorPropertyValue val = 2;
inline bool ColorPropertyKeyframed_ColorKeyframe::_internal_has_val() const {
  return this != internal_default_instance() && _impl_.val_ != nullptr;
}
inline bool ColorPropertyKeyframed_ColorKeyframe::has_val() const {
  return _internal_has_val();
}
inline void ColorPropertyKeyframed_ColorKeyframe::clear_val() {
  if (GetArenaForAllocation() == nullptr && _impl_.val_ != nullptr) {
    delete _impl_.val_;
  }
  _impl_.val_ = nullptr;
}
inline const ::Property::ColorPropertyValue& ColorPropertyKeyframed_ColorKeyframe::_internal_val() const {
  const ::Property::ColorPropertyValue* p = _impl_.val_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::ColorPropertyValue&>(
      ::Property::_ColorPropertyValue_default_instance_);
}
inline const ::Property::ColorPropertyValue& ColorPropertyKeyframed_ColorKeyframe::val() const {
  // @@protoc_insertion_point(field_get:Property.ColorPropertyKeyframed.ColorKeyframe.val)
  return _internal_val();
}
inline void ColorPropertyKeyframed_ColorKeyframe::unsafe_arena_set_allocated_val(
    ::Property::ColorPropertyValue* val) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.val_);
  }
  _impl_.val_ = val;
  if (val) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.ColorPropertyKeyframed.ColorKeyframe.val)
}
inline ::Property::ColorPropertyValue* ColorPropertyKeyframed_ColorKeyframe::release_val() {
  
  ::Property::ColorPropertyValue* temp = _impl_.val_;
  _impl_.val_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::ColorPropertyValue* ColorPropertyKeyframed_ColorKeyframe::unsafe_arena_release_val() {
  // @@protoc_insertion_point(field_release:Property.ColorPropertyKeyframed.ColorKeyframe.val)
  
  ::Property::ColorPropertyValue* temp = _impl_.val_;
  _impl_.val_ = nullptr;
  return temp;
}
inline ::Property::ColorPropertyValue* ColorPropertyKeyframed_ColorKeyframe::_internal_mutable_val() {
  
  if (_impl_.val_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::ColorPropertyValue>(GetArenaForAllocation());
    _impl_.val_ = p;
  }
  return _impl_.val_;
}
inline ::Property::ColorPropertyValue* ColorPropertyKeyframed_ColorKeyframe::mutable_val() {
  ::Property::ColorPropertyValue* _msg = _internal_mutable_val();
  // @@protoc_insertion_point(field_mutable:Property.ColorPropertyKeyframed.ColorKeyframe.val)
  return _msg;
}
inline void ColorPropertyKeyframed_ColorKeyframe::set_allocated_val(::Property::ColorPropertyValue* val) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.val_;
  }
  if (val) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(val);
    if (message_arena != submessage_arena) {
      val = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, val, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.val_ = val;
  // @@protoc_insertion_point(field_set_allocated:Property.ColorPropertyKeyframed.ColorKeyframe.val)
}

// optional .Common.Color4 tangentIn = 3;
inline bool ColorPropertyKeyframed_ColorKeyframe::_internal_has_tangentin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tangentin_ != nullptr);
  return value;
}
inline bool ColorPropertyKeyframed_ColorKeyframe::has_tangentin() const {
  return _internal_has_tangentin();
}
inline const ::Common::Color4& ColorPropertyKeyframed_ColorKeyframe::_internal_tangentin() const {
  const ::Common::Color4* p = _impl_.tangentin_;
  return p != nullptr ? *p : reinterpret_cast<const ::Common::Color4&>(
      ::Common::_Color4_default_instance_);
}
inline const ::Common::Color4& ColorPropertyKeyframed_ColorKeyframe::tangentin() const {
  // @@protoc_insertion_point(field_get:Property.ColorPropertyKeyframed.ColorKeyframe.tangentIn)
  return _internal_tangentin();
}
inline void ColorPropertyKeyframed_ColorKeyframe::unsafe_arena_set_allocated_tangentin(
    ::Common::Color4* tangentin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tangentin_);
  }
  _impl_.tangentin_ = tangentin;
  if (tangentin) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.ColorPropertyKeyframed.ColorKeyframe.tangentIn)
}
inline ::Common::Color4* ColorPropertyKeyframed_ColorKeyframe::release_tangentin() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Common::Color4* temp = _impl_.tangentin_;
  _impl_.tangentin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Common::Color4* ColorPropertyKeyframed_ColorKeyframe::unsafe_arena_release_tangentin() {
  // @@protoc_insertion_point(field_release:Property.ColorPropertyKeyframed.ColorKeyframe.tangentIn)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Common::Color4* temp = _impl_.tangentin_;
  _impl_.tangentin_ = nullptr;
  return temp;
}
inline ::Common::Color4* ColorPropertyKeyframed_ColorKeyframe::_internal_mutable_tangentin() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.tangentin_ == nullptr) {
    auto* p = CreateMaybeMessage<::Common::Color4>(GetArenaForAllocation());
    _impl_.tangentin_ = p;
  }
  return _impl_.tangentin_;
}
inline ::Common::Color4* ColorPropertyKeyframed_ColorKeyframe::mutable_tangentin() {
  ::Common::Color4* _msg = _internal_mutable_tangentin();
  // @@protoc_insertion_point(field_mutable:Property.ColorPropertyKeyframed.ColorKeyframe.tangentIn)
  return _msg;
}
inline void ColorPropertyKeyframed_ColorKeyframe::set_allocated_tangentin(::Common::Color4* tangentin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tangentin_);
  }
  if (tangentin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tangentin));
    if (message_arena != submessage_arena) {
      tangentin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tangentin, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.tangentin_ = tangentin;
  // @@protoc_insertion_point(field_set_allocated:Property.ColorPropertyKeyframed.ColorKeyframe.tangentIn)
}

// optional .Common.Color4 tangentOut = 4;
inline bool ColorPropertyKeyframed_ColorKeyframe::_internal_has_tangentout() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tangentout_ != nullptr);
  return value;
}
inline bool ColorPropertyKeyframed_ColorKeyframe::has_tangentout() const {
  return _internal_has_tangentout();
}
inline const ::Common::Color4& ColorPropertyKeyframed_ColorKeyframe::_internal_tangentout() const {
  const ::Common::Color4* p = _impl_.tangentout_;
  return p != nullptr ? *p : reinterpret_cast<const ::Common::Color4&>(
      ::Common::_Color4_default_instance_);
}
inline const ::Common::Color4& ColorPropertyKeyframed_ColorKeyframe::tangentout() const {
  // @@protoc_insertion_point(field_get:Property.ColorPropertyKeyframed.ColorKeyframe.tangentOut)
  return _internal_tangentout();
}
inline void ColorPropertyKeyframed_ColorKeyframe::unsafe_arena_set_allocated_tangentout(
    ::Common::Color4* tangentout) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tangentout_);
  }
  _impl_.tangentout_ = tangentout;
  if (tangentout) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.ColorPropertyKeyframed.ColorKeyframe.tangentOut)
}
inline ::Common::Color4* ColorPropertyKeyframed_ColorKeyframe::release_tangentout() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Common::Color4* temp = _impl_.tangentout_;
  _impl_.tangentout_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Common::Color4* ColorPropertyKeyframed_ColorKeyframe::unsafe_arena_release_tangentout() {
  // @@protoc_insertion_point(field_release:Property.ColorPropertyKeyframed.ColorKeyframe.tangentOut)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Common::Color4* temp = _impl_.tangentout_;
  _impl_.tangentout_ = nullptr;
  return temp;
}
inline ::Common::Color4* ColorPropertyKeyframed_ColorKeyframe::_internal_mutable_tangentout() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.tangentout_ == nullptr) {
    auto* p = CreateMaybeMessage<::Common::Color4>(GetArenaForAllocation());
    _impl_.tangentout_ = p;
  }
  return _impl_.tangentout_;
}
inline ::Common::Color4* ColorPropertyKeyframed_ColorKeyframe::mutable_tangentout() {
  ::Common::Color4* _msg = _internal_mutable_tangentout();
  // @@protoc_insertion_point(field_mutable:Property.ColorPropertyKeyframed.ColorKeyframe.tangentOut)
  return _msg;
}
inline void ColorPropertyKeyframed_ColorKeyframe::set_allocated_tangentout(::Common::Color4* tangentout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tangentout_);
  }
  if (tangentout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tangentout));
    if (message_arena != submessage_arena) {
      tangentout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tangentout, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.tangentout_ = tangentout;
  // @@protoc_insertion_point(field_set_allocated:Property.ColorPropertyKeyframed.ColorKeyframe.tangentOut)
}

// -------------------------------------------------------------------

// ColorPropertyKeyframed

// optional .Property.ScalarPropertyValue tSrc = 8;
inline bool ColorPropertyKeyframed::_internal_has_tsrc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tsrc_ != nullptr);
  return value;
}
inline bool ColorPropertyKeyframed::has_tsrc() const {
  return _internal_has_tsrc();
}
inline void ColorPropertyKeyframed::clear_tsrc() {
  if (_impl_.tsrc_ != nullptr) _impl_.tsrc_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::Property::ScalarPropertyValue& ColorPropertyKeyframed::_internal_tsrc() const {
  const ::Property::ScalarPropertyValue* p = _impl_.tsrc_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::ScalarPropertyValue&>(
      ::Property::_ScalarPropertyValue_default_instance_);
}
inline const ::Property::ScalarPropertyValue& ColorPropertyKeyframed::tsrc() const {
  // @@protoc_insertion_point(field_get:Property.ColorPropertyKeyframed.tSrc)
  return _internal_tsrc();
}
inline void ColorPropertyKeyframed::unsafe_arena_set_allocated_tsrc(
    ::Property::ScalarPropertyValue* tsrc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tsrc_);
  }
  _impl_.tsrc_ = tsrc;
  if (tsrc) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.ColorPropertyKeyframed.tSrc)
}
inline ::Property::ScalarPropertyValue* ColorPropertyKeyframed::release_tsrc() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Property::ScalarPropertyValue* temp = _impl_.tsrc_;
  _impl_.tsrc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::ScalarPropertyValue* ColorPropertyKeyframed::unsafe_arena_release_tsrc() {
  // @@protoc_insertion_point(field_release:Property.ColorPropertyKeyframed.tSrc)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Property::ScalarPropertyValue* temp = _impl_.tsrc_;
  _impl_.tsrc_ = nullptr;
  return temp;
}
inline ::Property::ScalarPropertyValue* ColorPropertyKeyframed::_internal_mutable_tsrc() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.tsrc_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::ScalarPropertyValue>(GetArenaForAllocation());
    _impl_.tsrc_ = p;
  }
  return _impl_.tsrc_;
}
inline ::Property::ScalarPropertyValue* ColorPropertyKeyframed::mutable_tsrc() {
  ::Property::ScalarPropertyValue* _msg = _internal_mutable_tsrc();
  // @@protoc_insertion_point(field_mutable:Property.ColorPropertyKeyframed.tSrc)
  return _msg;
}
inline void ColorPropertyKeyframed::set_allocated_tsrc(::Property::ScalarPropertyValue* tsrc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.tsrc_;
  }
  if (tsrc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tsrc);
    if (message_arena != submessage_arena) {
      tsrc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tsrc, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.tsrc_ = tsrc;
  // @@protoc_insertion_point(field_set_allocated:Property.ColorPropertyKeyframed.tSrc)
}

// repeated .Property.ColorPropertyKeyframed.ColorKeyframe keys = 10;
inline int ColorPropertyKeyframed::_internal_keys_size() const {
  return _impl_.keys_.size();
}
inline int ColorPropertyKeyframed::keys_size() const {
  return _internal_keys_size();
}
inline void ColorPropertyKeyframed::clear_keys() {
  _impl_.keys_.Clear();
}
inline ::Property::ColorPropertyKeyframed_ColorKeyframe* ColorPropertyKeyframed::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:Property.ColorPropertyKeyframed.keys)
  return _impl_.keys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Property::ColorPropertyKeyframed_ColorKeyframe >*
ColorPropertyKeyframed::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:Property.ColorPropertyKeyframed.keys)
  return &_impl_.keys_;
}
inline const ::Property::ColorPropertyKeyframed_ColorKeyframe& ColorPropertyKeyframed::_internal_keys(int index) const {
  return _impl_.keys_.Get(index);
}
inline const ::Property::ColorPropertyKeyframed_ColorKeyframe& ColorPropertyKeyframed::keys(int index) const {
  // @@protoc_insertion_point(field_get:Property.ColorPropertyKeyframed.keys)
  return _internal_keys(index);
}
inline ::Property::ColorPropertyKeyframed_ColorKeyframe* ColorPropertyKeyframed::_internal_add_keys() {
  return _impl_.keys_.Add();
}
inline ::Property::ColorPropertyKeyframed_ColorKeyframe* ColorPropertyKeyframed::add_keys() {
  ::Property::ColorPropertyKeyframed_ColorKeyframe* _add = _internal_add_keys();
  // @@protoc_insertion_point(field_add:Property.ColorPropertyKeyframed.keys)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Property::ColorPropertyKeyframed_ColorKeyframe >&
ColorPropertyKeyframed::keys() const {
  // @@protoc_insertion_point(field_list:Property.ColorPropertyKeyframed.keys)
  return _impl_.keys_;
}

// .Property.KeyframeLoopingEnum looping = 11;
inline void ColorPropertyKeyframed::clear_looping() {
  _impl_.looping_ = 0;
}
inline ::Property::KeyframeLoopingEnum ColorPropertyKeyframed::_internal_looping() const {
  return static_cast< ::Property::KeyframeLoopingEnum >(_impl_.looping_);
}
inline ::Property::KeyframeLoopingEnum ColorPropertyKeyframed::looping() const {
  // @@protoc_insertion_point(field_get:Property.ColorPropertyKeyframed.looping)
  return _internal_looping();
}
inline void ColorPropertyKeyframed::_internal_set_looping(::Property::KeyframeLoopingEnum value) {
  
  _impl_.looping_ = value;
}
inline void ColorPropertyKeyframed::set_looping(::Property::KeyframeLoopingEnum value) {
  _internal_set_looping(value);
  // @@protoc_insertion_point(field_set:Property.ColorPropertyKeyframed.looping)
}

// .Property.TangentsAutocomputeMethodEnum tangentGen = 12;
inline void ColorPropertyKeyframed::clear_tangentgen() {
  _impl_.tangentgen_ = 0;
}
inline ::Property::TangentsAutocomputeMethodEnum ColorPropertyKeyframed::_internal_tangentgen() const {
  return static_cast< ::Property::TangentsAutocomputeMethodEnum >(_impl_.tangentgen_);
}
inline ::Property::TangentsAutocomputeMethodEnum ColorPropertyKeyframed::tangentgen() const {
  // @@protoc_insertion_point(field_get:Property.ColorPropertyKeyframed.tangentGen)
  return _internal_tangentgen();
}
inline void ColorPropertyKeyframed::_internal_set_tangentgen(::Property::TangentsAutocomputeMethodEnum value) {
  
  _impl_.tangentgen_ = value;
}
inline void ColorPropertyKeyframed::set_tangentgen(::Property::TangentsAutocomputeMethodEnum value) {
  _internal_set_tangentgen(value);
  // @@protoc_insertion_point(field_set:Property.ColorPropertyKeyframed.tangentGen)
}

// -------------------------------------------------------------------

// ColorPropertyApproach

// .Property.ScalarPropertyValue t = 1;
inline bool ColorPropertyApproach::_internal_has_t() const {
  return this != internal_default_instance() && _impl_.t_ != nullptr;
}
inline bool ColorPropertyApproach::has_t() const {
  return _internal_has_t();
}
inline void ColorPropertyApproach::clear_t() {
  if (GetArenaForAllocation() == nullptr && _impl_.t_ != nullptr) {
    delete _impl_.t_;
  }
  _impl_.t_ = nullptr;
}
inline const ::Property::ScalarPropertyValue& ColorPropertyApproach::_internal_t() const {
  const ::Property::ScalarPropertyValue* p = _impl_.t_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::ScalarPropertyValue&>(
      ::Property::_ScalarPropertyValue_default_instance_);
}
inline const ::Property::ScalarPropertyValue& ColorPropertyApproach::t() const {
  // @@protoc_insertion_point(field_get:Property.ColorPropertyApproach.t)
  return _internal_t();
}
inline void ColorPropertyApproach::unsafe_arena_set_allocated_t(
    ::Property::ScalarPropertyValue* t) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.t_);
  }
  _impl_.t_ = t;
  if (t) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.ColorPropertyApproach.t)
}
inline ::Property::ScalarPropertyValue* ColorPropertyApproach::release_t() {
  
  ::Property::ScalarPropertyValue* temp = _impl_.t_;
  _impl_.t_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::ScalarPropertyValue* ColorPropertyApproach::unsafe_arena_release_t() {
  // @@protoc_insertion_point(field_release:Property.ColorPropertyApproach.t)
  
  ::Property::ScalarPropertyValue* temp = _impl_.t_;
  _impl_.t_ = nullptr;
  return temp;
}
inline ::Property::ScalarPropertyValue* ColorPropertyApproach::_internal_mutable_t() {
  
  if (_impl_.t_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::ScalarPropertyValue>(GetArenaForAllocation());
    _impl_.t_ = p;
  }
  return _impl_.t_;
}
inline ::Property::ScalarPropertyValue* ColorPropertyApproach::mutable_t() {
  ::Property::ScalarPropertyValue* _msg = _internal_mutable_t();
  // @@protoc_insertion_point(field_mutable:Property.ColorPropertyApproach.t)
  return _msg;
}
inline void ColorPropertyApproach::set_allocated_t(::Property::ScalarPropertyValue* t) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.t_;
  }
  if (t) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(t);
    if (message_arena != submessage_arena) {
      t = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, t, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.t_ = t;
  // @@protoc_insertion_point(field_set_allocated:Property.ColorPropertyApproach.t)
}

// .Property.ColorPropertyValue to = 2;
inline bool ColorPropertyApproach::_internal_has_to() const {
  return this != internal_default_instance() && _impl_.to_ != nullptr;
}
inline bool ColorPropertyApproach::has_to() const {
  return _internal_has_to();
}
inline void ColorPropertyApproach::clear_to() {
  if (GetArenaForAllocation() == nullptr && _impl_.to_ != nullptr) {
    delete _impl_.to_;
  }
  _impl_.to_ = nullptr;
}
inline const ::Property::ColorPropertyValue& ColorPropertyApproach::_internal_to() const {
  const ::Property::ColorPropertyValue* p = _impl_.to_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::ColorPropertyValue&>(
      ::Property::_ColorPropertyValue_default_instance_);
}
inline const ::Property::ColorPropertyValue& ColorPropertyApproach::to() const {
  // @@protoc_insertion_point(field_get:Property.ColorPropertyApproach.to)
  return _internal_to();
}
inline void ColorPropertyApproach::unsafe_arena_set_allocated_to(
    ::Property::ColorPropertyValue* to) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.to_);
  }
  _impl_.to_ = to;
  if (to) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.ColorPropertyApproach.to)
}
inline ::Property::ColorPropertyValue* ColorPropertyApproach::release_to() {
  
  ::Property::ColorPropertyValue* temp = _impl_.to_;
  _impl_.to_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::ColorPropertyValue* ColorPropertyApproach::unsafe_arena_release_to() {
  // @@protoc_insertion_point(field_release:Property.ColorPropertyApproach.to)
  
  ::Property::ColorPropertyValue* temp = _impl_.to_;
  _impl_.to_ = nullptr;
  return temp;
}
inline ::Property::ColorPropertyValue* ColorPropertyApproach::_internal_mutable_to() {
  
  if (_impl_.to_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::ColorPropertyValue>(GetArenaForAllocation());
    _impl_.to_ = p;
  }
  return _impl_.to_;
}
inline ::Property::ColorPropertyValue* ColorPropertyApproach::mutable_to() {
  ::Property::ColorPropertyValue* _msg = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:Property.ColorPropertyApproach.to)
  return _msg;
}
inline void ColorPropertyApproach::set_allocated_to(::Property::ColorPropertyValue* to) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.to_;
  }
  if (to) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(to);
    if (message_arena != submessage_arena) {
      to = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, to, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.to_ = to;
  // @@protoc_insertion_point(field_set_allocated:Property.ColorPropertyApproach.to)
}

// .Property.ScalarPropertyValue timeToHalf = 3;
inline bool ColorPropertyApproach::_internal_has_timetohalf() const {
  return this != internal_default_instance() && _impl_.timetohalf_ != nullptr;
}
inline bool ColorPropertyApproach::has_timetohalf() const {
  return _internal_has_timetohalf();
}
inline void ColorPropertyApproach::clear_timetohalf() {
  if (GetArenaForAllocation() == nullptr && _impl_.timetohalf_ != nullptr) {
    delete _impl_.timetohalf_;
  }
  _impl_.timetohalf_ = nullptr;
}
inline const ::Property::ScalarPropertyValue& ColorPropertyApproach::_internal_timetohalf() const {
  const ::Property::ScalarPropertyValue* p = _impl_.timetohalf_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::ScalarPropertyValue&>(
      ::Property::_ScalarPropertyValue_default_instance_);
}
inline const ::Property::ScalarPropertyValue& ColorPropertyApproach::timetohalf() const {
  // @@protoc_insertion_point(field_get:Property.ColorPropertyApproach.timeToHalf)
  return _internal_timetohalf();
}
inline void ColorPropertyApproach::unsafe_arena_set_allocated_timetohalf(
    ::Property::ScalarPropertyValue* timetohalf) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timetohalf_);
  }
  _impl_.timetohalf_ = timetohalf;
  if (timetohalf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.ColorPropertyApproach.timeToHalf)
}
inline ::Property::ScalarPropertyValue* ColorPropertyApproach::release_timetohalf() {
  
  ::Property::ScalarPropertyValue* temp = _impl_.timetohalf_;
  _impl_.timetohalf_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::ScalarPropertyValue* ColorPropertyApproach::unsafe_arena_release_timetohalf() {
  // @@protoc_insertion_point(field_release:Property.ColorPropertyApproach.timeToHalf)
  
  ::Property::ScalarPropertyValue* temp = _impl_.timetohalf_;
  _impl_.timetohalf_ = nullptr;
  return temp;
}
inline ::Property::ScalarPropertyValue* ColorPropertyApproach::_internal_mutable_timetohalf() {
  
  if (_impl_.timetohalf_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::ScalarPropertyValue>(GetArenaForAllocation());
    _impl_.timetohalf_ = p;
  }
  return _impl_.timetohalf_;
}
inline ::Property::ScalarPropertyValue* ColorPropertyApproach::mutable_timetohalf() {
  ::Property::ScalarPropertyValue* _msg = _internal_mutable_timetohalf();
  // @@protoc_insertion_point(field_mutable:Property.ColorPropertyApproach.timeToHalf)
  return _msg;
}
inline void ColorPropertyApproach::set_allocated_timetohalf(::Property::ScalarPropertyValue* timetohalf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.timetohalf_;
  }
  if (timetohalf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(timetohalf);
    if (message_arena != submessage_arena) {
      timetohalf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timetohalf, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.timetohalf_ = timetohalf;
  // @@protoc_insertion_point(field_set_allocated:Property.ColorPropertyApproach.timeToHalf)
}

// .Property.ColorPropertyValue start = 4;
inline bool ColorPropertyApproach::_internal_has_start() const {
  return this != internal_default_instance() && _impl_.start_ != nullptr;
}
inline bool ColorPropertyApproach::has_start() const {
  return _internal_has_start();
}
inline void ColorPropertyApproach::clear_start() {
  if (GetArenaForAllocation() == nullptr && _impl_.start_ != nullptr) {
    delete _impl_.start_;
  }
  _impl_.start_ = nullptr;
}
inline const ::Property::ColorPropertyValue& ColorPropertyApproach::_internal_start() const {
  const ::Property::ColorPropertyValue* p = _impl_.start_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::ColorPropertyValue&>(
      ::Property::_ColorPropertyValue_default_instance_);
}
inline const ::Property::ColorPropertyValue& ColorPropertyApproach::start() const {
  // @@protoc_insertion_point(field_get:Property.ColorPropertyApproach.start)
  return _internal_start();
}
inline void ColorPropertyApproach::unsafe_arena_set_allocated_start(
    ::Property::ColorPropertyValue* start) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.start_);
  }
  _impl_.start_ = start;
  if (start) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.ColorPropertyApproach.start)
}
inline ::Property::ColorPropertyValue* ColorPropertyApproach::release_start() {
  
  ::Property::ColorPropertyValue* temp = _impl_.start_;
  _impl_.start_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::ColorPropertyValue* ColorPropertyApproach::unsafe_arena_release_start() {
  // @@protoc_insertion_point(field_release:Property.ColorPropertyApproach.start)
  
  ::Property::ColorPropertyValue* temp = _impl_.start_;
  _impl_.start_ = nullptr;
  return temp;
}
inline ::Property::ColorPropertyValue* ColorPropertyApproach::_internal_mutable_start() {
  
  if (_impl_.start_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::ColorPropertyValue>(GetArenaForAllocation());
    _impl_.start_ = p;
  }
  return _impl_.start_;
}
inline ::Property::ColorPropertyValue* ColorPropertyApproach::mutable_start() {
  ::Property::ColorPropertyValue* _msg = _internal_mutable_start();
  // @@protoc_insertion_point(field_mutable:Property.ColorPropertyApproach.start)
  return _msg;
}
inline void ColorPropertyApproach::set_allocated_start(::Property::ColorPropertyValue* start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.start_;
  }
  if (start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(start);
    if (message_arena != submessage_arena) {
      start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.start_ = start;
  // @@protoc_insertion_point(field_set_allocated:Property.ColorPropertyApproach.start)
}

// -------------------------------------------------------------------

// ColorPropertyDeclaration

// .Common.Color4 default = 2;
inline bool ColorPropertyDeclaration::_internal_has_default_() const {
  return this != internal_default_instance() && _impl_.default__ != nullptr;
}
inline bool ColorPropertyDeclaration::has_default_() const {
  return _internal_has_default_();
}
inline const ::Common::Color4& ColorPropertyDeclaration::_internal_default_() const {
  const ::Common::Color4* p = _impl_.default__;
  return p != nullptr ? *p : reinterpret_cast<const ::Common::Color4&>(
      ::Common::_Color4_default_instance_);
}
inline const ::Common::Color4& ColorPropertyDeclaration::default_() const {
  // @@protoc_insertion_point(field_get:Property.ColorPropertyDeclaration.default)
  return _internal_default_();
}
inline void ColorPropertyDeclaration::unsafe_arena_set_allocated_default_(
    ::Common::Color4* default_) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.default__);
  }
  _impl_.default__ = default_;
  if (default_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.ColorPropertyDeclaration.default)
}
inline ::Common::Color4* ColorPropertyDeclaration::release_default_() {
  
  ::Common::Color4* temp = _impl_.default__;
  _impl_.default__ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Common::Color4* ColorPropertyDeclaration::unsafe_arena_release_default_() {
  // @@protoc_insertion_point(field_release:Property.ColorPropertyDeclaration.default)
  
  ::Common::Color4* temp = _impl_.default__;
  _impl_.default__ = nullptr;
  return temp;
}
inline ::Common::Color4* ColorPropertyDeclaration::_internal_mutable_default_() {
  
  if (_impl_.default__ == nullptr) {
    auto* p = CreateMaybeMessage<::Common::Color4>(GetArenaForAllocation());
    _impl_.default__ = p;
  }
  return _impl_.default__;
}
inline ::Common::Color4* ColorPropertyDeclaration::mutable_default_() {
  ::Common::Color4* _msg = _internal_mutable_default_();
  // @@protoc_insertion_point(field_mutable:Property.ColorPropertyDeclaration.default)
  return _msg;
}
inline void ColorPropertyDeclaration::set_allocated_default_(::Common::Color4* default_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.default__);
  }
  if (default_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(default_));
    if (message_arena != submessage_arena) {
      default_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, default_, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.default__ = default_;
  // @@protoc_insertion_point(field_set_allocated:Property.ColorPropertyDeclaration.default)
}

// .Property.ColorPropertyMetadata meta = 1;
inline bool ColorPropertyDeclaration::_internal_has_meta() const {
  return this != internal_default_instance() && _impl_.meta_ != nullptr;
}
inline bool ColorPropertyDeclaration::has_meta() const {
  return _internal_has_meta();
}
inline void ColorPropertyDeclaration::clear_meta() {
  if (GetArenaForAllocation() == nullptr && _impl_.meta_ != nullptr) {
    delete _impl_.meta_;
  }
  _impl_.meta_ = nullptr;
}
inline const ::Property::ColorPropertyMetadata& ColorPropertyDeclaration::_internal_meta() const {
  const ::Property::ColorPropertyMetadata* p = _impl_.meta_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::ColorPropertyMetadata&>(
      ::Property::_ColorPropertyMetadata_default_instance_);
}
inline const ::Property::ColorPropertyMetadata& ColorPropertyDeclaration::meta() const {
  // @@protoc_insertion_point(field_get:Property.ColorPropertyDeclaration.meta)
  return _internal_meta();
}
inline void ColorPropertyDeclaration::unsafe_arena_set_allocated_meta(
    ::Property::ColorPropertyMetadata* meta) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.meta_);
  }
  _impl_.meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.ColorPropertyDeclaration.meta)
}
inline ::Property::ColorPropertyMetadata* ColorPropertyDeclaration::release_meta() {
  
  ::Property::ColorPropertyMetadata* temp = _impl_.meta_;
  _impl_.meta_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::ColorPropertyMetadata* ColorPropertyDeclaration::unsafe_arena_release_meta() {
  // @@protoc_insertion_point(field_release:Property.ColorPropertyDeclaration.meta)
  
  ::Property::ColorPropertyMetadata* temp = _impl_.meta_;
  _impl_.meta_ = nullptr;
  return temp;
}
inline ::Property::ColorPropertyMetadata* ColorPropertyDeclaration::_internal_mutable_meta() {
  
  if (_impl_.meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::ColorPropertyMetadata>(GetArenaForAllocation());
    _impl_.meta_ = p;
  }
  return _impl_.meta_;
}
inline ::Property::ColorPropertyMetadata* ColorPropertyDeclaration::mutable_meta() {
  ::Property::ColorPropertyMetadata* _msg = _internal_mutable_meta();
  // @@protoc_insertion_point(field_mutable:Property.ColorPropertyDeclaration.meta)
  return _msg;
}
inline void ColorPropertyDeclaration::set_allocated_meta(::Property::ColorPropertyMetadata* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.meta_;
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(meta);
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:Property.ColorPropertyDeclaration.meta)
}

// -------------------------------------------------------------------

// ColorEditingMetadata

// optional bool allowHdr = 2;
inline bool ColorEditingMetadata::_internal_has_allowhdr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ColorEditingMetadata::has_allowhdr() const {
  return _internal_has_allowhdr();
}
inline void ColorEditingMetadata::clear_allowhdr() {
  _impl_.allowhdr_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool ColorEditingMetadata::_internal_allowhdr() const {
  return _impl_.allowhdr_;
}
inline bool ColorEditingMetadata::allowhdr() const {
  // @@protoc_insertion_point(field_get:Property.ColorEditingMetadata.allowHdr)
  return _internal_allowhdr();
}
inline void ColorEditingMetadata::_internal_set_allowhdr(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.allowhdr_ = value;
}
inline void ColorEditingMetadata::set_allowhdr(bool value) {
  _internal_set_allowhdr(value);
  // @@protoc_insertion_point(field_set:Property.ColorEditingMetadata.allowHdr)
}

// optional bool usesAlpha = 3;
inline bool ColorEditingMetadata::_internal_has_usesalpha() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ColorEditingMetadata::has_usesalpha() const {
  return _internal_has_usesalpha();
}
inline void ColorEditingMetadata::clear_usesalpha() {
  _impl_.usesalpha_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool ColorEditingMetadata::_internal_usesalpha() const {
  return _impl_.usesalpha_;
}
inline bool ColorEditingMetadata::usesalpha() const {
  // @@protoc_insertion_point(field_get:Property.ColorEditingMetadata.usesAlpha)
  return _internal_usesalpha();
}
inline void ColorEditingMetadata::_internal_set_usesalpha(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.usesalpha_ = value;
}
inline void ColorEditingMetadata::set_usesalpha(bool value) {
  _internal_set_usesalpha(value);
  // @@protoc_insertion_point(field_set:Property.ColorEditingMetadata.usesAlpha)
}

// -------------------------------------------------------------------

// ColorGeneratorMetadata

// .Property.GeneratorMetadata base = 1;
inline bool ColorGeneratorMetadata::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool ColorGeneratorMetadata::has_base() const {
  return _internal_has_base();
}
inline void ColorGeneratorMetadata::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
inline const ::Property::GeneratorMetadata& ColorGeneratorMetadata::_internal_base() const {
  const ::Property::GeneratorMetadata* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::GeneratorMetadata&>(
      ::Property::_GeneratorMetadata_default_instance_);
}
inline const ::Property::GeneratorMetadata& ColorGeneratorMetadata::base() const {
  // @@protoc_insertion_point(field_get:Property.ColorGeneratorMetadata.base)
  return _internal_base();
}
inline void ColorGeneratorMetadata::unsafe_arena_set_allocated_base(
    ::Property::GeneratorMetadata* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.ColorGeneratorMetadata.base)
}
inline ::Property::GeneratorMetadata* ColorGeneratorMetadata::release_base() {
  
  ::Property::GeneratorMetadata* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::GeneratorMetadata* ColorGeneratorMetadata::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:Property.ColorGeneratorMetadata.base)
  
  ::Property::GeneratorMetadata* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::Property::GeneratorMetadata* ColorGeneratorMetadata::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::GeneratorMetadata>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::Property::GeneratorMetadata* ColorGeneratorMetadata::mutable_base() {
  ::Property::GeneratorMetadata* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:Property.ColorGeneratorMetadata.base)
  return _msg;
}
inline void ColorGeneratorMetadata::set_allocated_base(::Property::GeneratorMetadata* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:Property.ColorGeneratorMetadata.base)
}

// optional .Property.ColorEditingMetadata edit = 2;
inline bool ColorGeneratorMetadata::_internal_has_edit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.edit_ != nullptr);
  return value;
}
inline bool ColorGeneratorMetadata::has_edit() const {
  return _internal_has_edit();
}
inline void ColorGeneratorMetadata::clear_edit() {
  if (_impl_.edit_ != nullptr) _impl_.edit_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::Property::ColorEditingMetadata& ColorGeneratorMetadata::_internal_edit() const {
  const ::Property::ColorEditingMetadata* p = _impl_.edit_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::ColorEditingMetadata&>(
      ::Property::_ColorEditingMetadata_default_instance_);
}
inline const ::Property::ColorEditingMetadata& ColorGeneratorMetadata::edit() const {
  // @@protoc_insertion_point(field_get:Property.ColorGeneratorMetadata.edit)
  return _internal_edit();
}
inline void ColorGeneratorMetadata::unsafe_arena_set_allocated_edit(
    ::Property::ColorEditingMetadata* edit) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.edit_);
  }
  _impl_.edit_ = edit;
  if (edit) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.ColorGeneratorMetadata.edit)
}
inline ::Property::ColorEditingMetadata* ColorGeneratorMetadata::release_edit() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Property::ColorEditingMetadata* temp = _impl_.edit_;
  _impl_.edit_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::ColorEditingMetadata* ColorGeneratorMetadata::unsafe_arena_release_edit() {
  // @@protoc_insertion_point(field_release:Property.ColorGeneratorMetadata.edit)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Property::ColorEditingMetadata* temp = _impl_.edit_;
  _impl_.edit_ = nullptr;
  return temp;
}
inline ::Property::ColorEditingMetadata* ColorGeneratorMetadata::_internal_mutable_edit() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.edit_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::ColorEditingMetadata>(GetArenaForAllocation());
    _impl_.edit_ = p;
  }
  return _impl_.edit_;
}
inline ::Property::ColorEditingMetadata* ColorGeneratorMetadata::mutable_edit() {
  ::Property::ColorEditingMetadata* _msg = _internal_mutable_edit();
  // @@protoc_insertion_point(field_mutable:Property.ColorGeneratorMetadata.edit)
  return _msg;
}
inline void ColorGeneratorMetadata::set_allocated_edit(::Property::ColorEditingMetadata* edit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.edit_;
  }
  if (edit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(edit);
    if (message_arena != submessage_arena) {
      edit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, edit, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.edit_ = edit;
  // @@protoc_insertion_point(field_set_allocated:Property.ColorGeneratorMetadata.edit)
}

// -------------------------------------------------------------------

// ColorPropertyMetadata

// .Property.PropertyMetadata base = 1;
inline bool ColorPropertyMetadata::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool ColorPropertyMetadata::has_base() const {
  return _internal_has_base();
}
inline void ColorPropertyMetadata::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
inline const ::Property::PropertyMetadata& ColorPropertyMetadata::_internal_base() const {
  const ::Property::PropertyMetadata* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::PropertyMetadata&>(
      ::Property::_PropertyMetadata_default_instance_);
}
inline const ::Property::PropertyMetadata& ColorPropertyMetadata::base() const {
  // @@protoc_insertion_point(field_get:Property.ColorPropertyMetadata.base)
  return _internal_base();
}
inline void ColorPropertyMetadata::unsafe_arena_set_allocated_base(
    ::Property::PropertyMetadata* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.ColorPropertyMetadata.base)
}
inline ::Property::PropertyMetadata* ColorPropertyMetadata::release_base() {
  
  ::Property::PropertyMetadata* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::PropertyMetadata* ColorPropertyMetadata::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:Property.ColorPropertyMetadata.base)
  
  ::Property::PropertyMetadata* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::Property::PropertyMetadata* ColorPropertyMetadata::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::PropertyMetadata>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::Property::PropertyMetadata* ColorPropertyMetadata::mutable_base() {
  ::Property::PropertyMetadata* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:Property.ColorPropertyMetadata.base)
  return _msg;
}
inline void ColorPropertyMetadata::set_allocated_base(::Property::PropertyMetadata* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:Property.ColorPropertyMetadata.base)
}

// optional .Property.ColorEditingMetadata edit = 4;
inline bool ColorPropertyMetadata::_internal_has_edit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.edit_ != nullptr);
  return value;
}
inline bool ColorPropertyMetadata::has_edit() const {
  return _internal_has_edit();
}
inline void ColorPropertyMetadata::clear_edit() {
  if (_impl_.edit_ != nullptr) _impl_.edit_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::Property::ColorEditingMetadata& ColorPropertyMetadata::_internal_edit() const {
  const ::Property::ColorEditingMetadata* p = _impl_.edit_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::ColorEditingMetadata&>(
      ::Property::_ColorEditingMetadata_default_instance_);
}
inline const ::Property::ColorEditingMetadata& ColorPropertyMetadata::edit() const {
  // @@protoc_insertion_point(field_get:Property.ColorPropertyMetadata.edit)
  return _internal_edit();
}
inline void ColorPropertyMetadata::unsafe_arena_set_allocated_edit(
    ::Property::ColorEditingMetadata* edit) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.edit_);
  }
  _impl_.edit_ = edit;
  if (edit) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.ColorPropertyMetadata.edit)
}
inline ::Property::ColorEditingMetadata* ColorPropertyMetadata::release_edit() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Property::ColorEditingMetadata* temp = _impl_.edit_;
  _impl_.edit_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::ColorEditingMetadata* ColorPropertyMetadata::unsafe_arena_release_edit() {
  // @@protoc_insertion_point(field_release:Property.ColorPropertyMetadata.edit)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Property::ColorEditingMetadata* temp = _impl_.edit_;
  _impl_.edit_ = nullptr;
  return temp;
}
inline ::Property::ColorEditingMetadata* ColorPropertyMetadata::_internal_mutable_edit() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.edit_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::ColorEditingMetadata>(GetArenaForAllocation());
    _impl_.edit_ = p;
  }
  return _impl_.edit_;
}
inline ::Property::ColorEditingMetadata* ColorPropertyMetadata::mutable_edit() {
  ::Property::ColorEditingMetadata* _msg = _internal_mutable_edit();
  // @@protoc_insertion_point(field_mutable:Property.ColorPropertyMetadata.edit)
  return _msg;
}
inline void ColorPropertyMetadata::set_allocated_edit(::Property::ColorEditingMetadata* edit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.edit_;
  }
  if (edit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(edit);
    if (message_arena != submessage_arena) {
      edit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, edit, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.edit_ = edit;
  // @@protoc_insertion_point(field_set_allocated:Property.ColorPropertyMetadata.edit)
}

// -------------------------------------------------------------------

// BooleanPropertyAssignment

// string assignmentId = 4;
inline void BooleanPropertyAssignment::clear_assignmentid() {
  _impl_.assignmentid_.ClearToEmpty();
}
inline const std::string& BooleanPropertyAssignment::assignmentid() const {
  // @@protoc_insertion_point(field_get:Property.BooleanPropertyAssignment.assignmentId)
  return _internal_assignmentid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BooleanPropertyAssignment::set_assignmentid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.assignmentid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Property.BooleanPropertyAssignment.assignmentId)
}
inline std::string* BooleanPropertyAssignment::mutable_assignmentid() {
  std::string* _s = _internal_mutable_assignmentid();
  // @@protoc_insertion_point(field_mutable:Property.BooleanPropertyAssignment.assignmentId)
  return _s;
}
inline const std::string& BooleanPropertyAssignment::_internal_assignmentid() const {
  return _impl_.assignmentid_.Get();
}
inline void BooleanPropertyAssignment::_internal_set_assignmentid(const std::string& value) {
  
  _impl_.assignmentid_.Set(value, GetArenaForAllocation());
}
inline std::string* BooleanPropertyAssignment::_internal_mutable_assignmentid() {
  
  return _impl_.assignmentid_.Mutable(GetArenaForAllocation());
}
inline std::string* BooleanPropertyAssignment::release_assignmentid() {
  // @@protoc_insertion_point(field_release:Property.BooleanPropertyAssignment.assignmentId)
  return _impl_.assignmentid_.Release();
}
inline void BooleanPropertyAssignment::set_allocated_assignmentid(std::string* assignmentid) {
  if (assignmentid != nullptr) {
    
  } else {
    
  }
  _impl_.assignmentid_.SetAllocated(assignmentid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.assignmentid_.IsDefault()) {
    _impl_.assignmentid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Property.BooleanPropertyAssignment.assignmentId)
}

// .Property.BooleanPropertyValue value = 3;
inline bool BooleanPropertyAssignment::_internal_has_value() const {
  return this != internal_default_instance() && _impl_.value_ != nullptr;
}
inline bool BooleanPropertyAssignment::has_value() const {
  return _internal_has_value();
}
inline void BooleanPropertyAssignment::clear_value() {
  if (GetArenaForAllocation() == nullptr && _impl_.value_ != nullptr) {
    delete _impl_.value_;
  }
  _impl_.value_ = nullptr;
}
inline const ::Property::BooleanPropertyValue& BooleanPropertyAssignment::_internal_value() const {
  const ::Property::BooleanPropertyValue* p = _impl_.value_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::BooleanPropertyValue&>(
      ::Property::_BooleanPropertyValue_default_instance_);
}
inline const ::Property::BooleanPropertyValue& BooleanPropertyAssignment::value() const {
  // @@protoc_insertion_point(field_get:Property.BooleanPropertyAssignment.value)
  return _internal_value();
}
inline void BooleanPropertyAssignment::unsafe_arena_set_allocated_value(
    ::Property::BooleanPropertyValue* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_);
  }
  _impl_.value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.BooleanPropertyAssignment.value)
}
inline ::Property::BooleanPropertyValue* BooleanPropertyAssignment::release_value() {
  
  ::Property::BooleanPropertyValue* temp = _impl_.value_;
  _impl_.value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::BooleanPropertyValue* BooleanPropertyAssignment::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:Property.BooleanPropertyAssignment.value)
  
  ::Property::BooleanPropertyValue* temp = _impl_.value_;
  _impl_.value_ = nullptr;
  return temp;
}
inline ::Property::BooleanPropertyValue* BooleanPropertyAssignment::_internal_mutable_value() {
  
  if (_impl_.value_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::BooleanPropertyValue>(GetArenaForAllocation());
    _impl_.value_ = p;
  }
  return _impl_.value_;
}
inline ::Property::BooleanPropertyValue* BooleanPropertyAssignment::mutable_value() {
  ::Property::BooleanPropertyValue* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:Property.BooleanPropertyAssignment.value)
  return _msg;
}
inline void BooleanPropertyAssignment::set_allocated_value(::Property::BooleanPropertyValue* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.value_ = value;
  // @@protoc_insertion_point(field_set_allocated:Property.BooleanPropertyAssignment.value)
}

// int32 priority = 2;
inline void BooleanPropertyAssignment::clear_priority() {
  _impl_.priority_ = 0;
}
inline int32_t BooleanPropertyAssignment::_internal_priority() const {
  return _impl_.priority_;
}
inline int32_t BooleanPropertyAssignment::priority() const {
  // @@protoc_insertion_point(field_get:Property.BooleanPropertyAssignment.priority)
  return _internal_priority();
}
inline void BooleanPropertyAssignment::_internal_set_priority(int32_t value) {
  
  _impl_.priority_ = value;
}
inline void BooleanPropertyAssignment::set_priority(int32_t value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:Property.BooleanPropertyAssignment.priority)
}

// -------------------------------------------------------------------

// BooleanPropertyValue

// bool constant = 1;
inline bool BooleanPropertyValue::_internal_has_constant() const {
  return ValueType_case() == kConstant;
}
inline bool BooleanPropertyValue::has_constant() const {
  return _internal_has_constant();
}
inline void BooleanPropertyValue::set_has_constant() {
  _impl_._oneof_case_[0] = kConstant;
}
inline void BooleanPropertyValue::clear_constant() {
  if (_internal_has_constant()) {
    _impl_.ValueType_.constant_ = false;
    clear_has_ValueType();
  }
}
inline bool BooleanPropertyValue::_internal_constant() const {
  if (_internal_has_constant()) {
    return _impl_.ValueType_.constant_;
  }
  return false;
}
inline void BooleanPropertyValue::_internal_set_constant(bool value) {
  if (!_internal_has_constant()) {
    clear_ValueType();
    set_has_constant();
  }
  _impl_.ValueType_.constant_ = value;
}
inline bool BooleanPropertyValue::constant() const {
  // @@protoc_insertion_point(field_get:Property.BooleanPropertyValue.constant)
  return _internal_constant();
}
inline void BooleanPropertyValue::set_constant(bool value) {
  _internal_set_constant(value);
  // @@protoc_insertion_point(field_set:Property.BooleanPropertyValue.constant)
}

// .Property.PropertyIdentifier ref = 2;
inline bool BooleanPropertyValue::_internal_has_ref() const {
  return ValueType_case() == kRef;
}
inline bool BooleanPropertyValue::has_ref() const {
  return _internal_has_ref();
}
inline void BooleanPropertyValue::set_has_ref() {
  _impl_._oneof_case_[0] = kRef;
}
inline void BooleanPropertyValue::clear_ref() {
  if (_internal_has_ref()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.ValueType_.ref_;
    }
    clear_has_ValueType();
  }
}
inline ::Property::PropertyIdentifier* BooleanPropertyValue::release_ref() {
  // @@protoc_insertion_point(field_release:Property.BooleanPropertyValue.ref)
  if (_internal_has_ref()) {
    clear_has_ValueType();
    ::Property::PropertyIdentifier* temp = _impl_.ValueType_.ref_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.ValueType_.ref_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::PropertyIdentifier& BooleanPropertyValue::_internal_ref() const {
  return _internal_has_ref()
      ? *_impl_.ValueType_.ref_
      : reinterpret_cast< ::Property::PropertyIdentifier&>(::Property::_PropertyIdentifier_default_instance_);
}
inline const ::Property::PropertyIdentifier& BooleanPropertyValue::ref() const {
  // @@protoc_insertion_point(field_get:Property.BooleanPropertyValue.ref)
  return _internal_ref();
}
inline ::Property::PropertyIdentifier* BooleanPropertyValue::unsafe_arena_release_ref() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.BooleanPropertyValue.ref)
  if (_internal_has_ref()) {
    clear_has_ValueType();
    ::Property::PropertyIdentifier* temp = _impl_.ValueType_.ref_;
    _impl_.ValueType_.ref_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BooleanPropertyValue::unsafe_arena_set_allocated_ref(::Property::PropertyIdentifier* ref) {
  clear_ValueType();
  if (ref) {
    set_has_ref();
    _impl_.ValueType_.ref_ = ref;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.BooleanPropertyValue.ref)
}
inline ::Property::PropertyIdentifier* BooleanPropertyValue::_internal_mutable_ref() {
  if (!_internal_has_ref()) {
    clear_ValueType();
    set_has_ref();
    _impl_.ValueType_.ref_ = CreateMaybeMessage< ::Property::PropertyIdentifier >(GetArenaForAllocation());
  }
  return _impl_.ValueType_.ref_;
}
inline ::Property::PropertyIdentifier* BooleanPropertyValue::mutable_ref() {
  ::Property::PropertyIdentifier* _msg = _internal_mutable_ref();
  // @@protoc_insertion_point(field_mutable:Property.BooleanPropertyValue.ref)
  return _msg;
}

// .Property.BooleanPropertyKeyframed keyframes = 5;
inline bool BooleanPropertyValue::_internal_has_keyframes() const {
  return ValueType_case() == kKeyframes;
}
inline bool BooleanPropertyValue::has_keyframes() const {
  return _internal_has_keyframes();
}
inline void BooleanPropertyValue::set_has_keyframes() {
  _impl_._oneof_case_[0] = kKeyframes;
}
inline void BooleanPropertyValue::clear_keyframes() {
  if (_internal_has_keyframes()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.ValueType_.keyframes_;
    }
    clear_has_ValueType();
  }
}
inline ::Property::BooleanPropertyKeyframed* BooleanPropertyValue::release_keyframes() {
  // @@protoc_insertion_point(field_release:Property.BooleanPropertyValue.keyframes)
  if (_internal_has_keyframes()) {
    clear_has_ValueType();
    ::Property::BooleanPropertyKeyframed* temp = _impl_.ValueType_.keyframes_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.ValueType_.keyframes_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::BooleanPropertyKeyframed& BooleanPropertyValue::_internal_keyframes() const {
  return _internal_has_keyframes()
      ? *_impl_.ValueType_.keyframes_
      : reinterpret_cast< ::Property::BooleanPropertyKeyframed&>(::Property::_BooleanPropertyKeyframed_default_instance_);
}
inline const ::Property::BooleanPropertyKeyframed& BooleanPropertyValue::keyframes() const {
  // @@protoc_insertion_point(field_get:Property.BooleanPropertyValue.keyframes)
  return _internal_keyframes();
}
inline ::Property::BooleanPropertyKeyframed* BooleanPropertyValue::unsafe_arena_release_keyframes() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.BooleanPropertyValue.keyframes)
  if (_internal_has_keyframes()) {
    clear_has_ValueType();
    ::Property::BooleanPropertyKeyframed* temp = _impl_.ValueType_.keyframes_;
    _impl_.ValueType_.keyframes_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BooleanPropertyValue::unsafe_arena_set_allocated_keyframes(::Property::BooleanPropertyKeyframed* keyframes) {
  clear_ValueType();
  if (keyframes) {
    set_has_keyframes();
    _impl_.ValueType_.keyframes_ = keyframes;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.BooleanPropertyValue.keyframes)
}
inline ::Property::BooleanPropertyKeyframed* BooleanPropertyValue::_internal_mutable_keyframes() {
  if (!_internal_has_keyframes()) {
    clear_ValueType();
    set_has_keyframes();
    _impl_.ValueType_.keyframes_ = CreateMaybeMessage< ::Property::BooleanPropertyKeyframed >(GetArenaForAllocation());
  }
  return _impl_.ValueType_.keyframes_;
}
inline ::Property::BooleanPropertyKeyframed* BooleanPropertyValue::mutable_keyframes() {
  ::Property::BooleanPropertyKeyframed* _msg = _internal_mutable_keyframes();
  // @@protoc_insertion_point(field_mutable:Property.BooleanPropertyValue.keyframes)
  return _msg;
}

// string expr = 6;
inline bool BooleanPropertyValue::_internal_has_expr() const {
  return ValueType_case() == kExpr;
}
inline bool BooleanPropertyValue::has_expr() const {
  return _internal_has_expr();
}
inline void BooleanPropertyValue::set_has_expr() {
  _impl_._oneof_case_[0] = kExpr;
}
inline void BooleanPropertyValue::clear_expr() {
  if (_internal_has_expr()) {
    _impl_.ValueType_.expr_.Destroy();
    clear_has_ValueType();
  }
}
inline const std::string& BooleanPropertyValue::expr() const {
  // @@protoc_insertion_point(field_get:Property.BooleanPropertyValue.expr)
  return _internal_expr();
}
template <typename ArgT0, typename... ArgT>
inline void BooleanPropertyValue::set_expr(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_expr()) {
    clear_ValueType();
    set_has_expr();
    _impl_.ValueType_.expr_.InitDefault();
  }
  _impl_.ValueType_.expr_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Property.BooleanPropertyValue.expr)
}
inline std::string* BooleanPropertyValue::mutable_expr() {
  std::string* _s = _internal_mutable_expr();
  // @@protoc_insertion_point(field_mutable:Property.BooleanPropertyValue.expr)
  return _s;
}
inline const std::string& BooleanPropertyValue::_internal_expr() const {
  if (_internal_has_expr()) {
    return _impl_.ValueType_.expr_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void BooleanPropertyValue::_internal_set_expr(const std::string& value) {
  if (!_internal_has_expr()) {
    clear_ValueType();
    set_has_expr();
    _impl_.ValueType_.expr_.InitDefault();
  }
  _impl_.ValueType_.expr_.Set(value, GetArenaForAllocation());
}
inline std::string* BooleanPropertyValue::_internal_mutable_expr() {
  if (!_internal_has_expr()) {
    clear_ValueType();
    set_has_expr();
    _impl_.ValueType_.expr_.InitDefault();
  }
  return _impl_.ValueType_.expr_.Mutable(      GetArenaForAllocation());
}
inline std::string* BooleanPropertyValue::release_expr() {
  // @@protoc_insertion_point(field_release:Property.BooleanPropertyValue.expr)
  if (_internal_has_expr()) {
    clear_has_ValueType();
    return _impl_.ValueType_.expr_.Release();
  } else {
    return nullptr;
  }
}
inline void BooleanPropertyValue::set_allocated_expr(std::string* expr) {
  if (has_ValueType()) {
    clear_ValueType();
  }
  if (expr != nullptr) {
    set_has_expr();
    _impl_.ValueType_.expr_.InitAllocated(expr, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:Property.BooleanPropertyValue.expr)
}

// .Property.BooleanPropertyScalarComparison scalarCmp = 7;
inline bool BooleanPropertyValue::_internal_has_scalarcmp() const {
  return ValueType_case() == kScalarCmp;
}
inline bool BooleanPropertyValue::has_scalarcmp() const {
  return _internal_has_scalarcmp();
}
inline void BooleanPropertyValue::set_has_scalarcmp() {
  _impl_._oneof_case_[0] = kScalarCmp;
}
inline void BooleanPropertyValue::clear_scalarcmp() {
  if (_internal_has_scalarcmp()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.ValueType_.scalarcmp_;
    }
    clear_has_ValueType();
  }
}
inline ::Property::BooleanPropertyScalarComparison* BooleanPropertyValue::release_scalarcmp() {
  // @@protoc_insertion_point(field_release:Property.BooleanPropertyValue.scalarCmp)
  if (_internal_has_scalarcmp()) {
    clear_has_ValueType();
    ::Property::BooleanPropertyScalarComparison* temp = _impl_.ValueType_.scalarcmp_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.ValueType_.scalarcmp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::BooleanPropertyScalarComparison& BooleanPropertyValue::_internal_scalarcmp() const {
  return _internal_has_scalarcmp()
      ? *_impl_.ValueType_.scalarcmp_
      : reinterpret_cast< ::Property::BooleanPropertyScalarComparison&>(::Property::_BooleanPropertyScalarComparison_default_instance_);
}
inline const ::Property::BooleanPropertyScalarComparison& BooleanPropertyValue::scalarcmp() const {
  // @@protoc_insertion_point(field_get:Property.BooleanPropertyValue.scalarCmp)
  return _internal_scalarcmp();
}
inline ::Property::BooleanPropertyScalarComparison* BooleanPropertyValue::unsafe_arena_release_scalarcmp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.BooleanPropertyValue.scalarCmp)
  if (_internal_has_scalarcmp()) {
    clear_has_ValueType();
    ::Property::BooleanPropertyScalarComparison* temp = _impl_.ValueType_.scalarcmp_;
    _impl_.ValueType_.scalarcmp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BooleanPropertyValue::unsafe_arena_set_allocated_scalarcmp(::Property::BooleanPropertyScalarComparison* scalarcmp) {
  clear_ValueType();
  if (scalarcmp) {
    set_has_scalarcmp();
    _impl_.ValueType_.scalarcmp_ = scalarcmp;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.BooleanPropertyValue.scalarCmp)
}
inline ::Property::BooleanPropertyScalarComparison* BooleanPropertyValue::_internal_mutable_scalarcmp() {
  if (!_internal_has_scalarcmp()) {
    clear_ValueType();
    set_has_scalarcmp();
    _impl_.ValueType_.scalarcmp_ = CreateMaybeMessage< ::Property::BooleanPropertyScalarComparison >(GetArenaForAllocation());
  }
  return _impl_.ValueType_.scalarcmp_;
}
inline ::Property::BooleanPropertyScalarComparison* BooleanPropertyValue::mutable_scalarcmp() {
  ::Property::BooleanPropertyScalarComparison* _msg = _internal_mutable_scalarcmp();
  // @@protoc_insertion_point(field_mutable:Property.BooleanPropertyValue.scalarCmp)
  return _msg;
}

// bool useDefault = 8;
inline bool BooleanPropertyValue::_internal_has_usedefault() const {
  return ValueType_case() == kUseDefault;
}
inline bool BooleanPropertyValue::has_usedefault() const {
  return _internal_has_usedefault();
}
inline void BooleanPropertyValue::set_has_usedefault() {
  _impl_._oneof_case_[0] = kUseDefault;
}
inline void BooleanPropertyValue::clear_usedefault() {
  if (_internal_has_usedefault()) {
    _impl_.ValueType_.usedefault_ = false;
    clear_has_ValueType();
  }
}
inline bool BooleanPropertyValue::_internal_usedefault() const {
  if (_internal_has_usedefault()) {
    return _impl_.ValueType_.usedefault_;
  }
  return false;
}
inline void BooleanPropertyValue::_internal_set_usedefault(bool value) {
  if (!_internal_has_usedefault()) {
    clear_ValueType();
    set_has_usedefault();
  }
  _impl_.ValueType_.usedefault_ = value;
}
inline bool BooleanPropertyValue::usedefault() const {
  // @@protoc_insertion_point(field_get:Property.BooleanPropertyValue.useDefault)
  return _internal_usedefault();
}
inline void BooleanPropertyValue::set_usedefault(bool value) {
  _internal_set_usedefault(value);
  // @@protoc_insertion_point(field_set:Property.BooleanPropertyValue.useDefault)
}

// .Property.CustomGeneratorValue custom = 10;
inline bool BooleanPropertyValue::_internal_has_custom() const {
  return ValueType_case() == kCustom;
}
inline bool BooleanPropertyValue::has_custom() const {
  return _internal_has_custom();
}
inline void BooleanPropertyValue::set_has_custom() {
  _impl_._oneof_case_[0] = kCustom;
}
inline void BooleanPropertyValue::clear_custom() {
  if (_internal_has_custom()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.ValueType_.custom_;
    }
    clear_has_ValueType();
  }
}
inline ::Property::CustomGeneratorValue* BooleanPropertyValue::release_custom() {
  // @@protoc_insertion_point(field_release:Property.BooleanPropertyValue.custom)
  if (_internal_has_custom()) {
    clear_has_ValueType();
    ::Property::CustomGeneratorValue* temp = _impl_.ValueType_.custom_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.ValueType_.custom_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::CustomGeneratorValue& BooleanPropertyValue::_internal_custom() const {
  return _internal_has_custom()
      ? *_impl_.ValueType_.custom_
      : reinterpret_cast< ::Property::CustomGeneratorValue&>(::Property::_CustomGeneratorValue_default_instance_);
}
inline const ::Property::CustomGeneratorValue& BooleanPropertyValue::custom() const {
  // @@protoc_insertion_point(field_get:Property.BooleanPropertyValue.custom)
  return _internal_custom();
}
inline ::Property::CustomGeneratorValue* BooleanPropertyValue::unsafe_arena_release_custom() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.BooleanPropertyValue.custom)
  if (_internal_has_custom()) {
    clear_has_ValueType();
    ::Property::CustomGeneratorValue* temp = _impl_.ValueType_.custom_;
    _impl_.ValueType_.custom_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BooleanPropertyValue::unsafe_arena_set_allocated_custom(::Property::CustomGeneratorValue* custom) {
  clear_ValueType();
  if (custom) {
    set_has_custom();
    _impl_.ValueType_.custom_ = custom;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.BooleanPropertyValue.custom)
}
inline ::Property::CustomGeneratorValue* BooleanPropertyValue::_internal_mutable_custom() {
  if (!_internal_has_custom()) {
    clear_ValueType();
    set_has_custom();
    _impl_.ValueType_.custom_ = CreateMaybeMessage< ::Property::CustomGeneratorValue >(GetArenaForAllocation());
  }
  return _impl_.ValueType_.custom_;
}
inline ::Property::CustomGeneratorValue* BooleanPropertyValue::mutable_custom() {
  ::Property::CustomGeneratorValue* _msg = _internal_mutable_custom();
  // @@protoc_insertion_point(field_mutable:Property.BooleanPropertyValue.custom)
  return _msg;
}

inline bool BooleanPropertyValue::has_ValueType() const {
  return ValueType_case() != VALUETYPE_NOT_SET;
}
inline void BooleanPropertyValue::clear_has_ValueType() {
  _impl_._oneof_case_[0] = VALUETYPE_NOT_SET;
}
inline BooleanPropertyValue::ValueTypeCase BooleanPropertyValue::ValueType_case() const {
  return BooleanPropertyValue::ValueTypeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// BooleanPropertyKeyframed_BooleanKeyframe

// float t = 1;
inline void BooleanPropertyKeyframed_BooleanKeyframe::clear_t() {
  _impl_.t_ = 0;
}
inline float BooleanPropertyKeyframed_BooleanKeyframe::_internal_t() const {
  return _impl_.t_;
}
inline float BooleanPropertyKeyframed_BooleanKeyframe::t() const {
  // @@protoc_insertion_point(field_get:Property.BooleanPropertyKeyframed.BooleanKeyframe.t)
  return _internal_t();
}
inline void BooleanPropertyKeyframed_BooleanKeyframe::_internal_set_t(float value) {
  
  _impl_.t_ = value;
}
inline void BooleanPropertyKeyframed_BooleanKeyframe::set_t(float value) {
  _internal_set_t(value);
  // @@protoc_insertion_point(field_set:Property.BooleanPropertyKeyframed.BooleanKeyframe.t)
}

// .Property.BooleanPropertyValue val = 2;
inline bool BooleanPropertyKeyframed_BooleanKeyframe::_internal_has_val() const {
  return this != internal_default_instance() && _impl_.val_ != nullptr;
}
inline bool BooleanPropertyKeyframed_BooleanKeyframe::has_val() const {
  return _internal_has_val();
}
inline void BooleanPropertyKeyframed_BooleanKeyframe::clear_val() {
  if (GetArenaForAllocation() == nullptr && _impl_.val_ != nullptr) {
    delete _impl_.val_;
  }
  _impl_.val_ = nullptr;
}
inline const ::Property::BooleanPropertyValue& BooleanPropertyKeyframed_BooleanKeyframe::_internal_val() const {
  const ::Property::BooleanPropertyValue* p = _impl_.val_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::BooleanPropertyValue&>(
      ::Property::_BooleanPropertyValue_default_instance_);
}
inline const ::Property::BooleanPropertyValue& BooleanPropertyKeyframed_BooleanKeyframe::val() const {
  // @@protoc_insertion_point(field_get:Property.BooleanPropertyKeyframed.BooleanKeyframe.val)
  return _internal_val();
}
inline void BooleanPropertyKeyframed_BooleanKeyframe::unsafe_arena_set_allocated_val(
    ::Property::BooleanPropertyValue* val) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.val_);
  }
  _impl_.val_ = val;
  if (val) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.BooleanPropertyKeyframed.BooleanKeyframe.val)
}
inline ::Property::BooleanPropertyValue* BooleanPropertyKeyframed_BooleanKeyframe::release_val() {
  
  ::Property::BooleanPropertyValue* temp = _impl_.val_;
  _impl_.val_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::BooleanPropertyValue* BooleanPropertyKeyframed_BooleanKeyframe::unsafe_arena_release_val() {
  // @@protoc_insertion_point(field_release:Property.BooleanPropertyKeyframed.BooleanKeyframe.val)
  
  ::Property::BooleanPropertyValue* temp = _impl_.val_;
  _impl_.val_ = nullptr;
  return temp;
}
inline ::Property::BooleanPropertyValue* BooleanPropertyKeyframed_BooleanKeyframe::_internal_mutable_val() {
  
  if (_impl_.val_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::BooleanPropertyValue>(GetArenaForAllocation());
    _impl_.val_ = p;
  }
  return _impl_.val_;
}
inline ::Property::BooleanPropertyValue* BooleanPropertyKeyframed_BooleanKeyframe::mutable_val() {
  ::Property::BooleanPropertyValue* _msg = _internal_mutable_val();
  // @@protoc_insertion_point(field_mutable:Property.BooleanPropertyKeyframed.BooleanKeyframe.val)
  return _msg;
}
inline void BooleanPropertyKeyframed_BooleanKeyframe::set_allocated_val(::Property::BooleanPropertyValue* val) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.val_;
  }
  if (val) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(val);
    if (message_arena != submessage_arena) {
      val = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, val, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.val_ = val;
  // @@protoc_insertion_point(field_set_allocated:Property.BooleanPropertyKeyframed.BooleanKeyframe.val)
}

// -------------------------------------------------------------------

// BooleanPropertyKeyframed

// optional .Property.ScalarPropertyValue tSrc = 8;
inline bool BooleanPropertyKeyframed::_internal_has_tsrc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tsrc_ != nullptr);
  return value;
}
inline bool BooleanPropertyKeyframed::has_tsrc() const {
  return _internal_has_tsrc();
}
inline void BooleanPropertyKeyframed::clear_tsrc() {
  if (_impl_.tsrc_ != nullptr) _impl_.tsrc_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::Property::ScalarPropertyValue& BooleanPropertyKeyframed::_internal_tsrc() const {
  const ::Property::ScalarPropertyValue* p = _impl_.tsrc_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::ScalarPropertyValue&>(
      ::Property::_ScalarPropertyValue_default_instance_);
}
inline const ::Property::ScalarPropertyValue& BooleanPropertyKeyframed::tsrc() const {
  // @@protoc_insertion_point(field_get:Property.BooleanPropertyKeyframed.tSrc)
  return _internal_tsrc();
}
inline void BooleanPropertyKeyframed::unsafe_arena_set_allocated_tsrc(
    ::Property::ScalarPropertyValue* tsrc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tsrc_);
  }
  _impl_.tsrc_ = tsrc;
  if (tsrc) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.BooleanPropertyKeyframed.tSrc)
}
inline ::Property::ScalarPropertyValue* BooleanPropertyKeyframed::release_tsrc() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Property::ScalarPropertyValue* temp = _impl_.tsrc_;
  _impl_.tsrc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::ScalarPropertyValue* BooleanPropertyKeyframed::unsafe_arena_release_tsrc() {
  // @@protoc_insertion_point(field_release:Property.BooleanPropertyKeyframed.tSrc)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Property::ScalarPropertyValue* temp = _impl_.tsrc_;
  _impl_.tsrc_ = nullptr;
  return temp;
}
inline ::Property::ScalarPropertyValue* BooleanPropertyKeyframed::_internal_mutable_tsrc() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.tsrc_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::ScalarPropertyValue>(GetArenaForAllocation());
    _impl_.tsrc_ = p;
  }
  return _impl_.tsrc_;
}
inline ::Property::ScalarPropertyValue* BooleanPropertyKeyframed::mutable_tsrc() {
  ::Property::ScalarPropertyValue* _msg = _internal_mutable_tsrc();
  // @@protoc_insertion_point(field_mutable:Property.BooleanPropertyKeyframed.tSrc)
  return _msg;
}
inline void BooleanPropertyKeyframed::set_allocated_tsrc(::Property::ScalarPropertyValue* tsrc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.tsrc_;
  }
  if (tsrc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tsrc);
    if (message_arena != submessage_arena) {
      tsrc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tsrc, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.tsrc_ = tsrc;
  // @@protoc_insertion_point(field_set_allocated:Property.BooleanPropertyKeyframed.tSrc)
}

// repeated .Property.BooleanPropertyKeyframed.BooleanKeyframe keys = 10;
inline int BooleanPropertyKeyframed::_internal_keys_size() const {
  return _impl_.keys_.size();
}
inline int BooleanPropertyKeyframed::keys_size() const {
  return _internal_keys_size();
}
inline void BooleanPropertyKeyframed::clear_keys() {
  _impl_.keys_.Clear();
}
inline ::Property::BooleanPropertyKeyframed_BooleanKeyframe* BooleanPropertyKeyframed::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:Property.BooleanPropertyKeyframed.keys)
  return _impl_.keys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Property::BooleanPropertyKeyframed_BooleanKeyframe >*
BooleanPropertyKeyframed::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:Property.BooleanPropertyKeyframed.keys)
  return &_impl_.keys_;
}
inline const ::Property::BooleanPropertyKeyframed_BooleanKeyframe& BooleanPropertyKeyframed::_internal_keys(int index) const {
  return _impl_.keys_.Get(index);
}
inline const ::Property::BooleanPropertyKeyframed_BooleanKeyframe& BooleanPropertyKeyframed::keys(int index) const {
  // @@protoc_insertion_point(field_get:Property.BooleanPropertyKeyframed.keys)
  return _internal_keys(index);
}
inline ::Property::BooleanPropertyKeyframed_BooleanKeyframe* BooleanPropertyKeyframed::_internal_add_keys() {
  return _impl_.keys_.Add();
}
inline ::Property::BooleanPropertyKeyframed_BooleanKeyframe* BooleanPropertyKeyframed::add_keys() {
  ::Property::BooleanPropertyKeyframed_BooleanKeyframe* _add = _internal_add_keys();
  // @@protoc_insertion_point(field_add:Property.BooleanPropertyKeyframed.keys)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Property::BooleanPropertyKeyframed_BooleanKeyframe >&
BooleanPropertyKeyframed::keys() const {
  // @@protoc_insertion_point(field_list:Property.BooleanPropertyKeyframed.keys)
  return _impl_.keys_;
}

// .Property.KeyframeLoopingEnum looping = 11;
inline void BooleanPropertyKeyframed::clear_looping() {
  _impl_.looping_ = 0;
}
inline ::Property::KeyframeLoopingEnum BooleanPropertyKeyframed::_internal_looping() const {
  return static_cast< ::Property::KeyframeLoopingEnum >(_impl_.looping_);
}
inline ::Property::KeyframeLoopingEnum BooleanPropertyKeyframed::looping() const {
  // @@protoc_insertion_point(field_get:Property.BooleanPropertyKeyframed.looping)
  return _internal_looping();
}
inline void BooleanPropertyKeyframed::_internal_set_looping(::Property::KeyframeLoopingEnum value) {
  
  _impl_.looping_ = value;
}
inline void BooleanPropertyKeyframed::set_looping(::Property::KeyframeLoopingEnum value) {
  _internal_set_looping(value);
  // @@protoc_insertion_point(field_set:Property.BooleanPropertyKeyframed.looping)
}

// -------------------------------------------------------------------

// BooleanPropertyScalarComparison

// .Common.ComparisonMethod cmp = 1;
inline void BooleanPropertyScalarComparison::clear_cmp() {
  _impl_.cmp_ = 0;
}
inline ::Common::ComparisonMethod BooleanPropertyScalarComparison::_internal_cmp() const {
  return static_cast< ::Common::ComparisonMethod >(_impl_.cmp_);
}
inline ::Common::ComparisonMethod BooleanPropertyScalarComparison::cmp() const {
  // @@protoc_insertion_point(field_get:Property.BooleanPropertyScalarComparison.cmp)
  return _internal_cmp();
}
inline void BooleanPropertyScalarComparison::_internal_set_cmp(::Common::ComparisonMethod value) {
  
  _impl_.cmp_ = value;
}
inline void BooleanPropertyScalarComparison::set_cmp(::Common::ComparisonMethod value) {
  _internal_set_cmp(value);
  // @@protoc_insertion_point(field_set:Property.BooleanPropertyScalarComparison.cmp)
}

// .Property.ScalarPropertyValue a = 2;
inline bool BooleanPropertyScalarComparison::_internal_has_a() const {
  return this != internal_default_instance() && _impl_.a_ != nullptr;
}
inline bool BooleanPropertyScalarComparison::has_a() const {
  return _internal_has_a();
}
inline void BooleanPropertyScalarComparison::clear_a() {
  if (GetArenaForAllocation() == nullptr && _impl_.a_ != nullptr) {
    delete _impl_.a_;
  }
  _impl_.a_ = nullptr;
}
inline const ::Property::ScalarPropertyValue& BooleanPropertyScalarComparison::_internal_a() const {
  const ::Property::ScalarPropertyValue* p = _impl_.a_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::ScalarPropertyValue&>(
      ::Property::_ScalarPropertyValue_default_instance_);
}
inline const ::Property::ScalarPropertyValue& BooleanPropertyScalarComparison::a() const {
  // @@protoc_insertion_point(field_get:Property.BooleanPropertyScalarComparison.a)
  return _internal_a();
}
inline void BooleanPropertyScalarComparison::unsafe_arena_set_allocated_a(
    ::Property::ScalarPropertyValue* a) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.a_);
  }
  _impl_.a_ = a;
  if (a) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.BooleanPropertyScalarComparison.a)
}
inline ::Property::ScalarPropertyValue* BooleanPropertyScalarComparison::release_a() {
  
  ::Property::ScalarPropertyValue* temp = _impl_.a_;
  _impl_.a_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::ScalarPropertyValue* BooleanPropertyScalarComparison::unsafe_arena_release_a() {
  // @@protoc_insertion_point(field_release:Property.BooleanPropertyScalarComparison.a)
  
  ::Property::ScalarPropertyValue* temp = _impl_.a_;
  _impl_.a_ = nullptr;
  return temp;
}
inline ::Property::ScalarPropertyValue* BooleanPropertyScalarComparison::_internal_mutable_a() {
  
  if (_impl_.a_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::ScalarPropertyValue>(GetArenaForAllocation());
    _impl_.a_ = p;
  }
  return _impl_.a_;
}
inline ::Property::ScalarPropertyValue* BooleanPropertyScalarComparison::mutable_a() {
  ::Property::ScalarPropertyValue* _msg = _internal_mutable_a();
  // @@protoc_insertion_point(field_mutable:Property.BooleanPropertyScalarComparison.a)
  return _msg;
}
inline void BooleanPropertyScalarComparison::set_allocated_a(::Property::ScalarPropertyValue* a) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.a_;
  }
  if (a) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(a);
    if (message_arena != submessage_arena) {
      a = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, a, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.a_ = a;
  // @@protoc_insertion_point(field_set_allocated:Property.BooleanPropertyScalarComparison.a)
}

// .Property.ScalarPropertyValue b = 3;
inline bool BooleanPropertyScalarComparison::_internal_has_b() const {
  return this != internal_default_instance() && _impl_.b_ != nullptr;
}
inline bool BooleanPropertyScalarComparison::has_b() const {
  return _internal_has_b();
}
inline void BooleanPropertyScalarComparison::clear_b() {
  if (GetArenaForAllocation() == nullptr && _impl_.b_ != nullptr) {
    delete _impl_.b_;
  }
  _impl_.b_ = nullptr;
}
inline const ::Property::ScalarPropertyValue& BooleanPropertyScalarComparison::_internal_b() const {
  const ::Property::ScalarPropertyValue* p = _impl_.b_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::ScalarPropertyValue&>(
      ::Property::_ScalarPropertyValue_default_instance_);
}
inline const ::Property::ScalarPropertyValue& BooleanPropertyScalarComparison::b() const {
  // @@protoc_insertion_point(field_get:Property.BooleanPropertyScalarComparison.b)
  return _internal_b();
}
inline void BooleanPropertyScalarComparison::unsafe_arena_set_allocated_b(
    ::Property::ScalarPropertyValue* b) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.b_);
  }
  _impl_.b_ = b;
  if (b) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.BooleanPropertyScalarComparison.b)
}
inline ::Property::ScalarPropertyValue* BooleanPropertyScalarComparison::release_b() {
  
  ::Property::ScalarPropertyValue* temp = _impl_.b_;
  _impl_.b_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::ScalarPropertyValue* BooleanPropertyScalarComparison::unsafe_arena_release_b() {
  // @@protoc_insertion_point(field_release:Property.BooleanPropertyScalarComparison.b)
  
  ::Property::ScalarPropertyValue* temp = _impl_.b_;
  _impl_.b_ = nullptr;
  return temp;
}
inline ::Property::ScalarPropertyValue* BooleanPropertyScalarComparison::_internal_mutable_b() {
  
  if (_impl_.b_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::ScalarPropertyValue>(GetArenaForAllocation());
    _impl_.b_ = p;
  }
  return _impl_.b_;
}
inline ::Property::ScalarPropertyValue* BooleanPropertyScalarComparison::mutable_b() {
  ::Property::ScalarPropertyValue* _msg = _internal_mutable_b();
  // @@protoc_insertion_point(field_mutable:Property.BooleanPropertyScalarComparison.b)
  return _msg;
}
inline void BooleanPropertyScalarComparison::set_allocated_b(::Property::ScalarPropertyValue* b) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.b_;
  }
  if (b) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(b);
    if (message_arena != submessage_arena) {
      b = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, b, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.b_ = b;
  // @@protoc_insertion_point(field_set_allocated:Property.BooleanPropertyScalarComparison.b)
}

// -------------------------------------------------------------------

// BooleanPropertyDeclaration

// bool default = 2;
inline void BooleanPropertyDeclaration::clear_default_() {
  _impl_.default__ = false;
}
inline bool BooleanPropertyDeclaration::_internal_default_() const {
  return _impl_.default__;
}
inline bool BooleanPropertyDeclaration::default_() const {
  // @@protoc_insertion_point(field_get:Property.BooleanPropertyDeclaration.default)
  return _internal_default_();
}
inline void BooleanPropertyDeclaration::_internal_set_default_(bool value) {
  
  _impl_.default__ = value;
}
inline void BooleanPropertyDeclaration::set_default_(bool value) {
  _internal_set_default_(value);
  // @@protoc_insertion_point(field_set:Property.BooleanPropertyDeclaration.default)
}

// .Property.BooleanPropertyMetadata meta = 1;
inline bool BooleanPropertyDeclaration::_internal_has_meta() const {
  return this != internal_default_instance() && _impl_.meta_ != nullptr;
}
inline bool BooleanPropertyDeclaration::has_meta() const {
  return _internal_has_meta();
}
inline void BooleanPropertyDeclaration::clear_meta() {
  if (GetArenaForAllocation() == nullptr && _impl_.meta_ != nullptr) {
    delete _impl_.meta_;
  }
  _impl_.meta_ = nullptr;
}
inline const ::Property::BooleanPropertyMetadata& BooleanPropertyDeclaration::_internal_meta() const {
  const ::Property::BooleanPropertyMetadata* p = _impl_.meta_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::BooleanPropertyMetadata&>(
      ::Property::_BooleanPropertyMetadata_default_instance_);
}
inline const ::Property::BooleanPropertyMetadata& BooleanPropertyDeclaration::meta() const {
  // @@protoc_insertion_point(field_get:Property.BooleanPropertyDeclaration.meta)
  return _internal_meta();
}
inline void BooleanPropertyDeclaration::unsafe_arena_set_allocated_meta(
    ::Property::BooleanPropertyMetadata* meta) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.meta_);
  }
  _impl_.meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.BooleanPropertyDeclaration.meta)
}
inline ::Property::BooleanPropertyMetadata* BooleanPropertyDeclaration::release_meta() {
  
  ::Property::BooleanPropertyMetadata* temp = _impl_.meta_;
  _impl_.meta_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::BooleanPropertyMetadata* BooleanPropertyDeclaration::unsafe_arena_release_meta() {
  // @@protoc_insertion_point(field_release:Property.BooleanPropertyDeclaration.meta)
  
  ::Property::BooleanPropertyMetadata* temp = _impl_.meta_;
  _impl_.meta_ = nullptr;
  return temp;
}
inline ::Property::BooleanPropertyMetadata* BooleanPropertyDeclaration::_internal_mutable_meta() {
  
  if (_impl_.meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::BooleanPropertyMetadata>(GetArenaForAllocation());
    _impl_.meta_ = p;
  }
  return _impl_.meta_;
}
inline ::Property::BooleanPropertyMetadata* BooleanPropertyDeclaration::mutable_meta() {
  ::Property::BooleanPropertyMetadata* _msg = _internal_mutable_meta();
  // @@protoc_insertion_point(field_mutable:Property.BooleanPropertyDeclaration.meta)
  return _msg;
}
inline void BooleanPropertyDeclaration::set_allocated_meta(::Property::BooleanPropertyMetadata* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.meta_;
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(meta);
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:Property.BooleanPropertyDeclaration.meta)
}

// -------------------------------------------------------------------

// BooleanEditingMetadata

// -------------------------------------------------------------------

// BooleanGeneratorMetadata

// .Property.GeneratorMetadata base = 1;
inline bool BooleanGeneratorMetadata::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool BooleanGeneratorMetadata::has_base() const {
  return _internal_has_base();
}
inline void BooleanGeneratorMetadata::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
inline const ::Property::GeneratorMetadata& BooleanGeneratorMetadata::_internal_base() const {
  const ::Property::GeneratorMetadata* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::GeneratorMetadata&>(
      ::Property::_GeneratorMetadata_default_instance_);
}
inline const ::Property::GeneratorMetadata& BooleanGeneratorMetadata::base() const {
  // @@protoc_insertion_point(field_get:Property.BooleanGeneratorMetadata.base)
  return _internal_base();
}
inline void BooleanGeneratorMetadata::unsafe_arena_set_allocated_base(
    ::Property::GeneratorMetadata* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.BooleanGeneratorMetadata.base)
}
inline ::Property::GeneratorMetadata* BooleanGeneratorMetadata::release_base() {
  
  ::Property::GeneratorMetadata* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::GeneratorMetadata* BooleanGeneratorMetadata::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:Property.BooleanGeneratorMetadata.base)
  
  ::Property::GeneratorMetadata* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::Property::GeneratorMetadata* BooleanGeneratorMetadata::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::GeneratorMetadata>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::Property::GeneratorMetadata* BooleanGeneratorMetadata::mutable_base() {
  ::Property::GeneratorMetadata* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:Property.BooleanGeneratorMetadata.base)
  return _msg;
}
inline void BooleanGeneratorMetadata::set_allocated_base(::Property::GeneratorMetadata* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:Property.BooleanGeneratorMetadata.base)
}

// optional .Property.BooleanEditingMetadata edit = 2;
inline bool BooleanGeneratorMetadata::_internal_has_edit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.edit_ != nullptr);
  return value;
}
inline bool BooleanGeneratorMetadata::has_edit() const {
  return _internal_has_edit();
}
inline void BooleanGeneratorMetadata::clear_edit() {
  if (_impl_.edit_ != nullptr) _impl_.edit_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::Property::BooleanEditingMetadata& BooleanGeneratorMetadata::_internal_edit() const {
  const ::Property::BooleanEditingMetadata* p = _impl_.edit_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::BooleanEditingMetadata&>(
      ::Property::_BooleanEditingMetadata_default_instance_);
}
inline const ::Property::BooleanEditingMetadata& BooleanGeneratorMetadata::edit() const {
  // @@protoc_insertion_point(field_get:Property.BooleanGeneratorMetadata.edit)
  return _internal_edit();
}
inline void BooleanGeneratorMetadata::unsafe_arena_set_allocated_edit(
    ::Property::BooleanEditingMetadata* edit) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.edit_);
  }
  _impl_.edit_ = edit;
  if (edit) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.BooleanGeneratorMetadata.edit)
}
inline ::Property::BooleanEditingMetadata* BooleanGeneratorMetadata::release_edit() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Property::BooleanEditingMetadata* temp = _impl_.edit_;
  _impl_.edit_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::BooleanEditingMetadata* BooleanGeneratorMetadata::unsafe_arena_release_edit() {
  // @@protoc_insertion_point(field_release:Property.BooleanGeneratorMetadata.edit)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Property::BooleanEditingMetadata* temp = _impl_.edit_;
  _impl_.edit_ = nullptr;
  return temp;
}
inline ::Property::BooleanEditingMetadata* BooleanGeneratorMetadata::_internal_mutable_edit() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.edit_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::BooleanEditingMetadata>(GetArenaForAllocation());
    _impl_.edit_ = p;
  }
  return _impl_.edit_;
}
inline ::Property::BooleanEditingMetadata* BooleanGeneratorMetadata::mutable_edit() {
  ::Property::BooleanEditingMetadata* _msg = _internal_mutable_edit();
  // @@protoc_insertion_point(field_mutable:Property.BooleanGeneratorMetadata.edit)
  return _msg;
}
inline void BooleanGeneratorMetadata::set_allocated_edit(::Property::BooleanEditingMetadata* edit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.edit_;
  }
  if (edit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(edit);
    if (message_arena != submessage_arena) {
      edit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, edit, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.edit_ = edit;
  // @@protoc_insertion_point(field_set_allocated:Property.BooleanGeneratorMetadata.edit)
}

// -------------------------------------------------------------------

// BooleanPropertyMetadata

// .Property.PropertyMetadata base = 1;
inline bool BooleanPropertyMetadata::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool BooleanPropertyMetadata::has_base() const {
  return _internal_has_base();
}
inline void BooleanPropertyMetadata::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
inline const ::Property::PropertyMetadata& BooleanPropertyMetadata::_internal_base() const {
  const ::Property::PropertyMetadata* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::PropertyMetadata&>(
      ::Property::_PropertyMetadata_default_instance_);
}
inline const ::Property::PropertyMetadata& BooleanPropertyMetadata::base() const {
  // @@protoc_insertion_point(field_get:Property.BooleanPropertyMetadata.base)
  return _internal_base();
}
inline void BooleanPropertyMetadata::unsafe_arena_set_allocated_base(
    ::Property::PropertyMetadata* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.BooleanPropertyMetadata.base)
}
inline ::Property::PropertyMetadata* BooleanPropertyMetadata::release_base() {
  
  ::Property::PropertyMetadata* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::PropertyMetadata* BooleanPropertyMetadata::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:Property.BooleanPropertyMetadata.base)
  
  ::Property::PropertyMetadata* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::Property::PropertyMetadata* BooleanPropertyMetadata::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::PropertyMetadata>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::Property::PropertyMetadata* BooleanPropertyMetadata::mutable_base() {
  ::Property::PropertyMetadata* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:Property.BooleanPropertyMetadata.base)
  return _msg;
}
inline void BooleanPropertyMetadata::set_allocated_base(::Property::PropertyMetadata* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:Property.BooleanPropertyMetadata.base)
}

// optional .Property.BooleanEditingMetadata edit = 2;
inline bool BooleanPropertyMetadata::_internal_has_edit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.edit_ != nullptr);
  return value;
}
inline bool BooleanPropertyMetadata::has_edit() const {
  return _internal_has_edit();
}
inline void BooleanPropertyMetadata::clear_edit() {
  if (_impl_.edit_ != nullptr) _impl_.edit_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::Property::BooleanEditingMetadata& BooleanPropertyMetadata::_internal_edit() const {
  const ::Property::BooleanEditingMetadata* p = _impl_.edit_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::BooleanEditingMetadata&>(
      ::Property::_BooleanEditingMetadata_default_instance_);
}
inline const ::Property::BooleanEditingMetadata& BooleanPropertyMetadata::edit() const {
  // @@protoc_insertion_point(field_get:Property.BooleanPropertyMetadata.edit)
  return _internal_edit();
}
inline void BooleanPropertyMetadata::unsafe_arena_set_allocated_edit(
    ::Property::BooleanEditingMetadata* edit) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.edit_);
  }
  _impl_.edit_ = edit;
  if (edit) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.BooleanPropertyMetadata.edit)
}
inline ::Property::BooleanEditingMetadata* BooleanPropertyMetadata::release_edit() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Property::BooleanEditingMetadata* temp = _impl_.edit_;
  _impl_.edit_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::BooleanEditingMetadata* BooleanPropertyMetadata::unsafe_arena_release_edit() {
  // @@protoc_insertion_point(field_release:Property.BooleanPropertyMetadata.edit)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Property::BooleanEditingMetadata* temp = _impl_.edit_;
  _impl_.edit_ = nullptr;
  return temp;
}
inline ::Property::BooleanEditingMetadata* BooleanPropertyMetadata::_internal_mutable_edit() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.edit_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::BooleanEditingMetadata>(GetArenaForAllocation());
    _impl_.edit_ = p;
  }
  return _impl_.edit_;
}
inline ::Property::BooleanEditingMetadata* BooleanPropertyMetadata::mutable_edit() {
  ::Property::BooleanEditingMetadata* _msg = _internal_mutable_edit();
  // @@protoc_insertion_point(field_mutable:Property.BooleanPropertyMetadata.edit)
  return _msg;
}
inline void BooleanPropertyMetadata::set_allocated_edit(::Property::BooleanEditingMetadata* edit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.edit_;
  }
  if (edit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(edit);
    if (message_arena != submessage_arena) {
      edit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, edit, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.edit_ = edit;
  // @@protoc_insertion_point(field_set_allocated:Property.BooleanPropertyMetadata.edit)
}

// -------------------------------------------------------------------

// JsonPropertyAssignment

// string assignmentId = 4;
inline void JsonPropertyAssignment::clear_assignmentid() {
  _impl_.assignmentid_.ClearToEmpty();
}
inline const std::string& JsonPropertyAssignment::assignmentid() const {
  // @@protoc_insertion_point(field_get:Property.JsonPropertyAssignment.assignmentId)
  return _internal_assignmentid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void JsonPropertyAssignment::set_assignmentid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.assignmentid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Property.JsonPropertyAssignment.assignmentId)
}
inline std::string* JsonPropertyAssignment::mutable_assignmentid() {
  std::string* _s = _internal_mutable_assignmentid();
  // @@protoc_insertion_point(field_mutable:Property.JsonPropertyAssignment.assignmentId)
  return _s;
}
inline const std::string& JsonPropertyAssignment::_internal_assignmentid() const {
  return _impl_.assignmentid_.Get();
}
inline void JsonPropertyAssignment::_internal_set_assignmentid(const std::string& value) {
  
  _impl_.assignmentid_.Set(value, GetArenaForAllocation());
}
inline std::string* JsonPropertyAssignment::_internal_mutable_assignmentid() {
  
  return _impl_.assignmentid_.Mutable(GetArenaForAllocation());
}
inline std::string* JsonPropertyAssignment::release_assignmentid() {
  // @@protoc_insertion_point(field_release:Property.JsonPropertyAssignment.assignmentId)
  return _impl_.assignmentid_.Release();
}
inline void JsonPropertyAssignment::set_allocated_assignmentid(std::string* assignmentid) {
  if (assignmentid != nullptr) {
    
  } else {
    
  }
  _impl_.assignmentid_.SetAllocated(assignmentid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.assignmentid_.IsDefault()) {
    _impl_.assignmentid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Property.JsonPropertyAssignment.assignmentId)
}

// .Property.JsonPropertyValue value = 3;
inline bool JsonPropertyAssignment::_internal_has_value() const {
  return this != internal_default_instance() && _impl_.value_ != nullptr;
}
inline bool JsonPropertyAssignment::has_value() const {
  return _internal_has_value();
}
inline void JsonPropertyAssignment::clear_value() {
  if (GetArenaForAllocation() == nullptr && _impl_.value_ != nullptr) {
    delete _impl_.value_;
  }
  _impl_.value_ = nullptr;
}
inline const ::Property::JsonPropertyValue& JsonPropertyAssignment::_internal_value() const {
  const ::Property::JsonPropertyValue* p = _impl_.value_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::JsonPropertyValue&>(
      ::Property::_JsonPropertyValue_default_instance_);
}
inline const ::Property::JsonPropertyValue& JsonPropertyAssignment::value() const {
  // @@protoc_insertion_point(field_get:Property.JsonPropertyAssignment.value)
  return _internal_value();
}
inline void JsonPropertyAssignment::unsafe_arena_set_allocated_value(
    ::Property::JsonPropertyValue* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_);
  }
  _impl_.value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.JsonPropertyAssignment.value)
}
inline ::Property::JsonPropertyValue* JsonPropertyAssignment::release_value() {
  
  ::Property::JsonPropertyValue* temp = _impl_.value_;
  _impl_.value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::JsonPropertyValue* JsonPropertyAssignment::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:Property.JsonPropertyAssignment.value)
  
  ::Property::JsonPropertyValue* temp = _impl_.value_;
  _impl_.value_ = nullptr;
  return temp;
}
inline ::Property::JsonPropertyValue* JsonPropertyAssignment::_internal_mutable_value() {
  
  if (_impl_.value_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::JsonPropertyValue>(GetArenaForAllocation());
    _impl_.value_ = p;
  }
  return _impl_.value_;
}
inline ::Property::JsonPropertyValue* JsonPropertyAssignment::mutable_value() {
  ::Property::JsonPropertyValue* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:Property.JsonPropertyAssignment.value)
  return _msg;
}
inline void JsonPropertyAssignment::set_allocated_value(::Property::JsonPropertyValue* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.value_ = value;
  // @@protoc_insertion_point(field_set_allocated:Property.JsonPropertyAssignment.value)
}

// int32 priority = 2;
inline void JsonPropertyAssignment::clear_priority() {
  _impl_.priority_ = 0;
}
inline int32_t JsonPropertyAssignment::_internal_priority() const {
  return _impl_.priority_;
}
inline int32_t JsonPropertyAssignment::priority() const {
  // @@protoc_insertion_point(field_get:Property.JsonPropertyAssignment.priority)
  return _internal_priority();
}
inline void JsonPropertyAssignment::_internal_set_priority(int32_t value) {
  
  _impl_.priority_ = value;
}
inline void JsonPropertyAssignment::set_priority(int32_t value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:Property.JsonPropertyAssignment.priority)
}

// -------------------------------------------------------------------

// JsonPropertyValue

// string constantJson = 1;
inline bool JsonPropertyValue::_internal_has_constantjson() const {
  return ValueType_case() == kConstantJson;
}
inline bool JsonPropertyValue::has_constantjson() const {
  return _internal_has_constantjson();
}
inline void JsonPropertyValue::set_has_constantjson() {
  _impl_._oneof_case_[0] = kConstantJson;
}
inline void JsonPropertyValue::clear_constantjson() {
  if (_internal_has_constantjson()) {
    _impl_.ValueType_.constantjson_.Destroy();
    clear_has_ValueType();
  }
}
inline const std::string& JsonPropertyValue::constantjson() const {
  // @@protoc_insertion_point(field_get:Property.JsonPropertyValue.constantJson)
  return _internal_constantjson();
}
template <typename ArgT0, typename... ArgT>
inline void JsonPropertyValue::set_constantjson(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_constantjson()) {
    clear_ValueType();
    set_has_constantjson();
    _impl_.ValueType_.constantjson_.InitDefault();
  }
  _impl_.ValueType_.constantjson_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Property.JsonPropertyValue.constantJson)
}
inline std::string* JsonPropertyValue::mutable_constantjson() {
  std::string* _s = _internal_mutable_constantjson();
  // @@protoc_insertion_point(field_mutable:Property.JsonPropertyValue.constantJson)
  return _s;
}
inline const std::string& JsonPropertyValue::_internal_constantjson() const {
  if (_internal_has_constantjson()) {
    return _impl_.ValueType_.constantjson_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void JsonPropertyValue::_internal_set_constantjson(const std::string& value) {
  if (!_internal_has_constantjson()) {
    clear_ValueType();
    set_has_constantjson();
    _impl_.ValueType_.constantjson_.InitDefault();
  }
  _impl_.ValueType_.constantjson_.Set(value, GetArenaForAllocation());
}
inline std::string* JsonPropertyValue::_internal_mutable_constantjson() {
  if (!_internal_has_constantjson()) {
    clear_ValueType();
    set_has_constantjson();
    _impl_.ValueType_.constantjson_.InitDefault();
  }
  return _impl_.ValueType_.constantjson_.Mutable(      GetArenaForAllocation());
}
inline std::string* JsonPropertyValue::release_constantjson() {
  // @@protoc_insertion_point(field_release:Property.JsonPropertyValue.constantJson)
  if (_internal_has_constantjson()) {
    clear_has_ValueType();
    return _impl_.ValueType_.constantjson_.Release();
  } else {
    return nullptr;
  }
}
inline void JsonPropertyValue::set_allocated_constantjson(std::string* constantjson) {
  if (has_ValueType()) {
    clear_ValueType();
  }
  if (constantjson != nullptr) {
    set_has_constantjson();
    _impl_.ValueType_.constantjson_.InitAllocated(constantjson, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:Property.JsonPropertyValue.constantJson)
}

// .Property.PropertyIdentifier ref = 2;
inline bool JsonPropertyValue::_internal_has_ref() const {
  return ValueType_case() == kRef;
}
inline bool JsonPropertyValue::has_ref() const {
  return _internal_has_ref();
}
inline void JsonPropertyValue::set_has_ref() {
  _impl_._oneof_case_[0] = kRef;
}
inline void JsonPropertyValue::clear_ref() {
  if (_internal_has_ref()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.ValueType_.ref_;
    }
    clear_has_ValueType();
  }
}
inline ::Property::PropertyIdentifier* JsonPropertyValue::release_ref() {
  // @@protoc_insertion_point(field_release:Property.JsonPropertyValue.ref)
  if (_internal_has_ref()) {
    clear_has_ValueType();
    ::Property::PropertyIdentifier* temp = _impl_.ValueType_.ref_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.ValueType_.ref_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::PropertyIdentifier& JsonPropertyValue::_internal_ref() const {
  return _internal_has_ref()
      ? *_impl_.ValueType_.ref_
      : reinterpret_cast< ::Property::PropertyIdentifier&>(::Property::_PropertyIdentifier_default_instance_);
}
inline const ::Property::PropertyIdentifier& JsonPropertyValue::ref() const {
  // @@protoc_insertion_point(field_get:Property.JsonPropertyValue.ref)
  return _internal_ref();
}
inline ::Property::PropertyIdentifier* JsonPropertyValue::unsafe_arena_release_ref() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.JsonPropertyValue.ref)
  if (_internal_has_ref()) {
    clear_has_ValueType();
    ::Property::PropertyIdentifier* temp = _impl_.ValueType_.ref_;
    _impl_.ValueType_.ref_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void JsonPropertyValue::unsafe_arena_set_allocated_ref(::Property::PropertyIdentifier* ref) {
  clear_ValueType();
  if (ref) {
    set_has_ref();
    _impl_.ValueType_.ref_ = ref;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.JsonPropertyValue.ref)
}
inline ::Property::PropertyIdentifier* JsonPropertyValue::_internal_mutable_ref() {
  if (!_internal_has_ref()) {
    clear_ValueType();
    set_has_ref();
    _impl_.ValueType_.ref_ = CreateMaybeMessage< ::Property::PropertyIdentifier >(GetArenaForAllocation());
  }
  return _impl_.ValueType_.ref_;
}
inline ::Property::PropertyIdentifier* JsonPropertyValue::mutable_ref() {
  ::Property::PropertyIdentifier* _msg = _internal_mutable_ref();
  // @@protoc_insertion_point(field_mutable:Property.JsonPropertyValue.ref)
  return _msg;
}

// string expr = 3;
inline bool JsonPropertyValue::_internal_has_expr() const {
  return ValueType_case() == kExpr;
}
inline bool JsonPropertyValue::has_expr() const {
  return _internal_has_expr();
}
inline void JsonPropertyValue::set_has_expr() {
  _impl_._oneof_case_[0] = kExpr;
}
inline void JsonPropertyValue::clear_expr() {
  if (_internal_has_expr()) {
    _impl_.ValueType_.expr_.Destroy();
    clear_has_ValueType();
  }
}
inline const std::string& JsonPropertyValue::expr() const {
  // @@protoc_insertion_point(field_get:Property.JsonPropertyValue.expr)
  return _internal_expr();
}
template <typename ArgT0, typename... ArgT>
inline void JsonPropertyValue::set_expr(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_expr()) {
    clear_ValueType();
    set_has_expr();
    _impl_.ValueType_.expr_.InitDefault();
  }
  _impl_.ValueType_.expr_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Property.JsonPropertyValue.expr)
}
inline std::string* JsonPropertyValue::mutable_expr() {
  std::string* _s = _internal_mutable_expr();
  // @@protoc_insertion_point(field_mutable:Property.JsonPropertyValue.expr)
  return _s;
}
inline const std::string& JsonPropertyValue::_internal_expr() const {
  if (_internal_has_expr()) {
    return _impl_.ValueType_.expr_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void JsonPropertyValue::_internal_set_expr(const std::string& value) {
  if (!_internal_has_expr()) {
    clear_ValueType();
    set_has_expr();
    _impl_.ValueType_.expr_.InitDefault();
  }
  _impl_.ValueType_.expr_.Set(value, GetArenaForAllocation());
}
inline std::string* JsonPropertyValue::_internal_mutable_expr() {
  if (!_internal_has_expr()) {
    clear_ValueType();
    set_has_expr();
    _impl_.ValueType_.expr_.InitDefault();
  }
  return _impl_.ValueType_.expr_.Mutable(      GetArenaForAllocation());
}
inline std::string* JsonPropertyValue::release_expr() {
  // @@protoc_insertion_point(field_release:Property.JsonPropertyValue.expr)
  if (_internal_has_expr()) {
    clear_has_ValueType();
    return _impl_.ValueType_.expr_.Release();
  } else {
    return nullptr;
  }
}
inline void JsonPropertyValue::set_allocated_expr(std::string* expr) {
  if (has_ValueType()) {
    clear_ValueType();
  }
  if (expr != nullptr) {
    set_has_expr();
    _impl_.ValueType_.expr_.InitAllocated(expr, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:Property.JsonPropertyValue.expr)
}

// bool useDefault = 4;
inline bool JsonPropertyValue::_internal_has_usedefault() const {
  return ValueType_case() == kUseDefault;
}
inline bool JsonPropertyValue::has_usedefault() const {
  return _internal_has_usedefault();
}
inline void JsonPropertyValue::set_has_usedefault() {
  _impl_._oneof_case_[0] = kUseDefault;
}
inline void JsonPropertyValue::clear_usedefault() {
  if (_internal_has_usedefault()) {
    _impl_.ValueType_.usedefault_ = false;
    clear_has_ValueType();
  }
}
inline bool JsonPropertyValue::_internal_usedefault() const {
  if (_internal_has_usedefault()) {
    return _impl_.ValueType_.usedefault_;
  }
  return false;
}
inline void JsonPropertyValue::_internal_set_usedefault(bool value) {
  if (!_internal_has_usedefault()) {
    clear_ValueType();
    set_has_usedefault();
  }
  _impl_.ValueType_.usedefault_ = value;
}
inline bool JsonPropertyValue::usedefault() const {
  // @@protoc_insertion_point(field_get:Property.JsonPropertyValue.useDefault)
  return _internal_usedefault();
}
inline void JsonPropertyValue::set_usedefault(bool value) {
  _internal_set_usedefault(value);
  // @@protoc_insertion_point(field_set:Property.JsonPropertyValue.useDefault)
}

// .Property.CustomGeneratorValue custom = 10;
inline bool JsonPropertyValue::_internal_has_custom() const {
  return ValueType_case() == kCustom;
}
inline bool JsonPropertyValue::has_custom() const {
  return _internal_has_custom();
}
inline void JsonPropertyValue::set_has_custom() {
  _impl_._oneof_case_[0] = kCustom;
}
inline void JsonPropertyValue::clear_custom() {
  if (_internal_has_custom()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.ValueType_.custom_;
    }
    clear_has_ValueType();
  }
}
inline ::Property::CustomGeneratorValue* JsonPropertyValue::release_custom() {
  // @@protoc_insertion_point(field_release:Property.JsonPropertyValue.custom)
  if (_internal_has_custom()) {
    clear_has_ValueType();
    ::Property::CustomGeneratorValue* temp = _impl_.ValueType_.custom_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.ValueType_.custom_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::CustomGeneratorValue& JsonPropertyValue::_internal_custom() const {
  return _internal_has_custom()
      ? *_impl_.ValueType_.custom_
      : reinterpret_cast< ::Property::CustomGeneratorValue&>(::Property::_CustomGeneratorValue_default_instance_);
}
inline const ::Property::CustomGeneratorValue& JsonPropertyValue::custom() const {
  // @@protoc_insertion_point(field_get:Property.JsonPropertyValue.custom)
  return _internal_custom();
}
inline ::Property::CustomGeneratorValue* JsonPropertyValue::unsafe_arena_release_custom() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.JsonPropertyValue.custom)
  if (_internal_has_custom()) {
    clear_has_ValueType();
    ::Property::CustomGeneratorValue* temp = _impl_.ValueType_.custom_;
    _impl_.ValueType_.custom_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void JsonPropertyValue::unsafe_arena_set_allocated_custom(::Property::CustomGeneratorValue* custom) {
  clear_ValueType();
  if (custom) {
    set_has_custom();
    _impl_.ValueType_.custom_ = custom;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.JsonPropertyValue.custom)
}
inline ::Property::CustomGeneratorValue* JsonPropertyValue::_internal_mutable_custom() {
  if (!_internal_has_custom()) {
    clear_ValueType();
    set_has_custom();
    _impl_.ValueType_.custom_ = CreateMaybeMessage< ::Property::CustomGeneratorValue >(GetArenaForAllocation());
  }
  return _impl_.ValueType_.custom_;
}
inline ::Property::CustomGeneratorValue* JsonPropertyValue::mutable_custom() {
  ::Property::CustomGeneratorValue* _msg = _internal_mutable_custom();
  // @@protoc_insertion_point(field_mutable:Property.JsonPropertyValue.custom)
  return _msg;
}

inline bool JsonPropertyValue::has_ValueType() const {
  return ValueType_case() != VALUETYPE_NOT_SET;
}
inline void JsonPropertyValue::clear_has_ValueType() {
  _impl_._oneof_case_[0] = VALUETYPE_NOT_SET;
}
inline JsonPropertyValue::ValueTypeCase JsonPropertyValue::ValueType_case() const {
  return JsonPropertyValue::ValueTypeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// JsonPropertyDeclaration

// string defaultJson = 2;
inline void JsonPropertyDeclaration::clear_defaultjson() {
  _impl_.defaultjson_.ClearToEmpty();
}
inline const std::string& JsonPropertyDeclaration::defaultjson() const {
  // @@protoc_insertion_point(field_get:Property.JsonPropertyDeclaration.defaultJson)
  return _internal_defaultjson();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void JsonPropertyDeclaration::set_defaultjson(ArgT0&& arg0, ArgT... args) {
 
 _impl_.defaultjson_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Property.JsonPropertyDeclaration.defaultJson)
}
inline std::string* JsonPropertyDeclaration::mutable_defaultjson() {
  std::string* _s = _internal_mutable_defaultjson();
  // @@protoc_insertion_point(field_mutable:Property.JsonPropertyDeclaration.defaultJson)
  return _s;
}
inline const std::string& JsonPropertyDeclaration::_internal_defaultjson() const {
  return _impl_.defaultjson_.Get();
}
inline void JsonPropertyDeclaration::_internal_set_defaultjson(const std::string& value) {
  
  _impl_.defaultjson_.Set(value, GetArenaForAllocation());
}
inline std::string* JsonPropertyDeclaration::_internal_mutable_defaultjson() {
  
  return _impl_.defaultjson_.Mutable(GetArenaForAllocation());
}
inline std::string* JsonPropertyDeclaration::release_defaultjson() {
  // @@protoc_insertion_point(field_release:Property.JsonPropertyDeclaration.defaultJson)
  return _impl_.defaultjson_.Release();
}
inline void JsonPropertyDeclaration::set_allocated_defaultjson(std::string* defaultjson) {
  if (defaultjson != nullptr) {
    
  } else {
    
  }
  _impl_.defaultjson_.SetAllocated(defaultjson, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.defaultjson_.IsDefault()) {
    _impl_.defaultjson_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Property.JsonPropertyDeclaration.defaultJson)
}

// .Property.JsonPropertyMetadata meta = 1;
inline bool JsonPropertyDeclaration::_internal_has_meta() const {
  return this != internal_default_instance() && _impl_.meta_ != nullptr;
}
inline bool JsonPropertyDeclaration::has_meta() const {
  return _internal_has_meta();
}
inline void JsonPropertyDeclaration::clear_meta() {
  if (GetArenaForAllocation() == nullptr && _impl_.meta_ != nullptr) {
    delete _impl_.meta_;
  }
  _impl_.meta_ = nullptr;
}
inline const ::Property::JsonPropertyMetadata& JsonPropertyDeclaration::_internal_meta() const {
  const ::Property::JsonPropertyMetadata* p = _impl_.meta_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::JsonPropertyMetadata&>(
      ::Property::_JsonPropertyMetadata_default_instance_);
}
inline const ::Property::JsonPropertyMetadata& JsonPropertyDeclaration::meta() const {
  // @@protoc_insertion_point(field_get:Property.JsonPropertyDeclaration.meta)
  return _internal_meta();
}
inline void JsonPropertyDeclaration::unsafe_arena_set_allocated_meta(
    ::Property::JsonPropertyMetadata* meta) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.meta_);
  }
  _impl_.meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.JsonPropertyDeclaration.meta)
}
inline ::Property::JsonPropertyMetadata* JsonPropertyDeclaration::release_meta() {
  
  ::Property::JsonPropertyMetadata* temp = _impl_.meta_;
  _impl_.meta_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::JsonPropertyMetadata* JsonPropertyDeclaration::unsafe_arena_release_meta() {
  // @@protoc_insertion_point(field_release:Property.JsonPropertyDeclaration.meta)
  
  ::Property::JsonPropertyMetadata* temp = _impl_.meta_;
  _impl_.meta_ = nullptr;
  return temp;
}
inline ::Property::JsonPropertyMetadata* JsonPropertyDeclaration::_internal_mutable_meta() {
  
  if (_impl_.meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::JsonPropertyMetadata>(GetArenaForAllocation());
    _impl_.meta_ = p;
  }
  return _impl_.meta_;
}
inline ::Property::JsonPropertyMetadata* JsonPropertyDeclaration::mutable_meta() {
  ::Property::JsonPropertyMetadata* _msg = _internal_mutable_meta();
  // @@protoc_insertion_point(field_mutable:Property.JsonPropertyDeclaration.meta)
  return _msg;
}
inline void JsonPropertyDeclaration::set_allocated_meta(::Property::JsonPropertyMetadata* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.meta_;
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(meta);
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:Property.JsonPropertyDeclaration.meta)
}

// -------------------------------------------------------------------

// JsonEditingMetadata

// -------------------------------------------------------------------

// JsonGeneratorMetadata

// .Property.GeneratorMetadata base = 1;
inline bool JsonGeneratorMetadata::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool JsonGeneratorMetadata::has_base() const {
  return _internal_has_base();
}
inline void JsonGeneratorMetadata::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
inline const ::Property::GeneratorMetadata& JsonGeneratorMetadata::_internal_base() const {
  const ::Property::GeneratorMetadata* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::GeneratorMetadata&>(
      ::Property::_GeneratorMetadata_default_instance_);
}
inline const ::Property::GeneratorMetadata& JsonGeneratorMetadata::base() const {
  // @@protoc_insertion_point(field_get:Property.JsonGeneratorMetadata.base)
  return _internal_base();
}
inline void JsonGeneratorMetadata::unsafe_arena_set_allocated_base(
    ::Property::GeneratorMetadata* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.JsonGeneratorMetadata.base)
}
inline ::Property::GeneratorMetadata* JsonGeneratorMetadata::release_base() {
  
  ::Property::GeneratorMetadata* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::GeneratorMetadata* JsonGeneratorMetadata::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:Property.JsonGeneratorMetadata.base)
  
  ::Property::GeneratorMetadata* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::Property::GeneratorMetadata* JsonGeneratorMetadata::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::GeneratorMetadata>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::Property::GeneratorMetadata* JsonGeneratorMetadata::mutable_base() {
  ::Property::GeneratorMetadata* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:Property.JsonGeneratorMetadata.base)
  return _msg;
}
inline void JsonGeneratorMetadata::set_allocated_base(::Property::GeneratorMetadata* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:Property.JsonGeneratorMetadata.base)
}

// optional .Property.JsonEditingMetadata edit = 2;
inline bool JsonGeneratorMetadata::_internal_has_edit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.edit_ != nullptr);
  return value;
}
inline bool JsonGeneratorMetadata::has_edit() const {
  return _internal_has_edit();
}
inline void JsonGeneratorMetadata::clear_edit() {
  if (_impl_.edit_ != nullptr) _impl_.edit_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::Property::JsonEditingMetadata& JsonGeneratorMetadata::_internal_edit() const {
  const ::Property::JsonEditingMetadata* p = _impl_.edit_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::JsonEditingMetadata&>(
      ::Property::_JsonEditingMetadata_default_instance_);
}
inline const ::Property::JsonEditingMetadata& JsonGeneratorMetadata::edit() const {
  // @@protoc_insertion_point(field_get:Property.JsonGeneratorMetadata.edit)
  return _internal_edit();
}
inline void JsonGeneratorMetadata::unsafe_arena_set_allocated_edit(
    ::Property::JsonEditingMetadata* edit) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.edit_);
  }
  _impl_.edit_ = edit;
  if (edit) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.JsonGeneratorMetadata.edit)
}
inline ::Property::JsonEditingMetadata* JsonGeneratorMetadata::release_edit() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Property::JsonEditingMetadata* temp = _impl_.edit_;
  _impl_.edit_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::JsonEditingMetadata* JsonGeneratorMetadata::unsafe_arena_release_edit() {
  // @@protoc_insertion_point(field_release:Property.JsonGeneratorMetadata.edit)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Property::JsonEditingMetadata* temp = _impl_.edit_;
  _impl_.edit_ = nullptr;
  return temp;
}
inline ::Property::JsonEditingMetadata* JsonGeneratorMetadata::_internal_mutable_edit() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.edit_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::JsonEditingMetadata>(GetArenaForAllocation());
    _impl_.edit_ = p;
  }
  return _impl_.edit_;
}
inline ::Property::JsonEditingMetadata* JsonGeneratorMetadata::mutable_edit() {
  ::Property::JsonEditingMetadata* _msg = _internal_mutable_edit();
  // @@protoc_insertion_point(field_mutable:Property.JsonGeneratorMetadata.edit)
  return _msg;
}
inline void JsonGeneratorMetadata::set_allocated_edit(::Property::JsonEditingMetadata* edit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.edit_;
  }
  if (edit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(edit);
    if (message_arena != submessage_arena) {
      edit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, edit, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.edit_ = edit;
  // @@protoc_insertion_point(field_set_allocated:Property.JsonGeneratorMetadata.edit)
}

// -------------------------------------------------------------------

// JsonPropertyMetadata

// .Property.PropertyMetadata base = 1;
inline bool JsonPropertyMetadata::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool JsonPropertyMetadata::has_base() const {
  return _internal_has_base();
}
inline void JsonPropertyMetadata::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
inline const ::Property::PropertyMetadata& JsonPropertyMetadata::_internal_base() const {
  const ::Property::PropertyMetadata* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::PropertyMetadata&>(
      ::Property::_PropertyMetadata_default_instance_);
}
inline const ::Property::PropertyMetadata& JsonPropertyMetadata::base() const {
  // @@protoc_insertion_point(field_get:Property.JsonPropertyMetadata.base)
  return _internal_base();
}
inline void JsonPropertyMetadata::unsafe_arena_set_allocated_base(
    ::Property::PropertyMetadata* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.JsonPropertyMetadata.base)
}
inline ::Property::PropertyMetadata* JsonPropertyMetadata::release_base() {
  
  ::Property::PropertyMetadata* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::PropertyMetadata* JsonPropertyMetadata::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:Property.JsonPropertyMetadata.base)
  
  ::Property::PropertyMetadata* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::Property::PropertyMetadata* JsonPropertyMetadata::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::PropertyMetadata>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::Property::PropertyMetadata* JsonPropertyMetadata::mutable_base() {
  ::Property::PropertyMetadata* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:Property.JsonPropertyMetadata.base)
  return _msg;
}
inline void JsonPropertyMetadata::set_allocated_base(::Property::PropertyMetadata* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:Property.JsonPropertyMetadata.base)
}

// optional .Property.JsonEditingMetadata edit = 2;
inline bool JsonPropertyMetadata::_internal_has_edit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.edit_ != nullptr);
  return value;
}
inline bool JsonPropertyMetadata::has_edit() const {
  return _internal_has_edit();
}
inline void JsonPropertyMetadata::clear_edit() {
  if (_impl_.edit_ != nullptr) _impl_.edit_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::Property::JsonEditingMetadata& JsonPropertyMetadata::_internal_edit() const {
  const ::Property::JsonEditingMetadata* p = _impl_.edit_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::JsonEditingMetadata&>(
      ::Property::_JsonEditingMetadata_default_instance_);
}
inline const ::Property::JsonEditingMetadata& JsonPropertyMetadata::edit() const {
  // @@protoc_insertion_point(field_get:Property.JsonPropertyMetadata.edit)
  return _internal_edit();
}
inline void JsonPropertyMetadata::unsafe_arena_set_allocated_edit(
    ::Property::JsonEditingMetadata* edit) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.edit_);
  }
  _impl_.edit_ = edit;
  if (edit) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.JsonPropertyMetadata.edit)
}
inline ::Property::JsonEditingMetadata* JsonPropertyMetadata::release_edit() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Property::JsonEditingMetadata* temp = _impl_.edit_;
  _impl_.edit_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::JsonEditingMetadata* JsonPropertyMetadata::unsafe_arena_release_edit() {
  // @@protoc_insertion_point(field_release:Property.JsonPropertyMetadata.edit)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Property::JsonEditingMetadata* temp = _impl_.edit_;
  _impl_.edit_ = nullptr;
  return temp;
}
inline ::Property::JsonEditingMetadata* JsonPropertyMetadata::_internal_mutable_edit() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.edit_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::JsonEditingMetadata>(GetArenaForAllocation());
    _impl_.edit_ = p;
  }
  return _impl_.edit_;
}
inline ::Property::JsonEditingMetadata* JsonPropertyMetadata::mutable_edit() {
  ::Property::JsonEditingMetadata* _msg = _internal_mutable_edit();
  // @@protoc_insertion_point(field_mutable:Property.JsonPropertyMetadata.edit)
  return _msg;
}
inline void JsonPropertyMetadata::set_allocated_edit(::Property::JsonEditingMetadata* edit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.edit_;
  }
  if (edit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(edit);
    if (message_arena != submessage_arena) {
      edit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, edit, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.edit_ = edit;
  // @@protoc_insertion_point(field_set_allocated:Property.JsonPropertyMetadata.edit)
}

// -------------------------------------------------------------------

// TransformSet

// .Property.TransformSetSRT srt = 1;
inline bool TransformSet::_internal_has_srt() const {
  return SetType_case() == kSrt;
}
inline bool TransformSet::has_srt() const {
  return _internal_has_srt();
}
inline void TransformSet::set_has_srt() {
  _impl_._oneof_case_[0] = kSrt;
}
inline void TransformSet::clear_srt() {
  if (_internal_has_srt()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.SetType_.srt_;
    }
    clear_has_SetType();
  }
}
inline ::Property::TransformSetSRT* TransformSet::release_srt() {
  // @@protoc_insertion_point(field_release:Property.TransformSet.srt)
  if (_internal_has_srt()) {
    clear_has_SetType();
    ::Property::TransformSetSRT* temp = _impl_.SetType_.srt_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.SetType_.srt_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::TransformSetSRT& TransformSet::_internal_srt() const {
  return _internal_has_srt()
      ? *_impl_.SetType_.srt_
      : reinterpret_cast< ::Property::TransformSetSRT&>(::Property::_TransformSetSRT_default_instance_);
}
inline const ::Property::TransformSetSRT& TransformSet::srt() const {
  // @@protoc_insertion_point(field_get:Property.TransformSet.srt)
  return _internal_srt();
}
inline ::Property::TransformSetSRT* TransformSet::unsafe_arena_release_srt() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.TransformSet.srt)
  if (_internal_has_srt()) {
    clear_has_SetType();
    ::Property::TransformSetSRT* temp = _impl_.SetType_.srt_;
    _impl_.SetType_.srt_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TransformSet::unsafe_arena_set_allocated_srt(::Property::TransformSetSRT* srt) {
  clear_SetType();
  if (srt) {
    set_has_srt();
    _impl_.SetType_.srt_ = srt;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.TransformSet.srt)
}
inline ::Property::TransformSetSRT* TransformSet::_internal_mutable_srt() {
  if (!_internal_has_srt()) {
    clear_SetType();
    set_has_srt();
    _impl_.SetType_.srt_ = CreateMaybeMessage< ::Property::TransformSetSRT >(GetArenaForAllocation());
  }
  return _impl_.SetType_.srt_;
}
inline ::Property::TransformSetSRT* TransformSet::mutable_srt() {
  ::Property::TransformSetSRT* _msg = _internal_mutable_srt();
  // @@protoc_insertion_point(field_mutable:Property.TransformSet.srt)
  return _msg;
}

// .Property.TransformSetSQT sqt = 2;
inline bool TransformSet::_internal_has_sqt() const {
  return SetType_case() == kSqt;
}
inline bool TransformSet::has_sqt() const {
  return _internal_has_sqt();
}
inline void TransformSet::set_has_sqt() {
  _impl_._oneof_case_[0] = kSqt;
}
inline void TransformSet::clear_sqt() {
  if (_internal_has_sqt()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.SetType_.sqt_;
    }
    clear_has_SetType();
  }
}
inline ::Property::TransformSetSQT* TransformSet::release_sqt() {
  // @@protoc_insertion_point(field_release:Property.TransformSet.sqt)
  if (_internal_has_sqt()) {
    clear_has_SetType();
    ::Property::TransformSetSQT* temp = _impl_.SetType_.sqt_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.SetType_.sqt_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::TransformSetSQT& TransformSet::_internal_sqt() const {
  return _internal_has_sqt()
      ? *_impl_.SetType_.sqt_
      : reinterpret_cast< ::Property::TransformSetSQT&>(::Property::_TransformSetSQT_default_instance_);
}
inline const ::Property::TransformSetSQT& TransformSet::sqt() const {
  // @@protoc_insertion_point(field_get:Property.TransformSet.sqt)
  return _internal_sqt();
}
inline ::Property::TransformSetSQT* TransformSet::unsafe_arena_release_sqt() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.TransformSet.sqt)
  if (_internal_has_sqt()) {
    clear_has_SetType();
    ::Property::TransformSetSQT* temp = _impl_.SetType_.sqt_;
    _impl_.SetType_.sqt_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TransformSet::unsafe_arena_set_allocated_sqt(::Property::TransformSetSQT* sqt) {
  clear_SetType();
  if (sqt) {
    set_has_sqt();
    _impl_.SetType_.sqt_ = sqt;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.TransformSet.sqt)
}
inline ::Property::TransformSetSQT* TransformSet::_internal_mutable_sqt() {
  if (!_internal_has_sqt()) {
    clear_SetType();
    set_has_sqt();
    _impl_.SetType_.sqt_ = CreateMaybeMessage< ::Property::TransformSetSQT >(GetArenaForAllocation());
  }
  return _impl_.SetType_.sqt_;
}
inline ::Property::TransformSetSQT* TransformSet::mutable_sqt() {
  ::Property::TransformSetSQT* _msg = _internal_mutable_sqt();
  // @@protoc_insertion_point(field_mutable:Property.TransformSet.sqt)
  return _msg;
}

// .Property.TransformSetLookAt look = 3;
inline bool TransformSet::_internal_has_look() const {
  return SetType_case() == kLook;
}
inline bool TransformSet::has_look() const {
  return _internal_has_look();
}
inline void TransformSet::set_has_look() {
  _impl_._oneof_case_[0] = kLook;
}
inline void TransformSet::clear_look() {
  if (_internal_has_look()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.SetType_.look_;
    }
    clear_has_SetType();
  }
}
inline ::Property::TransformSetLookAt* TransformSet::release_look() {
  // @@protoc_insertion_point(field_release:Property.TransformSet.look)
  if (_internal_has_look()) {
    clear_has_SetType();
    ::Property::TransformSetLookAt* temp = _impl_.SetType_.look_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.SetType_.look_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::TransformSetLookAt& TransformSet::_internal_look() const {
  return _internal_has_look()
      ? *_impl_.SetType_.look_
      : reinterpret_cast< ::Property::TransformSetLookAt&>(::Property::_TransformSetLookAt_default_instance_);
}
inline const ::Property::TransformSetLookAt& TransformSet::look() const {
  // @@protoc_insertion_point(field_get:Property.TransformSet.look)
  return _internal_look();
}
inline ::Property::TransformSetLookAt* TransformSet::unsafe_arena_release_look() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.TransformSet.look)
  if (_internal_has_look()) {
    clear_has_SetType();
    ::Property::TransformSetLookAt* temp = _impl_.SetType_.look_;
    _impl_.SetType_.look_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TransformSet::unsafe_arena_set_allocated_look(::Property::TransformSetLookAt* look) {
  clear_SetType();
  if (look) {
    set_has_look();
    _impl_.SetType_.look_ = look;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.TransformSet.look)
}
inline ::Property::TransformSetLookAt* TransformSet::_internal_mutable_look() {
  if (!_internal_has_look()) {
    clear_SetType();
    set_has_look();
    _impl_.SetType_.look_ = CreateMaybeMessage< ::Property::TransformSetLookAt >(GetArenaForAllocation());
  }
  return _impl_.SetType_.look_;
}
inline ::Property::TransformSetLookAt* TransformSet::mutable_look() {
  ::Property::TransformSetLookAt* _msg = _internal_mutable_look();
  // @@protoc_insertion_point(field_mutable:Property.TransformSet.look)
  return _msg;
}

// .Property.PropertyIdentifier ref = 5;
inline bool TransformSet::_internal_has_ref() const {
  return SetType_case() == kRef;
}
inline bool TransformSet::has_ref() const {
  return _internal_has_ref();
}
inline void TransformSet::set_has_ref() {
  _impl_._oneof_case_[0] = kRef;
}
inline void TransformSet::clear_ref() {
  if (_internal_has_ref()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.SetType_.ref_;
    }
    clear_has_SetType();
  }
}
inline ::Property::PropertyIdentifier* TransformSet::release_ref() {
  // @@protoc_insertion_point(field_release:Property.TransformSet.ref)
  if (_internal_has_ref()) {
    clear_has_SetType();
    ::Property::PropertyIdentifier* temp = _impl_.SetType_.ref_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.SetType_.ref_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::PropertyIdentifier& TransformSet::_internal_ref() const {
  return _internal_has_ref()
      ? *_impl_.SetType_.ref_
      : reinterpret_cast< ::Property::PropertyIdentifier&>(::Property::_PropertyIdentifier_default_instance_);
}
inline const ::Property::PropertyIdentifier& TransformSet::ref() const {
  // @@protoc_insertion_point(field_get:Property.TransformSet.ref)
  return _internal_ref();
}
inline ::Property::PropertyIdentifier* TransformSet::unsafe_arena_release_ref() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.TransformSet.ref)
  if (_internal_has_ref()) {
    clear_has_SetType();
    ::Property::PropertyIdentifier* temp = _impl_.SetType_.ref_;
    _impl_.SetType_.ref_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TransformSet::unsafe_arena_set_allocated_ref(::Property::PropertyIdentifier* ref) {
  clear_SetType();
  if (ref) {
    set_has_ref();
    _impl_.SetType_.ref_ = ref;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.TransformSet.ref)
}
inline ::Property::PropertyIdentifier* TransformSet::_internal_mutable_ref() {
  if (!_internal_has_ref()) {
    clear_SetType();
    set_has_ref();
    _impl_.SetType_.ref_ = CreateMaybeMessage< ::Property::PropertyIdentifier >(GetArenaForAllocation());
  }
  return _impl_.SetType_.ref_;
}
inline ::Property::PropertyIdentifier* TransformSet::mutable_ref() {
  ::Property::PropertyIdentifier* _msg = _internal_mutable_ref();
  // @@protoc_insertion_point(field_mutable:Property.TransformSet.ref)
  return _msg;
}

// string expr = 6;
inline bool TransformSet::_internal_has_expr() const {
  return SetType_case() == kExpr;
}
inline bool TransformSet::has_expr() const {
  return _internal_has_expr();
}
inline void TransformSet::set_has_expr() {
  _impl_._oneof_case_[0] = kExpr;
}
inline void TransformSet::clear_expr() {
  if (_internal_has_expr()) {
    _impl_.SetType_.expr_.Destroy();
    clear_has_SetType();
  }
}
inline const std::string& TransformSet::expr() const {
  // @@protoc_insertion_point(field_get:Property.TransformSet.expr)
  return _internal_expr();
}
template <typename ArgT0, typename... ArgT>
inline void TransformSet::set_expr(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_expr()) {
    clear_SetType();
    set_has_expr();
    _impl_.SetType_.expr_.InitDefault();
  }
  _impl_.SetType_.expr_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Property.TransformSet.expr)
}
inline std::string* TransformSet::mutable_expr() {
  std::string* _s = _internal_mutable_expr();
  // @@protoc_insertion_point(field_mutable:Property.TransformSet.expr)
  return _s;
}
inline const std::string& TransformSet::_internal_expr() const {
  if (_internal_has_expr()) {
    return _impl_.SetType_.expr_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TransformSet::_internal_set_expr(const std::string& value) {
  if (!_internal_has_expr()) {
    clear_SetType();
    set_has_expr();
    _impl_.SetType_.expr_.InitDefault();
  }
  _impl_.SetType_.expr_.Set(value, GetArenaForAllocation());
}
inline std::string* TransformSet::_internal_mutable_expr() {
  if (!_internal_has_expr()) {
    clear_SetType();
    set_has_expr();
    _impl_.SetType_.expr_.InitDefault();
  }
  return _impl_.SetType_.expr_.Mutable(      GetArenaForAllocation());
}
inline std::string* TransformSet::release_expr() {
  // @@protoc_insertion_point(field_release:Property.TransformSet.expr)
  if (_internal_has_expr()) {
    clear_has_SetType();
    return _impl_.SetType_.expr_.Release();
  } else {
    return nullptr;
  }
}
inline void TransformSet::set_allocated_expr(std::string* expr) {
  if (has_SetType()) {
    clear_SetType();
  }
  if (expr != nullptr) {
    set_has_expr();
    _impl_.SetType_.expr_.InitAllocated(expr, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:Property.TransformSet.expr)
}

// bool useDefault = 7;
inline bool TransformSet::_internal_has_usedefault() const {
  return SetType_case() == kUseDefault;
}
inline bool TransformSet::has_usedefault() const {
  return _internal_has_usedefault();
}
inline void TransformSet::set_has_usedefault() {
  _impl_._oneof_case_[0] = kUseDefault;
}
inline void TransformSet::clear_usedefault() {
  if (_internal_has_usedefault()) {
    _impl_.SetType_.usedefault_ = false;
    clear_has_SetType();
  }
}
inline bool TransformSet::_internal_usedefault() const {
  if (_internal_has_usedefault()) {
    return _impl_.SetType_.usedefault_;
  }
  return false;
}
inline void TransformSet::_internal_set_usedefault(bool value) {
  if (!_internal_has_usedefault()) {
    clear_SetType();
    set_has_usedefault();
  }
  _impl_.SetType_.usedefault_ = value;
}
inline bool TransformSet::usedefault() const {
  // @@protoc_insertion_point(field_get:Property.TransformSet.useDefault)
  return _internal_usedefault();
}
inline void TransformSet::set_usedefault(bool value) {
  _internal_set_usedefault(value);
  // @@protoc_insertion_point(field_set:Property.TransformSet.useDefault)
}

// bool useSource = 8;
inline bool TransformSet::_internal_has_usesource() const {
  return SetType_case() == kUseSource;
}
inline bool TransformSet::has_usesource() const {
  return _internal_has_usesource();
}
inline void TransformSet::set_has_usesource() {
  _impl_._oneof_case_[0] = kUseSource;
}
inline void TransformSet::clear_usesource() {
  if (_internal_has_usesource()) {
    _impl_.SetType_.usesource_ = false;
    clear_has_SetType();
  }
}
inline bool TransformSet::_internal_usesource() const {
  if (_internal_has_usesource()) {
    return _impl_.SetType_.usesource_;
  }
  return false;
}
inline void TransformSet::_internal_set_usesource(bool value) {
  if (!_internal_has_usesource()) {
    clear_SetType();
    set_has_usesource();
  }
  _impl_.SetType_.usesource_ = value;
}
inline bool TransformSet::usesource() const {
  // @@protoc_insertion_point(field_get:Property.TransformSet.useSource)
  return _internal_usesource();
}
inline void TransformSet::set_usesource(bool value) {
  _internal_set_usesource(value);
  // @@protoc_insertion_point(field_set:Property.TransformSet.useSource)
}

// .Property.TransformSetInterpolatorSRT interpSrt = 9;
inline bool TransformSet::_internal_has_interpsrt() const {
  return SetType_case() == kInterpSrt;
}
inline bool TransformSet::has_interpsrt() const {
  return _internal_has_interpsrt();
}
inline void TransformSet::set_has_interpsrt() {
  _impl_._oneof_case_[0] = kInterpSrt;
}
inline void TransformSet::clear_interpsrt() {
  if (_internal_has_interpsrt()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.SetType_.interpsrt_;
    }
    clear_has_SetType();
  }
}
inline ::Property::TransformSetInterpolatorSRT* TransformSet::release_interpsrt() {
  // @@protoc_insertion_point(field_release:Property.TransformSet.interpSrt)
  if (_internal_has_interpsrt()) {
    clear_has_SetType();
    ::Property::TransformSetInterpolatorSRT* temp = _impl_.SetType_.interpsrt_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.SetType_.interpsrt_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::TransformSetInterpolatorSRT& TransformSet::_internal_interpsrt() const {
  return _internal_has_interpsrt()
      ? *_impl_.SetType_.interpsrt_
      : reinterpret_cast< ::Property::TransformSetInterpolatorSRT&>(::Property::_TransformSetInterpolatorSRT_default_instance_);
}
inline const ::Property::TransformSetInterpolatorSRT& TransformSet::interpsrt() const {
  // @@protoc_insertion_point(field_get:Property.TransformSet.interpSrt)
  return _internal_interpsrt();
}
inline ::Property::TransformSetInterpolatorSRT* TransformSet::unsafe_arena_release_interpsrt() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.TransformSet.interpSrt)
  if (_internal_has_interpsrt()) {
    clear_has_SetType();
    ::Property::TransformSetInterpolatorSRT* temp = _impl_.SetType_.interpsrt_;
    _impl_.SetType_.interpsrt_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TransformSet::unsafe_arena_set_allocated_interpsrt(::Property::TransformSetInterpolatorSRT* interpsrt) {
  clear_SetType();
  if (interpsrt) {
    set_has_interpsrt();
    _impl_.SetType_.interpsrt_ = interpsrt;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.TransformSet.interpSrt)
}
inline ::Property::TransformSetInterpolatorSRT* TransformSet::_internal_mutable_interpsrt() {
  if (!_internal_has_interpsrt()) {
    clear_SetType();
    set_has_interpsrt();
    _impl_.SetType_.interpsrt_ = CreateMaybeMessage< ::Property::TransformSetInterpolatorSRT >(GetArenaForAllocation());
  }
  return _impl_.SetType_.interpsrt_;
}
inline ::Property::TransformSetInterpolatorSRT* TransformSet::mutable_interpsrt() {
  ::Property::TransformSetInterpolatorSRT* _msg = _internal_mutable_interpsrt();
  // @@protoc_insertion_point(field_mutable:Property.TransformSet.interpSrt)
  return _msg;
}

// .Property.TransformSetInterpolatorSQT interpSqt = 10;
inline bool TransformSet::_internal_has_interpsqt() const {
  return SetType_case() == kInterpSqt;
}
inline bool TransformSet::has_interpsqt() const {
  return _internal_has_interpsqt();
}
inline void TransformSet::set_has_interpsqt() {
  _impl_._oneof_case_[0] = kInterpSqt;
}
inline void TransformSet::clear_interpsqt() {
  if (_internal_has_interpsqt()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.SetType_.interpsqt_;
    }
    clear_has_SetType();
  }
}
inline ::Property::TransformSetInterpolatorSQT* TransformSet::release_interpsqt() {
  // @@protoc_insertion_point(field_release:Property.TransformSet.interpSqt)
  if (_internal_has_interpsqt()) {
    clear_has_SetType();
    ::Property::TransformSetInterpolatorSQT* temp = _impl_.SetType_.interpsqt_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.SetType_.interpsqt_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::TransformSetInterpolatorSQT& TransformSet::_internal_interpsqt() const {
  return _internal_has_interpsqt()
      ? *_impl_.SetType_.interpsqt_
      : reinterpret_cast< ::Property::TransformSetInterpolatorSQT&>(::Property::_TransformSetInterpolatorSQT_default_instance_);
}
inline const ::Property::TransformSetInterpolatorSQT& TransformSet::interpsqt() const {
  // @@protoc_insertion_point(field_get:Property.TransformSet.interpSqt)
  return _internal_interpsqt();
}
inline ::Property::TransformSetInterpolatorSQT* TransformSet::unsafe_arena_release_interpsqt() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.TransformSet.interpSqt)
  if (_internal_has_interpsqt()) {
    clear_has_SetType();
    ::Property::TransformSetInterpolatorSQT* temp = _impl_.SetType_.interpsqt_;
    _impl_.SetType_.interpsqt_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TransformSet::unsafe_arena_set_allocated_interpsqt(::Property::TransformSetInterpolatorSQT* interpsqt) {
  clear_SetType();
  if (interpsqt) {
    set_has_interpsqt();
    _impl_.SetType_.interpsqt_ = interpsqt;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.TransformSet.interpSqt)
}
inline ::Property::TransformSetInterpolatorSQT* TransformSet::_internal_mutable_interpsqt() {
  if (!_internal_has_interpsqt()) {
    clear_SetType();
    set_has_interpsqt();
    _impl_.SetType_.interpsqt_ = CreateMaybeMessage< ::Property::TransformSetInterpolatorSQT >(GetArenaForAllocation());
  }
  return _impl_.SetType_.interpsqt_;
}
inline ::Property::TransformSetInterpolatorSQT* TransformSet::mutable_interpsqt() {
  ::Property::TransformSetInterpolatorSQT* _msg = _internal_mutable_interpsqt();
  // @@protoc_insertion_point(field_mutable:Property.TransformSet.interpSqt)
  return _msg;
}

// .Property.TransformSetInterpolatorLookAt interpLook = 11;
inline bool TransformSet::_internal_has_interplook() const {
  return SetType_case() == kInterpLook;
}
inline bool TransformSet::has_interplook() const {
  return _internal_has_interplook();
}
inline void TransformSet::set_has_interplook() {
  _impl_._oneof_case_[0] = kInterpLook;
}
inline void TransformSet::clear_interplook() {
  if (_internal_has_interplook()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.SetType_.interplook_;
    }
    clear_has_SetType();
  }
}
inline ::Property::TransformSetInterpolatorLookAt* TransformSet::release_interplook() {
  // @@protoc_insertion_point(field_release:Property.TransformSet.interpLook)
  if (_internal_has_interplook()) {
    clear_has_SetType();
    ::Property::TransformSetInterpolatorLookAt* temp = _impl_.SetType_.interplook_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.SetType_.interplook_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::TransformSetInterpolatorLookAt& TransformSet::_internal_interplook() const {
  return _internal_has_interplook()
      ? *_impl_.SetType_.interplook_
      : reinterpret_cast< ::Property::TransformSetInterpolatorLookAt&>(::Property::_TransformSetInterpolatorLookAt_default_instance_);
}
inline const ::Property::TransformSetInterpolatorLookAt& TransformSet::interplook() const {
  // @@protoc_insertion_point(field_get:Property.TransformSet.interpLook)
  return _internal_interplook();
}
inline ::Property::TransformSetInterpolatorLookAt* TransformSet::unsafe_arena_release_interplook() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.TransformSet.interpLook)
  if (_internal_has_interplook()) {
    clear_has_SetType();
    ::Property::TransformSetInterpolatorLookAt* temp = _impl_.SetType_.interplook_;
    _impl_.SetType_.interplook_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TransformSet::unsafe_arena_set_allocated_interplook(::Property::TransformSetInterpolatorLookAt* interplook) {
  clear_SetType();
  if (interplook) {
    set_has_interplook();
    _impl_.SetType_.interplook_ = interplook;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.TransformSet.interpLook)
}
inline ::Property::TransformSetInterpolatorLookAt* TransformSet::_internal_mutable_interplook() {
  if (!_internal_has_interplook()) {
    clear_SetType();
    set_has_interplook();
    _impl_.SetType_.interplook_ = CreateMaybeMessage< ::Property::TransformSetInterpolatorLookAt >(GetArenaForAllocation());
  }
  return _impl_.SetType_.interplook_;
}
inline ::Property::TransformSetInterpolatorLookAt* TransformSet::mutable_interplook() {
  ::Property::TransformSetInterpolatorLookAt* _msg = _internal_mutable_interplook();
  // @@protoc_insertion_point(field_mutable:Property.TransformSet.interpLook)
  return _msg;
}

// .Property.CustomGeneratorValue custom = 12;
inline bool TransformSet::_internal_has_custom() const {
  return SetType_case() == kCustom;
}
inline bool TransformSet::has_custom() const {
  return _internal_has_custom();
}
inline void TransformSet::set_has_custom() {
  _impl_._oneof_case_[0] = kCustom;
}
inline void TransformSet::clear_custom() {
  if (_internal_has_custom()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.SetType_.custom_;
    }
    clear_has_SetType();
  }
}
inline ::Property::CustomGeneratorValue* TransformSet::release_custom() {
  // @@protoc_insertion_point(field_release:Property.TransformSet.custom)
  if (_internal_has_custom()) {
    clear_has_SetType();
    ::Property::CustomGeneratorValue* temp = _impl_.SetType_.custom_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.SetType_.custom_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::CustomGeneratorValue& TransformSet::_internal_custom() const {
  return _internal_has_custom()
      ? *_impl_.SetType_.custom_
      : reinterpret_cast< ::Property::CustomGeneratorValue&>(::Property::_CustomGeneratorValue_default_instance_);
}
inline const ::Property::CustomGeneratorValue& TransformSet::custom() const {
  // @@protoc_insertion_point(field_get:Property.TransformSet.custom)
  return _internal_custom();
}
inline ::Property::CustomGeneratorValue* TransformSet::unsafe_arena_release_custom() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.TransformSet.custom)
  if (_internal_has_custom()) {
    clear_has_SetType();
    ::Property::CustomGeneratorValue* temp = _impl_.SetType_.custom_;
    _impl_.SetType_.custom_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TransformSet::unsafe_arena_set_allocated_custom(::Property::CustomGeneratorValue* custom) {
  clear_SetType();
  if (custom) {
    set_has_custom();
    _impl_.SetType_.custom_ = custom;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.TransformSet.custom)
}
inline ::Property::CustomGeneratorValue* TransformSet::_internal_mutable_custom() {
  if (!_internal_has_custom()) {
    clear_SetType();
    set_has_custom();
    _impl_.SetType_.custom_ = CreateMaybeMessage< ::Property::CustomGeneratorValue >(GetArenaForAllocation());
  }
  return _impl_.SetType_.custom_;
}
inline ::Property::CustomGeneratorValue* TransformSet::mutable_custom() {
  ::Property::CustomGeneratorValue* _msg = _internal_mutable_custom();
  // @@protoc_insertion_point(field_mutable:Property.TransformSet.custom)
  return _msg;
}

// .Property.TransformSetConditional conditional = 13;
inline bool TransformSet::_internal_has_conditional() const {
  return SetType_case() == kConditional;
}
inline bool TransformSet::has_conditional() const {
  return _internal_has_conditional();
}
inline void TransformSet::set_has_conditional() {
  _impl_._oneof_case_[0] = kConditional;
}
inline void TransformSet::clear_conditional() {
  if (_internal_has_conditional()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.SetType_.conditional_;
    }
    clear_has_SetType();
  }
}
inline ::Property::TransformSetConditional* TransformSet::release_conditional() {
  // @@protoc_insertion_point(field_release:Property.TransformSet.conditional)
  if (_internal_has_conditional()) {
    clear_has_SetType();
    ::Property::TransformSetConditional* temp = _impl_.SetType_.conditional_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.SetType_.conditional_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::TransformSetConditional& TransformSet::_internal_conditional() const {
  return _internal_has_conditional()
      ? *_impl_.SetType_.conditional_
      : reinterpret_cast< ::Property::TransformSetConditional&>(::Property::_TransformSetConditional_default_instance_);
}
inline const ::Property::TransformSetConditional& TransformSet::conditional() const {
  // @@protoc_insertion_point(field_get:Property.TransformSet.conditional)
  return _internal_conditional();
}
inline ::Property::TransformSetConditional* TransformSet::unsafe_arena_release_conditional() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.TransformSet.conditional)
  if (_internal_has_conditional()) {
    clear_has_SetType();
    ::Property::TransformSetConditional* temp = _impl_.SetType_.conditional_;
    _impl_.SetType_.conditional_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TransformSet::unsafe_arena_set_allocated_conditional(::Property::TransformSetConditional* conditional) {
  clear_SetType();
  if (conditional) {
    set_has_conditional();
    _impl_.SetType_.conditional_ = conditional;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.TransformSet.conditional)
}
inline ::Property::TransformSetConditional* TransformSet::_internal_mutable_conditional() {
  if (!_internal_has_conditional()) {
    clear_SetType();
    set_has_conditional();
    _impl_.SetType_.conditional_ = CreateMaybeMessage< ::Property::TransformSetConditional >(GetArenaForAllocation());
  }
  return _impl_.SetType_.conditional_;
}
inline ::Property::TransformSetConditional* TransformSet::mutable_conditional() {
  ::Property::TransformSetConditional* _msg = _internal_mutable_conditional();
  // @@protoc_insertion_point(field_mutable:Property.TransformSet.conditional)
  return _msg;
}

// .Property.TransformSetApproach approach = 14;
inline bool TransformSet::_internal_has_approach() const {
  return SetType_case() == kApproach;
}
inline bool TransformSet::has_approach() const {
  return _internal_has_approach();
}
inline void TransformSet::set_has_approach() {
  _impl_._oneof_case_[0] = kApproach;
}
inline void TransformSet::clear_approach() {
  if (_internal_has_approach()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.SetType_.approach_;
    }
    clear_has_SetType();
  }
}
inline ::Property::TransformSetApproach* TransformSet::release_approach() {
  // @@protoc_insertion_point(field_release:Property.TransformSet.approach)
  if (_internal_has_approach()) {
    clear_has_SetType();
    ::Property::TransformSetApproach* temp = _impl_.SetType_.approach_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.SetType_.approach_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::TransformSetApproach& TransformSet::_internal_approach() const {
  return _internal_has_approach()
      ? *_impl_.SetType_.approach_
      : reinterpret_cast< ::Property::TransformSetApproach&>(::Property::_TransformSetApproach_default_instance_);
}
inline const ::Property::TransformSetApproach& TransformSet::approach() const {
  // @@protoc_insertion_point(field_get:Property.TransformSet.approach)
  return _internal_approach();
}
inline ::Property::TransformSetApproach* TransformSet::unsafe_arena_release_approach() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.TransformSet.approach)
  if (_internal_has_approach()) {
    clear_has_SetType();
    ::Property::TransformSetApproach* temp = _impl_.SetType_.approach_;
    _impl_.SetType_.approach_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TransformSet::unsafe_arena_set_allocated_approach(::Property::TransformSetApproach* approach) {
  clear_SetType();
  if (approach) {
    set_has_approach();
    _impl_.SetType_.approach_ = approach;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.TransformSet.approach)
}
inline ::Property::TransformSetApproach* TransformSet::_internal_mutable_approach() {
  if (!_internal_has_approach()) {
    clear_SetType();
    set_has_approach();
    _impl_.SetType_.approach_ = CreateMaybeMessage< ::Property::TransformSetApproach >(GetArenaForAllocation());
  }
  return _impl_.SetType_.approach_;
}
inline ::Property::TransformSetApproach* TransformSet::mutable_approach() {
  ::Property::TransformSetApproach* _msg = _internal_mutable_approach();
  // @@protoc_insertion_point(field_mutable:Property.TransformSet.approach)
  return _msg;
}

inline bool TransformSet::has_SetType() const {
  return SetType_case() != SETTYPE_NOT_SET;
}
inline void TransformSet::clear_has_SetType() {
  _impl_._oneof_case_[0] = SETTYPE_NOT_SET;
}
inline TransformSet::SetTypeCase TransformSet::SetType_case() const {
  return TransformSet::SetTypeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// TransformSetSRT

// .Property.VectorPropertyValue scale = 1;
inline bool TransformSetSRT::_internal_has_scale() const {
  return this != internal_default_instance() && _impl_.scale_ != nullptr;
}
inline bool TransformSetSRT::has_scale() const {
  return _internal_has_scale();
}
inline void TransformSetSRT::clear_scale() {
  if (GetArenaForAllocation() == nullptr && _impl_.scale_ != nullptr) {
    delete _impl_.scale_;
  }
  _impl_.scale_ = nullptr;
}
inline const ::Property::VectorPropertyValue& TransformSetSRT::_internal_scale() const {
  const ::Property::VectorPropertyValue* p = _impl_.scale_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::VectorPropertyValue&>(
      ::Property::_VectorPropertyValue_default_instance_);
}
inline const ::Property::VectorPropertyValue& TransformSetSRT::scale() const {
  // @@protoc_insertion_point(field_get:Property.TransformSetSRT.scale)
  return _internal_scale();
}
inline void TransformSetSRT::unsafe_arena_set_allocated_scale(
    ::Property::VectorPropertyValue* scale) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scale_);
  }
  _impl_.scale_ = scale;
  if (scale) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.TransformSetSRT.scale)
}
inline ::Property::VectorPropertyValue* TransformSetSRT::release_scale() {
  
  ::Property::VectorPropertyValue* temp = _impl_.scale_;
  _impl_.scale_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::VectorPropertyValue* TransformSetSRT::unsafe_arena_release_scale() {
  // @@protoc_insertion_point(field_release:Property.TransformSetSRT.scale)
  
  ::Property::VectorPropertyValue* temp = _impl_.scale_;
  _impl_.scale_ = nullptr;
  return temp;
}
inline ::Property::VectorPropertyValue* TransformSetSRT::_internal_mutable_scale() {
  
  if (_impl_.scale_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::VectorPropertyValue>(GetArenaForAllocation());
    _impl_.scale_ = p;
  }
  return _impl_.scale_;
}
inline ::Property::VectorPropertyValue* TransformSetSRT::mutable_scale() {
  ::Property::VectorPropertyValue* _msg = _internal_mutable_scale();
  // @@protoc_insertion_point(field_mutable:Property.TransformSetSRT.scale)
  return _msg;
}
inline void TransformSetSRT::set_allocated_scale(::Property::VectorPropertyValue* scale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.scale_;
  }
  if (scale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(scale);
    if (message_arena != submessage_arena) {
      scale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scale, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.scale_ = scale;
  // @@protoc_insertion_point(field_set_allocated:Property.TransformSetSRT.scale)
}

// .Property.VectorPropertyValue rotationEuler = 2;
inline bool TransformSetSRT::_internal_has_rotationeuler() const {
  return this != internal_default_instance() && _impl_.rotationeuler_ != nullptr;
}
inline bool TransformSetSRT::has_rotationeuler() const {
  return _internal_has_rotationeuler();
}
inline void TransformSetSRT::clear_rotationeuler() {
  if (GetArenaForAllocation() == nullptr && _impl_.rotationeuler_ != nullptr) {
    delete _impl_.rotationeuler_;
  }
  _impl_.rotationeuler_ = nullptr;
}
inline const ::Property::VectorPropertyValue& TransformSetSRT::_internal_rotationeuler() const {
  const ::Property::VectorPropertyValue* p = _impl_.rotationeuler_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::VectorPropertyValue&>(
      ::Property::_VectorPropertyValue_default_instance_);
}
inline const ::Property::VectorPropertyValue& TransformSetSRT::rotationeuler() const {
  // @@protoc_insertion_point(field_get:Property.TransformSetSRT.rotationEuler)
  return _internal_rotationeuler();
}
inline void TransformSetSRT::unsafe_arena_set_allocated_rotationeuler(
    ::Property::VectorPropertyValue* rotationeuler) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotationeuler_);
  }
  _impl_.rotationeuler_ = rotationeuler;
  if (rotationeuler) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.TransformSetSRT.rotationEuler)
}
inline ::Property::VectorPropertyValue* TransformSetSRT::release_rotationeuler() {
  
  ::Property::VectorPropertyValue* temp = _impl_.rotationeuler_;
  _impl_.rotationeuler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::VectorPropertyValue* TransformSetSRT::unsafe_arena_release_rotationeuler() {
  // @@protoc_insertion_point(field_release:Property.TransformSetSRT.rotationEuler)
  
  ::Property::VectorPropertyValue* temp = _impl_.rotationeuler_;
  _impl_.rotationeuler_ = nullptr;
  return temp;
}
inline ::Property::VectorPropertyValue* TransformSetSRT::_internal_mutable_rotationeuler() {
  
  if (_impl_.rotationeuler_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::VectorPropertyValue>(GetArenaForAllocation());
    _impl_.rotationeuler_ = p;
  }
  return _impl_.rotationeuler_;
}
inline ::Property::VectorPropertyValue* TransformSetSRT::mutable_rotationeuler() {
  ::Property::VectorPropertyValue* _msg = _internal_mutable_rotationeuler();
  // @@protoc_insertion_point(field_mutable:Property.TransformSetSRT.rotationEuler)
  return _msg;
}
inline void TransformSetSRT::set_allocated_rotationeuler(::Property::VectorPropertyValue* rotationeuler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rotationeuler_;
  }
  if (rotationeuler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rotationeuler);
    if (message_arena != submessage_arena) {
      rotationeuler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotationeuler, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rotationeuler_ = rotationeuler;
  // @@protoc_insertion_point(field_set_allocated:Property.TransformSetSRT.rotationEuler)
}

// .Property.VectorPropertyValue transformPos = 3;
inline bool TransformSetSRT::_internal_has_transformpos() const {
  return this != internal_default_instance() && _impl_.transformpos_ != nullptr;
}
inline bool TransformSetSRT::has_transformpos() const {
  return _internal_has_transformpos();
}
inline void TransformSetSRT::clear_transformpos() {
  if (GetArenaForAllocation() == nullptr && _impl_.transformpos_ != nullptr) {
    delete _impl_.transformpos_;
  }
  _impl_.transformpos_ = nullptr;
}
inline const ::Property::VectorPropertyValue& TransformSetSRT::_internal_transformpos() const {
  const ::Property::VectorPropertyValue* p = _impl_.transformpos_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::VectorPropertyValue&>(
      ::Property::_VectorPropertyValue_default_instance_);
}
inline const ::Property::VectorPropertyValue& TransformSetSRT::transformpos() const {
  // @@protoc_insertion_point(field_get:Property.TransformSetSRT.transformPos)
  return _internal_transformpos();
}
inline void TransformSetSRT::unsafe_arena_set_allocated_transformpos(
    ::Property::VectorPropertyValue* transformpos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transformpos_);
  }
  _impl_.transformpos_ = transformpos;
  if (transformpos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.TransformSetSRT.transformPos)
}
inline ::Property::VectorPropertyValue* TransformSetSRT::release_transformpos() {
  
  ::Property::VectorPropertyValue* temp = _impl_.transformpos_;
  _impl_.transformpos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::VectorPropertyValue* TransformSetSRT::unsafe_arena_release_transformpos() {
  // @@protoc_insertion_point(field_release:Property.TransformSetSRT.transformPos)
  
  ::Property::VectorPropertyValue* temp = _impl_.transformpos_;
  _impl_.transformpos_ = nullptr;
  return temp;
}
inline ::Property::VectorPropertyValue* TransformSetSRT::_internal_mutable_transformpos() {
  
  if (_impl_.transformpos_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::VectorPropertyValue>(GetArenaForAllocation());
    _impl_.transformpos_ = p;
  }
  return _impl_.transformpos_;
}
inline ::Property::VectorPropertyValue* TransformSetSRT::mutable_transformpos() {
  ::Property::VectorPropertyValue* _msg = _internal_mutable_transformpos();
  // @@protoc_insertion_point(field_mutable:Property.TransformSetSRT.transformPos)
  return _msg;
}
inline void TransformSetSRT::set_allocated_transformpos(::Property::VectorPropertyValue* transformpos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.transformpos_;
  }
  if (transformpos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(transformpos);
    if (message_arena != submessage_arena) {
      transformpos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transformpos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.transformpos_ = transformpos;
  // @@protoc_insertion_point(field_set_allocated:Property.TransformSetSRT.transformPos)
}

// -------------------------------------------------------------------

// TransformSetSQT

// .Property.VectorPropertyValue scale = 1;
inline bool TransformSetSQT::_internal_has_scale() const {
  return this != internal_default_instance() && _impl_.scale_ != nullptr;
}
inline bool TransformSetSQT::has_scale() const {
  return _internal_has_scale();
}
inline void TransformSetSQT::clear_scale() {
  if (GetArenaForAllocation() == nullptr && _impl_.scale_ != nullptr) {
    delete _impl_.scale_;
  }
  _impl_.scale_ = nullptr;
}
inline const ::Property::VectorPropertyValue& TransformSetSQT::_internal_scale() const {
  const ::Property::VectorPropertyValue* p = _impl_.scale_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::VectorPropertyValue&>(
      ::Property::_VectorPropertyValue_default_instance_);
}
inline const ::Property::VectorPropertyValue& TransformSetSQT::scale() const {
  // @@protoc_insertion_point(field_get:Property.TransformSetSQT.scale)
  return _internal_scale();
}
inline void TransformSetSQT::unsafe_arena_set_allocated_scale(
    ::Property::VectorPropertyValue* scale) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scale_);
  }
  _impl_.scale_ = scale;
  if (scale) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.TransformSetSQT.scale)
}
inline ::Property::VectorPropertyValue* TransformSetSQT::release_scale() {
  
  ::Property::VectorPropertyValue* temp = _impl_.scale_;
  _impl_.scale_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::VectorPropertyValue* TransformSetSQT::unsafe_arena_release_scale() {
  // @@protoc_insertion_point(field_release:Property.TransformSetSQT.scale)
  
  ::Property::VectorPropertyValue* temp = _impl_.scale_;
  _impl_.scale_ = nullptr;
  return temp;
}
inline ::Property::VectorPropertyValue* TransformSetSQT::_internal_mutable_scale() {
  
  if (_impl_.scale_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::VectorPropertyValue>(GetArenaForAllocation());
    _impl_.scale_ = p;
  }
  return _impl_.scale_;
}
inline ::Property::VectorPropertyValue* TransformSetSQT::mutable_scale() {
  ::Property::VectorPropertyValue* _msg = _internal_mutable_scale();
  // @@protoc_insertion_point(field_mutable:Property.TransformSetSQT.scale)
  return _msg;
}
inline void TransformSetSQT::set_allocated_scale(::Property::VectorPropertyValue* scale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.scale_;
  }
  if (scale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(scale);
    if (message_arena != submessage_arena) {
      scale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scale, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.scale_ = scale;
  // @@protoc_insertion_point(field_set_allocated:Property.TransformSetSQT.scale)
}

// .Property.VectorPropertyValue rotationQuat = 2;
inline bool TransformSetSQT::_internal_has_rotationquat() const {
  return this != internal_default_instance() && _impl_.rotationquat_ != nullptr;
}
inline bool TransformSetSQT::has_rotationquat() const {
  return _internal_has_rotationquat();
}
inline void TransformSetSQT::clear_rotationquat() {
  if (GetArenaForAllocation() == nullptr && _impl_.rotationquat_ != nullptr) {
    delete _impl_.rotationquat_;
  }
  _impl_.rotationquat_ = nullptr;
}
inline const ::Property::VectorPropertyValue& TransformSetSQT::_internal_rotationquat() const {
  const ::Property::VectorPropertyValue* p = _impl_.rotationquat_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::VectorPropertyValue&>(
      ::Property::_VectorPropertyValue_default_instance_);
}
inline const ::Property::VectorPropertyValue& TransformSetSQT::rotationquat() const {
  // @@protoc_insertion_point(field_get:Property.TransformSetSQT.rotationQuat)
  return _internal_rotationquat();
}
inline void TransformSetSQT::unsafe_arena_set_allocated_rotationquat(
    ::Property::VectorPropertyValue* rotationquat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotationquat_);
  }
  _impl_.rotationquat_ = rotationquat;
  if (rotationquat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.TransformSetSQT.rotationQuat)
}
inline ::Property::VectorPropertyValue* TransformSetSQT::release_rotationquat() {
  
  ::Property::VectorPropertyValue* temp = _impl_.rotationquat_;
  _impl_.rotationquat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::VectorPropertyValue* TransformSetSQT::unsafe_arena_release_rotationquat() {
  // @@protoc_insertion_point(field_release:Property.TransformSetSQT.rotationQuat)
  
  ::Property::VectorPropertyValue* temp = _impl_.rotationquat_;
  _impl_.rotationquat_ = nullptr;
  return temp;
}
inline ::Property::VectorPropertyValue* TransformSetSQT::_internal_mutable_rotationquat() {
  
  if (_impl_.rotationquat_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::VectorPropertyValue>(GetArenaForAllocation());
    _impl_.rotationquat_ = p;
  }
  return _impl_.rotationquat_;
}
inline ::Property::VectorPropertyValue* TransformSetSQT::mutable_rotationquat() {
  ::Property::VectorPropertyValue* _msg = _internal_mutable_rotationquat();
  // @@protoc_insertion_point(field_mutable:Property.TransformSetSQT.rotationQuat)
  return _msg;
}
inline void TransformSetSQT::set_allocated_rotationquat(::Property::VectorPropertyValue* rotationquat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rotationquat_;
  }
  if (rotationquat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rotationquat);
    if (message_arena != submessage_arena) {
      rotationquat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotationquat, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rotationquat_ = rotationquat;
  // @@protoc_insertion_point(field_set_allocated:Property.TransformSetSQT.rotationQuat)
}

// .Property.VectorPropertyValue transformPos = 3;
inline bool TransformSetSQT::_internal_has_transformpos() const {
  return this != internal_default_instance() && _impl_.transformpos_ != nullptr;
}
inline bool TransformSetSQT::has_transformpos() const {
  return _internal_has_transformpos();
}
inline void TransformSetSQT::clear_transformpos() {
  if (GetArenaForAllocation() == nullptr && _impl_.transformpos_ != nullptr) {
    delete _impl_.transformpos_;
  }
  _impl_.transformpos_ = nullptr;
}
inline const ::Property::VectorPropertyValue& TransformSetSQT::_internal_transformpos() const {
  const ::Property::VectorPropertyValue* p = _impl_.transformpos_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::VectorPropertyValue&>(
      ::Property::_VectorPropertyValue_default_instance_);
}
inline const ::Property::VectorPropertyValue& TransformSetSQT::transformpos() const {
  // @@protoc_insertion_point(field_get:Property.TransformSetSQT.transformPos)
  return _internal_transformpos();
}
inline void TransformSetSQT::unsafe_arena_set_allocated_transformpos(
    ::Property::VectorPropertyValue* transformpos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transformpos_);
  }
  _impl_.transformpos_ = transformpos;
  if (transformpos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.TransformSetSQT.transformPos)
}
inline ::Property::VectorPropertyValue* TransformSetSQT::release_transformpos() {
  
  ::Property::VectorPropertyValue* temp = _impl_.transformpos_;
  _impl_.transformpos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::VectorPropertyValue* TransformSetSQT::unsafe_arena_release_transformpos() {
  // @@protoc_insertion_point(field_release:Property.TransformSetSQT.transformPos)
  
  ::Property::VectorPropertyValue* temp = _impl_.transformpos_;
  _impl_.transformpos_ = nullptr;
  return temp;
}
inline ::Property::VectorPropertyValue* TransformSetSQT::_internal_mutable_transformpos() {
  
  if (_impl_.transformpos_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::VectorPropertyValue>(GetArenaForAllocation());
    _impl_.transformpos_ = p;
  }
  return _impl_.transformpos_;
}
inline ::Property::VectorPropertyValue* TransformSetSQT::mutable_transformpos() {
  ::Property::VectorPropertyValue* _msg = _internal_mutable_transformpos();
  // @@protoc_insertion_point(field_mutable:Property.TransformSetSQT.transformPos)
  return _msg;
}
inline void TransformSetSQT::set_allocated_transformpos(::Property::VectorPropertyValue* transformpos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.transformpos_;
  }
  if (transformpos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(transformpos);
    if (message_arena != submessage_arena) {
      transformpos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transformpos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.transformpos_ = transformpos;
  // @@protoc_insertion_point(field_set_allocated:Property.TransformSetSQT.transformPos)
}

// -------------------------------------------------------------------

// TransformSetLookAt

// .Property.VectorPropertyValue eye = 1;
inline bool TransformSetLookAt::_internal_has_eye() const {
  return this != internal_default_instance() && _impl_.eye_ != nullptr;
}
inline bool TransformSetLookAt::has_eye() const {
  return _internal_has_eye();
}
inline void TransformSetLookAt::clear_eye() {
  if (GetArenaForAllocation() == nullptr && _impl_.eye_ != nullptr) {
    delete _impl_.eye_;
  }
  _impl_.eye_ = nullptr;
}
inline const ::Property::VectorPropertyValue& TransformSetLookAt::_internal_eye() const {
  const ::Property::VectorPropertyValue* p = _impl_.eye_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::VectorPropertyValue&>(
      ::Property::_VectorPropertyValue_default_instance_);
}
inline const ::Property::VectorPropertyValue& TransformSetLookAt::eye() const {
  // @@protoc_insertion_point(field_get:Property.TransformSetLookAt.eye)
  return _internal_eye();
}
inline void TransformSetLookAt::unsafe_arena_set_allocated_eye(
    ::Property::VectorPropertyValue* eye) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.eye_);
  }
  _impl_.eye_ = eye;
  if (eye) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.TransformSetLookAt.eye)
}
inline ::Property::VectorPropertyValue* TransformSetLookAt::release_eye() {
  
  ::Property::VectorPropertyValue* temp = _impl_.eye_;
  _impl_.eye_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::VectorPropertyValue* TransformSetLookAt::unsafe_arena_release_eye() {
  // @@protoc_insertion_point(field_release:Property.TransformSetLookAt.eye)
  
  ::Property::VectorPropertyValue* temp = _impl_.eye_;
  _impl_.eye_ = nullptr;
  return temp;
}
inline ::Property::VectorPropertyValue* TransformSetLookAt::_internal_mutable_eye() {
  
  if (_impl_.eye_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::VectorPropertyValue>(GetArenaForAllocation());
    _impl_.eye_ = p;
  }
  return _impl_.eye_;
}
inline ::Property::VectorPropertyValue* TransformSetLookAt::mutable_eye() {
  ::Property::VectorPropertyValue* _msg = _internal_mutable_eye();
  // @@protoc_insertion_point(field_mutable:Property.TransformSetLookAt.eye)
  return _msg;
}
inline void TransformSetLookAt::set_allocated_eye(::Property::VectorPropertyValue* eye) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.eye_;
  }
  if (eye) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(eye);
    if (message_arena != submessage_arena) {
      eye = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, eye, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.eye_ = eye;
  // @@protoc_insertion_point(field_set_allocated:Property.TransformSetLookAt.eye)
}

// .Property.VectorPropertyValue lookAt = 2;
inline bool TransformSetLookAt::_internal_has_lookat() const {
  return this != internal_default_instance() && _impl_.lookat_ != nullptr;
}
inline bool TransformSetLookAt::has_lookat() const {
  return _internal_has_lookat();
}
inline void TransformSetLookAt::clear_lookat() {
  if (GetArenaForAllocation() == nullptr && _impl_.lookat_ != nullptr) {
    delete _impl_.lookat_;
  }
  _impl_.lookat_ = nullptr;
}
inline const ::Property::VectorPropertyValue& TransformSetLookAt::_internal_lookat() const {
  const ::Property::VectorPropertyValue* p = _impl_.lookat_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::VectorPropertyValue&>(
      ::Property::_VectorPropertyValue_default_instance_);
}
inline const ::Property::VectorPropertyValue& TransformSetLookAt::lookat() const {
  // @@protoc_insertion_point(field_get:Property.TransformSetLookAt.lookAt)
  return _internal_lookat();
}
inline void TransformSetLookAt::unsafe_arena_set_allocated_lookat(
    ::Property::VectorPropertyValue* lookat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lookat_);
  }
  _impl_.lookat_ = lookat;
  if (lookat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.TransformSetLookAt.lookAt)
}
inline ::Property::VectorPropertyValue* TransformSetLookAt::release_lookat() {
  
  ::Property::VectorPropertyValue* temp = _impl_.lookat_;
  _impl_.lookat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::VectorPropertyValue* TransformSetLookAt::unsafe_arena_release_lookat() {
  // @@protoc_insertion_point(field_release:Property.TransformSetLookAt.lookAt)
  
  ::Property::VectorPropertyValue* temp = _impl_.lookat_;
  _impl_.lookat_ = nullptr;
  return temp;
}
inline ::Property::VectorPropertyValue* TransformSetLookAt::_internal_mutable_lookat() {
  
  if (_impl_.lookat_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::VectorPropertyValue>(GetArenaForAllocation());
    _impl_.lookat_ = p;
  }
  return _impl_.lookat_;
}
inline ::Property::VectorPropertyValue* TransformSetLookAt::mutable_lookat() {
  ::Property::VectorPropertyValue* _msg = _internal_mutable_lookat();
  // @@protoc_insertion_point(field_mutable:Property.TransformSetLookAt.lookAt)
  return _msg;
}
inline void TransformSetLookAt::set_allocated_lookat(::Property::VectorPropertyValue* lookat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.lookat_;
  }
  if (lookat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(lookat);
    if (message_arena != submessage_arena) {
      lookat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lookat, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.lookat_ = lookat;
  // @@protoc_insertion_point(field_set_allocated:Property.TransformSetLookAt.lookAt)
}

// optional .Property.VectorPropertyValue up = 3;
inline bool TransformSetLookAt::_internal_has_up() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.up_ != nullptr);
  return value;
}
inline bool TransformSetLookAt::has_up() const {
  return _internal_has_up();
}
inline void TransformSetLookAt::clear_up() {
  if (_impl_.up_ != nullptr) _impl_.up_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::Property::VectorPropertyValue& TransformSetLookAt::_internal_up() const {
  const ::Property::VectorPropertyValue* p = _impl_.up_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::VectorPropertyValue&>(
      ::Property::_VectorPropertyValue_default_instance_);
}
inline const ::Property::VectorPropertyValue& TransformSetLookAt::up() const {
  // @@protoc_insertion_point(field_get:Property.TransformSetLookAt.up)
  return _internal_up();
}
inline void TransformSetLookAt::unsafe_arena_set_allocated_up(
    ::Property::VectorPropertyValue* up) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.up_);
  }
  _impl_.up_ = up;
  if (up) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.TransformSetLookAt.up)
}
inline ::Property::VectorPropertyValue* TransformSetLookAt::release_up() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Property::VectorPropertyValue* temp = _impl_.up_;
  _impl_.up_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::VectorPropertyValue* TransformSetLookAt::unsafe_arena_release_up() {
  // @@protoc_insertion_point(field_release:Property.TransformSetLookAt.up)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Property::VectorPropertyValue* temp = _impl_.up_;
  _impl_.up_ = nullptr;
  return temp;
}
inline ::Property::VectorPropertyValue* TransformSetLookAt::_internal_mutable_up() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.up_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::VectorPropertyValue>(GetArenaForAllocation());
    _impl_.up_ = p;
  }
  return _impl_.up_;
}
inline ::Property::VectorPropertyValue* TransformSetLookAt::mutable_up() {
  ::Property::VectorPropertyValue* _msg = _internal_mutable_up();
  // @@protoc_insertion_point(field_mutable:Property.TransformSetLookAt.up)
  return _msg;
}
inline void TransformSetLookAt::set_allocated_up(::Property::VectorPropertyValue* up) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.up_;
  }
  if (up) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(up);
    if (message_arena != submessage_arena) {
      up = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, up, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.up_ = up;
  // @@protoc_insertion_point(field_set_allocated:Property.TransformSetLookAt.up)
}

// -------------------------------------------------------------------

// TransformSetInterpolatorSRT

// .Property.ScalarPropertyValue t = 4;
inline bool TransformSetInterpolatorSRT::_internal_has_t() const {
  return this != internal_default_instance() && _impl_.t_ != nullptr;
}
inline bool TransformSetInterpolatorSRT::has_t() const {
  return _internal_has_t();
}
inline void TransformSetInterpolatorSRT::clear_t() {
  if (GetArenaForAllocation() == nullptr && _impl_.t_ != nullptr) {
    delete _impl_.t_;
  }
  _impl_.t_ = nullptr;
}
inline const ::Property::ScalarPropertyValue& TransformSetInterpolatorSRT::_internal_t() const {
  const ::Property::ScalarPropertyValue* p = _impl_.t_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::ScalarPropertyValue&>(
      ::Property::_ScalarPropertyValue_default_instance_);
}
inline const ::Property::ScalarPropertyValue& TransformSetInterpolatorSRT::t() const {
  // @@protoc_insertion_point(field_get:Property.TransformSetInterpolatorSRT.t)
  return _internal_t();
}
inline void TransformSetInterpolatorSRT::unsafe_arena_set_allocated_t(
    ::Property::ScalarPropertyValue* t) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.t_);
  }
  _impl_.t_ = t;
  if (t) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.TransformSetInterpolatorSRT.t)
}
inline ::Property::ScalarPropertyValue* TransformSetInterpolatorSRT::release_t() {
  
  ::Property::ScalarPropertyValue* temp = _impl_.t_;
  _impl_.t_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::ScalarPropertyValue* TransformSetInterpolatorSRT::unsafe_arena_release_t() {
  // @@protoc_insertion_point(field_release:Property.TransformSetInterpolatorSRT.t)
  
  ::Property::ScalarPropertyValue* temp = _impl_.t_;
  _impl_.t_ = nullptr;
  return temp;
}
inline ::Property::ScalarPropertyValue* TransformSetInterpolatorSRT::_internal_mutable_t() {
  
  if (_impl_.t_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::ScalarPropertyValue>(GetArenaForAllocation());
    _impl_.t_ = p;
  }
  return _impl_.t_;
}
inline ::Property::ScalarPropertyValue* TransformSetInterpolatorSRT::mutable_t() {
  ::Property::ScalarPropertyValue* _msg = _internal_mutable_t();
  // @@protoc_insertion_point(field_mutable:Property.TransformSetInterpolatorSRT.t)
  return _msg;
}
inline void TransformSetInterpolatorSRT::set_allocated_t(::Property::ScalarPropertyValue* t) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.t_;
  }
  if (t) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(t);
    if (message_arena != submessage_arena) {
      t = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, t, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.t_ = t;
  // @@protoc_insertion_point(field_set_allocated:Property.TransformSetInterpolatorSRT.t)
}

// .Property.TransformSetSRT from = 1;
inline bool TransformSetInterpolatorSRT::_internal_has_from() const {
  return this != internal_default_instance() && _impl_.from_ != nullptr;
}
inline bool TransformSetInterpolatorSRT::has_from() const {
  return _internal_has_from();
}
inline void TransformSetInterpolatorSRT::clear_from() {
  if (GetArenaForAllocation() == nullptr && _impl_.from_ != nullptr) {
    delete _impl_.from_;
  }
  _impl_.from_ = nullptr;
}
inline const ::Property::TransformSetSRT& TransformSetInterpolatorSRT::_internal_from() const {
  const ::Property::TransformSetSRT* p = _impl_.from_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::TransformSetSRT&>(
      ::Property::_TransformSetSRT_default_instance_);
}
inline const ::Property::TransformSetSRT& TransformSetInterpolatorSRT::from() const {
  // @@protoc_insertion_point(field_get:Property.TransformSetInterpolatorSRT.from)
  return _internal_from();
}
inline void TransformSetInterpolatorSRT::unsafe_arena_set_allocated_from(
    ::Property::TransformSetSRT* from) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.from_);
  }
  _impl_.from_ = from;
  if (from) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.TransformSetInterpolatorSRT.from)
}
inline ::Property::TransformSetSRT* TransformSetInterpolatorSRT::release_from() {
  
  ::Property::TransformSetSRT* temp = _impl_.from_;
  _impl_.from_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::TransformSetSRT* TransformSetInterpolatorSRT::unsafe_arena_release_from() {
  // @@protoc_insertion_point(field_release:Property.TransformSetInterpolatorSRT.from)
  
  ::Property::TransformSetSRT* temp = _impl_.from_;
  _impl_.from_ = nullptr;
  return temp;
}
inline ::Property::TransformSetSRT* TransformSetInterpolatorSRT::_internal_mutable_from() {
  
  if (_impl_.from_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::TransformSetSRT>(GetArenaForAllocation());
    _impl_.from_ = p;
  }
  return _impl_.from_;
}
inline ::Property::TransformSetSRT* TransformSetInterpolatorSRT::mutable_from() {
  ::Property::TransformSetSRT* _msg = _internal_mutable_from();
  // @@protoc_insertion_point(field_mutable:Property.TransformSetInterpolatorSRT.from)
  return _msg;
}
inline void TransformSetInterpolatorSRT::set_allocated_from(::Property::TransformSetSRT* from) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.from_;
  }
  if (from) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(from);
    if (message_arena != submessage_arena) {
      from = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, from, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.from_ = from;
  // @@protoc_insertion_point(field_set_allocated:Property.TransformSetInterpolatorSRT.from)
}

// .Property.TransformSetSRT to = 2;
inline bool TransformSetInterpolatorSRT::_internal_has_to() const {
  return this != internal_default_instance() && _impl_.to_ != nullptr;
}
inline bool TransformSetInterpolatorSRT::has_to() const {
  return _internal_has_to();
}
inline void TransformSetInterpolatorSRT::clear_to() {
  if (GetArenaForAllocation() == nullptr && _impl_.to_ != nullptr) {
    delete _impl_.to_;
  }
  _impl_.to_ = nullptr;
}
inline const ::Property::TransformSetSRT& TransformSetInterpolatorSRT::_internal_to() const {
  const ::Property::TransformSetSRT* p = _impl_.to_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::TransformSetSRT&>(
      ::Property::_TransformSetSRT_default_instance_);
}
inline const ::Property::TransformSetSRT& TransformSetInterpolatorSRT::to() const {
  // @@protoc_insertion_point(field_get:Property.TransformSetInterpolatorSRT.to)
  return _internal_to();
}
inline void TransformSetInterpolatorSRT::unsafe_arena_set_allocated_to(
    ::Property::TransformSetSRT* to) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.to_);
  }
  _impl_.to_ = to;
  if (to) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.TransformSetInterpolatorSRT.to)
}
inline ::Property::TransformSetSRT* TransformSetInterpolatorSRT::release_to() {
  
  ::Property::TransformSetSRT* temp = _impl_.to_;
  _impl_.to_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::TransformSetSRT* TransformSetInterpolatorSRT::unsafe_arena_release_to() {
  // @@protoc_insertion_point(field_release:Property.TransformSetInterpolatorSRT.to)
  
  ::Property::TransformSetSRT* temp = _impl_.to_;
  _impl_.to_ = nullptr;
  return temp;
}
inline ::Property::TransformSetSRT* TransformSetInterpolatorSRT::_internal_mutable_to() {
  
  if (_impl_.to_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::TransformSetSRT>(GetArenaForAllocation());
    _impl_.to_ = p;
  }
  return _impl_.to_;
}
inline ::Property::TransformSetSRT* TransformSetInterpolatorSRT::mutable_to() {
  ::Property::TransformSetSRT* _msg = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:Property.TransformSetInterpolatorSRT.to)
  return _msg;
}
inline void TransformSetInterpolatorSRT::set_allocated_to(::Property::TransformSetSRT* to) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.to_;
  }
  if (to) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(to);
    if (message_arena != submessage_arena) {
      to = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, to, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.to_ = to;
  // @@protoc_insertion_point(field_set_allocated:Property.TransformSetInterpolatorSRT.to)
}

// .Property.Interpolation by = 3;
inline bool TransformSetInterpolatorSRT::_internal_has_by() const {
  return this != internal_default_instance() && _impl_.by_ != nullptr;
}
inline bool TransformSetInterpolatorSRT::has_by() const {
  return _internal_has_by();
}
inline void TransformSetInterpolatorSRT::clear_by() {
  if (GetArenaForAllocation() == nullptr && _impl_.by_ != nullptr) {
    delete _impl_.by_;
  }
  _impl_.by_ = nullptr;
}
inline const ::Property::Interpolation& TransformSetInterpolatorSRT::_internal_by() const {
  const ::Property::Interpolation* p = _impl_.by_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::Interpolation&>(
      ::Property::_Interpolation_default_instance_);
}
inline const ::Property::Interpolation& TransformSetInterpolatorSRT::by() const {
  // @@protoc_insertion_point(field_get:Property.TransformSetInterpolatorSRT.by)
  return _internal_by();
}
inline void TransformSetInterpolatorSRT::unsafe_arena_set_allocated_by(
    ::Property::Interpolation* by) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.by_);
  }
  _impl_.by_ = by;
  if (by) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.TransformSetInterpolatorSRT.by)
}
inline ::Property::Interpolation* TransformSetInterpolatorSRT::release_by() {
  
  ::Property::Interpolation* temp = _impl_.by_;
  _impl_.by_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::Interpolation* TransformSetInterpolatorSRT::unsafe_arena_release_by() {
  // @@protoc_insertion_point(field_release:Property.TransformSetInterpolatorSRT.by)
  
  ::Property::Interpolation* temp = _impl_.by_;
  _impl_.by_ = nullptr;
  return temp;
}
inline ::Property::Interpolation* TransformSetInterpolatorSRT::_internal_mutable_by() {
  
  if (_impl_.by_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::Interpolation>(GetArenaForAllocation());
    _impl_.by_ = p;
  }
  return _impl_.by_;
}
inline ::Property::Interpolation* TransformSetInterpolatorSRT::mutable_by() {
  ::Property::Interpolation* _msg = _internal_mutable_by();
  // @@protoc_insertion_point(field_mutable:Property.TransformSetInterpolatorSRT.by)
  return _msg;
}
inline void TransformSetInterpolatorSRT::set_allocated_by(::Property::Interpolation* by) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.by_;
  }
  if (by) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(by);
    if (message_arena != submessage_arena) {
      by = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, by, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.by_ = by;
  // @@protoc_insertion_point(field_set_allocated:Property.TransformSetInterpolatorSRT.by)
}

// -------------------------------------------------------------------

// TransformSetInterpolatorSQT

// .Property.ScalarPropertyValue t = 4;
inline bool TransformSetInterpolatorSQT::_internal_has_t() const {
  return this != internal_default_instance() && _impl_.t_ != nullptr;
}
inline bool TransformSetInterpolatorSQT::has_t() const {
  return _internal_has_t();
}
inline void TransformSetInterpolatorSQT::clear_t() {
  if (GetArenaForAllocation() == nullptr && _impl_.t_ != nullptr) {
    delete _impl_.t_;
  }
  _impl_.t_ = nullptr;
}
inline const ::Property::ScalarPropertyValue& TransformSetInterpolatorSQT::_internal_t() const {
  const ::Property::ScalarPropertyValue* p = _impl_.t_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::ScalarPropertyValue&>(
      ::Property::_ScalarPropertyValue_default_instance_);
}
inline const ::Property::ScalarPropertyValue& TransformSetInterpolatorSQT::t() const {
  // @@protoc_insertion_point(field_get:Property.TransformSetInterpolatorSQT.t)
  return _internal_t();
}
inline void TransformSetInterpolatorSQT::unsafe_arena_set_allocated_t(
    ::Property::ScalarPropertyValue* t) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.t_);
  }
  _impl_.t_ = t;
  if (t) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.TransformSetInterpolatorSQT.t)
}
inline ::Property::ScalarPropertyValue* TransformSetInterpolatorSQT::release_t() {
  
  ::Property::ScalarPropertyValue* temp = _impl_.t_;
  _impl_.t_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::ScalarPropertyValue* TransformSetInterpolatorSQT::unsafe_arena_release_t() {
  // @@protoc_insertion_point(field_release:Property.TransformSetInterpolatorSQT.t)
  
  ::Property::ScalarPropertyValue* temp = _impl_.t_;
  _impl_.t_ = nullptr;
  return temp;
}
inline ::Property::ScalarPropertyValue* TransformSetInterpolatorSQT::_internal_mutable_t() {
  
  if (_impl_.t_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::ScalarPropertyValue>(GetArenaForAllocation());
    _impl_.t_ = p;
  }
  return _impl_.t_;
}
inline ::Property::ScalarPropertyValue* TransformSetInterpolatorSQT::mutable_t() {
  ::Property::ScalarPropertyValue* _msg = _internal_mutable_t();
  // @@protoc_insertion_point(field_mutable:Property.TransformSetInterpolatorSQT.t)
  return _msg;
}
inline void TransformSetInterpolatorSQT::set_allocated_t(::Property::ScalarPropertyValue* t) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.t_;
  }
  if (t) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(t);
    if (message_arena != submessage_arena) {
      t = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, t, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.t_ = t;
  // @@protoc_insertion_point(field_set_allocated:Property.TransformSetInterpolatorSQT.t)
}

// .Property.TransformSetSQT from = 1;
inline bool TransformSetInterpolatorSQT::_internal_has_from() const {
  return this != internal_default_instance() && _impl_.from_ != nullptr;
}
inline bool TransformSetInterpolatorSQT::has_from() const {
  return _internal_has_from();
}
inline void TransformSetInterpolatorSQT::clear_from() {
  if (GetArenaForAllocation() == nullptr && _impl_.from_ != nullptr) {
    delete _impl_.from_;
  }
  _impl_.from_ = nullptr;
}
inline const ::Property::TransformSetSQT& TransformSetInterpolatorSQT::_internal_from() const {
  const ::Property::TransformSetSQT* p = _impl_.from_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::TransformSetSQT&>(
      ::Property::_TransformSetSQT_default_instance_);
}
inline const ::Property::TransformSetSQT& TransformSetInterpolatorSQT::from() const {
  // @@protoc_insertion_point(field_get:Property.TransformSetInterpolatorSQT.from)
  return _internal_from();
}
inline void TransformSetInterpolatorSQT::unsafe_arena_set_allocated_from(
    ::Property::TransformSetSQT* from) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.from_);
  }
  _impl_.from_ = from;
  if (from) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.TransformSetInterpolatorSQT.from)
}
inline ::Property::TransformSetSQT* TransformSetInterpolatorSQT::release_from() {
  
  ::Property::TransformSetSQT* temp = _impl_.from_;
  _impl_.from_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::TransformSetSQT* TransformSetInterpolatorSQT::unsafe_arena_release_from() {
  // @@protoc_insertion_point(field_release:Property.TransformSetInterpolatorSQT.from)
  
  ::Property::TransformSetSQT* temp = _impl_.from_;
  _impl_.from_ = nullptr;
  return temp;
}
inline ::Property::TransformSetSQT* TransformSetInterpolatorSQT::_internal_mutable_from() {
  
  if (_impl_.from_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::TransformSetSQT>(GetArenaForAllocation());
    _impl_.from_ = p;
  }
  return _impl_.from_;
}
inline ::Property::TransformSetSQT* TransformSetInterpolatorSQT::mutable_from() {
  ::Property::TransformSetSQT* _msg = _internal_mutable_from();
  // @@protoc_insertion_point(field_mutable:Property.TransformSetInterpolatorSQT.from)
  return _msg;
}
inline void TransformSetInterpolatorSQT::set_allocated_from(::Property::TransformSetSQT* from) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.from_;
  }
  if (from) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(from);
    if (message_arena != submessage_arena) {
      from = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, from, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.from_ = from;
  // @@protoc_insertion_point(field_set_allocated:Property.TransformSetInterpolatorSQT.from)
}

// .Property.TransformSetSQT to = 2;
inline bool TransformSetInterpolatorSQT::_internal_has_to() const {
  return this != internal_default_instance() && _impl_.to_ != nullptr;
}
inline bool TransformSetInterpolatorSQT::has_to() const {
  return _internal_has_to();
}
inline void TransformSetInterpolatorSQT::clear_to() {
  if (GetArenaForAllocation() == nullptr && _impl_.to_ != nullptr) {
    delete _impl_.to_;
  }
  _impl_.to_ = nullptr;
}
inline const ::Property::TransformSetSQT& TransformSetInterpolatorSQT::_internal_to() const {
  const ::Property::TransformSetSQT* p = _impl_.to_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::TransformSetSQT&>(
      ::Property::_TransformSetSQT_default_instance_);
}
inline const ::Property::TransformSetSQT& TransformSetInterpolatorSQT::to() const {
  // @@protoc_insertion_point(field_get:Property.TransformSetInterpolatorSQT.to)
  return _internal_to();
}
inline void TransformSetInterpolatorSQT::unsafe_arena_set_allocated_to(
    ::Property::TransformSetSQT* to) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.to_);
  }
  _impl_.to_ = to;
  if (to) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.TransformSetInterpolatorSQT.to)
}
inline ::Property::TransformSetSQT* TransformSetInterpolatorSQT::release_to() {
  
  ::Property::TransformSetSQT* temp = _impl_.to_;
  _impl_.to_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::TransformSetSQT* TransformSetInterpolatorSQT::unsafe_arena_release_to() {
  // @@protoc_insertion_point(field_release:Property.TransformSetInterpolatorSQT.to)
  
  ::Property::TransformSetSQT* temp = _impl_.to_;
  _impl_.to_ = nullptr;
  return temp;
}
inline ::Property::TransformSetSQT* TransformSetInterpolatorSQT::_internal_mutable_to() {
  
  if (_impl_.to_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::TransformSetSQT>(GetArenaForAllocation());
    _impl_.to_ = p;
  }
  return _impl_.to_;
}
inline ::Property::TransformSetSQT* TransformSetInterpolatorSQT::mutable_to() {
  ::Property::TransformSetSQT* _msg = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:Property.TransformSetInterpolatorSQT.to)
  return _msg;
}
inline void TransformSetInterpolatorSQT::set_allocated_to(::Property::TransformSetSQT* to) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.to_;
  }
  if (to) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(to);
    if (message_arena != submessage_arena) {
      to = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, to, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.to_ = to;
  // @@protoc_insertion_point(field_set_allocated:Property.TransformSetInterpolatorSQT.to)
}

// .Property.Interpolation by = 3;
inline bool TransformSetInterpolatorSQT::_internal_has_by() const {
  return this != internal_default_instance() && _impl_.by_ != nullptr;
}
inline bool TransformSetInterpolatorSQT::has_by() const {
  return _internal_has_by();
}
inline void TransformSetInterpolatorSQT::clear_by() {
  if (GetArenaForAllocation() == nullptr && _impl_.by_ != nullptr) {
    delete _impl_.by_;
  }
  _impl_.by_ = nullptr;
}
inline const ::Property::Interpolation& TransformSetInterpolatorSQT::_internal_by() const {
  const ::Property::Interpolation* p = _impl_.by_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::Interpolation&>(
      ::Property::_Interpolation_default_instance_);
}
inline const ::Property::Interpolation& TransformSetInterpolatorSQT::by() const {
  // @@protoc_insertion_point(field_get:Property.TransformSetInterpolatorSQT.by)
  return _internal_by();
}
inline void TransformSetInterpolatorSQT::unsafe_arena_set_allocated_by(
    ::Property::Interpolation* by) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.by_);
  }
  _impl_.by_ = by;
  if (by) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.TransformSetInterpolatorSQT.by)
}
inline ::Property::Interpolation* TransformSetInterpolatorSQT::release_by() {
  
  ::Property::Interpolation* temp = _impl_.by_;
  _impl_.by_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::Interpolation* TransformSetInterpolatorSQT::unsafe_arena_release_by() {
  // @@protoc_insertion_point(field_release:Property.TransformSetInterpolatorSQT.by)
  
  ::Property::Interpolation* temp = _impl_.by_;
  _impl_.by_ = nullptr;
  return temp;
}
inline ::Property::Interpolation* TransformSetInterpolatorSQT::_internal_mutable_by() {
  
  if (_impl_.by_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::Interpolation>(GetArenaForAllocation());
    _impl_.by_ = p;
  }
  return _impl_.by_;
}
inline ::Property::Interpolation* TransformSetInterpolatorSQT::mutable_by() {
  ::Property::Interpolation* _msg = _internal_mutable_by();
  // @@protoc_insertion_point(field_mutable:Property.TransformSetInterpolatorSQT.by)
  return _msg;
}
inline void TransformSetInterpolatorSQT::set_allocated_by(::Property::Interpolation* by) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.by_;
  }
  if (by) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(by);
    if (message_arena != submessage_arena) {
      by = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, by, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.by_ = by;
  // @@protoc_insertion_point(field_set_allocated:Property.TransformSetInterpolatorSQT.by)
}

// -------------------------------------------------------------------

// TransformSetInterpolatorLookAt

// .Property.ScalarPropertyValue t = 4;
inline bool TransformSetInterpolatorLookAt::_internal_has_t() const {
  return this != internal_default_instance() && _impl_.t_ != nullptr;
}
inline bool TransformSetInterpolatorLookAt::has_t() const {
  return _internal_has_t();
}
inline void TransformSetInterpolatorLookAt::clear_t() {
  if (GetArenaForAllocation() == nullptr && _impl_.t_ != nullptr) {
    delete _impl_.t_;
  }
  _impl_.t_ = nullptr;
}
inline const ::Property::ScalarPropertyValue& TransformSetInterpolatorLookAt::_internal_t() const {
  const ::Property::ScalarPropertyValue* p = _impl_.t_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::ScalarPropertyValue&>(
      ::Property::_ScalarPropertyValue_default_instance_);
}
inline const ::Property::ScalarPropertyValue& TransformSetInterpolatorLookAt::t() const {
  // @@protoc_insertion_point(field_get:Property.TransformSetInterpolatorLookAt.t)
  return _internal_t();
}
inline void TransformSetInterpolatorLookAt::unsafe_arena_set_allocated_t(
    ::Property::ScalarPropertyValue* t) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.t_);
  }
  _impl_.t_ = t;
  if (t) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.TransformSetInterpolatorLookAt.t)
}
inline ::Property::ScalarPropertyValue* TransformSetInterpolatorLookAt::release_t() {
  
  ::Property::ScalarPropertyValue* temp = _impl_.t_;
  _impl_.t_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::ScalarPropertyValue* TransformSetInterpolatorLookAt::unsafe_arena_release_t() {
  // @@protoc_insertion_point(field_release:Property.TransformSetInterpolatorLookAt.t)
  
  ::Property::ScalarPropertyValue* temp = _impl_.t_;
  _impl_.t_ = nullptr;
  return temp;
}
inline ::Property::ScalarPropertyValue* TransformSetInterpolatorLookAt::_internal_mutable_t() {
  
  if (_impl_.t_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::ScalarPropertyValue>(GetArenaForAllocation());
    _impl_.t_ = p;
  }
  return _impl_.t_;
}
inline ::Property::ScalarPropertyValue* TransformSetInterpolatorLookAt::mutable_t() {
  ::Property::ScalarPropertyValue* _msg = _internal_mutable_t();
  // @@protoc_insertion_point(field_mutable:Property.TransformSetInterpolatorLookAt.t)
  return _msg;
}
inline void TransformSetInterpolatorLookAt::set_allocated_t(::Property::ScalarPropertyValue* t) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.t_;
  }
  if (t) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(t);
    if (message_arena != submessage_arena) {
      t = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, t, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.t_ = t;
  // @@protoc_insertion_point(field_set_allocated:Property.TransformSetInterpolatorLookAt.t)
}

// .Property.TransformSetLookAt from = 1;
inline bool TransformSetInterpolatorLookAt::_internal_has_from() const {
  return this != internal_default_instance() && _impl_.from_ != nullptr;
}
inline bool TransformSetInterpolatorLookAt::has_from() const {
  return _internal_has_from();
}
inline void TransformSetInterpolatorLookAt::clear_from() {
  if (GetArenaForAllocation() == nullptr && _impl_.from_ != nullptr) {
    delete _impl_.from_;
  }
  _impl_.from_ = nullptr;
}
inline const ::Property::TransformSetLookAt& TransformSetInterpolatorLookAt::_internal_from() const {
  const ::Property::TransformSetLookAt* p = _impl_.from_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::TransformSetLookAt&>(
      ::Property::_TransformSetLookAt_default_instance_);
}
inline const ::Property::TransformSetLookAt& TransformSetInterpolatorLookAt::from() const {
  // @@protoc_insertion_point(field_get:Property.TransformSetInterpolatorLookAt.from)
  return _internal_from();
}
inline void TransformSetInterpolatorLookAt::unsafe_arena_set_allocated_from(
    ::Property::TransformSetLookAt* from) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.from_);
  }
  _impl_.from_ = from;
  if (from) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.TransformSetInterpolatorLookAt.from)
}
inline ::Property::TransformSetLookAt* TransformSetInterpolatorLookAt::release_from() {
  
  ::Property::TransformSetLookAt* temp = _impl_.from_;
  _impl_.from_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::TransformSetLookAt* TransformSetInterpolatorLookAt::unsafe_arena_release_from() {
  // @@protoc_insertion_point(field_release:Property.TransformSetInterpolatorLookAt.from)
  
  ::Property::TransformSetLookAt* temp = _impl_.from_;
  _impl_.from_ = nullptr;
  return temp;
}
inline ::Property::TransformSetLookAt* TransformSetInterpolatorLookAt::_internal_mutable_from() {
  
  if (_impl_.from_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::TransformSetLookAt>(GetArenaForAllocation());
    _impl_.from_ = p;
  }
  return _impl_.from_;
}
inline ::Property::TransformSetLookAt* TransformSetInterpolatorLookAt::mutable_from() {
  ::Property::TransformSetLookAt* _msg = _internal_mutable_from();
  // @@protoc_insertion_point(field_mutable:Property.TransformSetInterpolatorLookAt.from)
  return _msg;
}
inline void TransformSetInterpolatorLookAt::set_allocated_from(::Property::TransformSetLookAt* from) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.from_;
  }
  if (from) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(from);
    if (message_arena != submessage_arena) {
      from = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, from, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.from_ = from;
  // @@protoc_insertion_point(field_set_allocated:Property.TransformSetInterpolatorLookAt.from)
}

// .Property.TransformSetLookAt to = 2;
inline bool TransformSetInterpolatorLookAt::_internal_has_to() const {
  return this != internal_default_instance() && _impl_.to_ != nullptr;
}
inline bool TransformSetInterpolatorLookAt::has_to() const {
  return _internal_has_to();
}
inline void TransformSetInterpolatorLookAt::clear_to() {
  if (GetArenaForAllocation() == nullptr && _impl_.to_ != nullptr) {
    delete _impl_.to_;
  }
  _impl_.to_ = nullptr;
}
inline const ::Property::TransformSetLookAt& TransformSetInterpolatorLookAt::_internal_to() const {
  const ::Property::TransformSetLookAt* p = _impl_.to_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::TransformSetLookAt&>(
      ::Property::_TransformSetLookAt_default_instance_);
}
inline const ::Property::TransformSetLookAt& TransformSetInterpolatorLookAt::to() const {
  // @@protoc_insertion_point(field_get:Property.TransformSetInterpolatorLookAt.to)
  return _internal_to();
}
inline void TransformSetInterpolatorLookAt::unsafe_arena_set_allocated_to(
    ::Property::TransformSetLookAt* to) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.to_);
  }
  _impl_.to_ = to;
  if (to) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.TransformSetInterpolatorLookAt.to)
}
inline ::Property::TransformSetLookAt* TransformSetInterpolatorLookAt::release_to() {
  
  ::Property::TransformSetLookAt* temp = _impl_.to_;
  _impl_.to_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::TransformSetLookAt* TransformSetInterpolatorLookAt::unsafe_arena_release_to() {
  // @@protoc_insertion_point(field_release:Property.TransformSetInterpolatorLookAt.to)
  
  ::Property::TransformSetLookAt* temp = _impl_.to_;
  _impl_.to_ = nullptr;
  return temp;
}
inline ::Property::TransformSetLookAt* TransformSetInterpolatorLookAt::_internal_mutable_to() {
  
  if (_impl_.to_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::TransformSetLookAt>(GetArenaForAllocation());
    _impl_.to_ = p;
  }
  return _impl_.to_;
}
inline ::Property::TransformSetLookAt* TransformSetInterpolatorLookAt::mutable_to() {
  ::Property::TransformSetLookAt* _msg = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:Property.TransformSetInterpolatorLookAt.to)
  return _msg;
}
inline void TransformSetInterpolatorLookAt::set_allocated_to(::Property::TransformSetLookAt* to) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.to_;
  }
  if (to) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(to);
    if (message_arena != submessage_arena) {
      to = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, to, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.to_ = to;
  // @@protoc_insertion_point(field_set_allocated:Property.TransformSetInterpolatorLookAt.to)
}

// .Property.Interpolation by = 3;
inline bool TransformSetInterpolatorLookAt::_internal_has_by() const {
  return this != internal_default_instance() && _impl_.by_ != nullptr;
}
inline bool TransformSetInterpolatorLookAt::has_by() const {
  return _internal_has_by();
}
inline void TransformSetInterpolatorLookAt::clear_by() {
  if (GetArenaForAllocation() == nullptr && _impl_.by_ != nullptr) {
    delete _impl_.by_;
  }
  _impl_.by_ = nullptr;
}
inline const ::Property::Interpolation& TransformSetInterpolatorLookAt::_internal_by() const {
  const ::Property::Interpolation* p = _impl_.by_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::Interpolation&>(
      ::Property::_Interpolation_default_instance_);
}
inline const ::Property::Interpolation& TransformSetInterpolatorLookAt::by() const {
  // @@protoc_insertion_point(field_get:Property.TransformSetInterpolatorLookAt.by)
  return _internal_by();
}
inline void TransformSetInterpolatorLookAt::unsafe_arena_set_allocated_by(
    ::Property::Interpolation* by) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.by_);
  }
  _impl_.by_ = by;
  if (by) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.TransformSetInterpolatorLookAt.by)
}
inline ::Property::Interpolation* TransformSetInterpolatorLookAt::release_by() {
  
  ::Property::Interpolation* temp = _impl_.by_;
  _impl_.by_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::Interpolation* TransformSetInterpolatorLookAt::unsafe_arena_release_by() {
  // @@protoc_insertion_point(field_release:Property.TransformSetInterpolatorLookAt.by)
  
  ::Property::Interpolation* temp = _impl_.by_;
  _impl_.by_ = nullptr;
  return temp;
}
inline ::Property::Interpolation* TransformSetInterpolatorLookAt::_internal_mutable_by() {
  
  if (_impl_.by_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::Interpolation>(GetArenaForAllocation());
    _impl_.by_ = p;
  }
  return _impl_.by_;
}
inline ::Property::Interpolation* TransformSetInterpolatorLookAt::mutable_by() {
  ::Property::Interpolation* _msg = _internal_mutable_by();
  // @@protoc_insertion_point(field_mutable:Property.TransformSetInterpolatorLookAt.by)
  return _msg;
}
inline void TransformSetInterpolatorLookAt::set_allocated_by(::Property::Interpolation* by) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.by_;
  }
  if (by) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(by);
    if (message_arena != submessage_arena) {
      by = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, by, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.by_ = by;
  // @@protoc_insertion_point(field_set_allocated:Property.TransformSetInterpolatorLookAt.by)
}

// -------------------------------------------------------------------

// TransformSetApproach

// .Property.ScalarPropertyValue t = 1;
inline bool TransformSetApproach::_internal_has_t() const {
  return this != internal_default_instance() && _impl_.t_ != nullptr;
}
inline bool TransformSetApproach::has_t() const {
  return _internal_has_t();
}
inline void TransformSetApproach::clear_t() {
  if (GetArenaForAllocation() == nullptr && _impl_.t_ != nullptr) {
    delete _impl_.t_;
  }
  _impl_.t_ = nullptr;
}
inline const ::Property::ScalarPropertyValue& TransformSetApproach::_internal_t() const {
  const ::Property::ScalarPropertyValue* p = _impl_.t_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::ScalarPropertyValue&>(
      ::Property::_ScalarPropertyValue_default_instance_);
}
inline const ::Property::ScalarPropertyValue& TransformSetApproach::t() const {
  // @@protoc_insertion_point(field_get:Property.TransformSetApproach.t)
  return _internal_t();
}
inline void TransformSetApproach::unsafe_arena_set_allocated_t(
    ::Property::ScalarPropertyValue* t) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.t_);
  }
  _impl_.t_ = t;
  if (t) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.TransformSetApproach.t)
}
inline ::Property::ScalarPropertyValue* TransformSetApproach::release_t() {
  
  ::Property::ScalarPropertyValue* temp = _impl_.t_;
  _impl_.t_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::ScalarPropertyValue* TransformSetApproach::unsafe_arena_release_t() {
  // @@protoc_insertion_point(field_release:Property.TransformSetApproach.t)
  
  ::Property::ScalarPropertyValue* temp = _impl_.t_;
  _impl_.t_ = nullptr;
  return temp;
}
inline ::Property::ScalarPropertyValue* TransformSetApproach::_internal_mutable_t() {
  
  if (_impl_.t_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::ScalarPropertyValue>(GetArenaForAllocation());
    _impl_.t_ = p;
  }
  return _impl_.t_;
}
inline ::Property::ScalarPropertyValue* TransformSetApproach::mutable_t() {
  ::Property::ScalarPropertyValue* _msg = _internal_mutable_t();
  // @@protoc_insertion_point(field_mutable:Property.TransformSetApproach.t)
  return _msg;
}
inline void TransformSetApproach::set_allocated_t(::Property::ScalarPropertyValue* t) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.t_;
  }
  if (t) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(t);
    if (message_arena != submessage_arena) {
      t = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, t, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.t_ = t;
  // @@protoc_insertion_point(field_set_allocated:Property.TransformSetApproach.t)
}

// .Property.TransformSet to = 2;
inline bool TransformSetApproach::_internal_has_to() const {
  return this != internal_default_instance() && _impl_.to_ != nullptr;
}
inline bool TransformSetApproach::has_to() const {
  return _internal_has_to();
}
inline void TransformSetApproach::clear_to() {
  if (GetArenaForAllocation() == nullptr && _impl_.to_ != nullptr) {
    delete _impl_.to_;
  }
  _impl_.to_ = nullptr;
}
inline const ::Property::TransformSet& TransformSetApproach::_internal_to() const {
  const ::Property::TransformSet* p = _impl_.to_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::TransformSet&>(
      ::Property::_TransformSet_default_instance_);
}
inline const ::Property::TransformSet& TransformSetApproach::to() const {
  // @@protoc_insertion_point(field_get:Property.TransformSetApproach.to)
  return _internal_to();
}
inline void TransformSetApproach::unsafe_arena_set_allocated_to(
    ::Property::TransformSet* to) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.to_);
  }
  _impl_.to_ = to;
  if (to) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.TransformSetApproach.to)
}
inline ::Property::TransformSet* TransformSetApproach::release_to() {
  
  ::Property::TransformSet* temp = _impl_.to_;
  _impl_.to_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::TransformSet* TransformSetApproach::unsafe_arena_release_to() {
  // @@protoc_insertion_point(field_release:Property.TransformSetApproach.to)
  
  ::Property::TransformSet* temp = _impl_.to_;
  _impl_.to_ = nullptr;
  return temp;
}
inline ::Property::TransformSet* TransformSetApproach::_internal_mutable_to() {
  
  if (_impl_.to_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::TransformSet>(GetArenaForAllocation());
    _impl_.to_ = p;
  }
  return _impl_.to_;
}
inline ::Property::TransformSet* TransformSetApproach::mutable_to() {
  ::Property::TransformSet* _msg = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:Property.TransformSetApproach.to)
  return _msg;
}
inline void TransformSetApproach::set_allocated_to(::Property::TransformSet* to) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.to_;
  }
  if (to) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(to);
    if (message_arena != submessage_arena) {
      to = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, to, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.to_ = to;
  // @@protoc_insertion_point(field_set_allocated:Property.TransformSetApproach.to)
}

// .Property.ScalarPropertyValue timeToHalf = 3;
inline bool TransformSetApproach::_internal_has_timetohalf() const {
  return this != internal_default_instance() && _impl_.timetohalf_ != nullptr;
}
inline bool TransformSetApproach::has_timetohalf() const {
  return _internal_has_timetohalf();
}
inline void TransformSetApproach::clear_timetohalf() {
  if (GetArenaForAllocation() == nullptr && _impl_.timetohalf_ != nullptr) {
    delete _impl_.timetohalf_;
  }
  _impl_.timetohalf_ = nullptr;
}
inline const ::Property::ScalarPropertyValue& TransformSetApproach::_internal_timetohalf() const {
  const ::Property::ScalarPropertyValue* p = _impl_.timetohalf_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::ScalarPropertyValue&>(
      ::Property::_ScalarPropertyValue_default_instance_);
}
inline const ::Property::ScalarPropertyValue& TransformSetApproach::timetohalf() const {
  // @@protoc_insertion_point(field_get:Property.TransformSetApproach.timeToHalf)
  return _internal_timetohalf();
}
inline void TransformSetApproach::unsafe_arena_set_allocated_timetohalf(
    ::Property::ScalarPropertyValue* timetohalf) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timetohalf_);
  }
  _impl_.timetohalf_ = timetohalf;
  if (timetohalf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.TransformSetApproach.timeToHalf)
}
inline ::Property::ScalarPropertyValue* TransformSetApproach::release_timetohalf() {
  
  ::Property::ScalarPropertyValue* temp = _impl_.timetohalf_;
  _impl_.timetohalf_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::ScalarPropertyValue* TransformSetApproach::unsafe_arena_release_timetohalf() {
  // @@protoc_insertion_point(field_release:Property.TransformSetApproach.timeToHalf)
  
  ::Property::ScalarPropertyValue* temp = _impl_.timetohalf_;
  _impl_.timetohalf_ = nullptr;
  return temp;
}
inline ::Property::ScalarPropertyValue* TransformSetApproach::_internal_mutable_timetohalf() {
  
  if (_impl_.timetohalf_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::ScalarPropertyValue>(GetArenaForAllocation());
    _impl_.timetohalf_ = p;
  }
  return _impl_.timetohalf_;
}
inline ::Property::ScalarPropertyValue* TransformSetApproach::mutable_timetohalf() {
  ::Property::ScalarPropertyValue* _msg = _internal_mutable_timetohalf();
  // @@protoc_insertion_point(field_mutable:Property.TransformSetApproach.timeToHalf)
  return _msg;
}
inline void TransformSetApproach::set_allocated_timetohalf(::Property::ScalarPropertyValue* timetohalf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.timetohalf_;
  }
  if (timetohalf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(timetohalf);
    if (message_arena != submessage_arena) {
      timetohalf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timetohalf, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.timetohalf_ = timetohalf;
  // @@protoc_insertion_point(field_set_allocated:Property.TransformSetApproach.timeToHalf)
}

// .Property.TransformSet start = 4;
inline bool TransformSetApproach::_internal_has_start() const {
  return this != internal_default_instance() && _impl_.start_ != nullptr;
}
inline bool TransformSetApproach::has_start() const {
  return _internal_has_start();
}
inline void TransformSetApproach::clear_start() {
  if (GetArenaForAllocation() == nullptr && _impl_.start_ != nullptr) {
    delete _impl_.start_;
  }
  _impl_.start_ = nullptr;
}
inline const ::Property::TransformSet& TransformSetApproach::_internal_start() const {
  const ::Property::TransformSet* p = _impl_.start_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::TransformSet&>(
      ::Property::_TransformSet_default_instance_);
}
inline const ::Property::TransformSet& TransformSetApproach::start() const {
  // @@protoc_insertion_point(field_get:Property.TransformSetApproach.start)
  return _internal_start();
}
inline void TransformSetApproach::unsafe_arena_set_allocated_start(
    ::Property::TransformSet* start) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.start_);
  }
  _impl_.start_ = start;
  if (start) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.TransformSetApproach.start)
}
inline ::Property::TransformSet* TransformSetApproach::release_start() {
  
  ::Property::TransformSet* temp = _impl_.start_;
  _impl_.start_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::TransformSet* TransformSetApproach::unsafe_arena_release_start() {
  // @@protoc_insertion_point(field_release:Property.TransformSetApproach.start)
  
  ::Property::TransformSet* temp = _impl_.start_;
  _impl_.start_ = nullptr;
  return temp;
}
inline ::Property::TransformSet* TransformSetApproach::_internal_mutable_start() {
  
  if (_impl_.start_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::TransformSet>(GetArenaForAllocation());
    _impl_.start_ = p;
  }
  return _impl_.start_;
}
inline ::Property::TransformSet* TransformSetApproach::mutable_start() {
  ::Property::TransformSet* _msg = _internal_mutable_start();
  // @@protoc_insertion_point(field_mutable:Property.TransformSetApproach.start)
  return _msg;
}
inline void TransformSetApproach::set_allocated_start(::Property::TransformSet* start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.start_;
  }
  if (start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(start);
    if (message_arena != submessage_arena) {
      start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.start_ = start;
  // @@protoc_insertion_point(field_set_allocated:Property.TransformSetApproach.start)
}

// -------------------------------------------------------------------

// TransformSetConditional

// .Property.BooleanPropertyValue condition = 1;
inline bool TransformSetConditional::_internal_has_condition() const {
  return this != internal_default_instance() && _impl_.condition_ != nullptr;
}
inline bool TransformSetConditional::has_condition() const {
  return _internal_has_condition();
}
inline void TransformSetConditional::clear_condition() {
  if (GetArenaForAllocation() == nullptr && _impl_.condition_ != nullptr) {
    delete _impl_.condition_;
  }
  _impl_.condition_ = nullptr;
}
inline const ::Property::BooleanPropertyValue& TransformSetConditional::_internal_condition() const {
  const ::Property::BooleanPropertyValue* p = _impl_.condition_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::BooleanPropertyValue&>(
      ::Property::_BooleanPropertyValue_default_instance_);
}
inline const ::Property::BooleanPropertyValue& TransformSetConditional::condition() const {
  // @@protoc_insertion_point(field_get:Property.TransformSetConditional.condition)
  return _internal_condition();
}
inline void TransformSetConditional::unsafe_arena_set_allocated_condition(
    ::Property::BooleanPropertyValue* condition) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.condition_);
  }
  _impl_.condition_ = condition;
  if (condition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.TransformSetConditional.condition)
}
inline ::Property::BooleanPropertyValue* TransformSetConditional::release_condition() {
  
  ::Property::BooleanPropertyValue* temp = _impl_.condition_;
  _impl_.condition_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::BooleanPropertyValue* TransformSetConditional::unsafe_arena_release_condition() {
  // @@protoc_insertion_point(field_release:Property.TransformSetConditional.condition)
  
  ::Property::BooleanPropertyValue* temp = _impl_.condition_;
  _impl_.condition_ = nullptr;
  return temp;
}
inline ::Property::BooleanPropertyValue* TransformSetConditional::_internal_mutable_condition() {
  
  if (_impl_.condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::BooleanPropertyValue>(GetArenaForAllocation());
    _impl_.condition_ = p;
  }
  return _impl_.condition_;
}
inline ::Property::BooleanPropertyValue* TransformSetConditional::mutable_condition() {
  ::Property::BooleanPropertyValue* _msg = _internal_mutable_condition();
  // @@protoc_insertion_point(field_mutable:Property.TransformSetConditional.condition)
  return _msg;
}
inline void TransformSetConditional::set_allocated_condition(::Property::BooleanPropertyValue* condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.condition_;
  }
  if (condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(condition);
    if (message_arena != submessage_arena) {
      condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, condition, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.condition_ = condition;
  // @@protoc_insertion_point(field_set_allocated:Property.TransformSetConditional.condition)
}

// optional .Property.TransformSet trueValue = 2;
inline bool TransformSetConditional::_internal_has_truevalue() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.truevalue_ != nullptr);
  return value;
}
inline bool TransformSetConditional::has_truevalue() const {
  return _internal_has_truevalue();
}
inline void TransformSetConditional::clear_truevalue() {
  if (_impl_.truevalue_ != nullptr) _impl_.truevalue_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::Property::TransformSet& TransformSetConditional::_internal_truevalue() const {
  const ::Property::TransformSet* p = _impl_.truevalue_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::TransformSet&>(
      ::Property::_TransformSet_default_instance_);
}
inline const ::Property::TransformSet& TransformSetConditional::truevalue() const {
  // @@protoc_insertion_point(field_get:Property.TransformSetConditional.trueValue)
  return _internal_truevalue();
}
inline void TransformSetConditional::unsafe_arena_set_allocated_truevalue(
    ::Property::TransformSet* truevalue) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.truevalue_);
  }
  _impl_.truevalue_ = truevalue;
  if (truevalue) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.TransformSetConditional.trueValue)
}
inline ::Property::TransformSet* TransformSetConditional::release_truevalue() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Property::TransformSet* temp = _impl_.truevalue_;
  _impl_.truevalue_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::TransformSet* TransformSetConditional::unsafe_arena_release_truevalue() {
  // @@protoc_insertion_point(field_release:Property.TransformSetConditional.trueValue)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Property::TransformSet* temp = _impl_.truevalue_;
  _impl_.truevalue_ = nullptr;
  return temp;
}
inline ::Property::TransformSet* TransformSetConditional::_internal_mutable_truevalue() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.truevalue_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::TransformSet>(GetArenaForAllocation());
    _impl_.truevalue_ = p;
  }
  return _impl_.truevalue_;
}
inline ::Property::TransformSet* TransformSetConditional::mutable_truevalue() {
  ::Property::TransformSet* _msg = _internal_mutable_truevalue();
  // @@protoc_insertion_point(field_mutable:Property.TransformSetConditional.trueValue)
  return _msg;
}
inline void TransformSetConditional::set_allocated_truevalue(::Property::TransformSet* truevalue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.truevalue_;
  }
  if (truevalue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(truevalue);
    if (message_arena != submessage_arena) {
      truevalue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, truevalue, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.truevalue_ = truevalue;
  // @@protoc_insertion_point(field_set_allocated:Property.TransformSetConditional.trueValue)
}

// optional .Property.TransformSet falseValue = 3;
inline bool TransformSetConditional::_internal_has_falsevalue() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.falsevalue_ != nullptr);
  return value;
}
inline bool TransformSetConditional::has_falsevalue() const {
  return _internal_has_falsevalue();
}
inline void TransformSetConditional::clear_falsevalue() {
  if (_impl_.falsevalue_ != nullptr) _impl_.falsevalue_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::Property::TransformSet& TransformSetConditional::_internal_falsevalue() const {
  const ::Property::TransformSet* p = _impl_.falsevalue_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::TransformSet&>(
      ::Property::_TransformSet_default_instance_);
}
inline const ::Property::TransformSet& TransformSetConditional::falsevalue() const {
  // @@protoc_insertion_point(field_get:Property.TransformSetConditional.falseValue)
  return _internal_falsevalue();
}
inline void TransformSetConditional::unsafe_arena_set_allocated_falsevalue(
    ::Property::TransformSet* falsevalue) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.falsevalue_);
  }
  _impl_.falsevalue_ = falsevalue;
  if (falsevalue) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.TransformSetConditional.falseValue)
}
inline ::Property::TransformSet* TransformSetConditional::release_falsevalue() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Property::TransformSet* temp = _impl_.falsevalue_;
  _impl_.falsevalue_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::TransformSet* TransformSetConditional::unsafe_arena_release_falsevalue() {
  // @@protoc_insertion_point(field_release:Property.TransformSetConditional.falseValue)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Property::TransformSet* temp = _impl_.falsevalue_;
  _impl_.falsevalue_ = nullptr;
  return temp;
}
inline ::Property::TransformSet* TransformSetConditional::_internal_mutable_falsevalue() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.falsevalue_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::TransformSet>(GetArenaForAllocation());
    _impl_.falsevalue_ = p;
  }
  return _impl_.falsevalue_;
}
inline ::Property::TransformSet* TransformSetConditional::mutable_falsevalue() {
  ::Property::TransformSet* _msg = _internal_mutable_falsevalue();
  // @@protoc_insertion_point(field_mutable:Property.TransformSetConditional.falseValue)
  return _msg;
}
inline void TransformSetConditional::set_allocated_falsevalue(::Property::TransformSet* falsevalue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.falsevalue_;
  }
  if (falsevalue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(falsevalue);
    if (message_arena != submessage_arena) {
      falsevalue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, falsevalue, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.falsevalue_ = falsevalue;
  // @@protoc_insertion_point(field_set_allocated:Property.TransformSetConditional.falseValue)
}

// -------------------------------------------------------------------

// TransformUpdate

// .Property.TransformUpdateAddT addTranslation = 1;
inline bool TransformUpdate::_internal_has_addtranslation() const {
  return UpdateType_case() == kAddTranslation;
}
inline bool TransformUpdate::has_addtranslation() const {
  return _internal_has_addtranslation();
}
inline void TransformUpdate::set_has_addtranslation() {
  _impl_._oneof_case_[0] = kAddTranslation;
}
inline void TransformUpdate::clear_addtranslation() {
  if (_internal_has_addtranslation()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.UpdateType_.addtranslation_;
    }
    clear_has_UpdateType();
  }
}
inline ::Property::TransformUpdateAddT* TransformUpdate::release_addtranslation() {
  // @@protoc_insertion_point(field_release:Property.TransformUpdate.addTranslation)
  if (_internal_has_addtranslation()) {
    clear_has_UpdateType();
    ::Property::TransformUpdateAddT* temp = _impl_.UpdateType_.addtranslation_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.UpdateType_.addtranslation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::TransformUpdateAddT& TransformUpdate::_internal_addtranslation() const {
  return _internal_has_addtranslation()
      ? *_impl_.UpdateType_.addtranslation_
      : reinterpret_cast< ::Property::TransformUpdateAddT&>(::Property::_TransformUpdateAddT_default_instance_);
}
inline const ::Property::TransformUpdateAddT& TransformUpdate::addtranslation() const {
  // @@protoc_insertion_point(field_get:Property.TransformUpdate.addTranslation)
  return _internal_addtranslation();
}
inline ::Property::TransformUpdateAddT* TransformUpdate::unsafe_arena_release_addtranslation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.TransformUpdate.addTranslation)
  if (_internal_has_addtranslation()) {
    clear_has_UpdateType();
    ::Property::TransformUpdateAddT* temp = _impl_.UpdateType_.addtranslation_;
    _impl_.UpdateType_.addtranslation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TransformUpdate::unsafe_arena_set_allocated_addtranslation(::Property::TransformUpdateAddT* addtranslation) {
  clear_UpdateType();
  if (addtranslation) {
    set_has_addtranslation();
    _impl_.UpdateType_.addtranslation_ = addtranslation;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.TransformUpdate.addTranslation)
}
inline ::Property::TransformUpdateAddT* TransformUpdate::_internal_mutable_addtranslation() {
  if (!_internal_has_addtranslation()) {
    clear_UpdateType();
    set_has_addtranslation();
    _impl_.UpdateType_.addtranslation_ = CreateMaybeMessage< ::Property::TransformUpdateAddT >(GetArenaForAllocation());
  }
  return _impl_.UpdateType_.addtranslation_;
}
inline ::Property::TransformUpdateAddT* TransformUpdate::mutable_addtranslation() {
  ::Property::TransformUpdateAddT* _msg = _internal_mutable_addtranslation();
  // @@protoc_insertion_point(field_mutable:Property.TransformUpdate.addTranslation)
  return _msg;
}

// .Property.TransformUpdateAddR addEulerRotation = 2;
inline bool TransformUpdate::_internal_has_addeulerrotation() const {
  return UpdateType_case() == kAddEulerRotation;
}
inline bool TransformUpdate::has_addeulerrotation() const {
  return _internal_has_addeulerrotation();
}
inline void TransformUpdate::set_has_addeulerrotation() {
  _impl_._oneof_case_[0] = kAddEulerRotation;
}
inline void TransformUpdate::clear_addeulerrotation() {
  if (_internal_has_addeulerrotation()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.UpdateType_.addeulerrotation_;
    }
    clear_has_UpdateType();
  }
}
inline ::Property::TransformUpdateAddR* TransformUpdate::release_addeulerrotation() {
  // @@protoc_insertion_point(field_release:Property.TransformUpdate.addEulerRotation)
  if (_internal_has_addeulerrotation()) {
    clear_has_UpdateType();
    ::Property::TransformUpdateAddR* temp = _impl_.UpdateType_.addeulerrotation_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.UpdateType_.addeulerrotation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::TransformUpdateAddR& TransformUpdate::_internal_addeulerrotation() const {
  return _internal_has_addeulerrotation()
      ? *_impl_.UpdateType_.addeulerrotation_
      : reinterpret_cast< ::Property::TransformUpdateAddR&>(::Property::_TransformUpdateAddR_default_instance_);
}
inline const ::Property::TransformUpdateAddR& TransformUpdate::addeulerrotation() const {
  // @@protoc_insertion_point(field_get:Property.TransformUpdate.addEulerRotation)
  return _internal_addeulerrotation();
}
inline ::Property::TransformUpdateAddR* TransformUpdate::unsafe_arena_release_addeulerrotation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.TransformUpdate.addEulerRotation)
  if (_internal_has_addeulerrotation()) {
    clear_has_UpdateType();
    ::Property::TransformUpdateAddR* temp = _impl_.UpdateType_.addeulerrotation_;
    _impl_.UpdateType_.addeulerrotation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TransformUpdate::unsafe_arena_set_allocated_addeulerrotation(::Property::TransformUpdateAddR* addeulerrotation) {
  clear_UpdateType();
  if (addeulerrotation) {
    set_has_addeulerrotation();
    _impl_.UpdateType_.addeulerrotation_ = addeulerrotation;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.TransformUpdate.addEulerRotation)
}
inline ::Property::TransformUpdateAddR* TransformUpdate::_internal_mutable_addeulerrotation() {
  if (!_internal_has_addeulerrotation()) {
    clear_UpdateType();
    set_has_addeulerrotation();
    _impl_.UpdateType_.addeulerrotation_ = CreateMaybeMessage< ::Property::TransformUpdateAddR >(GetArenaForAllocation());
  }
  return _impl_.UpdateType_.addeulerrotation_;
}
inline ::Property::TransformUpdateAddR* TransformUpdate::mutable_addeulerrotation() {
  ::Property::TransformUpdateAddR* _msg = _internal_mutable_addeulerrotation();
  // @@protoc_insertion_point(field_mutable:Property.TransformUpdate.addEulerRotation)
  return _msg;
}

// .Property.TransformUpdateAddQ addQuatRotation = 3;
inline bool TransformUpdate::_internal_has_addquatrotation() const {
  return UpdateType_case() == kAddQuatRotation;
}
inline bool TransformUpdate::has_addquatrotation() const {
  return _internal_has_addquatrotation();
}
inline void TransformUpdate::set_has_addquatrotation() {
  _impl_._oneof_case_[0] = kAddQuatRotation;
}
inline void TransformUpdate::clear_addquatrotation() {
  if (_internal_has_addquatrotation()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.UpdateType_.addquatrotation_;
    }
    clear_has_UpdateType();
  }
}
inline ::Property::TransformUpdateAddQ* TransformUpdate::release_addquatrotation() {
  // @@protoc_insertion_point(field_release:Property.TransformUpdate.addQuatRotation)
  if (_internal_has_addquatrotation()) {
    clear_has_UpdateType();
    ::Property::TransformUpdateAddQ* temp = _impl_.UpdateType_.addquatrotation_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.UpdateType_.addquatrotation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::TransformUpdateAddQ& TransformUpdate::_internal_addquatrotation() const {
  return _internal_has_addquatrotation()
      ? *_impl_.UpdateType_.addquatrotation_
      : reinterpret_cast< ::Property::TransformUpdateAddQ&>(::Property::_TransformUpdateAddQ_default_instance_);
}
inline const ::Property::TransformUpdateAddQ& TransformUpdate::addquatrotation() const {
  // @@protoc_insertion_point(field_get:Property.TransformUpdate.addQuatRotation)
  return _internal_addquatrotation();
}
inline ::Property::TransformUpdateAddQ* TransformUpdate::unsafe_arena_release_addquatrotation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.TransformUpdate.addQuatRotation)
  if (_internal_has_addquatrotation()) {
    clear_has_UpdateType();
    ::Property::TransformUpdateAddQ* temp = _impl_.UpdateType_.addquatrotation_;
    _impl_.UpdateType_.addquatrotation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TransformUpdate::unsafe_arena_set_allocated_addquatrotation(::Property::TransformUpdateAddQ* addquatrotation) {
  clear_UpdateType();
  if (addquatrotation) {
    set_has_addquatrotation();
    _impl_.UpdateType_.addquatrotation_ = addquatrotation;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.TransformUpdate.addQuatRotation)
}
inline ::Property::TransformUpdateAddQ* TransformUpdate::_internal_mutable_addquatrotation() {
  if (!_internal_has_addquatrotation()) {
    clear_UpdateType();
    set_has_addquatrotation();
    _impl_.UpdateType_.addquatrotation_ = CreateMaybeMessage< ::Property::TransformUpdateAddQ >(GetArenaForAllocation());
  }
  return _impl_.UpdateType_.addquatrotation_;
}
inline ::Property::TransformUpdateAddQ* TransformUpdate::mutable_addquatrotation() {
  ::Property::TransformUpdateAddQ* _msg = _internal_mutable_addquatrotation();
  // @@protoc_insertion_point(field_mutable:Property.TransformUpdate.addQuatRotation)
  return _msg;
}

// .Property.TransformUpdateScaleUniform uniformScale = 4;
inline bool TransformUpdate::_internal_has_uniformscale() const {
  return UpdateType_case() == kUniformScale;
}
inline bool TransformUpdate::has_uniformscale() const {
  return _internal_has_uniformscale();
}
inline void TransformUpdate::set_has_uniformscale() {
  _impl_._oneof_case_[0] = kUniformScale;
}
inline void TransformUpdate::clear_uniformscale() {
  if (_internal_has_uniformscale()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.UpdateType_.uniformscale_;
    }
    clear_has_UpdateType();
  }
}
inline ::Property::TransformUpdateScaleUniform* TransformUpdate::release_uniformscale() {
  // @@protoc_insertion_point(field_release:Property.TransformUpdate.uniformScale)
  if (_internal_has_uniformscale()) {
    clear_has_UpdateType();
    ::Property::TransformUpdateScaleUniform* temp = _impl_.UpdateType_.uniformscale_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.UpdateType_.uniformscale_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::TransformUpdateScaleUniform& TransformUpdate::_internal_uniformscale() const {
  return _internal_has_uniformscale()
      ? *_impl_.UpdateType_.uniformscale_
      : reinterpret_cast< ::Property::TransformUpdateScaleUniform&>(::Property::_TransformUpdateScaleUniform_default_instance_);
}
inline const ::Property::TransformUpdateScaleUniform& TransformUpdate::uniformscale() const {
  // @@protoc_insertion_point(field_get:Property.TransformUpdate.uniformScale)
  return _internal_uniformscale();
}
inline ::Property::TransformUpdateScaleUniform* TransformUpdate::unsafe_arena_release_uniformscale() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.TransformUpdate.uniformScale)
  if (_internal_has_uniformscale()) {
    clear_has_UpdateType();
    ::Property::TransformUpdateScaleUniform* temp = _impl_.UpdateType_.uniformscale_;
    _impl_.UpdateType_.uniformscale_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TransformUpdate::unsafe_arena_set_allocated_uniformscale(::Property::TransformUpdateScaleUniform* uniformscale) {
  clear_UpdateType();
  if (uniformscale) {
    set_has_uniformscale();
    _impl_.UpdateType_.uniformscale_ = uniformscale;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.TransformUpdate.uniformScale)
}
inline ::Property::TransformUpdateScaleUniform* TransformUpdate::_internal_mutable_uniformscale() {
  if (!_internal_has_uniformscale()) {
    clear_UpdateType();
    set_has_uniformscale();
    _impl_.UpdateType_.uniformscale_ = CreateMaybeMessage< ::Property::TransformUpdateScaleUniform >(GetArenaForAllocation());
  }
  return _impl_.UpdateType_.uniformscale_;
}
inline ::Property::TransformUpdateScaleUniform* TransformUpdate::mutable_uniformscale() {
  ::Property::TransformUpdateScaleUniform* _msg = _internal_mutable_uniformscale();
  // @@protoc_insertion_point(field_mutable:Property.TransformUpdate.uniformScale)
  return _msg;
}

// .Property.TransformUpdateScaleNonuniform nonuniformScale = 5;
inline bool TransformUpdate::_internal_has_nonuniformscale() const {
  return UpdateType_case() == kNonuniformScale;
}
inline bool TransformUpdate::has_nonuniformscale() const {
  return _internal_has_nonuniformscale();
}
inline void TransformUpdate::set_has_nonuniformscale() {
  _impl_._oneof_case_[0] = kNonuniformScale;
}
inline void TransformUpdate::clear_nonuniformscale() {
  if (_internal_has_nonuniformscale()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.UpdateType_.nonuniformscale_;
    }
    clear_has_UpdateType();
  }
}
inline ::Property::TransformUpdateScaleNonuniform* TransformUpdate::release_nonuniformscale() {
  // @@protoc_insertion_point(field_release:Property.TransformUpdate.nonuniformScale)
  if (_internal_has_nonuniformscale()) {
    clear_has_UpdateType();
    ::Property::TransformUpdateScaleNonuniform* temp = _impl_.UpdateType_.nonuniformscale_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.UpdateType_.nonuniformscale_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::TransformUpdateScaleNonuniform& TransformUpdate::_internal_nonuniformscale() const {
  return _internal_has_nonuniformscale()
      ? *_impl_.UpdateType_.nonuniformscale_
      : reinterpret_cast< ::Property::TransformUpdateScaleNonuniform&>(::Property::_TransformUpdateScaleNonuniform_default_instance_);
}
inline const ::Property::TransformUpdateScaleNonuniform& TransformUpdate::nonuniformscale() const {
  // @@protoc_insertion_point(field_get:Property.TransformUpdate.nonuniformScale)
  return _internal_nonuniformscale();
}
inline ::Property::TransformUpdateScaleNonuniform* TransformUpdate::unsafe_arena_release_nonuniformscale() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.TransformUpdate.nonuniformScale)
  if (_internal_has_nonuniformscale()) {
    clear_has_UpdateType();
    ::Property::TransformUpdateScaleNonuniform* temp = _impl_.UpdateType_.nonuniformscale_;
    _impl_.UpdateType_.nonuniformscale_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TransformUpdate::unsafe_arena_set_allocated_nonuniformscale(::Property::TransformUpdateScaleNonuniform* nonuniformscale) {
  clear_UpdateType();
  if (nonuniformscale) {
    set_has_nonuniformscale();
    _impl_.UpdateType_.nonuniformscale_ = nonuniformscale;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.TransformUpdate.nonuniformScale)
}
inline ::Property::TransformUpdateScaleNonuniform* TransformUpdate::_internal_mutable_nonuniformscale() {
  if (!_internal_has_nonuniformscale()) {
    clear_UpdateType();
    set_has_nonuniformscale();
    _impl_.UpdateType_.nonuniformscale_ = CreateMaybeMessage< ::Property::TransformUpdateScaleNonuniform >(GetArenaForAllocation());
  }
  return _impl_.UpdateType_.nonuniformscale_;
}
inline ::Property::TransformUpdateScaleNonuniform* TransformUpdate::mutable_nonuniformscale() {
  ::Property::TransformUpdateScaleNonuniform* _msg = _internal_mutable_nonuniformscale();
  // @@protoc_insertion_point(field_mutable:Property.TransformUpdate.nonuniformScale)
  return _msg;
}

// .Property.TransformUpdateLookAt facePos = 6;
inline bool TransformUpdate::_internal_has_facepos() const {
  return UpdateType_case() == kFacePos;
}
inline bool TransformUpdate::has_facepos() const {
  return _internal_has_facepos();
}
inline void TransformUpdate::set_has_facepos() {
  _impl_._oneof_case_[0] = kFacePos;
}
inline void TransformUpdate::clear_facepos() {
  if (_internal_has_facepos()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.UpdateType_.facepos_;
    }
    clear_has_UpdateType();
  }
}
inline ::Property::TransformUpdateLookAt* TransformUpdate::release_facepos() {
  // @@protoc_insertion_point(field_release:Property.TransformUpdate.facePos)
  if (_internal_has_facepos()) {
    clear_has_UpdateType();
    ::Property::TransformUpdateLookAt* temp = _impl_.UpdateType_.facepos_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.UpdateType_.facepos_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::TransformUpdateLookAt& TransformUpdate::_internal_facepos() const {
  return _internal_has_facepos()
      ? *_impl_.UpdateType_.facepos_
      : reinterpret_cast< ::Property::TransformUpdateLookAt&>(::Property::_TransformUpdateLookAt_default_instance_);
}
inline const ::Property::TransformUpdateLookAt& TransformUpdate::facepos() const {
  // @@protoc_insertion_point(field_get:Property.TransformUpdate.facePos)
  return _internal_facepos();
}
inline ::Property::TransformUpdateLookAt* TransformUpdate::unsafe_arena_release_facepos() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.TransformUpdate.facePos)
  if (_internal_has_facepos()) {
    clear_has_UpdateType();
    ::Property::TransformUpdateLookAt* temp = _impl_.UpdateType_.facepos_;
    _impl_.UpdateType_.facepos_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TransformUpdate::unsafe_arena_set_allocated_facepos(::Property::TransformUpdateLookAt* facepos) {
  clear_UpdateType();
  if (facepos) {
    set_has_facepos();
    _impl_.UpdateType_.facepos_ = facepos;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.TransformUpdate.facePos)
}
inline ::Property::TransformUpdateLookAt* TransformUpdate::_internal_mutable_facepos() {
  if (!_internal_has_facepos()) {
    clear_UpdateType();
    set_has_facepos();
    _impl_.UpdateType_.facepos_ = CreateMaybeMessage< ::Property::TransformUpdateLookAt >(GetArenaForAllocation());
  }
  return _impl_.UpdateType_.facepos_;
}
inline ::Property::TransformUpdateLookAt* TransformUpdate::mutable_facepos() {
  ::Property::TransformUpdateLookAt* _msg = _internal_mutable_facepos();
  // @@protoc_insertion_point(field_mutable:Property.TransformUpdate.facePos)
  return _msg;
}

// .Property.TransformUpdateRotateToEuler toEuler = 7;
inline bool TransformUpdate::_internal_has_toeuler() const {
  return UpdateType_case() == kToEuler;
}
inline bool TransformUpdate::has_toeuler() const {
  return _internal_has_toeuler();
}
inline void TransformUpdate::set_has_toeuler() {
  _impl_._oneof_case_[0] = kToEuler;
}
inline void TransformUpdate::clear_toeuler() {
  if (_internal_has_toeuler()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.UpdateType_.toeuler_;
    }
    clear_has_UpdateType();
  }
}
inline ::Property::TransformUpdateRotateToEuler* TransformUpdate::release_toeuler() {
  // @@protoc_insertion_point(field_release:Property.TransformUpdate.toEuler)
  if (_internal_has_toeuler()) {
    clear_has_UpdateType();
    ::Property::TransformUpdateRotateToEuler* temp = _impl_.UpdateType_.toeuler_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.UpdateType_.toeuler_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::TransformUpdateRotateToEuler& TransformUpdate::_internal_toeuler() const {
  return _internal_has_toeuler()
      ? *_impl_.UpdateType_.toeuler_
      : reinterpret_cast< ::Property::TransformUpdateRotateToEuler&>(::Property::_TransformUpdateRotateToEuler_default_instance_);
}
inline const ::Property::TransformUpdateRotateToEuler& TransformUpdate::toeuler() const {
  // @@protoc_insertion_point(field_get:Property.TransformUpdate.toEuler)
  return _internal_toeuler();
}
inline ::Property::TransformUpdateRotateToEuler* TransformUpdate::unsafe_arena_release_toeuler() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.TransformUpdate.toEuler)
  if (_internal_has_toeuler()) {
    clear_has_UpdateType();
    ::Property::TransformUpdateRotateToEuler* temp = _impl_.UpdateType_.toeuler_;
    _impl_.UpdateType_.toeuler_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TransformUpdate::unsafe_arena_set_allocated_toeuler(::Property::TransformUpdateRotateToEuler* toeuler) {
  clear_UpdateType();
  if (toeuler) {
    set_has_toeuler();
    _impl_.UpdateType_.toeuler_ = toeuler;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.TransformUpdate.toEuler)
}
inline ::Property::TransformUpdateRotateToEuler* TransformUpdate::_internal_mutable_toeuler() {
  if (!_internal_has_toeuler()) {
    clear_UpdateType();
    set_has_toeuler();
    _impl_.UpdateType_.toeuler_ = CreateMaybeMessage< ::Property::TransformUpdateRotateToEuler >(GetArenaForAllocation());
  }
  return _impl_.UpdateType_.toeuler_;
}
inline ::Property::TransformUpdateRotateToEuler* TransformUpdate::mutable_toeuler() {
  ::Property::TransformUpdateRotateToEuler* _msg = _internal_mutable_toeuler();
  // @@protoc_insertion_point(field_mutable:Property.TransformUpdate.toEuler)
  return _msg;
}

// .Property.TransformUpdateRotateToQuat toQuat = 8;
inline bool TransformUpdate::_internal_has_toquat() const {
  return UpdateType_case() == kToQuat;
}
inline bool TransformUpdate::has_toquat() const {
  return _internal_has_toquat();
}
inline void TransformUpdate::set_has_toquat() {
  _impl_._oneof_case_[0] = kToQuat;
}
inline void TransformUpdate::clear_toquat() {
  if (_internal_has_toquat()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.UpdateType_.toquat_;
    }
    clear_has_UpdateType();
  }
}
inline ::Property::TransformUpdateRotateToQuat* TransformUpdate::release_toquat() {
  // @@protoc_insertion_point(field_release:Property.TransformUpdate.toQuat)
  if (_internal_has_toquat()) {
    clear_has_UpdateType();
    ::Property::TransformUpdateRotateToQuat* temp = _impl_.UpdateType_.toquat_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.UpdateType_.toquat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::TransformUpdateRotateToQuat& TransformUpdate::_internal_toquat() const {
  return _internal_has_toquat()
      ? *_impl_.UpdateType_.toquat_
      : reinterpret_cast< ::Property::TransformUpdateRotateToQuat&>(::Property::_TransformUpdateRotateToQuat_default_instance_);
}
inline const ::Property::TransformUpdateRotateToQuat& TransformUpdate::toquat() const {
  // @@protoc_insertion_point(field_get:Property.TransformUpdate.toQuat)
  return _internal_toquat();
}
inline ::Property::TransformUpdateRotateToQuat* TransformUpdate::unsafe_arena_release_toquat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.TransformUpdate.toQuat)
  if (_internal_has_toquat()) {
    clear_has_UpdateType();
    ::Property::TransformUpdateRotateToQuat* temp = _impl_.UpdateType_.toquat_;
    _impl_.UpdateType_.toquat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TransformUpdate::unsafe_arena_set_allocated_toquat(::Property::TransformUpdateRotateToQuat* toquat) {
  clear_UpdateType();
  if (toquat) {
    set_has_toquat();
    _impl_.UpdateType_.toquat_ = toquat;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.TransformUpdate.toQuat)
}
inline ::Property::TransformUpdateRotateToQuat* TransformUpdate::_internal_mutable_toquat() {
  if (!_internal_has_toquat()) {
    clear_UpdateType();
    set_has_toquat();
    _impl_.UpdateType_.toquat_ = CreateMaybeMessage< ::Property::TransformUpdateRotateToQuat >(GetArenaForAllocation());
  }
  return _impl_.UpdateType_.toquat_;
}
inline ::Property::TransformUpdateRotateToQuat* TransformUpdate::mutable_toquat() {
  ::Property::TransformUpdateRotateToQuat* _msg = _internal_mutable_toquat();
  // @@protoc_insertion_point(field_mutable:Property.TransformUpdate.toQuat)
  return _msg;
}

// string expr = 9;
inline bool TransformUpdate::_internal_has_expr() const {
  return UpdateType_case() == kExpr;
}
inline bool TransformUpdate::has_expr() const {
  return _internal_has_expr();
}
inline void TransformUpdate::set_has_expr() {
  _impl_._oneof_case_[0] = kExpr;
}
inline void TransformUpdate::clear_expr() {
  if (_internal_has_expr()) {
    _impl_.UpdateType_.expr_.Destroy();
    clear_has_UpdateType();
  }
}
inline const std::string& TransformUpdate::expr() const {
  // @@protoc_insertion_point(field_get:Property.TransformUpdate.expr)
  return _internal_expr();
}
template <typename ArgT0, typename... ArgT>
inline void TransformUpdate::set_expr(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_expr()) {
    clear_UpdateType();
    set_has_expr();
    _impl_.UpdateType_.expr_.InitDefault();
  }
  _impl_.UpdateType_.expr_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Property.TransformUpdate.expr)
}
inline std::string* TransformUpdate::mutable_expr() {
  std::string* _s = _internal_mutable_expr();
  // @@protoc_insertion_point(field_mutable:Property.TransformUpdate.expr)
  return _s;
}
inline const std::string& TransformUpdate::_internal_expr() const {
  if (_internal_has_expr()) {
    return _impl_.UpdateType_.expr_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TransformUpdate::_internal_set_expr(const std::string& value) {
  if (!_internal_has_expr()) {
    clear_UpdateType();
    set_has_expr();
    _impl_.UpdateType_.expr_.InitDefault();
  }
  _impl_.UpdateType_.expr_.Set(value, GetArenaForAllocation());
}
inline std::string* TransformUpdate::_internal_mutable_expr() {
  if (!_internal_has_expr()) {
    clear_UpdateType();
    set_has_expr();
    _impl_.UpdateType_.expr_.InitDefault();
  }
  return _impl_.UpdateType_.expr_.Mutable(      GetArenaForAllocation());
}
inline std::string* TransformUpdate::release_expr() {
  // @@protoc_insertion_point(field_release:Property.TransformUpdate.expr)
  if (_internal_has_expr()) {
    clear_has_UpdateType();
    return _impl_.UpdateType_.expr_.Release();
  } else {
    return nullptr;
  }
}
inline void TransformUpdate::set_allocated_expr(std::string* expr) {
  if (has_UpdateType()) {
    clear_UpdateType();
  }
  if (expr != nullptr) {
    set_has_expr();
    _impl_.UpdateType_.expr_.InitAllocated(expr, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:Property.TransformUpdate.expr)
}

inline bool TransformUpdate::has_UpdateType() const {
  return UpdateType_case() != UPDATETYPE_NOT_SET;
}
inline void TransformUpdate::clear_has_UpdateType() {
  _impl_._oneof_case_[0] = UPDATETYPE_NOT_SET;
}
inline TransformUpdate::UpdateTypeCase TransformUpdate::UpdateType_case() const {
  return TransformUpdate::UpdateTypeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// TransformUpdateAddT

// .Property.VectorPropertyValue offsetPosition = 1;
inline bool TransformUpdateAddT::_internal_has_offsetposition() const {
  return this != internal_default_instance() && _impl_.offsetposition_ != nullptr;
}
inline bool TransformUpdateAddT::has_offsetposition() const {
  return _internal_has_offsetposition();
}
inline void TransformUpdateAddT::clear_offsetposition() {
  if (GetArenaForAllocation() == nullptr && _impl_.offsetposition_ != nullptr) {
    delete _impl_.offsetposition_;
  }
  _impl_.offsetposition_ = nullptr;
}
inline const ::Property::VectorPropertyValue& TransformUpdateAddT::_internal_offsetposition() const {
  const ::Property::VectorPropertyValue* p = _impl_.offsetposition_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::VectorPropertyValue&>(
      ::Property::_VectorPropertyValue_default_instance_);
}
inline const ::Property::VectorPropertyValue& TransformUpdateAddT::offsetposition() const {
  // @@protoc_insertion_point(field_get:Property.TransformUpdateAddT.offsetPosition)
  return _internal_offsetposition();
}
inline void TransformUpdateAddT::unsafe_arena_set_allocated_offsetposition(
    ::Property::VectorPropertyValue* offsetposition) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.offsetposition_);
  }
  _impl_.offsetposition_ = offsetposition;
  if (offsetposition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.TransformUpdateAddT.offsetPosition)
}
inline ::Property::VectorPropertyValue* TransformUpdateAddT::release_offsetposition() {
  
  ::Property::VectorPropertyValue* temp = _impl_.offsetposition_;
  _impl_.offsetposition_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::VectorPropertyValue* TransformUpdateAddT::unsafe_arena_release_offsetposition() {
  // @@protoc_insertion_point(field_release:Property.TransformUpdateAddT.offsetPosition)
  
  ::Property::VectorPropertyValue* temp = _impl_.offsetposition_;
  _impl_.offsetposition_ = nullptr;
  return temp;
}
inline ::Property::VectorPropertyValue* TransformUpdateAddT::_internal_mutable_offsetposition() {
  
  if (_impl_.offsetposition_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::VectorPropertyValue>(GetArenaForAllocation());
    _impl_.offsetposition_ = p;
  }
  return _impl_.offsetposition_;
}
inline ::Property::VectorPropertyValue* TransformUpdateAddT::mutable_offsetposition() {
  ::Property::VectorPropertyValue* _msg = _internal_mutable_offsetposition();
  // @@protoc_insertion_point(field_mutable:Property.TransformUpdateAddT.offsetPosition)
  return _msg;
}
inline void TransformUpdateAddT::set_allocated_offsetposition(::Property::VectorPropertyValue* offsetposition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.offsetposition_;
  }
  if (offsetposition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(offsetposition);
    if (message_arena != submessage_arena) {
      offsetposition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offsetposition, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.offsetposition_ = offsetposition;
  // @@protoc_insertion_point(field_set_allocated:Property.TransformUpdateAddT.offsetPosition)
}

// -------------------------------------------------------------------

// TransformUpdateAddR

// .Property.VectorPropertyValue offsetRotationEuler = 1;
inline bool TransformUpdateAddR::_internal_has_offsetrotationeuler() const {
  return this != internal_default_instance() && _impl_.offsetrotationeuler_ != nullptr;
}
inline bool TransformUpdateAddR::has_offsetrotationeuler() const {
  return _internal_has_offsetrotationeuler();
}
inline void TransformUpdateAddR::clear_offsetrotationeuler() {
  if (GetArenaForAllocation() == nullptr && _impl_.offsetrotationeuler_ != nullptr) {
    delete _impl_.offsetrotationeuler_;
  }
  _impl_.offsetrotationeuler_ = nullptr;
}
inline const ::Property::VectorPropertyValue& TransformUpdateAddR::_internal_offsetrotationeuler() const {
  const ::Property::VectorPropertyValue* p = _impl_.offsetrotationeuler_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::VectorPropertyValue&>(
      ::Property::_VectorPropertyValue_default_instance_);
}
inline const ::Property::VectorPropertyValue& TransformUpdateAddR::offsetrotationeuler() const {
  // @@protoc_insertion_point(field_get:Property.TransformUpdateAddR.offsetRotationEuler)
  return _internal_offsetrotationeuler();
}
inline void TransformUpdateAddR::unsafe_arena_set_allocated_offsetrotationeuler(
    ::Property::VectorPropertyValue* offsetrotationeuler) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.offsetrotationeuler_);
  }
  _impl_.offsetrotationeuler_ = offsetrotationeuler;
  if (offsetrotationeuler) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.TransformUpdateAddR.offsetRotationEuler)
}
inline ::Property::VectorPropertyValue* TransformUpdateAddR::release_offsetrotationeuler() {
  
  ::Property::VectorPropertyValue* temp = _impl_.offsetrotationeuler_;
  _impl_.offsetrotationeuler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::VectorPropertyValue* TransformUpdateAddR::unsafe_arena_release_offsetrotationeuler() {
  // @@protoc_insertion_point(field_release:Property.TransformUpdateAddR.offsetRotationEuler)
  
  ::Property::VectorPropertyValue* temp = _impl_.offsetrotationeuler_;
  _impl_.offsetrotationeuler_ = nullptr;
  return temp;
}
inline ::Property::VectorPropertyValue* TransformUpdateAddR::_internal_mutable_offsetrotationeuler() {
  
  if (_impl_.offsetrotationeuler_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::VectorPropertyValue>(GetArenaForAllocation());
    _impl_.offsetrotationeuler_ = p;
  }
  return _impl_.offsetrotationeuler_;
}
inline ::Property::VectorPropertyValue* TransformUpdateAddR::mutable_offsetrotationeuler() {
  ::Property::VectorPropertyValue* _msg = _internal_mutable_offsetrotationeuler();
  // @@protoc_insertion_point(field_mutable:Property.TransformUpdateAddR.offsetRotationEuler)
  return _msg;
}
inline void TransformUpdateAddR::set_allocated_offsetrotationeuler(::Property::VectorPropertyValue* offsetrotationeuler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.offsetrotationeuler_;
  }
  if (offsetrotationeuler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(offsetrotationeuler);
    if (message_arena != submessage_arena) {
      offsetrotationeuler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offsetrotationeuler, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.offsetrotationeuler_ = offsetrotationeuler;
  // @@protoc_insertion_point(field_set_allocated:Property.TransformUpdateAddR.offsetRotationEuler)
}

// -------------------------------------------------------------------

// TransformUpdateAddQ

// .Property.VectorPropertyValue offsetRotationQuat = 1;
inline bool TransformUpdateAddQ::_internal_has_offsetrotationquat() const {
  return this != internal_default_instance() && _impl_.offsetrotationquat_ != nullptr;
}
inline bool TransformUpdateAddQ::has_offsetrotationquat() const {
  return _internal_has_offsetrotationquat();
}
inline void TransformUpdateAddQ::clear_offsetrotationquat() {
  if (GetArenaForAllocation() == nullptr && _impl_.offsetrotationquat_ != nullptr) {
    delete _impl_.offsetrotationquat_;
  }
  _impl_.offsetrotationquat_ = nullptr;
}
inline const ::Property::VectorPropertyValue& TransformUpdateAddQ::_internal_offsetrotationquat() const {
  const ::Property::VectorPropertyValue* p = _impl_.offsetrotationquat_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::VectorPropertyValue&>(
      ::Property::_VectorPropertyValue_default_instance_);
}
inline const ::Property::VectorPropertyValue& TransformUpdateAddQ::offsetrotationquat() const {
  // @@protoc_insertion_point(field_get:Property.TransformUpdateAddQ.offsetRotationQuat)
  return _internal_offsetrotationquat();
}
inline void TransformUpdateAddQ::unsafe_arena_set_allocated_offsetrotationquat(
    ::Property::VectorPropertyValue* offsetrotationquat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.offsetrotationquat_);
  }
  _impl_.offsetrotationquat_ = offsetrotationquat;
  if (offsetrotationquat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.TransformUpdateAddQ.offsetRotationQuat)
}
inline ::Property::VectorPropertyValue* TransformUpdateAddQ::release_offsetrotationquat() {
  
  ::Property::VectorPropertyValue* temp = _impl_.offsetrotationquat_;
  _impl_.offsetrotationquat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::VectorPropertyValue* TransformUpdateAddQ::unsafe_arena_release_offsetrotationquat() {
  // @@protoc_insertion_point(field_release:Property.TransformUpdateAddQ.offsetRotationQuat)
  
  ::Property::VectorPropertyValue* temp = _impl_.offsetrotationquat_;
  _impl_.offsetrotationquat_ = nullptr;
  return temp;
}
inline ::Property::VectorPropertyValue* TransformUpdateAddQ::_internal_mutable_offsetrotationquat() {
  
  if (_impl_.offsetrotationquat_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::VectorPropertyValue>(GetArenaForAllocation());
    _impl_.offsetrotationquat_ = p;
  }
  return _impl_.offsetrotationquat_;
}
inline ::Property::VectorPropertyValue* TransformUpdateAddQ::mutable_offsetrotationquat() {
  ::Property::VectorPropertyValue* _msg = _internal_mutable_offsetrotationquat();
  // @@protoc_insertion_point(field_mutable:Property.TransformUpdateAddQ.offsetRotationQuat)
  return _msg;
}
inline void TransformUpdateAddQ::set_allocated_offsetrotationquat(::Property::VectorPropertyValue* offsetrotationquat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.offsetrotationquat_;
  }
  if (offsetrotationquat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(offsetrotationquat);
    if (message_arena != submessage_arena) {
      offsetrotationquat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offsetrotationquat, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.offsetrotationquat_ = offsetrotationquat;
  // @@protoc_insertion_point(field_set_allocated:Property.TransformUpdateAddQ.offsetRotationQuat)
}

// -------------------------------------------------------------------

// TransformUpdateScaleUniform

// .Property.ScalarPropertyValue uniformScaleMultiplier = 1;
inline bool TransformUpdateScaleUniform::_internal_has_uniformscalemultiplier() const {
  return this != internal_default_instance() && _impl_.uniformscalemultiplier_ != nullptr;
}
inline bool TransformUpdateScaleUniform::has_uniformscalemultiplier() const {
  return _internal_has_uniformscalemultiplier();
}
inline void TransformUpdateScaleUniform::clear_uniformscalemultiplier() {
  if (GetArenaForAllocation() == nullptr && _impl_.uniformscalemultiplier_ != nullptr) {
    delete _impl_.uniformscalemultiplier_;
  }
  _impl_.uniformscalemultiplier_ = nullptr;
}
inline const ::Property::ScalarPropertyValue& TransformUpdateScaleUniform::_internal_uniformscalemultiplier() const {
  const ::Property::ScalarPropertyValue* p = _impl_.uniformscalemultiplier_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::ScalarPropertyValue&>(
      ::Property::_ScalarPropertyValue_default_instance_);
}
inline const ::Property::ScalarPropertyValue& TransformUpdateScaleUniform::uniformscalemultiplier() const {
  // @@protoc_insertion_point(field_get:Property.TransformUpdateScaleUniform.uniformScaleMultiplier)
  return _internal_uniformscalemultiplier();
}
inline void TransformUpdateScaleUniform::unsafe_arena_set_allocated_uniformscalemultiplier(
    ::Property::ScalarPropertyValue* uniformscalemultiplier) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.uniformscalemultiplier_);
  }
  _impl_.uniformscalemultiplier_ = uniformscalemultiplier;
  if (uniformscalemultiplier) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.TransformUpdateScaleUniform.uniformScaleMultiplier)
}
inline ::Property::ScalarPropertyValue* TransformUpdateScaleUniform::release_uniformscalemultiplier() {
  
  ::Property::ScalarPropertyValue* temp = _impl_.uniformscalemultiplier_;
  _impl_.uniformscalemultiplier_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::ScalarPropertyValue* TransformUpdateScaleUniform::unsafe_arena_release_uniformscalemultiplier() {
  // @@protoc_insertion_point(field_release:Property.TransformUpdateScaleUniform.uniformScaleMultiplier)
  
  ::Property::ScalarPropertyValue* temp = _impl_.uniformscalemultiplier_;
  _impl_.uniformscalemultiplier_ = nullptr;
  return temp;
}
inline ::Property::ScalarPropertyValue* TransformUpdateScaleUniform::_internal_mutable_uniformscalemultiplier() {
  
  if (_impl_.uniformscalemultiplier_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::ScalarPropertyValue>(GetArenaForAllocation());
    _impl_.uniformscalemultiplier_ = p;
  }
  return _impl_.uniformscalemultiplier_;
}
inline ::Property::ScalarPropertyValue* TransformUpdateScaleUniform::mutable_uniformscalemultiplier() {
  ::Property::ScalarPropertyValue* _msg = _internal_mutable_uniformscalemultiplier();
  // @@protoc_insertion_point(field_mutable:Property.TransformUpdateScaleUniform.uniformScaleMultiplier)
  return _msg;
}
inline void TransformUpdateScaleUniform::set_allocated_uniformscalemultiplier(::Property::ScalarPropertyValue* uniformscalemultiplier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.uniformscalemultiplier_;
  }
  if (uniformscalemultiplier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(uniformscalemultiplier);
    if (message_arena != submessage_arena) {
      uniformscalemultiplier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uniformscalemultiplier, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.uniformscalemultiplier_ = uniformscalemultiplier;
  // @@protoc_insertion_point(field_set_allocated:Property.TransformUpdateScaleUniform.uniformScaleMultiplier)
}

// -------------------------------------------------------------------

// TransformUpdateScaleNonuniform

// .Property.VectorPropertyValue nonuniformScaleMultiplier = 2;
inline bool TransformUpdateScaleNonuniform::_internal_has_nonuniformscalemultiplier() const {
  return this != internal_default_instance() && _impl_.nonuniformscalemultiplier_ != nullptr;
}
inline bool TransformUpdateScaleNonuniform::has_nonuniformscalemultiplier() const {
  return _internal_has_nonuniformscalemultiplier();
}
inline void TransformUpdateScaleNonuniform::clear_nonuniformscalemultiplier() {
  if (GetArenaForAllocation() == nullptr && _impl_.nonuniformscalemultiplier_ != nullptr) {
    delete _impl_.nonuniformscalemultiplier_;
  }
  _impl_.nonuniformscalemultiplier_ = nullptr;
}
inline const ::Property::VectorPropertyValue& TransformUpdateScaleNonuniform::_internal_nonuniformscalemultiplier() const {
  const ::Property::VectorPropertyValue* p = _impl_.nonuniformscalemultiplier_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::VectorPropertyValue&>(
      ::Property::_VectorPropertyValue_default_instance_);
}
inline const ::Property::VectorPropertyValue& TransformUpdateScaleNonuniform::nonuniformscalemultiplier() const {
  // @@protoc_insertion_point(field_get:Property.TransformUpdateScaleNonuniform.nonuniformScaleMultiplier)
  return _internal_nonuniformscalemultiplier();
}
inline void TransformUpdateScaleNonuniform::unsafe_arena_set_allocated_nonuniformscalemultiplier(
    ::Property::VectorPropertyValue* nonuniformscalemultiplier) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.nonuniformscalemultiplier_);
  }
  _impl_.nonuniformscalemultiplier_ = nonuniformscalemultiplier;
  if (nonuniformscalemultiplier) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.TransformUpdateScaleNonuniform.nonuniformScaleMultiplier)
}
inline ::Property::VectorPropertyValue* TransformUpdateScaleNonuniform::release_nonuniformscalemultiplier() {
  
  ::Property::VectorPropertyValue* temp = _impl_.nonuniformscalemultiplier_;
  _impl_.nonuniformscalemultiplier_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::VectorPropertyValue* TransformUpdateScaleNonuniform::unsafe_arena_release_nonuniformscalemultiplier() {
  // @@protoc_insertion_point(field_release:Property.TransformUpdateScaleNonuniform.nonuniformScaleMultiplier)
  
  ::Property::VectorPropertyValue* temp = _impl_.nonuniformscalemultiplier_;
  _impl_.nonuniformscalemultiplier_ = nullptr;
  return temp;
}
inline ::Property::VectorPropertyValue* TransformUpdateScaleNonuniform::_internal_mutable_nonuniformscalemultiplier() {
  
  if (_impl_.nonuniformscalemultiplier_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::VectorPropertyValue>(GetArenaForAllocation());
    _impl_.nonuniformscalemultiplier_ = p;
  }
  return _impl_.nonuniformscalemultiplier_;
}
inline ::Property::VectorPropertyValue* TransformUpdateScaleNonuniform::mutable_nonuniformscalemultiplier() {
  ::Property::VectorPropertyValue* _msg = _internal_mutable_nonuniformscalemultiplier();
  // @@protoc_insertion_point(field_mutable:Property.TransformUpdateScaleNonuniform.nonuniformScaleMultiplier)
  return _msg;
}
inline void TransformUpdateScaleNonuniform::set_allocated_nonuniformscalemultiplier(::Property::VectorPropertyValue* nonuniformscalemultiplier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.nonuniformscalemultiplier_;
  }
  if (nonuniformscalemultiplier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(nonuniformscalemultiplier);
    if (message_arena != submessage_arena) {
      nonuniformscalemultiplier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nonuniformscalemultiplier, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.nonuniformscalemultiplier_ = nonuniformscalemultiplier;
  // @@protoc_insertion_point(field_set_allocated:Property.TransformUpdateScaleNonuniform.nonuniformScaleMultiplier)
}

// -------------------------------------------------------------------

// TransformUpdateLookAt

// .Property.ScalarPropertyValue percentToMove = 1;
inline bool TransformUpdateLookAt::_internal_has_percenttomove() const {
  return this != internal_default_instance() && _impl_.percenttomove_ != nullptr;
}
inline bool TransformUpdateLookAt::has_percenttomove() const {
  return _internal_has_percenttomove();
}
inline void TransformUpdateLookAt::clear_percenttomove() {
  if (GetArenaForAllocation() == nullptr && _impl_.percenttomove_ != nullptr) {
    delete _impl_.percenttomove_;
  }
  _impl_.percenttomove_ = nullptr;
}
inline const ::Property::ScalarPropertyValue& TransformUpdateLookAt::_internal_percenttomove() const {
  const ::Property::ScalarPropertyValue* p = _impl_.percenttomove_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::ScalarPropertyValue&>(
      ::Property::_ScalarPropertyValue_default_instance_);
}
inline const ::Property::ScalarPropertyValue& TransformUpdateLookAt::percenttomove() const {
  // @@protoc_insertion_point(field_get:Property.TransformUpdateLookAt.percentToMove)
  return _internal_percenttomove();
}
inline void TransformUpdateLookAt::unsafe_arena_set_allocated_percenttomove(
    ::Property::ScalarPropertyValue* percenttomove) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.percenttomove_);
  }
  _impl_.percenttomove_ = percenttomove;
  if (percenttomove) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.TransformUpdateLookAt.percentToMove)
}
inline ::Property::ScalarPropertyValue* TransformUpdateLookAt::release_percenttomove() {
  
  ::Property::ScalarPropertyValue* temp = _impl_.percenttomove_;
  _impl_.percenttomove_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::ScalarPropertyValue* TransformUpdateLookAt::unsafe_arena_release_percenttomove() {
  // @@protoc_insertion_point(field_release:Property.TransformUpdateLookAt.percentToMove)
  
  ::Property::ScalarPropertyValue* temp = _impl_.percenttomove_;
  _impl_.percenttomove_ = nullptr;
  return temp;
}
inline ::Property::ScalarPropertyValue* TransformUpdateLookAt::_internal_mutable_percenttomove() {
  
  if (_impl_.percenttomove_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::ScalarPropertyValue>(GetArenaForAllocation());
    _impl_.percenttomove_ = p;
  }
  return _impl_.percenttomove_;
}
inline ::Property::ScalarPropertyValue* TransformUpdateLookAt::mutable_percenttomove() {
  ::Property::ScalarPropertyValue* _msg = _internal_mutable_percenttomove();
  // @@protoc_insertion_point(field_mutable:Property.TransformUpdateLookAt.percentToMove)
  return _msg;
}
inline void TransformUpdateLookAt::set_allocated_percenttomove(::Property::ScalarPropertyValue* percenttomove) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.percenttomove_;
  }
  if (percenttomove) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(percenttomove);
    if (message_arena != submessage_arena) {
      percenttomove = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, percenttomove, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.percenttomove_ = percenttomove;
  // @@protoc_insertion_point(field_set_allocated:Property.TransformUpdateLookAt.percentToMove)
}

// .Property.VectorPropertyValue lookAt = 2;
inline bool TransformUpdateLookAt::_internal_has_lookat() const {
  return this != internal_default_instance() && _impl_.lookat_ != nullptr;
}
inline bool TransformUpdateLookAt::has_lookat() const {
  return _internal_has_lookat();
}
inline void TransformUpdateLookAt::clear_lookat() {
  if (GetArenaForAllocation() == nullptr && _impl_.lookat_ != nullptr) {
    delete _impl_.lookat_;
  }
  _impl_.lookat_ = nullptr;
}
inline const ::Property::VectorPropertyValue& TransformUpdateLookAt::_internal_lookat() const {
  const ::Property::VectorPropertyValue* p = _impl_.lookat_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::VectorPropertyValue&>(
      ::Property::_VectorPropertyValue_default_instance_);
}
inline const ::Property::VectorPropertyValue& TransformUpdateLookAt::lookat() const {
  // @@protoc_insertion_point(field_get:Property.TransformUpdateLookAt.lookAt)
  return _internal_lookat();
}
inline void TransformUpdateLookAt::unsafe_arena_set_allocated_lookat(
    ::Property::VectorPropertyValue* lookat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lookat_);
  }
  _impl_.lookat_ = lookat;
  if (lookat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.TransformUpdateLookAt.lookAt)
}
inline ::Property::VectorPropertyValue* TransformUpdateLookAt::release_lookat() {
  
  ::Property::VectorPropertyValue* temp = _impl_.lookat_;
  _impl_.lookat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::VectorPropertyValue* TransformUpdateLookAt::unsafe_arena_release_lookat() {
  // @@protoc_insertion_point(field_release:Property.TransformUpdateLookAt.lookAt)
  
  ::Property::VectorPropertyValue* temp = _impl_.lookat_;
  _impl_.lookat_ = nullptr;
  return temp;
}
inline ::Property::VectorPropertyValue* TransformUpdateLookAt::_internal_mutable_lookat() {
  
  if (_impl_.lookat_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::VectorPropertyValue>(GetArenaForAllocation());
    _impl_.lookat_ = p;
  }
  return _impl_.lookat_;
}
inline ::Property::VectorPropertyValue* TransformUpdateLookAt::mutable_lookat() {
  ::Property::VectorPropertyValue* _msg = _internal_mutable_lookat();
  // @@protoc_insertion_point(field_mutable:Property.TransformUpdateLookAt.lookAt)
  return _msg;
}
inline void TransformUpdateLookAt::set_allocated_lookat(::Property::VectorPropertyValue* lookat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.lookat_;
  }
  if (lookat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(lookat);
    if (message_arena != submessage_arena) {
      lookat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lookat, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.lookat_ = lookat;
  // @@protoc_insertion_point(field_set_allocated:Property.TransformUpdateLookAt.lookAt)
}

// -------------------------------------------------------------------

// TransformUpdateRotateToEuler

// .Property.ScalarPropertyValue percentToMove = 1;
inline bool TransformUpdateRotateToEuler::_internal_has_percenttomove() const {
  return this != internal_default_instance() && _impl_.percenttomove_ != nullptr;
}
inline bool TransformUpdateRotateToEuler::has_percenttomove() const {
  return _internal_has_percenttomove();
}
inline void TransformUpdateRotateToEuler::clear_percenttomove() {
  if (GetArenaForAllocation() == nullptr && _impl_.percenttomove_ != nullptr) {
    delete _impl_.percenttomove_;
  }
  _impl_.percenttomove_ = nullptr;
}
inline const ::Property::ScalarPropertyValue& TransformUpdateRotateToEuler::_internal_percenttomove() const {
  const ::Property::ScalarPropertyValue* p = _impl_.percenttomove_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::ScalarPropertyValue&>(
      ::Property::_ScalarPropertyValue_default_instance_);
}
inline const ::Property::ScalarPropertyValue& TransformUpdateRotateToEuler::percenttomove() const {
  // @@protoc_insertion_point(field_get:Property.TransformUpdateRotateToEuler.percentToMove)
  return _internal_percenttomove();
}
inline void TransformUpdateRotateToEuler::unsafe_arena_set_allocated_percenttomove(
    ::Property::ScalarPropertyValue* percenttomove) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.percenttomove_);
  }
  _impl_.percenttomove_ = percenttomove;
  if (percenttomove) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.TransformUpdateRotateToEuler.percentToMove)
}
inline ::Property::ScalarPropertyValue* TransformUpdateRotateToEuler::release_percenttomove() {
  
  ::Property::ScalarPropertyValue* temp = _impl_.percenttomove_;
  _impl_.percenttomove_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::ScalarPropertyValue* TransformUpdateRotateToEuler::unsafe_arena_release_percenttomove() {
  // @@protoc_insertion_point(field_release:Property.TransformUpdateRotateToEuler.percentToMove)
  
  ::Property::ScalarPropertyValue* temp = _impl_.percenttomove_;
  _impl_.percenttomove_ = nullptr;
  return temp;
}
inline ::Property::ScalarPropertyValue* TransformUpdateRotateToEuler::_internal_mutable_percenttomove() {
  
  if (_impl_.percenttomove_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::ScalarPropertyValue>(GetArenaForAllocation());
    _impl_.percenttomove_ = p;
  }
  return _impl_.percenttomove_;
}
inline ::Property::ScalarPropertyValue* TransformUpdateRotateToEuler::mutable_percenttomove() {
  ::Property::ScalarPropertyValue* _msg = _internal_mutable_percenttomove();
  // @@protoc_insertion_point(field_mutable:Property.TransformUpdateRotateToEuler.percentToMove)
  return _msg;
}
inline void TransformUpdateRotateToEuler::set_allocated_percenttomove(::Property::ScalarPropertyValue* percenttomove) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.percenttomove_;
  }
  if (percenttomove) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(percenttomove);
    if (message_arena != submessage_arena) {
      percenttomove = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, percenttomove, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.percenttomove_ = percenttomove;
  // @@protoc_insertion_point(field_set_allocated:Property.TransformUpdateRotateToEuler.percentToMove)
}

// .Property.VectorPropertyValue toEuler = 2;
inline bool TransformUpdateRotateToEuler::_internal_has_toeuler() const {
  return this != internal_default_instance() && _impl_.toeuler_ != nullptr;
}
inline bool TransformUpdateRotateToEuler::has_toeuler() const {
  return _internal_has_toeuler();
}
inline void TransformUpdateRotateToEuler::clear_toeuler() {
  if (GetArenaForAllocation() == nullptr && _impl_.toeuler_ != nullptr) {
    delete _impl_.toeuler_;
  }
  _impl_.toeuler_ = nullptr;
}
inline const ::Property::VectorPropertyValue& TransformUpdateRotateToEuler::_internal_toeuler() const {
  const ::Property::VectorPropertyValue* p = _impl_.toeuler_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::VectorPropertyValue&>(
      ::Property::_VectorPropertyValue_default_instance_);
}
inline const ::Property::VectorPropertyValue& TransformUpdateRotateToEuler::toeuler() const {
  // @@protoc_insertion_point(field_get:Property.TransformUpdateRotateToEuler.toEuler)
  return _internal_toeuler();
}
inline void TransformUpdateRotateToEuler::unsafe_arena_set_allocated_toeuler(
    ::Property::VectorPropertyValue* toeuler) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.toeuler_);
  }
  _impl_.toeuler_ = toeuler;
  if (toeuler) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.TransformUpdateRotateToEuler.toEuler)
}
inline ::Property::VectorPropertyValue* TransformUpdateRotateToEuler::release_toeuler() {
  
  ::Property::VectorPropertyValue* temp = _impl_.toeuler_;
  _impl_.toeuler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::VectorPropertyValue* TransformUpdateRotateToEuler::unsafe_arena_release_toeuler() {
  // @@protoc_insertion_point(field_release:Property.TransformUpdateRotateToEuler.toEuler)
  
  ::Property::VectorPropertyValue* temp = _impl_.toeuler_;
  _impl_.toeuler_ = nullptr;
  return temp;
}
inline ::Property::VectorPropertyValue* TransformUpdateRotateToEuler::_internal_mutable_toeuler() {
  
  if (_impl_.toeuler_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::VectorPropertyValue>(GetArenaForAllocation());
    _impl_.toeuler_ = p;
  }
  return _impl_.toeuler_;
}
inline ::Property::VectorPropertyValue* TransformUpdateRotateToEuler::mutable_toeuler() {
  ::Property::VectorPropertyValue* _msg = _internal_mutable_toeuler();
  // @@protoc_insertion_point(field_mutable:Property.TransformUpdateRotateToEuler.toEuler)
  return _msg;
}
inline void TransformUpdateRotateToEuler::set_allocated_toeuler(::Property::VectorPropertyValue* toeuler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.toeuler_;
  }
  if (toeuler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(toeuler);
    if (message_arena != submessage_arena) {
      toeuler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, toeuler, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.toeuler_ = toeuler;
  // @@protoc_insertion_point(field_set_allocated:Property.TransformUpdateRotateToEuler.toEuler)
}

// -------------------------------------------------------------------

// TransformUpdateRotateToQuat

// .Property.ScalarPropertyValue percentToMove = 1;
inline bool TransformUpdateRotateToQuat::_internal_has_percenttomove() const {
  return this != internal_default_instance() && _impl_.percenttomove_ != nullptr;
}
inline bool TransformUpdateRotateToQuat::has_percenttomove() const {
  return _internal_has_percenttomove();
}
inline void TransformUpdateRotateToQuat::clear_percenttomove() {
  if (GetArenaForAllocation() == nullptr && _impl_.percenttomove_ != nullptr) {
    delete _impl_.percenttomove_;
  }
  _impl_.percenttomove_ = nullptr;
}
inline const ::Property::ScalarPropertyValue& TransformUpdateRotateToQuat::_internal_percenttomove() const {
  const ::Property::ScalarPropertyValue* p = _impl_.percenttomove_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::ScalarPropertyValue&>(
      ::Property::_ScalarPropertyValue_default_instance_);
}
inline const ::Property::ScalarPropertyValue& TransformUpdateRotateToQuat::percenttomove() const {
  // @@protoc_insertion_point(field_get:Property.TransformUpdateRotateToQuat.percentToMove)
  return _internal_percenttomove();
}
inline void TransformUpdateRotateToQuat::unsafe_arena_set_allocated_percenttomove(
    ::Property::ScalarPropertyValue* percenttomove) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.percenttomove_);
  }
  _impl_.percenttomove_ = percenttomove;
  if (percenttomove) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.TransformUpdateRotateToQuat.percentToMove)
}
inline ::Property::ScalarPropertyValue* TransformUpdateRotateToQuat::release_percenttomove() {
  
  ::Property::ScalarPropertyValue* temp = _impl_.percenttomove_;
  _impl_.percenttomove_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::ScalarPropertyValue* TransformUpdateRotateToQuat::unsafe_arena_release_percenttomove() {
  // @@protoc_insertion_point(field_release:Property.TransformUpdateRotateToQuat.percentToMove)
  
  ::Property::ScalarPropertyValue* temp = _impl_.percenttomove_;
  _impl_.percenttomove_ = nullptr;
  return temp;
}
inline ::Property::ScalarPropertyValue* TransformUpdateRotateToQuat::_internal_mutable_percenttomove() {
  
  if (_impl_.percenttomove_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::ScalarPropertyValue>(GetArenaForAllocation());
    _impl_.percenttomove_ = p;
  }
  return _impl_.percenttomove_;
}
inline ::Property::ScalarPropertyValue* TransformUpdateRotateToQuat::mutable_percenttomove() {
  ::Property::ScalarPropertyValue* _msg = _internal_mutable_percenttomove();
  // @@protoc_insertion_point(field_mutable:Property.TransformUpdateRotateToQuat.percentToMove)
  return _msg;
}
inline void TransformUpdateRotateToQuat::set_allocated_percenttomove(::Property::ScalarPropertyValue* percenttomove) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.percenttomove_;
  }
  if (percenttomove) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(percenttomove);
    if (message_arena != submessage_arena) {
      percenttomove = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, percenttomove, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.percenttomove_ = percenttomove;
  // @@protoc_insertion_point(field_set_allocated:Property.TransformUpdateRotateToQuat.percentToMove)
}

// .Property.VectorPropertyValue toQuat = 2;
inline bool TransformUpdateRotateToQuat::_internal_has_toquat() const {
  return this != internal_default_instance() && _impl_.toquat_ != nullptr;
}
inline bool TransformUpdateRotateToQuat::has_toquat() const {
  return _internal_has_toquat();
}
inline void TransformUpdateRotateToQuat::clear_toquat() {
  if (GetArenaForAllocation() == nullptr && _impl_.toquat_ != nullptr) {
    delete _impl_.toquat_;
  }
  _impl_.toquat_ = nullptr;
}
inline const ::Property::VectorPropertyValue& TransformUpdateRotateToQuat::_internal_toquat() const {
  const ::Property::VectorPropertyValue* p = _impl_.toquat_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::VectorPropertyValue&>(
      ::Property::_VectorPropertyValue_default_instance_);
}
inline const ::Property::VectorPropertyValue& TransformUpdateRotateToQuat::toquat() const {
  // @@protoc_insertion_point(field_get:Property.TransformUpdateRotateToQuat.toQuat)
  return _internal_toquat();
}
inline void TransformUpdateRotateToQuat::unsafe_arena_set_allocated_toquat(
    ::Property::VectorPropertyValue* toquat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.toquat_);
  }
  _impl_.toquat_ = toquat;
  if (toquat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.TransformUpdateRotateToQuat.toQuat)
}
inline ::Property::VectorPropertyValue* TransformUpdateRotateToQuat::release_toquat() {
  
  ::Property::VectorPropertyValue* temp = _impl_.toquat_;
  _impl_.toquat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::VectorPropertyValue* TransformUpdateRotateToQuat::unsafe_arena_release_toquat() {
  // @@protoc_insertion_point(field_release:Property.TransformUpdateRotateToQuat.toQuat)
  
  ::Property::VectorPropertyValue* temp = _impl_.toquat_;
  _impl_.toquat_ = nullptr;
  return temp;
}
inline ::Property::VectorPropertyValue* TransformUpdateRotateToQuat::_internal_mutable_toquat() {
  
  if (_impl_.toquat_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::VectorPropertyValue>(GetArenaForAllocation());
    _impl_.toquat_ = p;
  }
  return _impl_.toquat_;
}
inline ::Property::VectorPropertyValue* TransformUpdateRotateToQuat::mutable_toquat() {
  ::Property::VectorPropertyValue* _msg = _internal_mutable_toquat();
  // @@protoc_insertion_point(field_mutable:Property.TransformUpdateRotateToQuat.toQuat)
  return _msg;
}
inline void TransformUpdateRotateToQuat::set_allocated_toquat(::Property::VectorPropertyValue* toquat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.toquat_;
  }
  if (toquat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(toquat);
    if (message_arena != submessage_arena) {
      toquat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, toquat, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.toquat_ = toquat;
  // @@protoc_insertion_point(field_set_allocated:Property.TransformUpdateRotateToQuat.toQuat)
}

// -------------------------------------------------------------------

// TransformPropertyAssignment

// string assignmentId = 1;
inline void TransformPropertyAssignment::clear_assignmentid() {
  _impl_.assignmentid_.ClearToEmpty();
}
inline const std::string& TransformPropertyAssignment::assignmentid() const {
  // @@protoc_insertion_point(field_get:Property.TransformPropertyAssignment.assignmentId)
  return _internal_assignmentid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransformPropertyAssignment::set_assignmentid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.assignmentid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Property.TransformPropertyAssignment.assignmentId)
}
inline std::string* TransformPropertyAssignment::mutable_assignmentid() {
  std::string* _s = _internal_mutable_assignmentid();
  // @@protoc_insertion_point(field_mutable:Property.TransformPropertyAssignment.assignmentId)
  return _s;
}
inline const std::string& TransformPropertyAssignment::_internal_assignmentid() const {
  return _impl_.assignmentid_.Get();
}
inline void TransformPropertyAssignment::_internal_set_assignmentid(const std::string& value) {
  
  _impl_.assignmentid_.Set(value, GetArenaForAllocation());
}
inline std::string* TransformPropertyAssignment::_internal_mutable_assignmentid() {
  
  return _impl_.assignmentid_.Mutable(GetArenaForAllocation());
}
inline std::string* TransformPropertyAssignment::release_assignmentid() {
  // @@protoc_insertion_point(field_release:Property.TransformPropertyAssignment.assignmentId)
  return _impl_.assignmentid_.Release();
}
inline void TransformPropertyAssignment::set_allocated_assignmentid(std::string* assignmentid) {
  if (assignmentid != nullptr) {
    
  } else {
    
  }
  _impl_.assignmentid_.SetAllocated(assignmentid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.assignmentid_.IsDefault()) {
    _impl_.assignmentid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Property.TransformPropertyAssignment.assignmentId)
}

// optional int32 setPriority = 2;
inline bool TransformPropertyAssignment::_internal_has_setpriority() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TransformPropertyAssignment::has_setpriority() const {
  return _internal_has_setpriority();
}
inline void TransformPropertyAssignment::clear_setpriority() {
  _impl_.setpriority_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t TransformPropertyAssignment::_internal_setpriority() const {
  return _impl_.setpriority_;
}
inline int32_t TransformPropertyAssignment::setpriority() const {
  // @@protoc_insertion_point(field_get:Property.TransformPropertyAssignment.setPriority)
  return _internal_setpriority();
}
inline void TransformPropertyAssignment::_internal_set_setpriority(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.setpriority_ = value;
}
inline void TransformPropertyAssignment::set_setpriority(int32_t value) {
  _internal_set_setpriority(value);
  // @@protoc_insertion_point(field_set:Property.TransformPropertyAssignment.setPriority)
}

// optional int32 modifyOrder = 3;
inline bool TransformPropertyAssignment::_internal_has_modifyorder() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TransformPropertyAssignment::has_modifyorder() const {
  return _internal_has_modifyorder();
}
inline void TransformPropertyAssignment::clear_modifyorder() {
  _impl_.modifyorder_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t TransformPropertyAssignment::_internal_modifyorder() const {
  return _impl_.modifyorder_;
}
inline int32_t TransformPropertyAssignment::modifyorder() const {
  // @@protoc_insertion_point(field_get:Property.TransformPropertyAssignment.modifyOrder)
  return _internal_modifyorder();
}
inline void TransformPropertyAssignment::_internal_set_modifyorder(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.modifyorder_ = value;
}
inline void TransformPropertyAssignment::set_modifyorder(int32_t value) {
  _internal_set_modifyorder(value);
  // @@protoc_insertion_point(field_set:Property.TransformPropertyAssignment.modifyOrder)
}

// .Property.TransformSet setValue = 6;
inline bool TransformPropertyAssignment::_internal_has_setvalue() const {
  return AssignmentType_case() == kSetValue;
}
inline bool TransformPropertyAssignment::has_setvalue() const {
  return _internal_has_setvalue();
}
inline void TransformPropertyAssignment::set_has_setvalue() {
  _impl_._oneof_case_[0] = kSetValue;
}
inline void TransformPropertyAssignment::clear_setvalue() {
  if (_internal_has_setvalue()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.AssignmentType_.setvalue_;
    }
    clear_has_AssignmentType();
  }
}
inline ::Property::TransformSet* TransformPropertyAssignment::release_setvalue() {
  // @@protoc_insertion_point(field_release:Property.TransformPropertyAssignment.setValue)
  if (_internal_has_setvalue()) {
    clear_has_AssignmentType();
    ::Property::TransformSet* temp = _impl_.AssignmentType_.setvalue_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.AssignmentType_.setvalue_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::TransformSet& TransformPropertyAssignment::_internal_setvalue() const {
  return _internal_has_setvalue()
      ? *_impl_.AssignmentType_.setvalue_
      : reinterpret_cast< ::Property::TransformSet&>(::Property::_TransformSet_default_instance_);
}
inline const ::Property::TransformSet& TransformPropertyAssignment::setvalue() const {
  // @@protoc_insertion_point(field_get:Property.TransformPropertyAssignment.setValue)
  return _internal_setvalue();
}
inline ::Property::TransformSet* TransformPropertyAssignment::unsafe_arena_release_setvalue() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.TransformPropertyAssignment.setValue)
  if (_internal_has_setvalue()) {
    clear_has_AssignmentType();
    ::Property::TransformSet* temp = _impl_.AssignmentType_.setvalue_;
    _impl_.AssignmentType_.setvalue_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TransformPropertyAssignment::unsafe_arena_set_allocated_setvalue(::Property::TransformSet* setvalue) {
  clear_AssignmentType();
  if (setvalue) {
    set_has_setvalue();
    _impl_.AssignmentType_.setvalue_ = setvalue;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.TransformPropertyAssignment.setValue)
}
inline ::Property::TransformSet* TransformPropertyAssignment::_internal_mutable_setvalue() {
  if (!_internal_has_setvalue()) {
    clear_AssignmentType();
    set_has_setvalue();
    _impl_.AssignmentType_.setvalue_ = CreateMaybeMessage< ::Property::TransformSet >(GetArenaForAllocation());
  }
  return _impl_.AssignmentType_.setvalue_;
}
inline ::Property::TransformSet* TransformPropertyAssignment::mutable_setvalue() {
  ::Property::TransformSet* _msg = _internal_mutable_setvalue();
  // @@protoc_insertion_point(field_mutable:Property.TransformPropertyAssignment.setValue)
  return _msg;
}

// .Property.TransformUpdate modifyValue = 7;
inline bool TransformPropertyAssignment::_internal_has_modifyvalue() const {
  return AssignmentType_case() == kModifyValue;
}
inline bool TransformPropertyAssignment::has_modifyvalue() const {
  return _internal_has_modifyvalue();
}
inline void TransformPropertyAssignment::set_has_modifyvalue() {
  _impl_._oneof_case_[0] = kModifyValue;
}
inline void TransformPropertyAssignment::clear_modifyvalue() {
  if (_internal_has_modifyvalue()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.AssignmentType_.modifyvalue_;
    }
    clear_has_AssignmentType();
  }
}
inline ::Property::TransformUpdate* TransformPropertyAssignment::release_modifyvalue() {
  // @@protoc_insertion_point(field_release:Property.TransformPropertyAssignment.modifyValue)
  if (_internal_has_modifyvalue()) {
    clear_has_AssignmentType();
    ::Property::TransformUpdate* temp = _impl_.AssignmentType_.modifyvalue_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.AssignmentType_.modifyvalue_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::TransformUpdate& TransformPropertyAssignment::_internal_modifyvalue() const {
  return _internal_has_modifyvalue()
      ? *_impl_.AssignmentType_.modifyvalue_
      : reinterpret_cast< ::Property::TransformUpdate&>(::Property::_TransformUpdate_default_instance_);
}
inline const ::Property::TransformUpdate& TransformPropertyAssignment::modifyvalue() const {
  // @@protoc_insertion_point(field_get:Property.TransformPropertyAssignment.modifyValue)
  return _internal_modifyvalue();
}
inline ::Property::TransformUpdate* TransformPropertyAssignment::unsafe_arena_release_modifyvalue() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.TransformPropertyAssignment.modifyValue)
  if (_internal_has_modifyvalue()) {
    clear_has_AssignmentType();
    ::Property::TransformUpdate* temp = _impl_.AssignmentType_.modifyvalue_;
    _impl_.AssignmentType_.modifyvalue_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TransformPropertyAssignment::unsafe_arena_set_allocated_modifyvalue(::Property::TransformUpdate* modifyvalue) {
  clear_AssignmentType();
  if (modifyvalue) {
    set_has_modifyvalue();
    _impl_.AssignmentType_.modifyvalue_ = modifyvalue;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.TransformPropertyAssignment.modifyValue)
}
inline ::Property::TransformUpdate* TransformPropertyAssignment::_internal_mutable_modifyvalue() {
  if (!_internal_has_modifyvalue()) {
    clear_AssignmentType();
    set_has_modifyvalue();
    _impl_.AssignmentType_.modifyvalue_ = CreateMaybeMessage< ::Property::TransformUpdate >(GetArenaForAllocation());
  }
  return _impl_.AssignmentType_.modifyvalue_;
}
inline ::Property::TransformUpdate* TransformPropertyAssignment::mutable_modifyvalue() {
  ::Property::TransformUpdate* _msg = _internal_mutable_modifyvalue();
  // @@protoc_insertion_point(field_mutable:Property.TransformPropertyAssignment.modifyValue)
  return _msg;
}

inline bool TransformPropertyAssignment::has_AssignmentType() const {
  return AssignmentType_case() != ASSIGNMENTTYPE_NOT_SET;
}
inline void TransformPropertyAssignment::clear_has_AssignmentType() {
  _impl_._oneof_case_[0] = ASSIGNMENTTYPE_NOT_SET;
}
inline TransformPropertyAssignment::AssignmentTypeCase TransformPropertyAssignment::AssignmentType_case() const {
  return TransformPropertyAssignment::AssignmentTypeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// TransformPropertyDeclaration

// .Property.TransformSet default = 2;
inline bool TransformPropertyDeclaration::_internal_has_default_() const {
  return this != internal_default_instance() && _impl_.default__ != nullptr;
}
inline bool TransformPropertyDeclaration::has_default_() const {
  return _internal_has_default_();
}
inline void TransformPropertyDeclaration::clear_default_() {
  if (GetArenaForAllocation() == nullptr && _impl_.default__ != nullptr) {
    delete _impl_.default__;
  }
  _impl_.default__ = nullptr;
}
inline const ::Property::TransformSet& TransformPropertyDeclaration::_internal_default_() const {
  const ::Property::TransformSet* p = _impl_.default__;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::TransformSet&>(
      ::Property::_TransformSet_default_instance_);
}
inline const ::Property::TransformSet& TransformPropertyDeclaration::default_() const {
  // @@protoc_insertion_point(field_get:Property.TransformPropertyDeclaration.default)
  return _internal_default_();
}
inline void TransformPropertyDeclaration::unsafe_arena_set_allocated_default_(
    ::Property::TransformSet* default_) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.default__);
  }
  _impl_.default__ = default_;
  if (default_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.TransformPropertyDeclaration.default)
}
inline ::Property::TransformSet* TransformPropertyDeclaration::release_default_() {
  
  ::Property::TransformSet* temp = _impl_.default__;
  _impl_.default__ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::TransformSet* TransformPropertyDeclaration::unsafe_arena_release_default_() {
  // @@protoc_insertion_point(field_release:Property.TransformPropertyDeclaration.default)
  
  ::Property::TransformSet* temp = _impl_.default__;
  _impl_.default__ = nullptr;
  return temp;
}
inline ::Property::TransformSet* TransformPropertyDeclaration::_internal_mutable_default_() {
  
  if (_impl_.default__ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::TransformSet>(GetArenaForAllocation());
    _impl_.default__ = p;
  }
  return _impl_.default__;
}
inline ::Property::TransformSet* TransformPropertyDeclaration::mutable_default_() {
  ::Property::TransformSet* _msg = _internal_mutable_default_();
  // @@protoc_insertion_point(field_mutable:Property.TransformPropertyDeclaration.default)
  return _msg;
}
inline void TransformPropertyDeclaration::set_allocated_default_(::Property::TransformSet* default_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.default__;
  }
  if (default_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(default_);
    if (message_arena != submessage_arena) {
      default_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, default_, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.default__ = default_;
  // @@protoc_insertion_point(field_set_allocated:Property.TransformPropertyDeclaration.default)
}

// .Property.TransformPropertyMetadata meta = 1;
inline bool TransformPropertyDeclaration::_internal_has_meta() const {
  return this != internal_default_instance() && _impl_.meta_ != nullptr;
}
inline bool TransformPropertyDeclaration::has_meta() const {
  return _internal_has_meta();
}
inline void TransformPropertyDeclaration::clear_meta() {
  if (GetArenaForAllocation() == nullptr && _impl_.meta_ != nullptr) {
    delete _impl_.meta_;
  }
  _impl_.meta_ = nullptr;
}
inline const ::Property::TransformPropertyMetadata& TransformPropertyDeclaration::_internal_meta() const {
  const ::Property::TransformPropertyMetadata* p = _impl_.meta_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::TransformPropertyMetadata&>(
      ::Property::_TransformPropertyMetadata_default_instance_);
}
inline const ::Property::TransformPropertyMetadata& TransformPropertyDeclaration::meta() const {
  // @@protoc_insertion_point(field_get:Property.TransformPropertyDeclaration.meta)
  return _internal_meta();
}
inline void TransformPropertyDeclaration::unsafe_arena_set_allocated_meta(
    ::Property::TransformPropertyMetadata* meta) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.meta_);
  }
  _impl_.meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.TransformPropertyDeclaration.meta)
}
inline ::Property::TransformPropertyMetadata* TransformPropertyDeclaration::release_meta() {
  
  ::Property::TransformPropertyMetadata* temp = _impl_.meta_;
  _impl_.meta_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::TransformPropertyMetadata* TransformPropertyDeclaration::unsafe_arena_release_meta() {
  // @@protoc_insertion_point(field_release:Property.TransformPropertyDeclaration.meta)
  
  ::Property::TransformPropertyMetadata* temp = _impl_.meta_;
  _impl_.meta_ = nullptr;
  return temp;
}
inline ::Property::TransformPropertyMetadata* TransformPropertyDeclaration::_internal_mutable_meta() {
  
  if (_impl_.meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::TransformPropertyMetadata>(GetArenaForAllocation());
    _impl_.meta_ = p;
  }
  return _impl_.meta_;
}
inline ::Property::TransformPropertyMetadata* TransformPropertyDeclaration::mutable_meta() {
  ::Property::TransformPropertyMetadata* _msg = _internal_mutable_meta();
  // @@protoc_insertion_point(field_mutable:Property.TransformPropertyDeclaration.meta)
  return _msg;
}
inline void TransformPropertyDeclaration::set_allocated_meta(::Property::TransformPropertyMetadata* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.meta_;
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(meta);
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:Property.TransformPropertyDeclaration.meta)
}

// -------------------------------------------------------------------

// TransformEditingMetadata

// optional bool allowSetFromUserTransform = 1;
inline bool TransformEditingMetadata::_internal_has_allowsetfromusertransform() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TransformEditingMetadata::has_allowsetfromusertransform() const {
  return _internal_has_allowsetfromusertransform();
}
inline void TransformEditingMetadata::clear_allowsetfromusertransform() {
  _impl_.allowsetfromusertransform_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool TransformEditingMetadata::_internal_allowsetfromusertransform() const {
  return _impl_.allowsetfromusertransform_;
}
inline bool TransformEditingMetadata::allowsetfromusertransform() const {
  // @@protoc_insertion_point(field_get:Property.TransformEditingMetadata.allowSetFromUserTransform)
  return _internal_allowsetfromusertransform();
}
inline void TransformEditingMetadata::_internal_set_allowsetfromusertransform(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.allowsetfromusertransform_ = value;
}
inline void TransformEditingMetadata::set_allowsetfromusertransform(bool value) {
  _internal_set_allowsetfromusertransform(value);
  // @@protoc_insertion_point(field_set:Property.TransformEditingMetadata.allowSetFromUserTransform)
}

// optional bool allowUnset = 2;
inline bool TransformEditingMetadata::_internal_has_allowunset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TransformEditingMetadata::has_allowunset() const {
  return _internal_has_allowunset();
}
inline void TransformEditingMetadata::clear_allowunset() {
  _impl_.allowunset_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool TransformEditingMetadata::_internal_allowunset() const {
  return _impl_.allowunset_;
}
inline bool TransformEditingMetadata::allowunset() const {
  // @@protoc_insertion_point(field_get:Property.TransformEditingMetadata.allowUnset)
  return _internal_allowunset();
}
inline void TransformEditingMetadata::_internal_set_allowunset(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.allowunset_ = value;
}
inline void TransformEditingMetadata::set_allowunset(bool value) {
  _internal_set_allowunset(value);
  // @@protoc_insertion_point(field_set:Property.TransformEditingMetadata.allowUnset)
}

// -------------------------------------------------------------------

// TransformGeneratorMetadata

// .Property.GeneratorMetadata base = 1;
inline bool TransformGeneratorMetadata::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool TransformGeneratorMetadata::has_base() const {
  return _internal_has_base();
}
inline void TransformGeneratorMetadata::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
inline const ::Property::GeneratorMetadata& TransformGeneratorMetadata::_internal_base() const {
  const ::Property::GeneratorMetadata* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::GeneratorMetadata&>(
      ::Property::_GeneratorMetadata_default_instance_);
}
inline const ::Property::GeneratorMetadata& TransformGeneratorMetadata::base() const {
  // @@protoc_insertion_point(field_get:Property.TransformGeneratorMetadata.base)
  return _internal_base();
}
inline void TransformGeneratorMetadata::unsafe_arena_set_allocated_base(
    ::Property::GeneratorMetadata* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.TransformGeneratorMetadata.base)
}
inline ::Property::GeneratorMetadata* TransformGeneratorMetadata::release_base() {
  
  ::Property::GeneratorMetadata* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::GeneratorMetadata* TransformGeneratorMetadata::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:Property.TransformGeneratorMetadata.base)
  
  ::Property::GeneratorMetadata* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::Property::GeneratorMetadata* TransformGeneratorMetadata::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::GeneratorMetadata>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::Property::GeneratorMetadata* TransformGeneratorMetadata::mutable_base() {
  ::Property::GeneratorMetadata* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:Property.TransformGeneratorMetadata.base)
  return _msg;
}
inline void TransformGeneratorMetadata::set_allocated_base(::Property::GeneratorMetadata* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:Property.TransformGeneratorMetadata.base)
}

// optional .Property.TransformEditingMetadata edit = 2;
inline bool TransformGeneratorMetadata::_internal_has_edit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.edit_ != nullptr);
  return value;
}
inline bool TransformGeneratorMetadata::has_edit() const {
  return _internal_has_edit();
}
inline void TransformGeneratorMetadata::clear_edit() {
  if (_impl_.edit_ != nullptr) _impl_.edit_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::Property::TransformEditingMetadata& TransformGeneratorMetadata::_internal_edit() const {
  const ::Property::TransformEditingMetadata* p = _impl_.edit_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::TransformEditingMetadata&>(
      ::Property::_TransformEditingMetadata_default_instance_);
}
inline const ::Property::TransformEditingMetadata& TransformGeneratorMetadata::edit() const {
  // @@protoc_insertion_point(field_get:Property.TransformGeneratorMetadata.edit)
  return _internal_edit();
}
inline void TransformGeneratorMetadata::unsafe_arena_set_allocated_edit(
    ::Property::TransformEditingMetadata* edit) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.edit_);
  }
  _impl_.edit_ = edit;
  if (edit) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.TransformGeneratorMetadata.edit)
}
inline ::Property::TransformEditingMetadata* TransformGeneratorMetadata::release_edit() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Property::TransformEditingMetadata* temp = _impl_.edit_;
  _impl_.edit_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::TransformEditingMetadata* TransformGeneratorMetadata::unsafe_arena_release_edit() {
  // @@protoc_insertion_point(field_release:Property.TransformGeneratorMetadata.edit)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Property::TransformEditingMetadata* temp = _impl_.edit_;
  _impl_.edit_ = nullptr;
  return temp;
}
inline ::Property::TransformEditingMetadata* TransformGeneratorMetadata::_internal_mutable_edit() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.edit_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::TransformEditingMetadata>(GetArenaForAllocation());
    _impl_.edit_ = p;
  }
  return _impl_.edit_;
}
inline ::Property::TransformEditingMetadata* TransformGeneratorMetadata::mutable_edit() {
  ::Property::TransformEditingMetadata* _msg = _internal_mutable_edit();
  // @@protoc_insertion_point(field_mutable:Property.TransformGeneratorMetadata.edit)
  return _msg;
}
inline void TransformGeneratorMetadata::set_allocated_edit(::Property::TransformEditingMetadata* edit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.edit_;
  }
  if (edit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(edit);
    if (message_arena != submessage_arena) {
      edit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, edit, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.edit_ = edit;
  // @@protoc_insertion_point(field_set_allocated:Property.TransformGeneratorMetadata.edit)
}

// -------------------------------------------------------------------

// TransformPropertyMetadata

// .Property.PropertyMetadata base = 1;
inline bool TransformPropertyMetadata::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool TransformPropertyMetadata::has_base() const {
  return _internal_has_base();
}
inline void TransformPropertyMetadata::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
inline const ::Property::PropertyMetadata& TransformPropertyMetadata::_internal_base() const {
  const ::Property::PropertyMetadata* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::PropertyMetadata&>(
      ::Property::_PropertyMetadata_default_instance_);
}
inline const ::Property::PropertyMetadata& TransformPropertyMetadata::base() const {
  // @@protoc_insertion_point(field_get:Property.TransformPropertyMetadata.base)
  return _internal_base();
}
inline void TransformPropertyMetadata::unsafe_arena_set_allocated_base(
    ::Property::PropertyMetadata* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.TransformPropertyMetadata.base)
}
inline ::Property::PropertyMetadata* TransformPropertyMetadata::release_base() {
  
  ::Property::PropertyMetadata* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::PropertyMetadata* TransformPropertyMetadata::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:Property.TransformPropertyMetadata.base)
  
  ::Property::PropertyMetadata* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::Property::PropertyMetadata* TransformPropertyMetadata::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::PropertyMetadata>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::Property::PropertyMetadata* TransformPropertyMetadata::mutable_base() {
  ::Property::PropertyMetadata* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:Property.TransformPropertyMetadata.base)
  return _msg;
}
inline void TransformPropertyMetadata::set_allocated_base(::Property::PropertyMetadata* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:Property.TransformPropertyMetadata.base)
}

// optional .Property.TransformEditingMetadata edit = 2;
inline bool TransformPropertyMetadata::_internal_has_edit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.edit_ != nullptr);
  return value;
}
inline bool TransformPropertyMetadata::has_edit() const {
  return _internal_has_edit();
}
inline void TransformPropertyMetadata::clear_edit() {
  if (_impl_.edit_ != nullptr) _impl_.edit_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::Property::TransformEditingMetadata& TransformPropertyMetadata::_internal_edit() const {
  const ::Property::TransformEditingMetadata* p = _impl_.edit_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::TransformEditingMetadata&>(
      ::Property::_TransformEditingMetadata_default_instance_);
}
inline const ::Property::TransformEditingMetadata& TransformPropertyMetadata::edit() const {
  // @@protoc_insertion_point(field_get:Property.TransformPropertyMetadata.edit)
  return _internal_edit();
}
inline void TransformPropertyMetadata::unsafe_arena_set_allocated_edit(
    ::Property::TransformEditingMetadata* edit) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.edit_);
  }
  _impl_.edit_ = edit;
  if (edit) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.TransformPropertyMetadata.edit)
}
inline ::Property::TransformEditingMetadata* TransformPropertyMetadata::release_edit() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Property::TransformEditingMetadata* temp = _impl_.edit_;
  _impl_.edit_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::TransformEditingMetadata* TransformPropertyMetadata::unsafe_arena_release_edit() {
  // @@protoc_insertion_point(field_release:Property.TransformPropertyMetadata.edit)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Property::TransformEditingMetadata* temp = _impl_.edit_;
  _impl_.edit_ = nullptr;
  return temp;
}
inline ::Property::TransformEditingMetadata* TransformPropertyMetadata::_internal_mutable_edit() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.edit_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::TransformEditingMetadata>(GetArenaForAllocation());
    _impl_.edit_ = p;
  }
  return _impl_.edit_;
}
inline ::Property::TransformEditingMetadata* TransformPropertyMetadata::mutable_edit() {
  ::Property::TransformEditingMetadata* _msg = _internal_mutable_edit();
  // @@protoc_insertion_point(field_mutable:Property.TransformPropertyMetadata.edit)
  return _msg;
}
inline void TransformPropertyMetadata::set_allocated_edit(::Property::TransformEditingMetadata* edit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.edit_;
  }
  if (edit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(edit);
    if (message_arena != submessage_arena) {
      edit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, edit, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.edit_ = edit;
  // @@protoc_insertion_point(field_set_allocated:Property.TransformPropertyMetadata.edit)
}

// -------------------------------------------------------------------

// CustomGeneratorSubGenScalar

// optional .Property.ScalarPropertyValue generator = 1;
inline bool CustomGeneratorSubGenScalar::_internal_has_generator() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.generator_ != nullptr);
  return value;
}
inline bool CustomGeneratorSubGenScalar::has_generator() const {
  return _internal_has_generator();
}
inline void CustomGeneratorSubGenScalar::clear_generator() {
  if (_impl_.generator_ != nullptr) _impl_.generator_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::Property::ScalarPropertyValue& CustomGeneratorSubGenScalar::_internal_generator() const {
  const ::Property::ScalarPropertyValue* p = _impl_.generator_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::ScalarPropertyValue&>(
      ::Property::_ScalarPropertyValue_default_instance_);
}
inline const ::Property::ScalarPropertyValue& CustomGeneratorSubGenScalar::generator() const {
  // @@protoc_insertion_point(field_get:Property.CustomGeneratorSubGenScalar.generator)
  return _internal_generator();
}
inline void CustomGeneratorSubGenScalar::unsafe_arena_set_allocated_generator(
    ::Property::ScalarPropertyValue* generator) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.generator_);
  }
  _impl_.generator_ = generator;
  if (generator) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.CustomGeneratorSubGenScalar.generator)
}
inline ::Property::ScalarPropertyValue* CustomGeneratorSubGenScalar::release_generator() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Property::ScalarPropertyValue* temp = _impl_.generator_;
  _impl_.generator_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::ScalarPropertyValue* CustomGeneratorSubGenScalar::unsafe_arena_release_generator() {
  // @@protoc_insertion_point(field_release:Property.CustomGeneratorSubGenScalar.generator)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Property::ScalarPropertyValue* temp = _impl_.generator_;
  _impl_.generator_ = nullptr;
  return temp;
}
inline ::Property::ScalarPropertyValue* CustomGeneratorSubGenScalar::_internal_mutable_generator() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.generator_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::ScalarPropertyValue>(GetArenaForAllocation());
    _impl_.generator_ = p;
  }
  return _impl_.generator_;
}
inline ::Property::ScalarPropertyValue* CustomGeneratorSubGenScalar::mutable_generator() {
  ::Property::ScalarPropertyValue* _msg = _internal_mutable_generator();
  // @@protoc_insertion_point(field_mutable:Property.CustomGeneratorSubGenScalar.generator)
  return _msg;
}
inline void CustomGeneratorSubGenScalar::set_allocated_generator(::Property::ScalarPropertyValue* generator) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.generator_;
  }
  if (generator) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(generator);
    if (message_arena != submessage_arena) {
      generator = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, generator, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.generator_ = generator;
  // @@protoc_insertion_point(field_set_allocated:Property.CustomGeneratorSubGenScalar.generator)
}

// optional .Property.ScalarGeneratorMetadata meta = 2;
inline bool CustomGeneratorSubGenScalar::_internal_has_meta() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.meta_ != nullptr);
  return value;
}
inline bool CustomGeneratorSubGenScalar::has_meta() const {
  return _internal_has_meta();
}
inline void CustomGeneratorSubGenScalar::clear_meta() {
  if (_impl_.meta_ != nullptr) _impl_.meta_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::Property::ScalarGeneratorMetadata& CustomGeneratorSubGenScalar::_internal_meta() const {
  const ::Property::ScalarGeneratorMetadata* p = _impl_.meta_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::ScalarGeneratorMetadata&>(
      ::Property::_ScalarGeneratorMetadata_default_instance_);
}
inline const ::Property::ScalarGeneratorMetadata& CustomGeneratorSubGenScalar::meta() const {
  // @@protoc_insertion_point(field_get:Property.CustomGeneratorSubGenScalar.meta)
  return _internal_meta();
}
inline void CustomGeneratorSubGenScalar::unsafe_arena_set_allocated_meta(
    ::Property::ScalarGeneratorMetadata* meta) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.meta_);
  }
  _impl_.meta_ = meta;
  if (meta) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.CustomGeneratorSubGenScalar.meta)
}
inline ::Property::ScalarGeneratorMetadata* CustomGeneratorSubGenScalar::release_meta() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Property::ScalarGeneratorMetadata* temp = _impl_.meta_;
  _impl_.meta_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::ScalarGeneratorMetadata* CustomGeneratorSubGenScalar::unsafe_arena_release_meta() {
  // @@protoc_insertion_point(field_release:Property.CustomGeneratorSubGenScalar.meta)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Property::ScalarGeneratorMetadata* temp = _impl_.meta_;
  _impl_.meta_ = nullptr;
  return temp;
}
inline ::Property::ScalarGeneratorMetadata* CustomGeneratorSubGenScalar::_internal_mutable_meta() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::ScalarGeneratorMetadata>(GetArenaForAllocation());
    _impl_.meta_ = p;
  }
  return _impl_.meta_;
}
inline ::Property::ScalarGeneratorMetadata* CustomGeneratorSubGenScalar::mutable_meta() {
  ::Property::ScalarGeneratorMetadata* _msg = _internal_mutable_meta();
  // @@protoc_insertion_point(field_mutable:Property.CustomGeneratorSubGenScalar.meta)
  return _msg;
}
inline void CustomGeneratorSubGenScalar::set_allocated_meta(::Property::ScalarGeneratorMetadata* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.meta_;
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(meta);
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:Property.CustomGeneratorSubGenScalar.meta)
}

// -------------------------------------------------------------------

// CustomGeneratorSubGenString

// optional .Property.StringPropertyValue generator = 1;
inline bool CustomGeneratorSubGenString::_internal_has_generator() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.generator_ != nullptr);
  return value;
}
inline bool CustomGeneratorSubGenString::has_generator() const {
  return _internal_has_generator();
}
inline void CustomGeneratorSubGenString::clear_generator() {
  if (_impl_.generator_ != nullptr) _impl_.generator_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::Property::StringPropertyValue& CustomGeneratorSubGenString::_internal_generator() const {
  const ::Property::StringPropertyValue* p = _impl_.generator_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::StringPropertyValue&>(
      ::Property::_StringPropertyValue_default_instance_);
}
inline const ::Property::StringPropertyValue& CustomGeneratorSubGenString::generator() const {
  // @@protoc_insertion_point(field_get:Property.CustomGeneratorSubGenString.generator)
  return _internal_generator();
}
inline void CustomGeneratorSubGenString::unsafe_arena_set_allocated_generator(
    ::Property::StringPropertyValue* generator) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.generator_);
  }
  _impl_.generator_ = generator;
  if (generator) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.CustomGeneratorSubGenString.generator)
}
inline ::Property::StringPropertyValue* CustomGeneratorSubGenString::release_generator() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Property::StringPropertyValue* temp = _impl_.generator_;
  _impl_.generator_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::StringPropertyValue* CustomGeneratorSubGenString::unsafe_arena_release_generator() {
  // @@protoc_insertion_point(field_release:Property.CustomGeneratorSubGenString.generator)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Property::StringPropertyValue* temp = _impl_.generator_;
  _impl_.generator_ = nullptr;
  return temp;
}
inline ::Property::StringPropertyValue* CustomGeneratorSubGenString::_internal_mutable_generator() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.generator_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::StringPropertyValue>(GetArenaForAllocation());
    _impl_.generator_ = p;
  }
  return _impl_.generator_;
}
inline ::Property::StringPropertyValue* CustomGeneratorSubGenString::mutable_generator() {
  ::Property::StringPropertyValue* _msg = _internal_mutable_generator();
  // @@protoc_insertion_point(field_mutable:Property.CustomGeneratorSubGenString.generator)
  return _msg;
}
inline void CustomGeneratorSubGenString::set_allocated_generator(::Property::StringPropertyValue* generator) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.generator_;
  }
  if (generator) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(generator);
    if (message_arena != submessage_arena) {
      generator = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, generator, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.generator_ = generator;
  // @@protoc_insertion_point(field_set_allocated:Property.CustomGeneratorSubGenString.generator)
}

// optional .Property.StringGeneratorMetadata meta = 2;
inline bool CustomGeneratorSubGenString::_internal_has_meta() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.meta_ != nullptr);
  return value;
}
inline bool CustomGeneratorSubGenString::has_meta() const {
  return _internal_has_meta();
}
inline void CustomGeneratorSubGenString::clear_meta() {
  if (_impl_.meta_ != nullptr) _impl_.meta_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::Property::StringGeneratorMetadata& CustomGeneratorSubGenString::_internal_meta() const {
  const ::Property::StringGeneratorMetadata* p = _impl_.meta_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::StringGeneratorMetadata&>(
      ::Property::_StringGeneratorMetadata_default_instance_);
}
inline const ::Property::StringGeneratorMetadata& CustomGeneratorSubGenString::meta() const {
  // @@protoc_insertion_point(field_get:Property.CustomGeneratorSubGenString.meta)
  return _internal_meta();
}
inline void CustomGeneratorSubGenString::unsafe_arena_set_allocated_meta(
    ::Property::StringGeneratorMetadata* meta) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.meta_);
  }
  _impl_.meta_ = meta;
  if (meta) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.CustomGeneratorSubGenString.meta)
}
inline ::Property::StringGeneratorMetadata* CustomGeneratorSubGenString::release_meta() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Property::StringGeneratorMetadata* temp = _impl_.meta_;
  _impl_.meta_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::StringGeneratorMetadata* CustomGeneratorSubGenString::unsafe_arena_release_meta() {
  // @@protoc_insertion_point(field_release:Property.CustomGeneratorSubGenString.meta)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Property::StringGeneratorMetadata* temp = _impl_.meta_;
  _impl_.meta_ = nullptr;
  return temp;
}
inline ::Property::StringGeneratorMetadata* CustomGeneratorSubGenString::_internal_mutable_meta() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::StringGeneratorMetadata>(GetArenaForAllocation());
    _impl_.meta_ = p;
  }
  return _impl_.meta_;
}
inline ::Property::StringGeneratorMetadata* CustomGeneratorSubGenString::mutable_meta() {
  ::Property::StringGeneratorMetadata* _msg = _internal_mutable_meta();
  // @@protoc_insertion_point(field_mutable:Property.CustomGeneratorSubGenString.meta)
  return _msg;
}
inline void CustomGeneratorSubGenString::set_allocated_meta(::Property::StringGeneratorMetadata* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.meta_;
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(meta);
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:Property.CustomGeneratorSubGenString.meta)
}

// -------------------------------------------------------------------

// CustomGeneratorSubGenLink

// optional .Property.LinkPropertyValue generator = 1;
inline bool CustomGeneratorSubGenLink::_internal_has_generator() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.generator_ != nullptr);
  return value;
}
inline bool CustomGeneratorSubGenLink::has_generator() const {
  return _internal_has_generator();
}
inline void CustomGeneratorSubGenLink::clear_generator() {
  if (_impl_.generator_ != nullptr) _impl_.generator_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::Property::LinkPropertyValue& CustomGeneratorSubGenLink::_internal_generator() const {
  const ::Property::LinkPropertyValue* p = _impl_.generator_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::LinkPropertyValue&>(
      ::Property::_LinkPropertyValue_default_instance_);
}
inline const ::Property::LinkPropertyValue& CustomGeneratorSubGenLink::generator() const {
  // @@protoc_insertion_point(field_get:Property.CustomGeneratorSubGenLink.generator)
  return _internal_generator();
}
inline void CustomGeneratorSubGenLink::unsafe_arena_set_allocated_generator(
    ::Property::LinkPropertyValue* generator) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.generator_);
  }
  _impl_.generator_ = generator;
  if (generator) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.CustomGeneratorSubGenLink.generator)
}
inline ::Property::LinkPropertyValue* CustomGeneratorSubGenLink::release_generator() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Property::LinkPropertyValue* temp = _impl_.generator_;
  _impl_.generator_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::LinkPropertyValue* CustomGeneratorSubGenLink::unsafe_arena_release_generator() {
  // @@protoc_insertion_point(field_release:Property.CustomGeneratorSubGenLink.generator)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Property::LinkPropertyValue* temp = _impl_.generator_;
  _impl_.generator_ = nullptr;
  return temp;
}
inline ::Property::LinkPropertyValue* CustomGeneratorSubGenLink::_internal_mutable_generator() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.generator_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::LinkPropertyValue>(GetArenaForAllocation());
    _impl_.generator_ = p;
  }
  return _impl_.generator_;
}
inline ::Property::LinkPropertyValue* CustomGeneratorSubGenLink::mutable_generator() {
  ::Property::LinkPropertyValue* _msg = _internal_mutable_generator();
  // @@protoc_insertion_point(field_mutable:Property.CustomGeneratorSubGenLink.generator)
  return _msg;
}
inline void CustomGeneratorSubGenLink::set_allocated_generator(::Property::LinkPropertyValue* generator) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.generator_;
  }
  if (generator) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(generator);
    if (message_arena != submessage_arena) {
      generator = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, generator, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.generator_ = generator;
  // @@protoc_insertion_point(field_set_allocated:Property.CustomGeneratorSubGenLink.generator)
}

// optional .Property.LinkGeneratorMetadata meta = 2;
inline bool CustomGeneratorSubGenLink::_internal_has_meta() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.meta_ != nullptr);
  return value;
}
inline bool CustomGeneratorSubGenLink::has_meta() const {
  return _internal_has_meta();
}
inline void CustomGeneratorSubGenLink::clear_meta() {
  if (_impl_.meta_ != nullptr) _impl_.meta_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::Property::LinkGeneratorMetadata& CustomGeneratorSubGenLink::_internal_meta() const {
  const ::Property::LinkGeneratorMetadata* p = _impl_.meta_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::LinkGeneratorMetadata&>(
      ::Property::_LinkGeneratorMetadata_default_instance_);
}
inline const ::Property::LinkGeneratorMetadata& CustomGeneratorSubGenLink::meta() const {
  // @@protoc_insertion_point(field_get:Property.CustomGeneratorSubGenLink.meta)
  return _internal_meta();
}
inline void CustomGeneratorSubGenLink::unsafe_arena_set_allocated_meta(
    ::Property::LinkGeneratorMetadata* meta) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.meta_);
  }
  _impl_.meta_ = meta;
  if (meta) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.CustomGeneratorSubGenLink.meta)
}
inline ::Property::LinkGeneratorMetadata* CustomGeneratorSubGenLink::release_meta() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Property::LinkGeneratorMetadata* temp = _impl_.meta_;
  _impl_.meta_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::LinkGeneratorMetadata* CustomGeneratorSubGenLink::unsafe_arena_release_meta() {
  // @@protoc_insertion_point(field_release:Property.CustomGeneratorSubGenLink.meta)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Property::LinkGeneratorMetadata* temp = _impl_.meta_;
  _impl_.meta_ = nullptr;
  return temp;
}
inline ::Property::LinkGeneratorMetadata* CustomGeneratorSubGenLink::_internal_mutable_meta() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::LinkGeneratorMetadata>(GetArenaForAllocation());
    _impl_.meta_ = p;
  }
  return _impl_.meta_;
}
inline ::Property::LinkGeneratorMetadata* CustomGeneratorSubGenLink::mutable_meta() {
  ::Property::LinkGeneratorMetadata* _msg = _internal_mutable_meta();
  // @@protoc_insertion_point(field_mutable:Property.CustomGeneratorSubGenLink.meta)
  return _msg;
}
inline void CustomGeneratorSubGenLink::set_allocated_meta(::Property::LinkGeneratorMetadata* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.meta_;
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(meta);
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:Property.CustomGeneratorSubGenLink.meta)
}

// -------------------------------------------------------------------

// CustomGeneratorSubGenVector

// optional .Property.VectorPropertyValue generator = 1;
inline bool CustomGeneratorSubGenVector::_internal_has_generator() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.generator_ != nullptr);
  return value;
}
inline bool CustomGeneratorSubGenVector::has_generator() const {
  return _internal_has_generator();
}
inline void CustomGeneratorSubGenVector::clear_generator() {
  if (_impl_.generator_ != nullptr) _impl_.generator_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::Property::VectorPropertyValue& CustomGeneratorSubGenVector::_internal_generator() const {
  const ::Property::VectorPropertyValue* p = _impl_.generator_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::VectorPropertyValue&>(
      ::Property::_VectorPropertyValue_default_instance_);
}
inline const ::Property::VectorPropertyValue& CustomGeneratorSubGenVector::generator() const {
  // @@protoc_insertion_point(field_get:Property.CustomGeneratorSubGenVector.generator)
  return _internal_generator();
}
inline void CustomGeneratorSubGenVector::unsafe_arena_set_allocated_generator(
    ::Property::VectorPropertyValue* generator) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.generator_);
  }
  _impl_.generator_ = generator;
  if (generator) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.CustomGeneratorSubGenVector.generator)
}
inline ::Property::VectorPropertyValue* CustomGeneratorSubGenVector::release_generator() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Property::VectorPropertyValue* temp = _impl_.generator_;
  _impl_.generator_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::VectorPropertyValue* CustomGeneratorSubGenVector::unsafe_arena_release_generator() {
  // @@protoc_insertion_point(field_release:Property.CustomGeneratorSubGenVector.generator)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Property::VectorPropertyValue* temp = _impl_.generator_;
  _impl_.generator_ = nullptr;
  return temp;
}
inline ::Property::VectorPropertyValue* CustomGeneratorSubGenVector::_internal_mutable_generator() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.generator_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::VectorPropertyValue>(GetArenaForAllocation());
    _impl_.generator_ = p;
  }
  return _impl_.generator_;
}
inline ::Property::VectorPropertyValue* CustomGeneratorSubGenVector::mutable_generator() {
  ::Property::VectorPropertyValue* _msg = _internal_mutable_generator();
  // @@protoc_insertion_point(field_mutable:Property.CustomGeneratorSubGenVector.generator)
  return _msg;
}
inline void CustomGeneratorSubGenVector::set_allocated_generator(::Property::VectorPropertyValue* generator) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.generator_;
  }
  if (generator) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(generator);
    if (message_arena != submessage_arena) {
      generator = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, generator, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.generator_ = generator;
  // @@protoc_insertion_point(field_set_allocated:Property.CustomGeneratorSubGenVector.generator)
}

// optional .Property.VectorGeneratorMetadata meta = 2;
inline bool CustomGeneratorSubGenVector::_internal_has_meta() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.meta_ != nullptr);
  return value;
}
inline bool CustomGeneratorSubGenVector::has_meta() const {
  return _internal_has_meta();
}
inline void CustomGeneratorSubGenVector::clear_meta() {
  if (_impl_.meta_ != nullptr) _impl_.meta_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::Property::VectorGeneratorMetadata& CustomGeneratorSubGenVector::_internal_meta() const {
  const ::Property::VectorGeneratorMetadata* p = _impl_.meta_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::VectorGeneratorMetadata&>(
      ::Property::_VectorGeneratorMetadata_default_instance_);
}
inline const ::Property::VectorGeneratorMetadata& CustomGeneratorSubGenVector::meta() const {
  // @@protoc_insertion_point(field_get:Property.CustomGeneratorSubGenVector.meta)
  return _internal_meta();
}
inline void CustomGeneratorSubGenVector::unsafe_arena_set_allocated_meta(
    ::Property::VectorGeneratorMetadata* meta) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.meta_);
  }
  _impl_.meta_ = meta;
  if (meta) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.CustomGeneratorSubGenVector.meta)
}
inline ::Property::VectorGeneratorMetadata* CustomGeneratorSubGenVector::release_meta() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Property::VectorGeneratorMetadata* temp = _impl_.meta_;
  _impl_.meta_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::VectorGeneratorMetadata* CustomGeneratorSubGenVector::unsafe_arena_release_meta() {
  // @@protoc_insertion_point(field_release:Property.CustomGeneratorSubGenVector.meta)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Property::VectorGeneratorMetadata* temp = _impl_.meta_;
  _impl_.meta_ = nullptr;
  return temp;
}
inline ::Property::VectorGeneratorMetadata* CustomGeneratorSubGenVector::_internal_mutable_meta() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::VectorGeneratorMetadata>(GetArenaForAllocation());
    _impl_.meta_ = p;
  }
  return _impl_.meta_;
}
inline ::Property::VectorGeneratorMetadata* CustomGeneratorSubGenVector::mutable_meta() {
  ::Property::VectorGeneratorMetadata* _msg = _internal_mutable_meta();
  // @@protoc_insertion_point(field_mutable:Property.CustomGeneratorSubGenVector.meta)
  return _msg;
}
inline void CustomGeneratorSubGenVector::set_allocated_meta(::Property::VectorGeneratorMetadata* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.meta_;
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(meta);
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:Property.CustomGeneratorSubGenVector.meta)
}

// -------------------------------------------------------------------

// CustomGeneratorSubGenColor

// optional .Property.ColorPropertyValue generator = 1;
inline bool CustomGeneratorSubGenColor::_internal_has_generator() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.generator_ != nullptr);
  return value;
}
inline bool CustomGeneratorSubGenColor::has_generator() const {
  return _internal_has_generator();
}
inline void CustomGeneratorSubGenColor::clear_generator() {
  if (_impl_.generator_ != nullptr) _impl_.generator_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::Property::ColorPropertyValue& CustomGeneratorSubGenColor::_internal_generator() const {
  const ::Property::ColorPropertyValue* p = _impl_.generator_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::ColorPropertyValue&>(
      ::Property::_ColorPropertyValue_default_instance_);
}
inline const ::Property::ColorPropertyValue& CustomGeneratorSubGenColor::generator() const {
  // @@protoc_insertion_point(field_get:Property.CustomGeneratorSubGenColor.generator)
  return _internal_generator();
}
inline void CustomGeneratorSubGenColor::unsafe_arena_set_allocated_generator(
    ::Property::ColorPropertyValue* generator) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.generator_);
  }
  _impl_.generator_ = generator;
  if (generator) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.CustomGeneratorSubGenColor.generator)
}
inline ::Property::ColorPropertyValue* CustomGeneratorSubGenColor::release_generator() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Property::ColorPropertyValue* temp = _impl_.generator_;
  _impl_.generator_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::ColorPropertyValue* CustomGeneratorSubGenColor::unsafe_arena_release_generator() {
  // @@protoc_insertion_point(field_release:Property.CustomGeneratorSubGenColor.generator)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Property::ColorPropertyValue* temp = _impl_.generator_;
  _impl_.generator_ = nullptr;
  return temp;
}
inline ::Property::ColorPropertyValue* CustomGeneratorSubGenColor::_internal_mutable_generator() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.generator_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::ColorPropertyValue>(GetArenaForAllocation());
    _impl_.generator_ = p;
  }
  return _impl_.generator_;
}
inline ::Property::ColorPropertyValue* CustomGeneratorSubGenColor::mutable_generator() {
  ::Property::ColorPropertyValue* _msg = _internal_mutable_generator();
  // @@protoc_insertion_point(field_mutable:Property.CustomGeneratorSubGenColor.generator)
  return _msg;
}
inline void CustomGeneratorSubGenColor::set_allocated_generator(::Property::ColorPropertyValue* generator) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.generator_;
  }
  if (generator) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(generator);
    if (message_arena != submessage_arena) {
      generator = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, generator, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.generator_ = generator;
  // @@protoc_insertion_point(field_set_allocated:Property.CustomGeneratorSubGenColor.generator)
}

// optional .Property.ColorGeneratorMetadata meta = 2;
inline bool CustomGeneratorSubGenColor::_internal_has_meta() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.meta_ != nullptr);
  return value;
}
inline bool CustomGeneratorSubGenColor::has_meta() const {
  return _internal_has_meta();
}
inline void CustomGeneratorSubGenColor::clear_meta() {
  if (_impl_.meta_ != nullptr) _impl_.meta_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::Property::ColorGeneratorMetadata& CustomGeneratorSubGenColor::_internal_meta() const {
  const ::Property::ColorGeneratorMetadata* p = _impl_.meta_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::ColorGeneratorMetadata&>(
      ::Property::_ColorGeneratorMetadata_default_instance_);
}
inline const ::Property::ColorGeneratorMetadata& CustomGeneratorSubGenColor::meta() const {
  // @@protoc_insertion_point(field_get:Property.CustomGeneratorSubGenColor.meta)
  return _internal_meta();
}
inline void CustomGeneratorSubGenColor::unsafe_arena_set_allocated_meta(
    ::Property::ColorGeneratorMetadata* meta) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.meta_);
  }
  _impl_.meta_ = meta;
  if (meta) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.CustomGeneratorSubGenColor.meta)
}
inline ::Property::ColorGeneratorMetadata* CustomGeneratorSubGenColor::release_meta() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Property::ColorGeneratorMetadata* temp = _impl_.meta_;
  _impl_.meta_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::ColorGeneratorMetadata* CustomGeneratorSubGenColor::unsafe_arena_release_meta() {
  // @@protoc_insertion_point(field_release:Property.CustomGeneratorSubGenColor.meta)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Property::ColorGeneratorMetadata* temp = _impl_.meta_;
  _impl_.meta_ = nullptr;
  return temp;
}
inline ::Property::ColorGeneratorMetadata* CustomGeneratorSubGenColor::_internal_mutable_meta() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::ColorGeneratorMetadata>(GetArenaForAllocation());
    _impl_.meta_ = p;
  }
  return _impl_.meta_;
}
inline ::Property::ColorGeneratorMetadata* CustomGeneratorSubGenColor::mutable_meta() {
  ::Property::ColorGeneratorMetadata* _msg = _internal_mutable_meta();
  // @@protoc_insertion_point(field_mutable:Property.CustomGeneratorSubGenColor.meta)
  return _msg;
}
inline void CustomGeneratorSubGenColor::set_allocated_meta(::Property::ColorGeneratorMetadata* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.meta_;
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(meta);
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:Property.CustomGeneratorSubGenColor.meta)
}

// -------------------------------------------------------------------

// CustomGeneratorSubGenBoolean

// optional .Property.BooleanPropertyValue generator = 1;
inline bool CustomGeneratorSubGenBoolean::_internal_has_generator() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.generator_ != nullptr);
  return value;
}
inline bool CustomGeneratorSubGenBoolean::has_generator() const {
  return _internal_has_generator();
}
inline void CustomGeneratorSubGenBoolean::clear_generator() {
  if (_impl_.generator_ != nullptr) _impl_.generator_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::Property::BooleanPropertyValue& CustomGeneratorSubGenBoolean::_internal_generator() const {
  const ::Property::BooleanPropertyValue* p = _impl_.generator_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::BooleanPropertyValue&>(
      ::Property::_BooleanPropertyValue_default_instance_);
}
inline const ::Property::BooleanPropertyValue& CustomGeneratorSubGenBoolean::generator() const {
  // @@protoc_insertion_point(field_get:Property.CustomGeneratorSubGenBoolean.generator)
  return _internal_generator();
}
inline void CustomGeneratorSubGenBoolean::unsafe_arena_set_allocated_generator(
    ::Property::BooleanPropertyValue* generator) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.generator_);
  }
  _impl_.generator_ = generator;
  if (generator) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.CustomGeneratorSubGenBoolean.generator)
}
inline ::Property::BooleanPropertyValue* CustomGeneratorSubGenBoolean::release_generator() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Property::BooleanPropertyValue* temp = _impl_.generator_;
  _impl_.generator_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::BooleanPropertyValue* CustomGeneratorSubGenBoolean::unsafe_arena_release_generator() {
  // @@protoc_insertion_point(field_release:Property.CustomGeneratorSubGenBoolean.generator)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Property::BooleanPropertyValue* temp = _impl_.generator_;
  _impl_.generator_ = nullptr;
  return temp;
}
inline ::Property::BooleanPropertyValue* CustomGeneratorSubGenBoolean::_internal_mutable_generator() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.generator_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::BooleanPropertyValue>(GetArenaForAllocation());
    _impl_.generator_ = p;
  }
  return _impl_.generator_;
}
inline ::Property::BooleanPropertyValue* CustomGeneratorSubGenBoolean::mutable_generator() {
  ::Property::BooleanPropertyValue* _msg = _internal_mutable_generator();
  // @@protoc_insertion_point(field_mutable:Property.CustomGeneratorSubGenBoolean.generator)
  return _msg;
}
inline void CustomGeneratorSubGenBoolean::set_allocated_generator(::Property::BooleanPropertyValue* generator) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.generator_;
  }
  if (generator) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(generator);
    if (message_arena != submessage_arena) {
      generator = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, generator, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.generator_ = generator;
  // @@protoc_insertion_point(field_set_allocated:Property.CustomGeneratorSubGenBoolean.generator)
}

// optional .Property.BooleanGeneratorMetadata meta = 2;
inline bool CustomGeneratorSubGenBoolean::_internal_has_meta() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.meta_ != nullptr);
  return value;
}
inline bool CustomGeneratorSubGenBoolean::has_meta() const {
  return _internal_has_meta();
}
inline void CustomGeneratorSubGenBoolean::clear_meta() {
  if (_impl_.meta_ != nullptr) _impl_.meta_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::Property::BooleanGeneratorMetadata& CustomGeneratorSubGenBoolean::_internal_meta() const {
  const ::Property::BooleanGeneratorMetadata* p = _impl_.meta_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::BooleanGeneratorMetadata&>(
      ::Property::_BooleanGeneratorMetadata_default_instance_);
}
inline const ::Property::BooleanGeneratorMetadata& CustomGeneratorSubGenBoolean::meta() const {
  // @@protoc_insertion_point(field_get:Property.CustomGeneratorSubGenBoolean.meta)
  return _internal_meta();
}
inline void CustomGeneratorSubGenBoolean::unsafe_arena_set_allocated_meta(
    ::Property::BooleanGeneratorMetadata* meta) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.meta_);
  }
  _impl_.meta_ = meta;
  if (meta) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.CustomGeneratorSubGenBoolean.meta)
}
inline ::Property::BooleanGeneratorMetadata* CustomGeneratorSubGenBoolean::release_meta() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Property::BooleanGeneratorMetadata* temp = _impl_.meta_;
  _impl_.meta_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::BooleanGeneratorMetadata* CustomGeneratorSubGenBoolean::unsafe_arena_release_meta() {
  // @@protoc_insertion_point(field_release:Property.CustomGeneratorSubGenBoolean.meta)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Property::BooleanGeneratorMetadata* temp = _impl_.meta_;
  _impl_.meta_ = nullptr;
  return temp;
}
inline ::Property::BooleanGeneratorMetadata* CustomGeneratorSubGenBoolean::_internal_mutable_meta() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::BooleanGeneratorMetadata>(GetArenaForAllocation());
    _impl_.meta_ = p;
  }
  return _impl_.meta_;
}
inline ::Property::BooleanGeneratorMetadata* CustomGeneratorSubGenBoolean::mutable_meta() {
  ::Property::BooleanGeneratorMetadata* _msg = _internal_mutable_meta();
  // @@protoc_insertion_point(field_mutable:Property.CustomGeneratorSubGenBoolean.meta)
  return _msg;
}
inline void CustomGeneratorSubGenBoolean::set_allocated_meta(::Property::BooleanGeneratorMetadata* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.meta_;
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(meta);
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:Property.CustomGeneratorSubGenBoolean.meta)
}

// -------------------------------------------------------------------

// CustomGeneratorSubGenJson

// optional .Property.JsonPropertyValue generator = 1;
inline bool CustomGeneratorSubGenJson::_internal_has_generator() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.generator_ != nullptr);
  return value;
}
inline bool CustomGeneratorSubGenJson::has_generator() const {
  return _internal_has_generator();
}
inline void CustomGeneratorSubGenJson::clear_generator() {
  if (_impl_.generator_ != nullptr) _impl_.generator_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::Property::JsonPropertyValue& CustomGeneratorSubGenJson::_internal_generator() const {
  const ::Property::JsonPropertyValue* p = _impl_.generator_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::JsonPropertyValue&>(
      ::Property::_JsonPropertyValue_default_instance_);
}
inline const ::Property::JsonPropertyValue& CustomGeneratorSubGenJson::generator() const {
  // @@protoc_insertion_point(field_get:Property.CustomGeneratorSubGenJson.generator)
  return _internal_generator();
}
inline void CustomGeneratorSubGenJson::unsafe_arena_set_allocated_generator(
    ::Property::JsonPropertyValue* generator) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.generator_);
  }
  _impl_.generator_ = generator;
  if (generator) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.CustomGeneratorSubGenJson.generator)
}
inline ::Property::JsonPropertyValue* CustomGeneratorSubGenJson::release_generator() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Property::JsonPropertyValue* temp = _impl_.generator_;
  _impl_.generator_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::JsonPropertyValue* CustomGeneratorSubGenJson::unsafe_arena_release_generator() {
  // @@protoc_insertion_point(field_release:Property.CustomGeneratorSubGenJson.generator)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Property::JsonPropertyValue* temp = _impl_.generator_;
  _impl_.generator_ = nullptr;
  return temp;
}
inline ::Property::JsonPropertyValue* CustomGeneratorSubGenJson::_internal_mutable_generator() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.generator_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::JsonPropertyValue>(GetArenaForAllocation());
    _impl_.generator_ = p;
  }
  return _impl_.generator_;
}
inline ::Property::JsonPropertyValue* CustomGeneratorSubGenJson::mutable_generator() {
  ::Property::JsonPropertyValue* _msg = _internal_mutable_generator();
  // @@protoc_insertion_point(field_mutable:Property.CustomGeneratorSubGenJson.generator)
  return _msg;
}
inline void CustomGeneratorSubGenJson::set_allocated_generator(::Property::JsonPropertyValue* generator) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.generator_;
  }
  if (generator) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(generator);
    if (message_arena != submessage_arena) {
      generator = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, generator, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.generator_ = generator;
  // @@protoc_insertion_point(field_set_allocated:Property.CustomGeneratorSubGenJson.generator)
}

// optional .Property.JsonGeneratorMetadata meta = 2;
inline bool CustomGeneratorSubGenJson::_internal_has_meta() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.meta_ != nullptr);
  return value;
}
inline bool CustomGeneratorSubGenJson::has_meta() const {
  return _internal_has_meta();
}
inline void CustomGeneratorSubGenJson::clear_meta() {
  if (_impl_.meta_ != nullptr) _impl_.meta_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::Property::JsonGeneratorMetadata& CustomGeneratorSubGenJson::_internal_meta() const {
  const ::Property::JsonGeneratorMetadata* p = _impl_.meta_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::JsonGeneratorMetadata&>(
      ::Property::_JsonGeneratorMetadata_default_instance_);
}
inline const ::Property::JsonGeneratorMetadata& CustomGeneratorSubGenJson::meta() const {
  // @@protoc_insertion_point(field_get:Property.CustomGeneratorSubGenJson.meta)
  return _internal_meta();
}
inline void CustomGeneratorSubGenJson::unsafe_arena_set_allocated_meta(
    ::Property::JsonGeneratorMetadata* meta) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.meta_);
  }
  _impl_.meta_ = meta;
  if (meta) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.CustomGeneratorSubGenJson.meta)
}
inline ::Property::JsonGeneratorMetadata* CustomGeneratorSubGenJson::release_meta() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Property::JsonGeneratorMetadata* temp = _impl_.meta_;
  _impl_.meta_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::JsonGeneratorMetadata* CustomGeneratorSubGenJson::unsafe_arena_release_meta() {
  // @@protoc_insertion_point(field_release:Property.CustomGeneratorSubGenJson.meta)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Property::JsonGeneratorMetadata* temp = _impl_.meta_;
  _impl_.meta_ = nullptr;
  return temp;
}
inline ::Property::JsonGeneratorMetadata* CustomGeneratorSubGenJson::_internal_mutable_meta() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::JsonGeneratorMetadata>(GetArenaForAllocation());
    _impl_.meta_ = p;
  }
  return _impl_.meta_;
}
inline ::Property::JsonGeneratorMetadata* CustomGeneratorSubGenJson::mutable_meta() {
  ::Property::JsonGeneratorMetadata* _msg = _internal_mutable_meta();
  // @@protoc_insertion_point(field_mutable:Property.CustomGeneratorSubGenJson.meta)
  return _msg;
}
inline void CustomGeneratorSubGenJson::set_allocated_meta(::Property::JsonGeneratorMetadata* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.meta_;
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(meta);
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:Property.CustomGeneratorSubGenJson.meta)
}

// -------------------------------------------------------------------

// CustomGeneratorSubGenTransform

// optional .Property.TransformSet generator = 1;
inline bool CustomGeneratorSubGenTransform::_internal_has_generator() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.generator_ != nullptr);
  return value;
}
inline bool CustomGeneratorSubGenTransform::has_generator() const {
  return _internal_has_generator();
}
inline void CustomGeneratorSubGenTransform::clear_generator() {
  if (_impl_.generator_ != nullptr) _impl_.generator_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::Property::TransformSet& CustomGeneratorSubGenTransform::_internal_generator() const {
  const ::Property::TransformSet* p = _impl_.generator_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::TransformSet&>(
      ::Property::_TransformSet_default_instance_);
}
inline const ::Property::TransformSet& CustomGeneratorSubGenTransform::generator() const {
  // @@protoc_insertion_point(field_get:Property.CustomGeneratorSubGenTransform.generator)
  return _internal_generator();
}
inline void CustomGeneratorSubGenTransform::unsafe_arena_set_allocated_generator(
    ::Property::TransformSet* generator) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.generator_);
  }
  _impl_.generator_ = generator;
  if (generator) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.CustomGeneratorSubGenTransform.generator)
}
inline ::Property::TransformSet* CustomGeneratorSubGenTransform::release_generator() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Property::TransformSet* temp = _impl_.generator_;
  _impl_.generator_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::TransformSet* CustomGeneratorSubGenTransform::unsafe_arena_release_generator() {
  // @@protoc_insertion_point(field_release:Property.CustomGeneratorSubGenTransform.generator)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Property::TransformSet* temp = _impl_.generator_;
  _impl_.generator_ = nullptr;
  return temp;
}
inline ::Property::TransformSet* CustomGeneratorSubGenTransform::_internal_mutable_generator() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.generator_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::TransformSet>(GetArenaForAllocation());
    _impl_.generator_ = p;
  }
  return _impl_.generator_;
}
inline ::Property::TransformSet* CustomGeneratorSubGenTransform::mutable_generator() {
  ::Property::TransformSet* _msg = _internal_mutable_generator();
  // @@protoc_insertion_point(field_mutable:Property.CustomGeneratorSubGenTransform.generator)
  return _msg;
}
inline void CustomGeneratorSubGenTransform::set_allocated_generator(::Property::TransformSet* generator) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.generator_;
  }
  if (generator) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(generator);
    if (message_arena != submessage_arena) {
      generator = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, generator, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.generator_ = generator;
  // @@protoc_insertion_point(field_set_allocated:Property.CustomGeneratorSubGenTransform.generator)
}

// optional .Property.TransformGeneratorMetadata meta = 2;
inline bool CustomGeneratorSubGenTransform::_internal_has_meta() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.meta_ != nullptr);
  return value;
}
inline bool CustomGeneratorSubGenTransform::has_meta() const {
  return _internal_has_meta();
}
inline void CustomGeneratorSubGenTransform::clear_meta() {
  if (_impl_.meta_ != nullptr) _impl_.meta_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::Property::TransformGeneratorMetadata& CustomGeneratorSubGenTransform::_internal_meta() const {
  const ::Property::TransformGeneratorMetadata* p = _impl_.meta_;
  return p != nullptr ? *p : reinterpret_cast<const ::Property::TransformGeneratorMetadata&>(
      ::Property::_TransformGeneratorMetadata_default_instance_);
}
inline const ::Property::TransformGeneratorMetadata& CustomGeneratorSubGenTransform::meta() const {
  // @@protoc_insertion_point(field_get:Property.CustomGeneratorSubGenTransform.meta)
  return _internal_meta();
}
inline void CustomGeneratorSubGenTransform::unsafe_arena_set_allocated_meta(
    ::Property::TransformGeneratorMetadata* meta) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.meta_);
  }
  _impl_.meta_ = meta;
  if (meta) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.CustomGeneratorSubGenTransform.meta)
}
inline ::Property::TransformGeneratorMetadata* CustomGeneratorSubGenTransform::release_meta() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Property::TransformGeneratorMetadata* temp = _impl_.meta_;
  _impl_.meta_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Property::TransformGeneratorMetadata* CustomGeneratorSubGenTransform::unsafe_arena_release_meta() {
  // @@protoc_insertion_point(field_release:Property.CustomGeneratorSubGenTransform.meta)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Property::TransformGeneratorMetadata* temp = _impl_.meta_;
  _impl_.meta_ = nullptr;
  return temp;
}
inline ::Property::TransformGeneratorMetadata* CustomGeneratorSubGenTransform::_internal_mutable_meta() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::Property::TransformGeneratorMetadata>(GetArenaForAllocation());
    _impl_.meta_ = p;
  }
  return _impl_.meta_;
}
inline ::Property::TransformGeneratorMetadata* CustomGeneratorSubGenTransform::mutable_meta() {
  ::Property::TransformGeneratorMetadata* _msg = _internal_mutable_meta();
  // @@protoc_insertion_point(field_mutable:Property.CustomGeneratorSubGenTransform.meta)
  return _msg;
}
inline void CustomGeneratorSubGenTransform::set_allocated_meta(::Property::TransformGeneratorMetadata* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.meta_;
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(meta);
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:Property.CustomGeneratorSubGenTransform.meta)
}

// -------------------------------------------------------------------

// CustomGeneratorSubGen

// .Property.CustomGeneratorSubGenScalar scalar = 2;
inline bool CustomGeneratorSubGen::_internal_has_scalar() const {
  return SubGenType_case() == kScalar;
}
inline bool CustomGeneratorSubGen::has_scalar() const {
  return _internal_has_scalar();
}
inline void CustomGeneratorSubGen::set_has_scalar() {
  _impl_._oneof_case_[0] = kScalar;
}
inline void CustomGeneratorSubGen::clear_scalar() {
  if (_internal_has_scalar()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.SubGenType_.scalar_;
    }
    clear_has_SubGenType();
  }
}
inline ::Property::CustomGeneratorSubGenScalar* CustomGeneratorSubGen::release_scalar() {
  // @@protoc_insertion_point(field_release:Property.CustomGeneratorSubGen.scalar)
  if (_internal_has_scalar()) {
    clear_has_SubGenType();
    ::Property::CustomGeneratorSubGenScalar* temp = _impl_.SubGenType_.scalar_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.SubGenType_.scalar_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::CustomGeneratorSubGenScalar& CustomGeneratorSubGen::_internal_scalar() const {
  return _internal_has_scalar()
      ? *_impl_.SubGenType_.scalar_
      : reinterpret_cast< ::Property::CustomGeneratorSubGenScalar&>(::Property::_CustomGeneratorSubGenScalar_default_instance_);
}
inline const ::Property::CustomGeneratorSubGenScalar& CustomGeneratorSubGen::scalar() const {
  // @@protoc_insertion_point(field_get:Property.CustomGeneratorSubGen.scalar)
  return _internal_scalar();
}
inline ::Property::CustomGeneratorSubGenScalar* CustomGeneratorSubGen::unsafe_arena_release_scalar() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.CustomGeneratorSubGen.scalar)
  if (_internal_has_scalar()) {
    clear_has_SubGenType();
    ::Property::CustomGeneratorSubGenScalar* temp = _impl_.SubGenType_.scalar_;
    _impl_.SubGenType_.scalar_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CustomGeneratorSubGen::unsafe_arena_set_allocated_scalar(::Property::CustomGeneratorSubGenScalar* scalar) {
  clear_SubGenType();
  if (scalar) {
    set_has_scalar();
    _impl_.SubGenType_.scalar_ = scalar;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.CustomGeneratorSubGen.scalar)
}
inline ::Property::CustomGeneratorSubGenScalar* CustomGeneratorSubGen::_internal_mutable_scalar() {
  if (!_internal_has_scalar()) {
    clear_SubGenType();
    set_has_scalar();
    _impl_.SubGenType_.scalar_ = CreateMaybeMessage< ::Property::CustomGeneratorSubGenScalar >(GetArenaForAllocation());
  }
  return _impl_.SubGenType_.scalar_;
}
inline ::Property::CustomGeneratorSubGenScalar* CustomGeneratorSubGen::mutable_scalar() {
  ::Property::CustomGeneratorSubGenScalar* _msg = _internal_mutable_scalar();
  // @@protoc_insertion_point(field_mutable:Property.CustomGeneratorSubGen.scalar)
  return _msg;
}

// .Property.CustomGeneratorSubGenString string = 3;
inline bool CustomGeneratorSubGen::_internal_has_string() const {
  return SubGenType_case() == kString;
}
inline bool CustomGeneratorSubGen::has_string() const {
  return _internal_has_string();
}
inline void CustomGeneratorSubGen::set_has_string() {
  _impl_._oneof_case_[0] = kString;
}
inline void CustomGeneratorSubGen::clear_string() {
  if (_internal_has_string()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.SubGenType_.string_;
    }
    clear_has_SubGenType();
  }
}
inline ::Property::CustomGeneratorSubGenString* CustomGeneratorSubGen::release_string() {
  // @@protoc_insertion_point(field_release:Property.CustomGeneratorSubGen.string)
  if (_internal_has_string()) {
    clear_has_SubGenType();
    ::Property::CustomGeneratorSubGenString* temp = _impl_.SubGenType_.string_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.SubGenType_.string_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::CustomGeneratorSubGenString& CustomGeneratorSubGen::_internal_string() const {
  return _internal_has_string()
      ? *_impl_.SubGenType_.string_
      : reinterpret_cast< ::Property::CustomGeneratorSubGenString&>(::Property::_CustomGeneratorSubGenString_default_instance_);
}
inline const ::Property::CustomGeneratorSubGenString& CustomGeneratorSubGen::string() const {
  // @@protoc_insertion_point(field_get:Property.CustomGeneratorSubGen.string)
  return _internal_string();
}
inline ::Property::CustomGeneratorSubGenString* CustomGeneratorSubGen::unsafe_arena_release_string() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.CustomGeneratorSubGen.string)
  if (_internal_has_string()) {
    clear_has_SubGenType();
    ::Property::CustomGeneratorSubGenString* temp = _impl_.SubGenType_.string_;
    _impl_.SubGenType_.string_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CustomGeneratorSubGen::unsafe_arena_set_allocated_string(::Property::CustomGeneratorSubGenString* string) {
  clear_SubGenType();
  if (string) {
    set_has_string();
    _impl_.SubGenType_.string_ = string;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.CustomGeneratorSubGen.string)
}
inline ::Property::CustomGeneratorSubGenString* CustomGeneratorSubGen::_internal_mutable_string() {
  if (!_internal_has_string()) {
    clear_SubGenType();
    set_has_string();
    _impl_.SubGenType_.string_ = CreateMaybeMessage< ::Property::CustomGeneratorSubGenString >(GetArenaForAllocation());
  }
  return _impl_.SubGenType_.string_;
}
inline ::Property::CustomGeneratorSubGenString* CustomGeneratorSubGen::mutable_string() {
  ::Property::CustomGeneratorSubGenString* _msg = _internal_mutable_string();
  // @@protoc_insertion_point(field_mutable:Property.CustomGeneratorSubGen.string)
  return _msg;
}

// .Property.CustomGeneratorSubGenLink link = 9;
inline bool CustomGeneratorSubGen::_internal_has_link() const {
  return SubGenType_case() == kLink;
}
inline bool CustomGeneratorSubGen::has_link() const {
  return _internal_has_link();
}
inline void CustomGeneratorSubGen::set_has_link() {
  _impl_._oneof_case_[0] = kLink;
}
inline void CustomGeneratorSubGen::clear_link() {
  if (_internal_has_link()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.SubGenType_.link_;
    }
    clear_has_SubGenType();
  }
}
inline ::Property::CustomGeneratorSubGenLink* CustomGeneratorSubGen::release_link() {
  // @@protoc_insertion_point(field_release:Property.CustomGeneratorSubGen.link)
  if (_internal_has_link()) {
    clear_has_SubGenType();
    ::Property::CustomGeneratorSubGenLink* temp = _impl_.SubGenType_.link_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.SubGenType_.link_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::CustomGeneratorSubGenLink& CustomGeneratorSubGen::_internal_link() const {
  return _internal_has_link()
      ? *_impl_.SubGenType_.link_
      : reinterpret_cast< ::Property::CustomGeneratorSubGenLink&>(::Property::_CustomGeneratorSubGenLink_default_instance_);
}
inline const ::Property::CustomGeneratorSubGenLink& CustomGeneratorSubGen::link() const {
  // @@protoc_insertion_point(field_get:Property.CustomGeneratorSubGen.link)
  return _internal_link();
}
inline ::Property::CustomGeneratorSubGenLink* CustomGeneratorSubGen::unsafe_arena_release_link() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.CustomGeneratorSubGen.link)
  if (_internal_has_link()) {
    clear_has_SubGenType();
    ::Property::CustomGeneratorSubGenLink* temp = _impl_.SubGenType_.link_;
    _impl_.SubGenType_.link_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CustomGeneratorSubGen::unsafe_arena_set_allocated_link(::Property::CustomGeneratorSubGenLink* link) {
  clear_SubGenType();
  if (link) {
    set_has_link();
    _impl_.SubGenType_.link_ = link;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.CustomGeneratorSubGen.link)
}
inline ::Property::CustomGeneratorSubGenLink* CustomGeneratorSubGen::_internal_mutable_link() {
  if (!_internal_has_link()) {
    clear_SubGenType();
    set_has_link();
    _impl_.SubGenType_.link_ = CreateMaybeMessage< ::Property::CustomGeneratorSubGenLink >(GetArenaForAllocation());
  }
  return _impl_.SubGenType_.link_;
}
inline ::Property::CustomGeneratorSubGenLink* CustomGeneratorSubGen::mutable_link() {
  ::Property::CustomGeneratorSubGenLink* _msg = _internal_mutable_link();
  // @@protoc_insertion_point(field_mutable:Property.CustomGeneratorSubGen.link)
  return _msg;
}

// .Property.CustomGeneratorSubGenVector vector = 4;
inline bool CustomGeneratorSubGen::_internal_has_vector() const {
  return SubGenType_case() == kVector;
}
inline bool CustomGeneratorSubGen::has_vector() const {
  return _internal_has_vector();
}
inline void CustomGeneratorSubGen::set_has_vector() {
  _impl_._oneof_case_[0] = kVector;
}
inline void CustomGeneratorSubGen::clear_vector() {
  if (_internal_has_vector()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.SubGenType_.vector_;
    }
    clear_has_SubGenType();
  }
}
inline ::Property::CustomGeneratorSubGenVector* CustomGeneratorSubGen::release_vector() {
  // @@protoc_insertion_point(field_release:Property.CustomGeneratorSubGen.vector)
  if (_internal_has_vector()) {
    clear_has_SubGenType();
    ::Property::CustomGeneratorSubGenVector* temp = _impl_.SubGenType_.vector_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.SubGenType_.vector_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::CustomGeneratorSubGenVector& CustomGeneratorSubGen::_internal_vector() const {
  return _internal_has_vector()
      ? *_impl_.SubGenType_.vector_
      : reinterpret_cast< ::Property::CustomGeneratorSubGenVector&>(::Property::_CustomGeneratorSubGenVector_default_instance_);
}
inline const ::Property::CustomGeneratorSubGenVector& CustomGeneratorSubGen::vector() const {
  // @@protoc_insertion_point(field_get:Property.CustomGeneratorSubGen.vector)
  return _internal_vector();
}
inline ::Property::CustomGeneratorSubGenVector* CustomGeneratorSubGen::unsafe_arena_release_vector() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.CustomGeneratorSubGen.vector)
  if (_internal_has_vector()) {
    clear_has_SubGenType();
    ::Property::CustomGeneratorSubGenVector* temp = _impl_.SubGenType_.vector_;
    _impl_.SubGenType_.vector_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CustomGeneratorSubGen::unsafe_arena_set_allocated_vector(::Property::CustomGeneratorSubGenVector* vector) {
  clear_SubGenType();
  if (vector) {
    set_has_vector();
    _impl_.SubGenType_.vector_ = vector;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.CustomGeneratorSubGen.vector)
}
inline ::Property::CustomGeneratorSubGenVector* CustomGeneratorSubGen::_internal_mutable_vector() {
  if (!_internal_has_vector()) {
    clear_SubGenType();
    set_has_vector();
    _impl_.SubGenType_.vector_ = CreateMaybeMessage< ::Property::CustomGeneratorSubGenVector >(GetArenaForAllocation());
  }
  return _impl_.SubGenType_.vector_;
}
inline ::Property::CustomGeneratorSubGenVector* CustomGeneratorSubGen::mutable_vector() {
  ::Property::CustomGeneratorSubGenVector* _msg = _internal_mutable_vector();
  // @@protoc_insertion_point(field_mutable:Property.CustomGeneratorSubGen.vector)
  return _msg;
}

// .Property.CustomGeneratorSubGenColor color = 5;
inline bool CustomGeneratorSubGen::_internal_has_color() const {
  return SubGenType_case() == kColor;
}
inline bool CustomGeneratorSubGen::has_color() const {
  return _internal_has_color();
}
inline void CustomGeneratorSubGen::set_has_color() {
  _impl_._oneof_case_[0] = kColor;
}
inline void CustomGeneratorSubGen::clear_color() {
  if (_internal_has_color()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.SubGenType_.color_;
    }
    clear_has_SubGenType();
  }
}
inline ::Property::CustomGeneratorSubGenColor* CustomGeneratorSubGen::release_color() {
  // @@protoc_insertion_point(field_release:Property.CustomGeneratorSubGen.color)
  if (_internal_has_color()) {
    clear_has_SubGenType();
    ::Property::CustomGeneratorSubGenColor* temp = _impl_.SubGenType_.color_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.SubGenType_.color_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::CustomGeneratorSubGenColor& CustomGeneratorSubGen::_internal_color() const {
  return _internal_has_color()
      ? *_impl_.SubGenType_.color_
      : reinterpret_cast< ::Property::CustomGeneratorSubGenColor&>(::Property::_CustomGeneratorSubGenColor_default_instance_);
}
inline const ::Property::CustomGeneratorSubGenColor& CustomGeneratorSubGen::color() const {
  // @@protoc_insertion_point(field_get:Property.CustomGeneratorSubGen.color)
  return _internal_color();
}
inline ::Property::CustomGeneratorSubGenColor* CustomGeneratorSubGen::unsafe_arena_release_color() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.CustomGeneratorSubGen.color)
  if (_internal_has_color()) {
    clear_has_SubGenType();
    ::Property::CustomGeneratorSubGenColor* temp = _impl_.SubGenType_.color_;
    _impl_.SubGenType_.color_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CustomGeneratorSubGen::unsafe_arena_set_allocated_color(::Property::CustomGeneratorSubGenColor* color) {
  clear_SubGenType();
  if (color) {
    set_has_color();
    _impl_.SubGenType_.color_ = color;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.CustomGeneratorSubGen.color)
}
inline ::Property::CustomGeneratorSubGenColor* CustomGeneratorSubGen::_internal_mutable_color() {
  if (!_internal_has_color()) {
    clear_SubGenType();
    set_has_color();
    _impl_.SubGenType_.color_ = CreateMaybeMessage< ::Property::CustomGeneratorSubGenColor >(GetArenaForAllocation());
  }
  return _impl_.SubGenType_.color_;
}
inline ::Property::CustomGeneratorSubGenColor* CustomGeneratorSubGen::mutable_color() {
  ::Property::CustomGeneratorSubGenColor* _msg = _internal_mutable_color();
  // @@protoc_insertion_point(field_mutable:Property.CustomGeneratorSubGen.color)
  return _msg;
}

// .Property.CustomGeneratorSubGenBoolean boolean = 6;
inline bool CustomGeneratorSubGen::_internal_has_boolean() const {
  return SubGenType_case() == kBoolean;
}
inline bool CustomGeneratorSubGen::has_boolean() const {
  return _internal_has_boolean();
}
inline void CustomGeneratorSubGen::set_has_boolean() {
  _impl_._oneof_case_[0] = kBoolean;
}
inline void CustomGeneratorSubGen::clear_boolean() {
  if (_internal_has_boolean()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.SubGenType_.boolean_;
    }
    clear_has_SubGenType();
  }
}
inline ::Property::CustomGeneratorSubGenBoolean* CustomGeneratorSubGen::release_boolean() {
  // @@protoc_insertion_point(field_release:Property.CustomGeneratorSubGen.boolean)
  if (_internal_has_boolean()) {
    clear_has_SubGenType();
    ::Property::CustomGeneratorSubGenBoolean* temp = _impl_.SubGenType_.boolean_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.SubGenType_.boolean_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::CustomGeneratorSubGenBoolean& CustomGeneratorSubGen::_internal_boolean() const {
  return _internal_has_boolean()
      ? *_impl_.SubGenType_.boolean_
      : reinterpret_cast< ::Property::CustomGeneratorSubGenBoolean&>(::Property::_CustomGeneratorSubGenBoolean_default_instance_);
}
inline const ::Property::CustomGeneratorSubGenBoolean& CustomGeneratorSubGen::boolean() const {
  // @@protoc_insertion_point(field_get:Property.CustomGeneratorSubGen.boolean)
  return _internal_boolean();
}
inline ::Property::CustomGeneratorSubGenBoolean* CustomGeneratorSubGen::unsafe_arena_release_boolean() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.CustomGeneratorSubGen.boolean)
  if (_internal_has_boolean()) {
    clear_has_SubGenType();
    ::Property::CustomGeneratorSubGenBoolean* temp = _impl_.SubGenType_.boolean_;
    _impl_.SubGenType_.boolean_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CustomGeneratorSubGen::unsafe_arena_set_allocated_boolean(::Property::CustomGeneratorSubGenBoolean* boolean) {
  clear_SubGenType();
  if (boolean) {
    set_has_boolean();
    _impl_.SubGenType_.boolean_ = boolean;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.CustomGeneratorSubGen.boolean)
}
inline ::Property::CustomGeneratorSubGenBoolean* CustomGeneratorSubGen::_internal_mutable_boolean() {
  if (!_internal_has_boolean()) {
    clear_SubGenType();
    set_has_boolean();
    _impl_.SubGenType_.boolean_ = CreateMaybeMessage< ::Property::CustomGeneratorSubGenBoolean >(GetArenaForAllocation());
  }
  return _impl_.SubGenType_.boolean_;
}
inline ::Property::CustomGeneratorSubGenBoolean* CustomGeneratorSubGen::mutable_boolean() {
  ::Property::CustomGeneratorSubGenBoolean* _msg = _internal_mutable_boolean();
  // @@protoc_insertion_point(field_mutable:Property.CustomGeneratorSubGen.boolean)
  return _msg;
}

// .Property.CustomGeneratorSubGenJson json = 7;
inline bool CustomGeneratorSubGen::_internal_has_json() const {
  return SubGenType_case() == kJson;
}
inline bool CustomGeneratorSubGen::has_json() const {
  return _internal_has_json();
}
inline void CustomGeneratorSubGen::set_has_json() {
  _impl_._oneof_case_[0] = kJson;
}
inline void CustomGeneratorSubGen::clear_json() {
  if (_internal_has_json()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.SubGenType_.json_;
    }
    clear_has_SubGenType();
  }
}
inline ::Property::CustomGeneratorSubGenJson* CustomGeneratorSubGen::release_json() {
  // @@protoc_insertion_point(field_release:Property.CustomGeneratorSubGen.json)
  if (_internal_has_json()) {
    clear_has_SubGenType();
    ::Property::CustomGeneratorSubGenJson* temp = _impl_.SubGenType_.json_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.SubGenType_.json_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::CustomGeneratorSubGenJson& CustomGeneratorSubGen::_internal_json() const {
  return _internal_has_json()
      ? *_impl_.SubGenType_.json_
      : reinterpret_cast< ::Property::CustomGeneratorSubGenJson&>(::Property::_CustomGeneratorSubGenJson_default_instance_);
}
inline const ::Property::CustomGeneratorSubGenJson& CustomGeneratorSubGen::json() const {
  // @@protoc_insertion_point(field_get:Property.CustomGeneratorSubGen.json)
  return _internal_json();
}
inline ::Property::CustomGeneratorSubGenJson* CustomGeneratorSubGen::unsafe_arena_release_json() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.CustomGeneratorSubGen.json)
  if (_internal_has_json()) {
    clear_has_SubGenType();
    ::Property::CustomGeneratorSubGenJson* temp = _impl_.SubGenType_.json_;
    _impl_.SubGenType_.json_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CustomGeneratorSubGen::unsafe_arena_set_allocated_json(::Property::CustomGeneratorSubGenJson* json) {
  clear_SubGenType();
  if (json) {
    set_has_json();
    _impl_.SubGenType_.json_ = json;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.CustomGeneratorSubGen.json)
}
inline ::Property::CustomGeneratorSubGenJson* CustomGeneratorSubGen::_internal_mutable_json() {
  if (!_internal_has_json()) {
    clear_SubGenType();
    set_has_json();
    _impl_.SubGenType_.json_ = CreateMaybeMessage< ::Property::CustomGeneratorSubGenJson >(GetArenaForAllocation());
  }
  return _impl_.SubGenType_.json_;
}
inline ::Property::CustomGeneratorSubGenJson* CustomGeneratorSubGen::mutable_json() {
  ::Property::CustomGeneratorSubGenJson* _msg = _internal_mutable_json();
  // @@protoc_insertion_point(field_mutable:Property.CustomGeneratorSubGen.json)
  return _msg;
}

// .Property.CustomGeneratorSubGenTransform transform = 8;
inline bool CustomGeneratorSubGen::_internal_has_transform() const {
  return SubGenType_case() == kTransform;
}
inline bool CustomGeneratorSubGen::has_transform() const {
  return _internal_has_transform();
}
inline void CustomGeneratorSubGen::set_has_transform() {
  _impl_._oneof_case_[0] = kTransform;
}
inline void CustomGeneratorSubGen::clear_transform() {
  if (_internal_has_transform()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.SubGenType_.transform_;
    }
    clear_has_SubGenType();
  }
}
inline ::Property::CustomGeneratorSubGenTransform* CustomGeneratorSubGen::release_transform() {
  // @@protoc_insertion_point(field_release:Property.CustomGeneratorSubGen.transform)
  if (_internal_has_transform()) {
    clear_has_SubGenType();
    ::Property::CustomGeneratorSubGenTransform* temp = _impl_.SubGenType_.transform_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.SubGenType_.transform_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Property::CustomGeneratorSubGenTransform& CustomGeneratorSubGen::_internal_transform() const {
  return _internal_has_transform()
      ? *_impl_.SubGenType_.transform_
      : reinterpret_cast< ::Property::CustomGeneratorSubGenTransform&>(::Property::_CustomGeneratorSubGenTransform_default_instance_);
}
inline const ::Property::CustomGeneratorSubGenTransform& CustomGeneratorSubGen::transform() const {
  // @@protoc_insertion_point(field_get:Property.CustomGeneratorSubGen.transform)
  return _internal_transform();
}
inline ::Property::CustomGeneratorSubGenTransform* CustomGeneratorSubGen::unsafe_arena_release_transform() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Property.CustomGeneratorSubGen.transform)
  if (_internal_has_transform()) {
    clear_has_SubGenType();
    ::Property::CustomGeneratorSubGenTransform* temp = _impl_.SubGenType_.transform_;
    _impl_.SubGenType_.transform_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CustomGeneratorSubGen::unsafe_arena_set_allocated_transform(::Property::CustomGeneratorSubGenTransform* transform) {
  clear_SubGenType();
  if (transform) {
    set_has_transform();
    _impl_.SubGenType_.transform_ = transform;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Property.CustomGeneratorSubGen.transform)
}
inline ::Property::CustomGeneratorSubGenTransform* CustomGeneratorSubGen::_internal_mutable_transform() {
  if (!_internal_has_transform()) {
    clear_SubGenType();
    set_has_transform();
    _impl_.SubGenType_.transform_ = CreateMaybeMessage< ::Property::CustomGeneratorSubGenTransform >(GetArenaForAllocation());
  }
  return _impl_.SubGenType_.transform_;
}
inline ::Property::CustomGeneratorSubGenTransform* CustomGeneratorSubGen::mutable_transform() {
  ::Property::CustomGeneratorSubGenTransform* _msg = _internal_mutable_transform();
  // @@protoc_insertion_point(field_mutable:Property.CustomGeneratorSubGen.transform)
  return _msg;
}

inline bool CustomGeneratorSubGen::has_SubGenType() const {
  return SubGenType_case() != SUBGENTYPE_NOT_SET;
}
inline void CustomGeneratorSubGen::clear_has_SubGenType() {
  _impl_._oneof_case_[0] = SUBGENTYPE_NOT_SET;
}
inline CustomGeneratorSubGen::SubGenTypeCase CustomGeneratorSubGen::SubGenType_case() const {
  return CustomGeneratorSubGen::SubGenTypeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// CustomGeneratorValue

// string customId = 1;
inline void CustomGeneratorValue::clear_customid() {
  _impl_.customid_.ClearToEmpty();
}
inline const std::string& CustomGeneratorValue::customid() const {
  // @@protoc_insertion_point(field_get:Property.CustomGeneratorValue.customId)
  return _internal_customid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CustomGeneratorValue::set_customid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.customid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Property.CustomGeneratorValue.customId)
}
inline std::string* CustomGeneratorValue::mutable_customid() {
  std::string* _s = _internal_mutable_customid();
  // @@protoc_insertion_point(field_mutable:Property.CustomGeneratorValue.customId)
  return _s;
}
inline const std::string& CustomGeneratorValue::_internal_customid() const {
  return _impl_.customid_.Get();
}
inline void CustomGeneratorValue::_internal_set_customid(const std::string& value) {
  
  _impl_.customid_.Set(value, GetArenaForAllocation());
}
inline std::string* CustomGeneratorValue::_internal_mutable_customid() {
  
  return _impl_.customid_.Mutable(GetArenaForAllocation());
}
inline std::string* CustomGeneratorValue::release_customid() {
  // @@protoc_insertion_point(field_release:Property.CustomGeneratorValue.customId)
  return _impl_.customid_.Release();
}
inline void CustomGeneratorValue::set_allocated_customid(std::string* customid) {
  if (customid != nullptr) {
    
  } else {
    
  }
  _impl_.customid_.SetAllocated(customid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.customid_.IsDefault()) {
    _impl_.customid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Property.CustomGeneratorValue.customId)
}

// repeated .Property.CustomGeneratorSubGen subGens = 2;
inline int CustomGeneratorValue::_internal_subgens_size() const {
  return _impl_.subgens_.size();
}
inline int CustomGeneratorValue::subgens_size() const {
  return _internal_subgens_size();
}
inline void CustomGeneratorValue::clear_subgens() {
  _impl_.subgens_.Clear();
}
inline ::Property::CustomGeneratorSubGen* CustomGeneratorValue::mutable_subgens(int index) {
  // @@protoc_insertion_point(field_mutable:Property.CustomGeneratorValue.subGens)
  return _impl_.subgens_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Property::CustomGeneratorSubGen >*
CustomGeneratorValue::mutable_subgens() {
  // @@protoc_insertion_point(field_mutable_list:Property.CustomGeneratorValue.subGens)
  return &_impl_.subgens_;
}
inline const ::Property::CustomGeneratorSubGen& CustomGeneratorValue::_internal_subgens(int index) const {
  return _impl_.subgens_.Get(index);
}
inline const ::Property::CustomGeneratorSubGen& CustomGeneratorValue::subgens(int index) const {
  // @@protoc_insertion_point(field_get:Property.CustomGeneratorValue.subGens)
  return _internal_subgens(index);
}
inline ::Property::CustomGeneratorSubGen* CustomGeneratorValue::_internal_add_subgens() {
  return _impl_.subgens_.Add();
}
inline ::Property::CustomGeneratorSubGen* CustomGeneratorValue::add_subgens() {
  ::Property::CustomGeneratorSubGen* _add = _internal_add_subgens();
  // @@protoc_insertion_point(field_add:Property.CustomGeneratorValue.subGens)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Property::CustomGeneratorSubGen >&
CustomGeneratorValue::subgens() const {
  // @@protoc_insertion_point(field_list:Property.CustomGeneratorValue.subGens)
  return _impl_.subgens_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Property

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Property::PropertyMetadata_PropertySync> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Property::PropertyMetadata_PropertySync>() {
  return ::Property::PropertyMetadata_PropertySync_descriptor();
}
template <> struct is_proto_enum< ::Property::ScalarPropertyAssignment_ScalarPropertyMethod> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Property::ScalarPropertyAssignment_ScalarPropertyMethod>() {
  return ::Property::ScalarPropertyAssignment_ScalarPropertyMethod_descriptor();
}
template <> struct is_proto_enum< ::Property::ScalarEditingMetadata_ScalarInterpretationEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Property::ScalarEditingMetadata_ScalarInterpretationEnum>() {
  return ::Property::ScalarEditingMetadata_ScalarInterpretationEnum_descriptor();
}
template <> struct is_proto_enum< ::Property::LinkContentTypeSpecifier_TextureType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Property::LinkContentTypeSpecifier_TextureType>() {
  return ::Property::LinkContentTypeSpecifier_TextureType_descriptor();
}
template <> struct is_proto_enum< ::Property::LinkContentTypeSpecifier_MaterialType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Property::LinkContentTypeSpecifier_MaterialType>() {
  return ::Property::LinkContentTypeSpecifier_MaterialType_descriptor();
}
template <> struct is_proto_enum< ::Property::LinkContentTypeSpecifier_GeometryType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Property::LinkContentTypeSpecifier_GeometryType>() {
  return ::Property::LinkContentTypeSpecifier_GeometryType_descriptor();
}
template <> struct is_proto_enum< ::Property::VectorPropertyAssignment_VectorPropertyMethod> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Property::VectorPropertyAssignment_VectorPropertyMethod>() {
  return ::Property::VectorPropertyAssignment_VectorPropertyMethod_descriptor();
}
template <> struct is_proto_enum< ::Property::VectorPropertyKeyframed_VectorInterpolationMethod> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Property::VectorPropertyKeyframed_VectorInterpolationMethod>() {
  return ::Property::VectorPropertyKeyframed_VectorInterpolationMethod_descriptor();
}
template <> struct is_proto_enum< ::Property::VectorEditingMetadata_VectorInterpretationEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Property::VectorEditingMetadata_VectorInterpretationEnum>() {
  return ::Property::VectorEditingMetadata_VectorInterpretationEnum_descriptor();
}
template <> struct is_proto_enum< ::Property::ColorPropertyAssignment_ColorPropertyMethod> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Property::ColorPropertyAssignment_ColorPropertyMethod>() {
  return ::Property::ColorPropertyAssignment_ColorPropertyMethod_descriptor();
}
template <> struct is_proto_enum< ::Property::KeyframeLoopingEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Property::KeyframeLoopingEnum>() {
  return ::Property::KeyframeLoopingEnum_descriptor();
}
template <> struct is_proto_enum< ::Property::TangentsAutocomputeMethodEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Property::TangentsAutocomputeMethodEnum>() {
  return ::Property::TangentsAutocomputeMethodEnum_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_properties_2eproto
