// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: usertouser.proto

#include "usertouser.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Session {
PROTOBUF_CONSTEXPR RequestLivePropertyCapabilities_V1::RequestLivePropertyCapabilities_V1(
    ::_pbi::ConstantInitialized) {}
struct RequestLivePropertyCapabilities_V1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestLivePropertyCapabilities_V1DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestLivePropertyCapabilities_V1DefaultTypeInternal() {}
  union {
    RequestLivePropertyCapabilities_V1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestLivePropertyCapabilities_V1DefaultTypeInternal _RequestLivePropertyCapabilities_V1_default_instance_;
PROTOBUF_CONSTEXPR RequestLivePropertyCapabilities::RequestLivePropertyCapabilities(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.V_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct RequestLivePropertyCapabilitiesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestLivePropertyCapabilitiesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestLivePropertyCapabilitiesDefaultTypeInternal() {}
  union {
    RequestLivePropertyCapabilities _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestLivePropertyCapabilitiesDefaultTypeInternal _RequestLivePropertyCapabilities_default_instance_;
PROTOBUF_CONSTEXPR ResponseLivePropertyCapabilities_V1::ResponseLivePropertyCapabilities_V1(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.capability_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResponseLivePropertyCapabilities_V1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseLivePropertyCapabilities_V1DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseLivePropertyCapabilities_V1DefaultTypeInternal() {}
  union {
    ResponseLivePropertyCapabilities_V1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseLivePropertyCapabilities_V1DefaultTypeInternal _ResponseLivePropertyCapabilities_V1_default_instance_;
PROTOBUF_CONSTEXPR ResponseLivePropertyCapabilities::ResponseLivePropertyCapabilities(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.V_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ResponseLivePropertyCapabilitiesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseLivePropertyCapabilitiesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseLivePropertyCapabilitiesDefaultTypeInternal() {}
  union {
    ResponseLivePropertyCapabilities _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseLivePropertyCapabilitiesDefaultTypeInternal _ResponseLivePropertyCapabilities_default_instance_;
PROTOBUF_CONSTEXPR RequestLivePropertyInfo_V1::RequestLivePropertyInfo_V1(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.includenodes_)*/{}
  , /*decltype(_impl_.excludenodes_)*/{}
  , /*decltype(_impl_.includeproperties_)*/{}
  , /*decltype(_impl_.requestid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.continuousmode_)*/false} {}
struct RequestLivePropertyInfo_V1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestLivePropertyInfo_V1DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestLivePropertyInfo_V1DefaultTypeInternal() {}
  union {
    RequestLivePropertyInfo_V1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestLivePropertyInfo_V1DefaultTypeInternal _RequestLivePropertyInfo_V1_default_instance_;
PROTOBUF_CONSTEXPR RequestLivePropertyInfo::RequestLivePropertyInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.V_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct RequestLivePropertyInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestLivePropertyInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestLivePropertyInfoDefaultTypeInternal() {}
  union {
    RequestLivePropertyInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestLivePropertyInfoDefaultTypeInternal _RequestLivePropertyInfo_default_instance_;
PROTOBUF_CONSTEXPR PropertyMetaById::PropertyMetaById(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.metaid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.MetaType_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct PropertyMetaByIdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PropertyMetaByIdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PropertyMetaByIdDefaultTypeInternal() {}
  union {
    PropertyMetaById _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PropertyMetaByIdDefaultTypeInternal _PropertyMetaById_default_instance_;
PROTOBUF_CONSTEXPR PropertyInfo::PropertyInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.metaid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/nullptr} {}
struct PropertyInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PropertyInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PropertyInfoDefaultTypeInternal() {}
  union {
    PropertyInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PropertyInfoDefaultTypeInternal _PropertyInfo_default_instance_;
PROTOBUF_CONSTEXPR PropertyInfoNode::PropertyInfoNode(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.properties_)*/{}
  , /*decltype(_impl_.children_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PropertyInfoNodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PropertyInfoNodeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PropertyInfoNodeDefaultTypeInternal() {}
  union {
    PropertyInfoNode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PropertyInfoNodeDefaultTypeInternal _PropertyInfoNode_default_instance_;
PROTOBUF_CONSTEXPR ResponseLivePropertyInfo_V1::ResponseLivePropertyInfo_V1(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.metas_)*/{}
  , /*decltype(_impl_.requestid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.root_)*/nullptr} {}
struct ResponseLivePropertyInfo_V1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseLivePropertyInfo_V1DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseLivePropertyInfo_V1DefaultTypeInternal() {}
  union {
    ResponseLivePropertyInfo_V1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseLivePropertyInfo_V1DefaultTypeInternal _ResponseLivePropertyInfo_V1_default_instance_;
PROTOBUF_CONSTEXPR ResponseLivePropertyInfo::ResponseLivePropertyInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.V_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ResponseLivePropertyInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseLivePropertyInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseLivePropertyInfoDefaultTypeInternal() {}
  union {
    ResponseLivePropertyInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseLivePropertyInfoDefaultTypeInternal _ResponseLivePropertyInfo_default_instance_;
PROTOBUF_CONSTEXPR UserToUserMessage_V1::UserToUserMessage_V1(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.Message_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct UserToUserMessage_V1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserToUserMessage_V1DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserToUserMessage_V1DefaultTypeInternal() {}
  union {
    UserToUserMessage_V1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserToUserMessage_V1DefaultTypeInternal _UserToUserMessage_V1_default_instance_;
PROTOBUF_CONSTEXPR UserToUserMessage::UserToUserMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.V_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct UserToUserMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserToUserMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserToUserMessageDefaultTypeInternal() {}
  union {
    UserToUserMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserToUserMessageDefaultTypeInternal _UserToUserMessage_default_instance_;
}  // namespace Session
static ::_pb::Metadata file_level_metadata_usertouser_2eproto[13];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_usertouser_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_usertouser_2eproto = nullptr;

const uint32_t TableStruct_usertouser_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Session::RequestLivePropertyCapabilities_V1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Session::RequestLivePropertyCapabilities, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Session::RequestLivePropertyCapabilities, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::Session::RequestLivePropertyCapabilities, _impl_.V_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Session::ResponseLivePropertyCapabilities_V1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Session::ResponseLivePropertyCapabilities_V1, _impl_.capability_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Session::ResponseLivePropertyCapabilities, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Session::ResponseLivePropertyCapabilities, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::Session::ResponseLivePropertyCapabilities, _impl_.V_),
  PROTOBUF_FIELD_OFFSET(::Session::RequestLivePropertyInfo_V1, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Session::RequestLivePropertyInfo_V1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Session::RequestLivePropertyInfo_V1, _impl_.includenodes_),
  PROTOBUF_FIELD_OFFSET(::Session::RequestLivePropertyInfo_V1, _impl_.excludenodes_),
  PROTOBUF_FIELD_OFFSET(::Session::RequestLivePropertyInfo_V1, _impl_.includeproperties_),
  PROTOBUF_FIELD_OFFSET(::Session::RequestLivePropertyInfo_V1, _impl_.requestid_),
  PROTOBUF_FIELD_OFFSET(::Session::RequestLivePropertyInfo_V1, _impl_.continuousmode_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Session::RequestLivePropertyInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Session::RequestLivePropertyInfo, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::Session::RequestLivePropertyInfo, _impl_.V_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Session::PropertyMetaById, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Session::PropertyMetaById, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Session::PropertyMetaById, _impl_.metaid_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::Session::PropertyMetaById, _impl_.MetaType_),
  PROTOBUF_FIELD_OFFSET(::Session::PropertyInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Session::PropertyInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Session::PropertyInfo, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::Session::PropertyInfo, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::Session::PropertyInfo, _impl_.metaid_),
  ~0u,
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Session::PropertyInfoNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Session::PropertyInfoNode, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::Session::PropertyInfoNode, _impl_.properties_),
  PROTOBUF_FIELD_OFFSET(::Session::PropertyInfoNode, _impl_.children_),
  PROTOBUF_FIELD_OFFSET(::Session::ResponseLivePropertyInfo_V1, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Session::ResponseLivePropertyInfo_V1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Session::ResponseLivePropertyInfo_V1, _impl_.requestid_),
  PROTOBUF_FIELD_OFFSET(::Session::ResponseLivePropertyInfo_V1, _impl_.root_),
  PROTOBUF_FIELD_OFFSET(::Session::ResponseLivePropertyInfo_V1, _impl_.metas_),
  0,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Session::ResponseLivePropertyInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Session::ResponseLivePropertyInfo, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::Session::ResponseLivePropertyInfo, _impl_.V_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Session::UserToUserMessage_V1, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Session::UserToUserMessage_V1, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::Session::UserToUserMessage_V1, _impl_.Message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Session::UserToUserMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Session::UserToUserMessage, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::Session::UserToUserMessage, _impl_.V_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Session::RequestLivePropertyCapabilities_V1)},
  { 6, -1, -1, sizeof(::Session::RequestLivePropertyCapabilities)},
  { 14, -1, -1, sizeof(::Session::ResponseLivePropertyCapabilities_V1)},
  { 21, -1, -1, sizeof(::Session::ResponseLivePropertyCapabilities)},
  { 29, 40, -1, sizeof(::Session::RequestLivePropertyInfo_V1)},
  { 45, -1, -1, sizeof(::Session::RequestLivePropertyInfo)},
  { 53, -1, -1, sizeof(::Session::PropertyMetaById)},
  { 69, 78, -1, sizeof(::Session::PropertyInfo)},
  { 81, -1, -1, sizeof(::Session::PropertyInfoNode)},
  { 90, 99, -1, sizeof(::Session::ResponseLivePropertyInfo_V1)},
  { 102, -1, -1, sizeof(::Session::ResponseLivePropertyInfo)},
  { 110, -1, -1, sizeof(::Session::UserToUserMessage_V1)},
  { 122, -1, -1, sizeof(::Session::UserToUserMessage)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Session::_RequestLivePropertyCapabilities_V1_default_instance_._instance,
  &::Session::_RequestLivePropertyCapabilities_default_instance_._instance,
  &::Session::_ResponseLivePropertyCapabilities_V1_default_instance_._instance,
  &::Session::_ResponseLivePropertyCapabilities_default_instance_._instance,
  &::Session::_RequestLivePropertyInfo_V1_default_instance_._instance,
  &::Session::_RequestLivePropertyInfo_default_instance_._instance,
  &::Session::_PropertyMetaById_default_instance_._instance,
  &::Session::_PropertyInfo_default_instance_._instance,
  &::Session::_PropertyInfoNode_default_instance_._instance,
  &::Session::_ResponseLivePropertyInfo_V1_default_instance_._instance,
  &::Session::_ResponseLivePropertyInfo_default_instance_._instance,
  &::Session::_UserToUserMessage_V1_default_instance_._instance,
  &::Session::_UserToUserMessage_default_instance_._instance,
};

const char descriptor_table_protodef_usertouser_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020usertouser.proto\022\007Session\032\037google/prot"
  "obuf/timestamp.proto\032\014common.proto\032\020serv"
  "erdata.proto\032\020properties.proto\"g\n\037Reques"
  "tLivePropertyCapabilities\0229\n\002v1\030\001 \001(\0132+."
  "Session.RequestLivePropertyCapabilities."
  "V1H\000\032\004\n\002V1B\003\n\001V\"\267\002\n ResponseLiveProperty"
  "Capabilities\022:\n\002v1\030\001 \001(\0132,.Session.Respo"
  "nseLivePropertyCapabilities.V1H\000\032\321\001\n\002V1\022"
  "[\n\ncapability\030\001 \001(\0162G.Session.ResponseLi"
  "vePropertyCapabilities.V1.LivePropertyCa"
  "pabilityEnum\"n\n\032LivePropertyCapabilityEn"
  "um\022\010\n\004None\020\000\022\r\n\tAvailable\020\001\022\027\n\023Available"
  "Restricted\020\002\022\t\n\005Eager\020\003\022\023\n\017EagerRestrict"
  "ed\020\004B\003\n\001V\"\350\001\n\027RequestLivePropertyInfo\0221\n"
  "\002v1\030\001 \001(\0132#.Session.RequestLivePropertyI"
  "nfo.V1H\000\032\224\001\n\002V1\022\024\n\014includeNodes\030\001 \003(\t\022\024\n"
  "\014excludeNodes\030\002 \003(\t\022\031\n\021includeProperties"
  "\030\006 \003(\t\022\021\n\trequestId\030\004 \001(\t\022\033\n\016continuousM"
  "ode\030\005 \001(\010H\000\210\001\001B\021\n\017_continuousModeJ\004\010\003\020\004B"
  "\003\n\001V\"\314\003\n\020PropertyMetaById\022\016\n\006metaId\030\001 \001("
  "\t\0222\n\006scalar\030\002 \001(\0132 .Property.ScalarPrope"
  "rtyMetadataH\000\0222\n\006string\030\003 \001(\0132 .Property"
  ".StringPropertyMetadataH\000\0222\n\006vector\030\004 \001("
  "\0132 .Property.VectorPropertyMetadataH\000\0220\n"
  "\005color\030\005 \001(\0132\037.Property.ColorPropertyMet"
  "adataH\000\0228\n\ttransform\030\006 \001(\0132#.Property.Tr"
  "ansformPropertyMetadataH\000\0224\n\007boolean\030\007 \001"
  "(\0132!.Property.BooleanPropertyMetadataH\000\022"
  ".\n\004json\030\t \001(\0132\036.Property.JsonPropertyMet"
  "adataH\000\022.\n\004link\030\n \001(\0132\036.Property.LinkPro"
  "pertyMetadataH\000B\n\n\010MetaType\"t\n\014PropertyI"
  "nfo\022\n\n\002id\030\001 \001(\t\022.\n\005value\030\002 \001(\0132\032.Propert"
  "y.AnyPropertyValueH\000\210\001\001\022\023\n\006metaId\030\003 \001(\tH"
  "\001\210\001\001B\010\n\006_valueB\t\n\007_metaId\"v\n\020PropertyInf"
  "oNode\022\n\n\002id\030\001 \001(\t\022)\n\nproperties\030\002 \003(\0132\025."
  "Session.PropertyInfo\022+\n\010children\030\003 \003(\0132\031"
  ".Session.PropertyInfoNode\"\322\001\n\030ResponseLi"
  "vePropertyInfo\0222\n\002v1\030\001 \001(\0132$.Session.Res"
  "ponseLivePropertyInfo.V1H\000\032}\n\002V1\022\026\n\trequ"
  "estId\030\005 \001(\tH\000\210\001\001\022\'\n\004root\030\006 \001(\0132\031.Session"
  ".PropertyInfoNode\022(\n\005metas\030\007 \003(\0132\031.Sessi"
  "on.PropertyMetaByIdB\014\n\n_requestIdB\003\n\001V\"\247"
  "\003\n\021UserToUserMessage\022+\n\002v1\030\001 \001(\0132\035.Sessi"
  "on.UserToUserMessage.V1H\000\032\337\002\n\002V1\022\026\n\014blin"
  "dMessage\030\002 \001(\014H\000\022C\n\027requestLivePropertyI"
  "nfo\030\003 \001(\0132 .Session.RequestLivePropertyI"
  "nfoH\000\022E\n\030responseLivePropertyInfo\030\004 \001(\0132"
  "!.Session.ResponseLivePropertyInfoH\000\022S\n\037"
  "requestLivePropertyCapabilities\030\005 \001(\0132(."
  "Session.RequestLivePropertyCapabilitiesH"
  "\000\022U\n ResponseLivePropertyCapabilities\030\006 "
  "\001(\0132).Session.ResponseLivePropertyCapabi"
  "litiesH\000B\t\n\007MessageB\003\n\001VB\036\252\002\033Collab.Prox"
  "y.Comm.LiveTypesb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_usertouser_2eproto_deps[4] = {
  &::descriptor_table_common_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_properties_2eproto,
  &::descriptor_table_serverdata_2eproto,
};
static ::_pbi::once_flag descriptor_table_usertouser_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_usertouser_2eproto = {
    false, false, 2144, descriptor_table_protodef_usertouser_2eproto,
    "usertouser.proto",
    &descriptor_table_usertouser_2eproto_once, descriptor_table_usertouser_2eproto_deps, 4, 13,
    schemas, file_default_instances, TableStruct_usertouser_2eproto::offsets,
    file_level_metadata_usertouser_2eproto, file_level_enum_descriptors_usertouser_2eproto,
    file_level_service_descriptors_usertouser_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_usertouser_2eproto_getter() {
  return &descriptor_table_usertouser_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_usertouser_2eproto(&descriptor_table_usertouser_2eproto);
namespace Session {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResponseLivePropertyCapabilities_V1_LivePropertyCapabilityEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_usertouser_2eproto);
  return file_level_enum_descriptors_usertouser_2eproto[0];
}
bool ResponseLivePropertyCapabilities_V1_LivePropertyCapabilityEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ResponseLivePropertyCapabilities_V1_LivePropertyCapabilityEnum ResponseLivePropertyCapabilities_V1::None;
constexpr ResponseLivePropertyCapabilities_V1_LivePropertyCapabilityEnum ResponseLivePropertyCapabilities_V1::Available;
constexpr ResponseLivePropertyCapabilities_V1_LivePropertyCapabilityEnum ResponseLivePropertyCapabilities_V1::AvailableRestricted;
constexpr ResponseLivePropertyCapabilities_V1_LivePropertyCapabilityEnum ResponseLivePropertyCapabilities_V1::Eager;
constexpr ResponseLivePropertyCapabilities_V1_LivePropertyCapabilityEnum ResponseLivePropertyCapabilities_V1::EagerRestricted;
constexpr ResponseLivePropertyCapabilities_V1_LivePropertyCapabilityEnum ResponseLivePropertyCapabilities_V1::LivePropertyCapabilityEnum_MIN;
constexpr ResponseLivePropertyCapabilities_V1_LivePropertyCapabilityEnum ResponseLivePropertyCapabilities_V1::LivePropertyCapabilityEnum_MAX;
constexpr int ResponseLivePropertyCapabilities_V1::LivePropertyCapabilityEnum_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class RequestLivePropertyCapabilities_V1::_Internal {
 public:
};

RequestLivePropertyCapabilities_V1::RequestLivePropertyCapabilities_V1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Session.RequestLivePropertyCapabilities.V1)
}
RequestLivePropertyCapabilities_V1::RequestLivePropertyCapabilities_V1(const RequestLivePropertyCapabilities_V1& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  RequestLivePropertyCapabilities_V1* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Session.RequestLivePropertyCapabilities.V1)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestLivePropertyCapabilities_V1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestLivePropertyCapabilities_V1::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata RequestLivePropertyCapabilities_V1::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_usertouser_2eproto_getter, &descriptor_table_usertouser_2eproto_once,
      file_level_metadata_usertouser_2eproto[0]);
}

// ===================================================================

class RequestLivePropertyCapabilities::_Internal {
 public:
  static const ::Session::RequestLivePropertyCapabilities_V1& v1(const RequestLivePropertyCapabilities* msg);
};

const ::Session::RequestLivePropertyCapabilities_V1&
RequestLivePropertyCapabilities::_Internal::v1(const RequestLivePropertyCapabilities* msg) {
  return *msg->_impl_.V_.v1_;
}
void RequestLivePropertyCapabilities::set_allocated_v1(::Session::RequestLivePropertyCapabilities_V1* v1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_V();
  if (v1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(v1);
    if (message_arena != submessage_arena) {
      v1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, v1, submessage_arena);
    }
    set_has_v1();
    _impl_.V_.v1_ = v1;
  }
  // @@protoc_insertion_point(field_set_allocated:Session.RequestLivePropertyCapabilities.v1)
}
RequestLivePropertyCapabilities::RequestLivePropertyCapabilities(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Session.RequestLivePropertyCapabilities)
}
RequestLivePropertyCapabilities::RequestLivePropertyCapabilities(const RequestLivePropertyCapabilities& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RequestLivePropertyCapabilities* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.V_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_V();
  switch (from.V_case()) {
    case kV1: {
      _this->_internal_mutable_v1()->::Session::RequestLivePropertyCapabilities_V1::MergeFrom(
          from._internal_v1());
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Session.RequestLivePropertyCapabilities)
}

inline void RequestLivePropertyCapabilities::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.V_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_V();
}

RequestLivePropertyCapabilities::~RequestLivePropertyCapabilities() {
  // @@protoc_insertion_point(destructor:Session.RequestLivePropertyCapabilities)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestLivePropertyCapabilities::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_V()) {
    clear_V();
  }
}

void RequestLivePropertyCapabilities::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestLivePropertyCapabilities::clear_V() {
// @@protoc_insertion_point(one_of_clear_start:Session.RequestLivePropertyCapabilities)
  switch (V_case()) {
    case kV1: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.V_.v1_;
      }
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = V_NOT_SET;
}


void RequestLivePropertyCapabilities::Clear() {
// @@protoc_insertion_point(message_clear_start:Session.RequestLivePropertyCapabilities)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_V();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestLivePropertyCapabilities::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Session.RequestLivePropertyCapabilities.V1 v1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_v1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestLivePropertyCapabilities::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Session.RequestLivePropertyCapabilities)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Session.RequestLivePropertyCapabilities.V1 v1 = 1;
  if (_internal_has_v1()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::v1(this),
        _Internal::v1(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Session.RequestLivePropertyCapabilities)
  return target;
}

size_t RequestLivePropertyCapabilities::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Session.RequestLivePropertyCapabilities)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (V_case()) {
    // .Session.RequestLivePropertyCapabilities.V1 v1 = 1;
    case kV1: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.V_.v1_);
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestLivePropertyCapabilities::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RequestLivePropertyCapabilities::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestLivePropertyCapabilities::GetClassData() const { return &_class_data_; }


void RequestLivePropertyCapabilities::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RequestLivePropertyCapabilities*>(&to_msg);
  auto& from = static_cast<const RequestLivePropertyCapabilities&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Session.RequestLivePropertyCapabilities)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.V_case()) {
    case kV1: {
      _this->_internal_mutable_v1()->::Session::RequestLivePropertyCapabilities_V1::MergeFrom(
          from._internal_v1());
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestLivePropertyCapabilities::CopyFrom(const RequestLivePropertyCapabilities& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Session.RequestLivePropertyCapabilities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestLivePropertyCapabilities::IsInitialized() const {
  return true;
}

void RequestLivePropertyCapabilities::InternalSwap(RequestLivePropertyCapabilities* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.V_, other->_impl_.V_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestLivePropertyCapabilities::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_usertouser_2eproto_getter, &descriptor_table_usertouser_2eproto_once,
      file_level_metadata_usertouser_2eproto[1]);
}

// ===================================================================

class ResponseLivePropertyCapabilities_V1::_Internal {
 public:
};

ResponseLivePropertyCapabilities_V1::ResponseLivePropertyCapabilities_V1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Session.ResponseLivePropertyCapabilities.V1)
}
ResponseLivePropertyCapabilities_V1::ResponseLivePropertyCapabilities_V1(const ResponseLivePropertyCapabilities_V1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResponseLivePropertyCapabilities_V1* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.capability_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.capability_ = from._impl_.capability_;
  // @@protoc_insertion_point(copy_constructor:Session.ResponseLivePropertyCapabilities.V1)
}

inline void ResponseLivePropertyCapabilities_V1::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.capability_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ResponseLivePropertyCapabilities_V1::~ResponseLivePropertyCapabilities_V1() {
  // @@protoc_insertion_point(destructor:Session.ResponseLivePropertyCapabilities.V1)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResponseLivePropertyCapabilities_V1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ResponseLivePropertyCapabilities_V1::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResponseLivePropertyCapabilities_V1::Clear() {
// @@protoc_insertion_point(message_clear_start:Session.ResponseLivePropertyCapabilities.V1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.capability_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseLivePropertyCapabilities_V1::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Session.ResponseLivePropertyCapabilities.V1.LivePropertyCapabilityEnum capability = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_capability(static_cast<::Session::ResponseLivePropertyCapabilities_V1_LivePropertyCapabilityEnum>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseLivePropertyCapabilities_V1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Session.ResponseLivePropertyCapabilities.V1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Session.ResponseLivePropertyCapabilities.V1.LivePropertyCapabilityEnum capability = 1;
  if (this->_internal_capability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_capability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Session.ResponseLivePropertyCapabilities.V1)
  return target;
}

size_t ResponseLivePropertyCapabilities_V1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Session.ResponseLivePropertyCapabilities.V1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Session.ResponseLivePropertyCapabilities.V1.LivePropertyCapabilityEnum capability = 1;
  if (this->_internal_capability() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_capability());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseLivePropertyCapabilities_V1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResponseLivePropertyCapabilities_V1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseLivePropertyCapabilities_V1::GetClassData() const { return &_class_data_; }


void ResponseLivePropertyCapabilities_V1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResponseLivePropertyCapabilities_V1*>(&to_msg);
  auto& from = static_cast<const ResponseLivePropertyCapabilities_V1&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Session.ResponseLivePropertyCapabilities.V1)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_capability() != 0) {
    _this->_internal_set_capability(from._internal_capability());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseLivePropertyCapabilities_V1::CopyFrom(const ResponseLivePropertyCapabilities_V1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Session.ResponseLivePropertyCapabilities.V1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseLivePropertyCapabilities_V1::IsInitialized() const {
  return true;
}

void ResponseLivePropertyCapabilities_V1::InternalSwap(ResponseLivePropertyCapabilities_V1* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.capability_, other->_impl_.capability_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseLivePropertyCapabilities_V1::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_usertouser_2eproto_getter, &descriptor_table_usertouser_2eproto_once,
      file_level_metadata_usertouser_2eproto[2]);
}

// ===================================================================

class ResponseLivePropertyCapabilities::_Internal {
 public:
  static const ::Session::ResponseLivePropertyCapabilities_V1& v1(const ResponseLivePropertyCapabilities* msg);
};

const ::Session::ResponseLivePropertyCapabilities_V1&
ResponseLivePropertyCapabilities::_Internal::v1(const ResponseLivePropertyCapabilities* msg) {
  return *msg->_impl_.V_.v1_;
}
void ResponseLivePropertyCapabilities::set_allocated_v1(::Session::ResponseLivePropertyCapabilities_V1* v1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_V();
  if (v1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(v1);
    if (message_arena != submessage_arena) {
      v1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, v1, submessage_arena);
    }
    set_has_v1();
    _impl_.V_.v1_ = v1;
  }
  // @@protoc_insertion_point(field_set_allocated:Session.ResponseLivePropertyCapabilities.v1)
}
ResponseLivePropertyCapabilities::ResponseLivePropertyCapabilities(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Session.ResponseLivePropertyCapabilities)
}
ResponseLivePropertyCapabilities::ResponseLivePropertyCapabilities(const ResponseLivePropertyCapabilities& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResponseLivePropertyCapabilities* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.V_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_V();
  switch (from.V_case()) {
    case kV1: {
      _this->_internal_mutable_v1()->::Session::ResponseLivePropertyCapabilities_V1::MergeFrom(
          from._internal_v1());
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Session.ResponseLivePropertyCapabilities)
}

inline void ResponseLivePropertyCapabilities::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.V_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_V();
}

ResponseLivePropertyCapabilities::~ResponseLivePropertyCapabilities() {
  // @@protoc_insertion_point(destructor:Session.ResponseLivePropertyCapabilities)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResponseLivePropertyCapabilities::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_V()) {
    clear_V();
  }
}

void ResponseLivePropertyCapabilities::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResponseLivePropertyCapabilities::clear_V() {
// @@protoc_insertion_point(one_of_clear_start:Session.ResponseLivePropertyCapabilities)
  switch (V_case()) {
    case kV1: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.V_.v1_;
      }
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = V_NOT_SET;
}


void ResponseLivePropertyCapabilities::Clear() {
// @@protoc_insertion_point(message_clear_start:Session.ResponseLivePropertyCapabilities)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_V();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseLivePropertyCapabilities::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Session.ResponseLivePropertyCapabilities.V1 v1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_v1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseLivePropertyCapabilities::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Session.ResponseLivePropertyCapabilities)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Session.ResponseLivePropertyCapabilities.V1 v1 = 1;
  if (_internal_has_v1()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::v1(this),
        _Internal::v1(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Session.ResponseLivePropertyCapabilities)
  return target;
}

size_t ResponseLivePropertyCapabilities::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Session.ResponseLivePropertyCapabilities)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (V_case()) {
    // .Session.ResponseLivePropertyCapabilities.V1 v1 = 1;
    case kV1: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.V_.v1_);
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseLivePropertyCapabilities::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResponseLivePropertyCapabilities::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseLivePropertyCapabilities::GetClassData() const { return &_class_data_; }


void ResponseLivePropertyCapabilities::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResponseLivePropertyCapabilities*>(&to_msg);
  auto& from = static_cast<const ResponseLivePropertyCapabilities&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Session.ResponseLivePropertyCapabilities)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.V_case()) {
    case kV1: {
      _this->_internal_mutable_v1()->::Session::ResponseLivePropertyCapabilities_V1::MergeFrom(
          from._internal_v1());
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseLivePropertyCapabilities::CopyFrom(const ResponseLivePropertyCapabilities& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Session.ResponseLivePropertyCapabilities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseLivePropertyCapabilities::IsInitialized() const {
  return true;
}

void ResponseLivePropertyCapabilities::InternalSwap(ResponseLivePropertyCapabilities* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.V_, other->_impl_.V_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseLivePropertyCapabilities::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_usertouser_2eproto_getter, &descriptor_table_usertouser_2eproto_once,
      file_level_metadata_usertouser_2eproto[3]);
}

// ===================================================================

class RequestLivePropertyInfo_V1::_Internal {
 public:
  using HasBits = decltype(std::declval<RequestLivePropertyInfo_V1>()._impl_._has_bits_);
  static void set_has_continuousmode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RequestLivePropertyInfo_V1::RequestLivePropertyInfo_V1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Session.RequestLivePropertyInfo.V1)
}
RequestLivePropertyInfo_V1::RequestLivePropertyInfo_V1(const RequestLivePropertyInfo_V1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RequestLivePropertyInfo_V1* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.includenodes_){from._impl_.includenodes_}
    , decltype(_impl_.excludenodes_){from._impl_.excludenodes_}
    , decltype(_impl_.includeproperties_){from._impl_.includeproperties_}
    , decltype(_impl_.requestid_){}
    , decltype(_impl_.continuousmode_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.requestid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.requestid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_requestid().empty()) {
    _this->_impl_.requestid_.Set(from._internal_requestid(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.continuousmode_ = from._impl_.continuousmode_;
  // @@protoc_insertion_point(copy_constructor:Session.RequestLivePropertyInfo.V1)
}

inline void RequestLivePropertyInfo_V1::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.includenodes_){arena}
    , decltype(_impl_.excludenodes_){arena}
    , decltype(_impl_.includeproperties_){arena}
    , decltype(_impl_.requestid_){}
    , decltype(_impl_.continuousmode_){false}
  };
  _impl_.requestid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.requestid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RequestLivePropertyInfo_V1::~RequestLivePropertyInfo_V1() {
  // @@protoc_insertion_point(destructor:Session.RequestLivePropertyInfo.V1)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestLivePropertyInfo_V1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.includenodes_.~RepeatedPtrField();
  _impl_.excludenodes_.~RepeatedPtrField();
  _impl_.includeproperties_.~RepeatedPtrField();
  _impl_.requestid_.Destroy();
}

void RequestLivePropertyInfo_V1::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestLivePropertyInfo_V1::Clear() {
// @@protoc_insertion_point(message_clear_start:Session.RequestLivePropertyInfo.V1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.includenodes_.Clear();
  _impl_.excludenodes_.Clear();
  _impl_.includeproperties_.Clear();
  _impl_.requestid_.ClearToEmpty();
  _impl_.continuousmode_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestLivePropertyInfo_V1::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string includeNodes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_includenodes();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "Session.RequestLivePropertyInfo.V1.includeNodes"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string excludeNodes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_excludenodes();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "Session.RequestLivePropertyInfo.V1.excludeNodes"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string requestId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_requestid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Session.RequestLivePropertyInfo.V1.requestId"));
        } else
          goto handle_unusual;
        continue;
      // optional bool continuousMode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_continuousmode(&has_bits);
          _impl_.continuousmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string includeProperties = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_includeproperties();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "Session.RequestLivePropertyInfo.V1.includeProperties"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestLivePropertyInfo_V1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Session.RequestLivePropertyInfo.V1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string includeNodes = 1;
  for (int i = 0, n = this->_internal_includenodes_size(); i < n; i++) {
    const auto& s = this->_internal_includenodes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Session.RequestLivePropertyInfo.V1.includeNodes");
    target = stream->WriteString(1, s, target);
  }

  // repeated string excludeNodes = 2;
  for (int i = 0, n = this->_internal_excludenodes_size(); i < n; i++) {
    const auto& s = this->_internal_excludenodes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Session.RequestLivePropertyInfo.V1.excludeNodes");
    target = stream->WriteString(2, s, target);
  }

  // string requestId = 4;
  if (!this->_internal_requestid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_requestid().data(), static_cast<int>(this->_internal_requestid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Session.RequestLivePropertyInfo.V1.requestId");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_requestid(), target);
  }

  // optional bool continuousMode = 5;
  if (_internal_has_continuousmode()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_continuousmode(), target);
  }

  // repeated string includeProperties = 6;
  for (int i = 0, n = this->_internal_includeproperties_size(); i < n; i++) {
    const auto& s = this->_internal_includeproperties(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Session.RequestLivePropertyInfo.V1.includeProperties");
    target = stream->WriteString(6, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Session.RequestLivePropertyInfo.V1)
  return target;
}

size_t RequestLivePropertyInfo_V1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Session.RequestLivePropertyInfo.V1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string includeNodes = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.includenodes_.size());
  for (int i = 0, n = _impl_.includenodes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.includenodes_.Get(i));
  }

  // repeated string excludeNodes = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.excludenodes_.size());
  for (int i = 0, n = _impl_.excludenodes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.excludenodes_.Get(i));
  }

  // repeated string includeProperties = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.includeproperties_.size());
  for (int i = 0, n = _impl_.includeproperties_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.includeproperties_.Get(i));
  }

  // string requestId = 4;
  if (!this->_internal_requestid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_requestid());
  }

  // optional bool continuousMode = 5;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestLivePropertyInfo_V1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RequestLivePropertyInfo_V1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestLivePropertyInfo_V1::GetClassData() const { return &_class_data_; }


void RequestLivePropertyInfo_V1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RequestLivePropertyInfo_V1*>(&to_msg);
  auto& from = static_cast<const RequestLivePropertyInfo_V1&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Session.RequestLivePropertyInfo.V1)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.includenodes_.MergeFrom(from._impl_.includenodes_);
  _this->_impl_.excludenodes_.MergeFrom(from._impl_.excludenodes_);
  _this->_impl_.includeproperties_.MergeFrom(from._impl_.includeproperties_);
  if (!from._internal_requestid().empty()) {
    _this->_internal_set_requestid(from._internal_requestid());
  }
  if (from._internal_has_continuousmode()) {
    _this->_internal_set_continuousmode(from._internal_continuousmode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestLivePropertyInfo_V1::CopyFrom(const RequestLivePropertyInfo_V1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Session.RequestLivePropertyInfo.V1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestLivePropertyInfo_V1::IsInitialized() const {
  return true;
}

void RequestLivePropertyInfo_V1::InternalSwap(RequestLivePropertyInfo_V1* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.includenodes_.InternalSwap(&other->_impl_.includenodes_);
  _impl_.excludenodes_.InternalSwap(&other->_impl_.excludenodes_);
  _impl_.includeproperties_.InternalSwap(&other->_impl_.includeproperties_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.requestid_, lhs_arena,
      &other->_impl_.requestid_, rhs_arena
  );
  swap(_impl_.continuousmode_, other->_impl_.continuousmode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestLivePropertyInfo_V1::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_usertouser_2eproto_getter, &descriptor_table_usertouser_2eproto_once,
      file_level_metadata_usertouser_2eproto[4]);
}

// ===================================================================

class RequestLivePropertyInfo::_Internal {
 public:
  static const ::Session::RequestLivePropertyInfo_V1& v1(const RequestLivePropertyInfo* msg);
};

const ::Session::RequestLivePropertyInfo_V1&
RequestLivePropertyInfo::_Internal::v1(const RequestLivePropertyInfo* msg) {
  return *msg->_impl_.V_.v1_;
}
void RequestLivePropertyInfo::set_allocated_v1(::Session::RequestLivePropertyInfo_V1* v1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_V();
  if (v1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(v1);
    if (message_arena != submessage_arena) {
      v1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, v1, submessage_arena);
    }
    set_has_v1();
    _impl_.V_.v1_ = v1;
  }
  // @@protoc_insertion_point(field_set_allocated:Session.RequestLivePropertyInfo.v1)
}
RequestLivePropertyInfo::RequestLivePropertyInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Session.RequestLivePropertyInfo)
}
RequestLivePropertyInfo::RequestLivePropertyInfo(const RequestLivePropertyInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RequestLivePropertyInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.V_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_V();
  switch (from.V_case()) {
    case kV1: {
      _this->_internal_mutable_v1()->::Session::RequestLivePropertyInfo_V1::MergeFrom(
          from._internal_v1());
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Session.RequestLivePropertyInfo)
}

inline void RequestLivePropertyInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.V_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_V();
}

RequestLivePropertyInfo::~RequestLivePropertyInfo() {
  // @@protoc_insertion_point(destructor:Session.RequestLivePropertyInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestLivePropertyInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_V()) {
    clear_V();
  }
}

void RequestLivePropertyInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestLivePropertyInfo::clear_V() {
// @@protoc_insertion_point(one_of_clear_start:Session.RequestLivePropertyInfo)
  switch (V_case()) {
    case kV1: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.V_.v1_;
      }
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = V_NOT_SET;
}


void RequestLivePropertyInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Session.RequestLivePropertyInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_V();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestLivePropertyInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Session.RequestLivePropertyInfo.V1 v1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_v1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestLivePropertyInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Session.RequestLivePropertyInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Session.RequestLivePropertyInfo.V1 v1 = 1;
  if (_internal_has_v1()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::v1(this),
        _Internal::v1(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Session.RequestLivePropertyInfo)
  return target;
}

size_t RequestLivePropertyInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Session.RequestLivePropertyInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (V_case()) {
    // .Session.RequestLivePropertyInfo.V1 v1 = 1;
    case kV1: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.V_.v1_);
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestLivePropertyInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RequestLivePropertyInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestLivePropertyInfo::GetClassData() const { return &_class_data_; }


void RequestLivePropertyInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RequestLivePropertyInfo*>(&to_msg);
  auto& from = static_cast<const RequestLivePropertyInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Session.RequestLivePropertyInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.V_case()) {
    case kV1: {
      _this->_internal_mutable_v1()->::Session::RequestLivePropertyInfo_V1::MergeFrom(
          from._internal_v1());
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestLivePropertyInfo::CopyFrom(const RequestLivePropertyInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Session.RequestLivePropertyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestLivePropertyInfo::IsInitialized() const {
  return true;
}

void RequestLivePropertyInfo::InternalSwap(RequestLivePropertyInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.V_, other->_impl_.V_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestLivePropertyInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_usertouser_2eproto_getter, &descriptor_table_usertouser_2eproto_once,
      file_level_metadata_usertouser_2eproto[5]);
}

// ===================================================================

class PropertyMetaById::_Internal {
 public:
  static const ::Property::ScalarPropertyMetadata& scalar(const PropertyMetaById* msg);
  static const ::Property::StringPropertyMetadata& string(const PropertyMetaById* msg);
  static const ::Property::VectorPropertyMetadata& vector(const PropertyMetaById* msg);
  static const ::Property::ColorPropertyMetadata& color(const PropertyMetaById* msg);
  static const ::Property::TransformPropertyMetadata& transform(const PropertyMetaById* msg);
  static const ::Property::BooleanPropertyMetadata& boolean(const PropertyMetaById* msg);
  static const ::Property::JsonPropertyMetadata& json(const PropertyMetaById* msg);
  static const ::Property::LinkPropertyMetadata& link(const PropertyMetaById* msg);
};

const ::Property::ScalarPropertyMetadata&
PropertyMetaById::_Internal::scalar(const PropertyMetaById* msg) {
  return *msg->_impl_.MetaType_.scalar_;
}
const ::Property::StringPropertyMetadata&
PropertyMetaById::_Internal::string(const PropertyMetaById* msg) {
  return *msg->_impl_.MetaType_.string_;
}
const ::Property::VectorPropertyMetadata&
PropertyMetaById::_Internal::vector(const PropertyMetaById* msg) {
  return *msg->_impl_.MetaType_.vector_;
}
const ::Property::ColorPropertyMetadata&
PropertyMetaById::_Internal::color(const PropertyMetaById* msg) {
  return *msg->_impl_.MetaType_.color_;
}
const ::Property::TransformPropertyMetadata&
PropertyMetaById::_Internal::transform(const PropertyMetaById* msg) {
  return *msg->_impl_.MetaType_.transform_;
}
const ::Property::BooleanPropertyMetadata&
PropertyMetaById::_Internal::boolean(const PropertyMetaById* msg) {
  return *msg->_impl_.MetaType_.boolean_;
}
const ::Property::JsonPropertyMetadata&
PropertyMetaById::_Internal::json(const PropertyMetaById* msg) {
  return *msg->_impl_.MetaType_.json_;
}
const ::Property::LinkPropertyMetadata&
PropertyMetaById::_Internal::link(const PropertyMetaById* msg) {
  return *msg->_impl_.MetaType_.link_;
}
void PropertyMetaById::set_allocated_scalar(::Property::ScalarPropertyMetadata* scalar) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_MetaType();
  if (scalar) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scalar));
    if (message_arena != submessage_arena) {
      scalar = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scalar, submessage_arena);
    }
    set_has_scalar();
    _impl_.MetaType_.scalar_ = scalar;
  }
  // @@protoc_insertion_point(field_set_allocated:Session.PropertyMetaById.scalar)
}
void PropertyMetaById::clear_scalar() {
  if (_internal_has_scalar()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.MetaType_.scalar_;
    }
    clear_has_MetaType();
  }
}
void PropertyMetaById::set_allocated_string(::Property::StringPropertyMetadata* string) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_MetaType();
  if (string) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(string));
    if (message_arena != submessage_arena) {
      string = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, string, submessage_arena);
    }
    set_has_string();
    _impl_.MetaType_.string_ = string;
  }
  // @@protoc_insertion_point(field_set_allocated:Session.PropertyMetaById.string)
}
void PropertyMetaById::clear_string() {
  if (_internal_has_string()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.MetaType_.string_;
    }
    clear_has_MetaType();
  }
}
void PropertyMetaById::set_allocated_vector(::Property::VectorPropertyMetadata* vector) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_MetaType();
  if (vector) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vector));
    if (message_arena != submessage_arena) {
      vector = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vector, submessage_arena);
    }
    set_has_vector();
    _impl_.MetaType_.vector_ = vector;
  }
  // @@protoc_insertion_point(field_set_allocated:Session.PropertyMetaById.vector)
}
void PropertyMetaById::clear_vector() {
  if (_internal_has_vector()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.MetaType_.vector_;
    }
    clear_has_MetaType();
  }
}
void PropertyMetaById::set_allocated_color(::Property::ColorPropertyMetadata* color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_MetaType();
  if (color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(color));
    if (message_arena != submessage_arena) {
      color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    set_has_color();
    _impl_.MetaType_.color_ = color;
  }
  // @@protoc_insertion_point(field_set_allocated:Session.PropertyMetaById.color)
}
void PropertyMetaById::clear_color() {
  if (_internal_has_color()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.MetaType_.color_;
    }
    clear_has_MetaType();
  }
}
void PropertyMetaById::set_allocated_transform(::Property::TransformPropertyMetadata* transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_MetaType();
  if (transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transform));
    if (message_arena != submessage_arena) {
      transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transform, submessage_arena);
    }
    set_has_transform();
    _impl_.MetaType_.transform_ = transform;
  }
  // @@protoc_insertion_point(field_set_allocated:Session.PropertyMetaById.transform)
}
void PropertyMetaById::clear_transform() {
  if (_internal_has_transform()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.MetaType_.transform_;
    }
    clear_has_MetaType();
  }
}
void PropertyMetaById::set_allocated_boolean(::Property::BooleanPropertyMetadata* boolean) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_MetaType();
  if (boolean) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(boolean));
    if (message_arena != submessage_arena) {
      boolean = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, boolean, submessage_arena);
    }
    set_has_boolean();
    _impl_.MetaType_.boolean_ = boolean;
  }
  // @@protoc_insertion_point(field_set_allocated:Session.PropertyMetaById.boolean)
}
void PropertyMetaById::clear_boolean() {
  if (_internal_has_boolean()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.MetaType_.boolean_;
    }
    clear_has_MetaType();
  }
}
void PropertyMetaById::set_allocated_json(::Property::JsonPropertyMetadata* json) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_MetaType();
  if (json) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(json));
    if (message_arena != submessage_arena) {
      json = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, json, submessage_arena);
    }
    set_has_json();
    _impl_.MetaType_.json_ = json;
  }
  // @@protoc_insertion_point(field_set_allocated:Session.PropertyMetaById.json)
}
void PropertyMetaById::clear_json() {
  if (_internal_has_json()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.MetaType_.json_;
    }
    clear_has_MetaType();
  }
}
void PropertyMetaById::set_allocated_link(::Property::LinkPropertyMetadata* link) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_MetaType();
  if (link) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(link));
    if (message_arena != submessage_arena) {
      link = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, link, submessage_arena);
    }
    set_has_link();
    _impl_.MetaType_.link_ = link;
  }
  // @@protoc_insertion_point(field_set_allocated:Session.PropertyMetaById.link)
}
void PropertyMetaById::clear_link() {
  if (_internal_has_link()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.MetaType_.link_;
    }
    clear_has_MetaType();
  }
}
PropertyMetaById::PropertyMetaById(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Session.PropertyMetaById)
}
PropertyMetaById::PropertyMetaById(const PropertyMetaById& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PropertyMetaById* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.metaid_){}
    , decltype(_impl_.MetaType_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.metaid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metaid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_metaid().empty()) {
    _this->_impl_.metaid_.Set(from._internal_metaid(), 
      _this->GetArenaForAllocation());
  }
  clear_has_MetaType();
  switch (from.MetaType_case()) {
    case kScalar: {
      _this->_internal_mutable_scalar()->::Property::ScalarPropertyMetadata::MergeFrom(
          from._internal_scalar());
      break;
    }
    case kString: {
      _this->_internal_mutable_string()->::Property::StringPropertyMetadata::MergeFrom(
          from._internal_string());
      break;
    }
    case kVector: {
      _this->_internal_mutable_vector()->::Property::VectorPropertyMetadata::MergeFrom(
          from._internal_vector());
      break;
    }
    case kColor: {
      _this->_internal_mutable_color()->::Property::ColorPropertyMetadata::MergeFrom(
          from._internal_color());
      break;
    }
    case kTransform: {
      _this->_internal_mutable_transform()->::Property::TransformPropertyMetadata::MergeFrom(
          from._internal_transform());
      break;
    }
    case kBoolean: {
      _this->_internal_mutable_boolean()->::Property::BooleanPropertyMetadata::MergeFrom(
          from._internal_boolean());
      break;
    }
    case kJson: {
      _this->_internal_mutable_json()->::Property::JsonPropertyMetadata::MergeFrom(
          from._internal_json());
      break;
    }
    case kLink: {
      _this->_internal_mutable_link()->::Property::LinkPropertyMetadata::MergeFrom(
          from._internal_link());
      break;
    }
    case METATYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Session.PropertyMetaById)
}

inline void PropertyMetaById::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.metaid_){}
    , decltype(_impl_.MetaType_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.metaid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metaid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_MetaType();
}

PropertyMetaById::~PropertyMetaById() {
  // @@protoc_insertion_point(destructor:Session.PropertyMetaById)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PropertyMetaById::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.metaid_.Destroy();
  if (has_MetaType()) {
    clear_MetaType();
  }
}

void PropertyMetaById::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PropertyMetaById::clear_MetaType() {
// @@protoc_insertion_point(one_of_clear_start:Session.PropertyMetaById)
  switch (MetaType_case()) {
    case kScalar: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.MetaType_.scalar_;
      }
      break;
    }
    case kString: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.MetaType_.string_;
      }
      break;
    }
    case kVector: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.MetaType_.vector_;
      }
      break;
    }
    case kColor: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.MetaType_.color_;
      }
      break;
    }
    case kTransform: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.MetaType_.transform_;
      }
      break;
    }
    case kBoolean: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.MetaType_.boolean_;
      }
      break;
    }
    case kJson: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.MetaType_.json_;
      }
      break;
    }
    case kLink: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.MetaType_.link_;
      }
      break;
    }
    case METATYPE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = METATYPE_NOT_SET;
}


void PropertyMetaById::Clear() {
// @@protoc_insertion_point(message_clear_start:Session.PropertyMetaById)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.metaid_.ClearToEmpty();
  clear_MetaType();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PropertyMetaById::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string metaId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_metaid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Session.PropertyMetaById.metaId"));
        } else
          goto handle_unusual;
        continue;
      // .Property.ScalarPropertyMetadata scalar = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalar(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Property.StringPropertyMetadata string = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_string(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Property.VectorPropertyMetadata vector = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_vector(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Property.ColorPropertyMetadata color = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Property.TransformPropertyMetadata transform = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_transform(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Property.BooleanPropertyMetadata boolean = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_boolean(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Property.JsonPropertyMetadata json = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_json(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Property.LinkPropertyMetadata link = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_link(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PropertyMetaById::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Session.PropertyMetaById)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string metaId = 1;
  if (!this->_internal_metaid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_metaid().data(), static_cast<int>(this->_internal_metaid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Session.PropertyMetaById.metaId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_metaid(), target);
  }

  // .Property.ScalarPropertyMetadata scalar = 2;
  if (_internal_has_scalar()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::scalar(this),
        _Internal::scalar(this).GetCachedSize(), target, stream);
  }

  // .Property.StringPropertyMetadata string = 3;
  if (_internal_has_string()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::string(this),
        _Internal::string(this).GetCachedSize(), target, stream);
  }

  // .Property.VectorPropertyMetadata vector = 4;
  if (_internal_has_vector()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::vector(this),
        _Internal::vector(this).GetCachedSize(), target, stream);
  }

  // .Property.ColorPropertyMetadata color = 5;
  if (_internal_has_color()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::color(this),
        _Internal::color(this).GetCachedSize(), target, stream);
  }

  // .Property.TransformPropertyMetadata transform = 6;
  if (_internal_has_transform()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::transform(this),
        _Internal::transform(this).GetCachedSize(), target, stream);
  }

  // .Property.BooleanPropertyMetadata boolean = 7;
  if (_internal_has_boolean()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::boolean(this),
        _Internal::boolean(this).GetCachedSize(), target, stream);
  }

  // .Property.JsonPropertyMetadata json = 9;
  if (_internal_has_json()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::json(this),
        _Internal::json(this).GetCachedSize(), target, stream);
  }

  // .Property.LinkPropertyMetadata link = 10;
  if (_internal_has_link()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::link(this),
        _Internal::link(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Session.PropertyMetaById)
  return target;
}

size_t PropertyMetaById::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Session.PropertyMetaById)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string metaId = 1;
  if (!this->_internal_metaid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_metaid());
  }

  switch (MetaType_case()) {
    // .Property.ScalarPropertyMetadata scalar = 2;
    case kScalar: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.MetaType_.scalar_);
      break;
    }
    // .Property.StringPropertyMetadata string = 3;
    case kString: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.MetaType_.string_);
      break;
    }
    // .Property.VectorPropertyMetadata vector = 4;
    case kVector: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.MetaType_.vector_);
      break;
    }
    // .Property.ColorPropertyMetadata color = 5;
    case kColor: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.MetaType_.color_);
      break;
    }
    // .Property.TransformPropertyMetadata transform = 6;
    case kTransform: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.MetaType_.transform_);
      break;
    }
    // .Property.BooleanPropertyMetadata boolean = 7;
    case kBoolean: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.MetaType_.boolean_);
      break;
    }
    // .Property.JsonPropertyMetadata json = 9;
    case kJson: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.MetaType_.json_);
      break;
    }
    // .Property.LinkPropertyMetadata link = 10;
    case kLink: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.MetaType_.link_);
      break;
    }
    case METATYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PropertyMetaById::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PropertyMetaById::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PropertyMetaById::GetClassData() const { return &_class_data_; }


void PropertyMetaById::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PropertyMetaById*>(&to_msg);
  auto& from = static_cast<const PropertyMetaById&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Session.PropertyMetaById)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_metaid().empty()) {
    _this->_internal_set_metaid(from._internal_metaid());
  }
  switch (from.MetaType_case()) {
    case kScalar: {
      _this->_internal_mutable_scalar()->::Property::ScalarPropertyMetadata::MergeFrom(
          from._internal_scalar());
      break;
    }
    case kString: {
      _this->_internal_mutable_string()->::Property::StringPropertyMetadata::MergeFrom(
          from._internal_string());
      break;
    }
    case kVector: {
      _this->_internal_mutable_vector()->::Property::VectorPropertyMetadata::MergeFrom(
          from._internal_vector());
      break;
    }
    case kColor: {
      _this->_internal_mutable_color()->::Property::ColorPropertyMetadata::MergeFrom(
          from._internal_color());
      break;
    }
    case kTransform: {
      _this->_internal_mutable_transform()->::Property::TransformPropertyMetadata::MergeFrom(
          from._internal_transform());
      break;
    }
    case kBoolean: {
      _this->_internal_mutable_boolean()->::Property::BooleanPropertyMetadata::MergeFrom(
          from._internal_boolean());
      break;
    }
    case kJson: {
      _this->_internal_mutable_json()->::Property::JsonPropertyMetadata::MergeFrom(
          from._internal_json());
      break;
    }
    case kLink: {
      _this->_internal_mutable_link()->::Property::LinkPropertyMetadata::MergeFrom(
          from._internal_link());
      break;
    }
    case METATYPE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PropertyMetaById::CopyFrom(const PropertyMetaById& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Session.PropertyMetaById)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyMetaById::IsInitialized() const {
  return true;
}

void PropertyMetaById::InternalSwap(PropertyMetaById* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.metaid_, lhs_arena,
      &other->_impl_.metaid_, rhs_arena
  );
  swap(_impl_.MetaType_, other->_impl_.MetaType_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PropertyMetaById::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_usertouser_2eproto_getter, &descriptor_table_usertouser_2eproto_once,
      file_level_metadata_usertouser_2eproto[6]);
}

// ===================================================================

class PropertyInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<PropertyInfo>()._impl_._has_bits_);
  static const ::Property::AnyPropertyValue& value(const PropertyInfo* msg);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_metaid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Property::AnyPropertyValue&
PropertyInfo::_Internal::value(const PropertyInfo* msg) {
  return *msg->_impl_.value_;
}
void PropertyInfo::clear_value() {
  if (_impl_.value_ != nullptr) _impl_.value_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
PropertyInfo::PropertyInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Session.PropertyInfo)
}
PropertyInfo::PropertyInfo(const PropertyInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PropertyInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.metaid_){}
    , decltype(_impl_.value_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.metaid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metaid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_metaid()) {
    _this->_impl_.metaid_.Set(from._internal_metaid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_value()) {
    _this->_impl_.value_ = new ::Property::AnyPropertyValue(*from._impl_.value_);
  }
  // @@protoc_insertion_point(copy_constructor:Session.PropertyInfo)
}

inline void PropertyInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.metaid_){}
    , decltype(_impl_.value_){nullptr}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.metaid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metaid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PropertyInfo::~PropertyInfo() {
  // @@protoc_insertion_point(destructor:Session.PropertyInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PropertyInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.metaid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.value_;
}

void PropertyInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PropertyInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Session.PropertyInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.metaid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.value_ != nullptr);
      _impl_.value_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PropertyInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Session.PropertyInfo.id"));
        } else
          goto handle_unusual;
        continue;
      // optional .Property.AnyPropertyValue value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string metaId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_metaid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Session.PropertyInfo.metaId"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PropertyInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Session.PropertyInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Session.PropertyInfo.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional .Property.AnyPropertyValue value = 2;
  if (_internal_has_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::value(this),
        _Internal::value(this).GetCachedSize(), target, stream);
  }

  // optional string metaId = 3;
  if (_internal_has_metaid()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_metaid().data(), static_cast<int>(this->_internal_metaid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Session.PropertyInfo.metaId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_metaid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Session.PropertyInfo)
  return target;
}

size_t PropertyInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Session.PropertyInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string metaId = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_metaid());
    }

    // optional .Property.AnyPropertyValue value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PropertyInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PropertyInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PropertyInfo::GetClassData() const { return &_class_data_; }


void PropertyInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PropertyInfo*>(&to_msg);
  auto& from = static_cast<const PropertyInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Session.PropertyInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_metaid(from._internal_metaid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_value()->::Property::AnyPropertyValue::MergeFrom(
          from._internal_value());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PropertyInfo::CopyFrom(const PropertyInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Session.PropertyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyInfo::IsInitialized() const {
  return true;
}

void PropertyInfo::InternalSwap(PropertyInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.metaid_, lhs_arena,
      &other->_impl_.metaid_, rhs_arena
  );
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PropertyInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_usertouser_2eproto_getter, &descriptor_table_usertouser_2eproto_once,
      file_level_metadata_usertouser_2eproto[7]);
}

// ===================================================================

class PropertyInfoNode::_Internal {
 public:
};

PropertyInfoNode::PropertyInfoNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Session.PropertyInfoNode)
}
PropertyInfoNode::PropertyInfoNode(const PropertyInfoNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PropertyInfoNode* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.properties_){from._impl_.properties_}
    , decltype(_impl_.children_){from._impl_.children_}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Session.PropertyInfoNode)
}

inline void PropertyInfoNode::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.properties_){arena}
    , decltype(_impl_.children_){arena}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PropertyInfoNode::~PropertyInfoNode() {
  // @@protoc_insertion_point(destructor:Session.PropertyInfoNode)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PropertyInfoNode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.properties_.~RepeatedPtrField();
  _impl_.children_.~RepeatedPtrField();
  _impl_.id_.Destroy();
}

void PropertyInfoNode::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PropertyInfoNode::Clear() {
// @@protoc_insertion_point(message_clear_start:Session.PropertyInfoNode)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.properties_.Clear();
  _impl_.children_.Clear();
  _impl_.id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PropertyInfoNode::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Session.PropertyInfoNode.id"));
        } else
          goto handle_unusual;
        continue;
      // repeated .Session.PropertyInfo properties = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_properties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .Session.PropertyInfoNode children = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_children(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PropertyInfoNode::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Session.PropertyInfoNode)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Session.PropertyInfoNode.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // repeated .Session.PropertyInfo properties = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_properties_size()); i < n; i++) {
    const auto& repfield = this->_internal_properties(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Session.PropertyInfoNode children = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_children_size()); i < n; i++) {
    const auto& repfield = this->_internal_children(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Session.PropertyInfoNode)
  return target;
}

size_t PropertyInfoNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Session.PropertyInfoNode)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Session.PropertyInfo properties = 2;
  total_size += 1UL * this->_internal_properties_size();
  for (const auto& msg : this->_impl_.properties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Session.PropertyInfoNode children = 3;
  total_size += 1UL * this->_internal_children_size();
  for (const auto& msg : this->_impl_.children_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PropertyInfoNode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PropertyInfoNode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PropertyInfoNode::GetClassData() const { return &_class_data_; }


void PropertyInfoNode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PropertyInfoNode*>(&to_msg);
  auto& from = static_cast<const PropertyInfoNode&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Session.PropertyInfoNode)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.properties_.MergeFrom(from._impl_.properties_);
  _this->_impl_.children_.MergeFrom(from._impl_.children_);
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PropertyInfoNode::CopyFrom(const PropertyInfoNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Session.PropertyInfoNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyInfoNode::IsInitialized() const {
  return true;
}

void PropertyInfoNode::InternalSwap(PropertyInfoNode* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.properties_.InternalSwap(&other->_impl_.properties_);
  _impl_.children_.InternalSwap(&other->_impl_.children_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PropertyInfoNode::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_usertouser_2eproto_getter, &descriptor_table_usertouser_2eproto_once,
      file_level_metadata_usertouser_2eproto[8]);
}

// ===================================================================

class ResponseLivePropertyInfo_V1::_Internal {
 public:
  using HasBits = decltype(std::declval<ResponseLivePropertyInfo_V1>()._impl_._has_bits_);
  static void set_has_requestid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Session::PropertyInfoNode& root(const ResponseLivePropertyInfo_V1* msg);
};

const ::Session::PropertyInfoNode&
ResponseLivePropertyInfo_V1::_Internal::root(const ResponseLivePropertyInfo_V1* msg) {
  return *msg->_impl_.root_;
}
ResponseLivePropertyInfo_V1::ResponseLivePropertyInfo_V1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Session.ResponseLivePropertyInfo.V1)
}
ResponseLivePropertyInfo_V1::ResponseLivePropertyInfo_V1(const ResponseLivePropertyInfo_V1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResponseLivePropertyInfo_V1* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.metas_){from._impl_.metas_}
    , decltype(_impl_.requestid_){}
    , decltype(_impl_.root_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.requestid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.requestid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_requestid()) {
    _this->_impl_.requestid_.Set(from._internal_requestid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_root()) {
    _this->_impl_.root_ = new ::Session::PropertyInfoNode(*from._impl_.root_);
  }
  // @@protoc_insertion_point(copy_constructor:Session.ResponseLivePropertyInfo.V1)
}

inline void ResponseLivePropertyInfo_V1::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.metas_){arena}
    , decltype(_impl_.requestid_){}
    , decltype(_impl_.root_){nullptr}
  };
  _impl_.requestid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.requestid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResponseLivePropertyInfo_V1::~ResponseLivePropertyInfo_V1() {
  // @@protoc_insertion_point(destructor:Session.ResponseLivePropertyInfo.V1)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResponseLivePropertyInfo_V1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.metas_.~RepeatedPtrField();
  _impl_.requestid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.root_;
}

void ResponseLivePropertyInfo_V1::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResponseLivePropertyInfo_V1::Clear() {
// @@protoc_insertion_point(message_clear_start:Session.ResponseLivePropertyInfo.V1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.metas_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.requestid_.ClearNonDefaultToEmpty();
  }
  if (GetArenaForAllocation() == nullptr && _impl_.root_ != nullptr) {
    delete _impl_.root_;
  }
  _impl_.root_ = nullptr;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseLivePropertyInfo_V1::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string requestId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_requestid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Session.ResponseLivePropertyInfo.V1.requestId"));
        } else
          goto handle_unusual;
        continue;
      // .Session.PropertyInfoNode root = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_root(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Session.PropertyMetaById metas = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseLivePropertyInfo_V1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Session.ResponseLivePropertyInfo.V1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string requestId = 5;
  if (_internal_has_requestid()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_requestid().data(), static_cast<int>(this->_internal_requestid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Session.ResponseLivePropertyInfo.V1.requestId");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_requestid(), target);
  }

  // .Session.PropertyInfoNode root = 6;
  if (this->_internal_has_root()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::root(this),
        _Internal::root(this).GetCachedSize(), target, stream);
  }

  // repeated .Session.PropertyMetaById metas = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_metas_size()); i < n; i++) {
    const auto& repfield = this->_internal_metas(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Session.ResponseLivePropertyInfo.V1)
  return target;
}

size_t ResponseLivePropertyInfo_V1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Session.ResponseLivePropertyInfo.V1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Session.PropertyMetaById metas = 7;
  total_size += 1UL * this->_internal_metas_size();
  for (const auto& msg : this->_impl_.metas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string requestId = 5;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_requestid());
  }

  // .Session.PropertyInfoNode root = 6;
  if (this->_internal_has_root()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.root_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseLivePropertyInfo_V1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResponseLivePropertyInfo_V1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseLivePropertyInfo_V1::GetClassData() const { return &_class_data_; }


void ResponseLivePropertyInfo_V1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResponseLivePropertyInfo_V1*>(&to_msg);
  auto& from = static_cast<const ResponseLivePropertyInfo_V1&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Session.ResponseLivePropertyInfo.V1)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.metas_.MergeFrom(from._impl_.metas_);
  if (from._internal_has_requestid()) {
    _this->_internal_set_requestid(from._internal_requestid());
  }
  if (from._internal_has_root()) {
    _this->_internal_mutable_root()->::Session::PropertyInfoNode::MergeFrom(
        from._internal_root());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseLivePropertyInfo_V1::CopyFrom(const ResponseLivePropertyInfo_V1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Session.ResponseLivePropertyInfo.V1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseLivePropertyInfo_V1::IsInitialized() const {
  return true;
}

void ResponseLivePropertyInfo_V1::InternalSwap(ResponseLivePropertyInfo_V1* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.metas_.InternalSwap(&other->_impl_.metas_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.requestid_, lhs_arena,
      &other->_impl_.requestid_, rhs_arena
  );
  swap(_impl_.root_, other->_impl_.root_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseLivePropertyInfo_V1::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_usertouser_2eproto_getter, &descriptor_table_usertouser_2eproto_once,
      file_level_metadata_usertouser_2eproto[9]);
}

// ===================================================================

class ResponseLivePropertyInfo::_Internal {
 public:
  static const ::Session::ResponseLivePropertyInfo_V1& v1(const ResponseLivePropertyInfo* msg);
};

const ::Session::ResponseLivePropertyInfo_V1&
ResponseLivePropertyInfo::_Internal::v1(const ResponseLivePropertyInfo* msg) {
  return *msg->_impl_.V_.v1_;
}
void ResponseLivePropertyInfo::set_allocated_v1(::Session::ResponseLivePropertyInfo_V1* v1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_V();
  if (v1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(v1);
    if (message_arena != submessage_arena) {
      v1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, v1, submessage_arena);
    }
    set_has_v1();
    _impl_.V_.v1_ = v1;
  }
  // @@protoc_insertion_point(field_set_allocated:Session.ResponseLivePropertyInfo.v1)
}
ResponseLivePropertyInfo::ResponseLivePropertyInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Session.ResponseLivePropertyInfo)
}
ResponseLivePropertyInfo::ResponseLivePropertyInfo(const ResponseLivePropertyInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResponseLivePropertyInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.V_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_V();
  switch (from.V_case()) {
    case kV1: {
      _this->_internal_mutable_v1()->::Session::ResponseLivePropertyInfo_V1::MergeFrom(
          from._internal_v1());
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Session.ResponseLivePropertyInfo)
}

inline void ResponseLivePropertyInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.V_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_V();
}

ResponseLivePropertyInfo::~ResponseLivePropertyInfo() {
  // @@protoc_insertion_point(destructor:Session.ResponseLivePropertyInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResponseLivePropertyInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_V()) {
    clear_V();
  }
}

void ResponseLivePropertyInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResponseLivePropertyInfo::clear_V() {
// @@protoc_insertion_point(one_of_clear_start:Session.ResponseLivePropertyInfo)
  switch (V_case()) {
    case kV1: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.V_.v1_;
      }
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = V_NOT_SET;
}


void ResponseLivePropertyInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Session.ResponseLivePropertyInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_V();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseLivePropertyInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Session.ResponseLivePropertyInfo.V1 v1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_v1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseLivePropertyInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Session.ResponseLivePropertyInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Session.ResponseLivePropertyInfo.V1 v1 = 1;
  if (_internal_has_v1()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::v1(this),
        _Internal::v1(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Session.ResponseLivePropertyInfo)
  return target;
}

size_t ResponseLivePropertyInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Session.ResponseLivePropertyInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (V_case()) {
    // .Session.ResponseLivePropertyInfo.V1 v1 = 1;
    case kV1: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.V_.v1_);
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseLivePropertyInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResponseLivePropertyInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseLivePropertyInfo::GetClassData() const { return &_class_data_; }


void ResponseLivePropertyInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResponseLivePropertyInfo*>(&to_msg);
  auto& from = static_cast<const ResponseLivePropertyInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Session.ResponseLivePropertyInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.V_case()) {
    case kV1: {
      _this->_internal_mutable_v1()->::Session::ResponseLivePropertyInfo_V1::MergeFrom(
          from._internal_v1());
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseLivePropertyInfo::CopyFrom(const ResponseLivePropertyInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Session.ResponseLivePropertyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseLivePropertyInfo::IsInitialized() const {
  return true;
}

void ResponseLivePropertyInfo::InternalSwap(ResponseLivePropertyInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.V_, other->_impl_.V_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseLivePropertyInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_usertouser_2eproto_getter, &descriptor_table_usertouser_2eproto_once,
      file_level_metadata_usertouser_2eproto[10]);
}

// ===================================================================

class UserToUserMessage_V1::_Internal {
 public:
  static const ::Session::RequestLivePropertyInfo& requestlivepropertyinfo(const UserToUserMessage_V1* msg);
  static const ::Session::ResponseLivePropertyInfo& responselivepropertyinfo(const UserToUserMessage_V1* msg);
  static const ::Session::RequestLivePropertyCapabilities& requestlivepropertycapabilities(const UserToUserMessage_V1* msg);
  static const ::Session::ResponseLivePropertyCapabilities& responselivepropertycapabilities(const UserToUserMessage_V1* msg);
};

const ::Session::RequestLivePropertyInfo&
UserToUserMessage_V1::_Internal::requestlivepropertyinfo(const UserToUserMessage_V1* msg) {
  return *msg->_impl_.Message_.requestlivepropertyinfo_;
}
const ::Session::ResponseLivePropertyInfo&
UserToUserMessage_V1::_Internal::responselivepropertyinfo(const UserToUserMessage_V1* msg) {
  return *msg->_impl_.Message_.responselivepropertyinfo_;
}
const ::Session::RequestLivePropertyCapabilities&
UserToUserMessage_V1::_Internal::requestlivepropertycapabilities(const UserToUserMessage_V1* msg) {
  return *msg->_impl_.Message_.requestlivepropertycapabilities_;
}
const ::Session::ResponseLivePropertyCapabilities&
UserToUserMessage_V1::_Internal::responselivepropertycapabilities(const UserToUserMessage_V1* msg) {
  return *msg->_impl_.Message_.responselivepropertycapabilities_;
}
void UserToUserMessage_V1::set_allocated_requestlivepropertyinfo(::Session::RequestLivePropertyInfo* requestlivepropertyinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Message();
  if (requestlivepropertyinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(requestlivepropertyinfo);
    if (message_arena != submessage_arena) {
      requestlivepropertyinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestlivepropertyinfo, submessage_arena);
    }
    set_has_requestlivepropertyinfo();
    _impl_.Message_.requestlivepropertyinfo_ = requestlivepropertyinfo;
  }
  // @@protoc_insertion_point(field_set_allocated:Session.UserToUserMessage.V1.requestLivePropertyInfo)
}
void UserToUserMessage_V1::set_allocated_responselivepropertyinfo(::Session::ResponseLivePropertyInfo* responselivepropertyinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Message();
  if (responselivepropertyinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(responselivepropertyinfo);
    if (message_arena != submessage_arena) {
      responselivepropertyinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, responselivepropertyinfo, submessage_arena);
    }
    set_has_responselivepropertyinfo();
    _impl_.Message_.responselivepropertyinfo_ = responselivepropertyinfo;
  }
  // @@protoc_insertion_point(field_set_allocated:Session.UserToUserMessage.V1.responseLivePropertyInfo)
}
void UserToUserMessage_V1::set_allocated_requestlivepropertycapabilities(::Session::RequestLivePropertyCapabilities* requestlivepropertycapabilities) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Message();
  if (requestlivepropertycapabilities) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(requestlivepropertycapabilities);
    if (message_arena != submessage_arena) {
      requestlivepropertycapabilities = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestlivepropertycapabilities, submessage_arena);
    }
    set_has_requestlivepropertycapabilities();
    _impl_.Message_.requestlivepropertycapabilities_ = requestlivepropertycapabilities;
  }
  // @@protoc_insertion_point(field_set_allocated:Session.UserToUserMessage.V1.requestLivePropertyCapabilities)
}
void UserToUserMessage_V1::set_allocated_responselivepropertycapabilities(::Session::ResponseLivePropertyCapabilities* responselivepropertycapabilities) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Message();
  if (responselivepropertycapabilities) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(responselivepropertycapabilities);
    if (message_arena != submessage_arena) {
      responselivepropertycapabilities = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, responselivepropertycapabilities, submessage_arena);
    }
    set_has_responselivepropertycapabilities();
    _impl_.Message_.responselivepropertycapabilities_ = responselivepropertycapabilities;
  }
  // @@protoc_insertion_point(field_set_allocated:Session.UserToUserMessage.V1.ResponseLivePropertyCapabilities)
}
UserToUserMessage_V1::UserToUserMessage_V1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Session.UserToUserMessage.V1)
}
UserToUserMessage_V1::UserToUserMessage_V1(const UserToUserMessage_V1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserToUserMessage_V1* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.Message_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_Message();
  switch (from.Message_case()) {
    case kBlindMessage: {
      _this->_internal_set_blindmessage(from._internal_blindmessage());
      break;
    }
    case kRequestLivePropertyInfo: {
      _this->_internal_mutable_requestlivepropertyinfo()->::Session::RequestLivePropertyInfo::MergeFrom(
          from._internal_requestlivepropertyinfo());
      break;
    }
    case kResponseLivePropertyInfo: {
      _this->_internal_mutable_responselivepropertyinfo()->::Session::ResponseLivePropertyInfo::MergeFrom(
          from._internal_responselivepropertyinfo());
      break;
    }
    case kRequestLivePropertyCapabilities: {
      _this->_internal_mutable_requestlivepropertycapabilities()->::Session::RequestLivePropertyCapabilities::MergeFrom(
          from._internal_requestlivepropertycapabilities());
      break;
    }
    case kResponseLivePropertyCapabilities: {
      _this->_internal_mutable_responselivepropertycapabilities()->::Session::ResponseLivePropertyCapabilities::MergeFrom(
          from._internal_responselivepropertycapabilities());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Session.UserToUserMessage.V1)
}

inline void UserToUserMessage_V1::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.Message_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_Message();
}

UserToUserMessage_V1::~UserToUserMessage_V1() {
  // @@protoc_insertion_point(destructor:Session.UserToUserMessage.V1)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserToUserMessage_V1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_Message()) {
    clear_Message();
  }
}

void UserToUserMessage_V1::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserToUserMessage_V1::clear_Message() {
// @@protoc_insertion_point(one_of_clear_start:Session.UserToUserMessage.V1)
  switch (Message_case()) {
    case kBlindMessage: {
      _impl_.Message_.blindmessage_.Destroy();
      break;
    }
    case kRequestLivePropertyInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.Message_.requestlivepropertyinfo_;
      }
      break;
    }
    case kResponseLivePropertyInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.Message_.responselivepropertyinfo_;
      }
      break;
    }
    case kRequestLivePropertyCapabilities: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.Message_.requestlivepropertycapabilities_;
      }
      break;
    }
    case kResponseLivePropertyCapabilities: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.Message_.responselivepropertycapabilities_;
      }
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = MESSAGE_NOT_SET;
}


void UserToUserMessage_V1::Clear() {
// @@protoc_insertion_point(message_clear_start:Session.UserToUserMessage.V1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_Message();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserToUserMessage_V1::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes blindMessage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_blindmessage();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Session.RequestLivePropertyInfo requestLivePropertyInfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestlivepropertyinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Session.ResponseLivePropertyInfo responseLivePropertyInfo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_responselivepropertyinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Session.RequestLivePropertyCapabilities requestLivePropertyCapabilities = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestlivepropertycapabilities(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Session.ResponseLivePropertyCapabilities ResponseLivePropertyCapabilities = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_responselivepropertycapabilities(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserToUserMessage_V1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Session.UserToUserMessage.V1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes blindMessage = 2;
  if (_internal_has_blindmessage()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_blindmessage(), target);
  }

  // .Session.RequestLivePropertyInfo requestLivePropertyInfo = 3;
  if (_internal_has_requestlivepropertyinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::requestlivepropertyinfo(this),
        _Internal::requestlivepropertyinfo(this).GetCachedSize(), target, stream);
  }

  // .Session.ResponseLivePropertyInfo responseLivePropertyInfo = 4;
  if (_internal_has_responselivepropertyinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::responselivepropertyinfo(this),
        _Internal::responselivepropertyinfo(this).GetCachedSize(), target, stream);
  }

  // .Session.RequestLivePropertyCapabilities requestLivePropertyCapabilities = 5;
  if (_internal_has_requestlivepropertycapabilities()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::requestlivepropertycapabilities(this),
        _Internal::requestlivepropertycapabilities(this).GetCachedSize(), target, stream);
  }

  // .Session.ResponseLivePropertyCapabilities ResponseLivePropertyCapabilities = 6;
  if (_internal_has_responselivepropertycapabilities()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::responselivepropertycapabilities(this),
        _Internal::responselivepropertycapabilities(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Session.UserToUserMessage.V1)
  return target;
}

size_t UserToUserMessage_V1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Session.UserToUserMessage.V1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (Message_case()) {
    // bytes blindMessage = 2;
    case kBlindMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_blindmessage());
      break;
    }
    // .Session.RequestLivePropertyInfo requestLivePropertyInfo = 3;
    case kRequestLivePropertyInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.Message_.requestlivepropertyinfo_);
      break;
    }
    // .Session.ResponseLivePropertyInfo responseLivePropertyInfo = 4;
    case kResponseLivePropertyInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.Message_.responselivepropertyinfo_);
      break;
    }
    // .Session.RequestLivePropertyCapabilities requestLivePropertyCapabilities = 5;
    case kRequestLivePropertyCapabilities: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.Message_.requestlivepropertycapabilities_);
      break;
    }
    // .Session.ResponseLivePropertyCapabilities ResponseLivePropertyCapabilities = 6;
    case kResponseLivePropertyCapabilities: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.Message_.responselivepropertycapabilities_);
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserToUserMessage_V1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserToUserMessage_V1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserToUserMessage_V1::GetClassData() const { return &_class_data_; }


void UserToUserMessage_V1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserToUserMessage_V1*>(&to_msg);
  auto& from = static_cast<const UserToUserMessage_V1&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Session.UserToUserMessage.V1)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.Message_case()) {
    case kBlindMessage: {
      _this->_internal_set_blindmessage(from._internal_blindmessage());
      break;
    }
    case kRequestLivePropertyInfo: {
      _this->_internal_mutable_requestlivepropertyinfo()->::Session::RequestLivePropertyInfo::MergeFrom(
          from._internal_requestlivepropertyinfo());
      break;
    }
    case kResponseLivePropertyInfo: {
      _this->_internal_mutable_responselivepropertyinfo()->::Session::ResponseLivePropertyInfo::MergeFrom(
          from._internal_responselivepropertyinfo());
      break;
    }
    case kRequestLivePropertyCapabilities: {
      _this->_internal_mutable_requestlivepropertycapabilities()->::Session::RequestLivePropertyCapabilities::MergeFrom(
          from._internal_requestlivepropertycapabilities());
      break;
    }
    case kResponseLivePropertyCapabilities: {
      _this->_internal_mutable_responselivepropertycapabilities()->::Session::ResponseLivePropertyCapabilities::MergeFrom(
          from._internal_responselivepropertycapabilities());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserToUserMessage_V1::CopyFrom(const UserToUserMessage_V1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Session.UserToUserMessage.V1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserToUserMessage_V1::IsInitialized() const {
  return true;
}

void UserToUserMessage_V1::InternalSwap(UserToUserMessage_V1* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.Message_, other->_impl_.Message_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserToUserMessage_V1::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_usertouser_2eproto_getter, &descriptor_table_usertouser_2eproto_once,
      file_level_metadata_usertouser_2eproto[11]);
}

// ===================================================================

class UserToUserMessage::_Internal {
 public:
  static const ::Session::UserToUserMessage_V1& v1(const UserToUserMessage* msg);
};

const ::Session::UserToUserMessage_V1&
UserToUserMessage::_Internal::v1(const UserToUserMessage* msg) {
  return *msg->_impl_.V_.v1_;
}
void UserToUserMessage::set_allocated_v1(::Session::UserToUserMessage_V1* v1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_V();
  if (v1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(v1);
    if (message_arena != submessage_arena) {
      v1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, v1, submessage_arena);
    }
    set_has_v1();
    _impl_.V_.v1_ = v1;
  }
  // @@protoc_insertion_point(field_set_allocated:Session.UserToUserMessage.v1)
}
UserToUserMessage::UserToUserMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Session.UserToUserMessage)
}
UserToUserMessage::UserToUserMessage(const UserToUserMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserToUserMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.V_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_V();
  switch (from.V_case()) {
    case kV1: {
      _this->_internal_mutable_v1()->::Session::UserToUserMessage_V1::MergeFrom(
          from._internal_v1());
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Session.UserToUserMessage)
}

inline void UserToUserMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.V_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_V();
}

UserToUserMessage::~UserToUserMessage() {
  // @@protoc_insertion_point(destructor:Session.UserToUserMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserToUserMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_V()) {
    clear_V();
  }
}

void UserToUserMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserToUserMessage::clear_V() {
// @@protoc_insertion_point(one_of_clear_start:Session.UserToUserMessage)
  switch (V_case()) {
    case kV1: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.V_.v1_;
      }
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = V_NOT_SET;
}


void UserToUserMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:Session.UserToUserMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_V();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserToUserMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Session.UserToUserMessage.V1 v1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_v1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserToUserMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Session.UserToUserMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Session.UserToUserMessage.V1 v1 = 1;
  if (_internal_has_v1()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::v1(this),
        _Internal::v1(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Session.UserToUserMessage)
  return target;
}

size_t UserToUserMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Session.UserToUserMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (V_case()) {
    // .Session.UserToUserMessage.V1 v1 = 1;
    case kV1: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.V_.v1_);
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserToUserMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserToUserMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserToUserMessage::GetClassData() const { return &_class_data_; }


void UserToUserMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserToUserMessage*>(&to_msg);
  auto& from = static_cast<const UserToUserMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Session.UserToUserMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.V_case()) {
    case kV1: {
      _this->_internal_mutable_v1()->::Session::UserToUserMessage_V1::MergeFrom(
          from._internal_v1());
      break;
    }
    case V_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserToUserMessage::CopyFrom(const UserToUserMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Session.UserToUserMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserToUserMessage::IsInitialized() const {
  return true;
}

void UserToUserMessage::InternalSwap(UserToUserMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.V_, other->_impl_.V_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserToUserMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_usertouser_2eproto_getter, &descriptor_table_usertouser_2eproto_once,
      file_level_metadata_usertouser_2eproto[12]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Session
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Session::RequestLivePropertyCapabilities_V1*
Arena::CreateMaybeMessage< ::Session::RequestLivePropertyCapabilities_V1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Session::RequestLivePropertyCapabilities_V1 >(arena);
}
template<> PROTOBUF_NOINLINE ::Session::RequestLivePropertyCapabilities*
Arena::CreateMaybeMessage< ::Session::RequestLivePropertyCapabilities >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Session::RequestLivePropertyCapabilities >(arena);
}
template<> PROTOBUF_NOINLINE ::Session::ResponseLivePropertyCapabilities_V1*
Arena::CreateMaybeMessage< ::Session::ResponseLivePropertyCapabilities_V1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Session::ResponseLivePropertyCapabilities_V1 >(arena);
}
template<> PROTOBUF_NOINLINE ::Session::ResponseLivePropertyCapabilities*
Arena::CreateMaybeMessage< ::Session::ResponseLivePropertyCapabilities >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Session::ResponseLivePropertyCapabilities >(arena);
}
template<> PROTOBUF_NOINLINE ::Session::RequestLivePropertyInfo_V1*
Arena::CreateMaybeMessage< ::Session::RequestLivePropertyInfo_V1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Session::RequestLivePropertyInfo_V1 >(arena);
}
template<> PROTOBUF_NOINLINE ::Session::RequestLivePropertyInfo*
Arena::CreateMaybeMessage< ::Session::RequestLivePropertyInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Session::RequestLivePropertyInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Session::PropertyMetaById*
Arena::CreateMaybeMessage< ::Session::PropertyMetaById >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Session::PropertyMetaById >(arena);
}
template<> PROTOBUF_NOINLINE ::Session::PropertyInfo*
Arena::CreateMaybeMessage< ::Session::PropertyInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Session::PropertyInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Session::PropertyInfoNode*
Arena::CreateMaybeMessage< ::Session::PropertyInfoNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Session::PropertyInfoNode >(arena);
}
template<> PROTOBUF_NOINLINE ::Session::ResponseLivePropertyInfo_V1*
Arena::CreateMaybeMessage< ::Session::ResponseLivePropertyInfo_V1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Session::ResponseLivePropertyInfo_V1 >(arena);
}
template<> PROTOBUF_NOINLINE ::Session::ResponseLivePropertyInfo*
Arena::CreateMaybeMessage< ::Session::ResponseLivePropertyInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Session::ResponseLivePropertyInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Session::UserToUserMessage_V1*
Arena::CreateMaybeMessage< ::Session::UserToUserMessage_V1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Session::UserToUserMessage_V1 >(arena);
}
template<> PROTOBUF_NOINLINE ::Session::UserToUserMessage*
Arena::CreateMaybeMessage< ::Session::UserToUserMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Session::UserToUserMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
